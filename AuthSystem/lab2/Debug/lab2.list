
lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065b0  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e2c  08006760  08006760  00007760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800758c  0800758c  00009068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800758c  0800758c  0000858c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007594  08007594  00009068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007594  08007594  00008594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007598  08007598  00008598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800759c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00009068  2**0
                  CONTENTS
 10 .bss          000009cc  20000068  20000068  00009068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000a34  20000a34  00009068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00009068  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fb3f  00000000  00000000  00009098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026c4  00000000  00000000  00018bd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e08  00000000  00000000  0001b2a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000aef  00000000  00000000  0001c0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002437f  00000000  00000000  0001cb97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001212d  00000000  00000000  00040f16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6db1  00000000  00000000  00053043  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00129df4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003f54  00000000  00000000  00129e38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  0012dd8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000068 	.word	0x20000068
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006748 	.word	0x08006748

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	08006748 	.word	0x08006748

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b988 	b.w	80005c8 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	468e      	mov	lr, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	4688      	mov	r8, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d962      	bls.n	80003ac <__udivmoddi4+0xdc>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	b14e      	cbz	r6, 8000300 <__udivmoddi4+0x30>
 80002ec:	f1c6 0320 	rsb	r3, r6, #32
 80002f0:	fa01 f806 	lsl.w	r8, r1, r6
 80002f4:	fa20 f303 	lsr.w	r3, r0, r3
 80002f8:	40b7      	lsls	r7, r6
 80002fa:	ea43 0808 	orr.w	r8, r3, r8
 80002fe:	40b4      	lsls	r4, r6
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	fa1f fc87 	uxth.w	ip, r7
 8000308:	fbb8 f1fe 	udiv	r1, r8, lr
 800030c:	0c23      	lsrs	r3, r4, #16
 800030e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000312:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000316:	fb01 f20c 	mul.w	r2, r1, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x62>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f101 30ff 	add.w	r0, r1, #4294967295
 8000324:	f080 80ea 	bcs.w	80004fc <__udivmoddi4+0x22c>
 8000328:	429a      	cmp	r2, r3
 800032a:	f240 80e7 	bls.w	80004fc <__udivmoddi4+0x22c>
 800032e:	3902      	subs	r1, #2
 8000330:	443b      	add	r3, r7
 8000332:	1a9a      	subs	r2, r3, r2
 8000334:	b2a3      	uxth	r3, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000342:	fb00 fc0c 	mul.w	ip, r0, ip
 8000346:	459c      	cmp	ip, r3
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0x8e>
 800034a:	18fb      	adds	r3, r7, r3
 800034c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000350:	f080 80d6 	bcs.w	8000500 <__udivmoddi4+0x230>
 8000354:	459c      	cmp	ip, r3
 8000356:	f240 80d3 	bls.w	8000500 <__udivmoddi4+0x230>
 800035a:	443b      	add	r3, r7
 800035c:	3802      	subs	r0, #2
 800035e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000362:	eba3 030c 	sub.w	r3, r3, ip
 8000366:	2100      	movs	r1, #0
 8000368:	b11d      	cbz	r5, 8000372 <__udivmoddi4+0xa2>
 800036a:	40f3      	lsrs	r3, r6
 800036c:	2200      	movs	r2, #0
 800036e:	e9c5 3200 	strd	r3, r2, [r5]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d905      	bls.n	8000386 <__udivmoddi4+0xb6>
 800037a:	b10d      	cbz	r5, 8000380 <__udivmoddi4+0xb0>
 800037c:	e9c5 0100 	strd	r0, r1, [r5]
 8000380:	2100      	movs	r1, #0
 8000382:	4608      	mov	r0, r1
 8000384:	e7f5      	b.n	8000372 <__udivmoddi4+0xa2>
 8000386:	fab3 f183 	clz	r1, r3
 800038a:	2900      	cmp	r1, #0
 800038c:	d146      	bne.n	800041c <__udivmoddi4+0x14c>
 800038e:	4573      	cmp	r3, lr
 8000390:	d302      	bcc.n	8000398 <__udivmoddi4+0xc8>
 8000392:	4282      	cmp	r2, r0
 8000394:	f200 8105 	bhi.w	80005a2 <__udivmoddi4+0x2d2>
 8000398:	1a84      	subs	r4, r0, r2
 800039a:	eb6e 0203 	sbc.w	r2, lr, r3
 800039e:	2001      	movs	r0, #1
 80003a0:	4690      	mov	r8, r2
 80003a2:	2d00      	cmp	r5, #0
 80003a4:	d0e5      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003a6:	e9c5 4800 	strd	r4, r8, [r5]
 80003aa:	e7e2      	b.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f000 8090 	beq.w	80004d2 <__udivmoddi4+0x202>
 80003b2:	fab2 f682 	clz	r6, r2
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	f040 80a4 	bne.w	8000504 <__udivmoddi4+0x234>
 80003bc:	1a8a      	subs	r2, r1, r2
 80003be:	0c03      	lsrs	r3, r0, #16
 80003c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c4:	b280      	uxth	r0, r0
 80003c6:	b2bc      	uxth	r4, r7
 80003c8:	2101      	movs	r1, #1
 80003ca:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ce:	fb0e 221c 	mls	r2, lr, ip, r2
 80003d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003d6:	fb04 f20c 	mul.w	r2, r4, ip
 80003da:	429a      	cmp	r2, r3
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x11e>
 80003de:	18fb      	adds	r3, r7, r3
 80003e0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x11c>
 80003e6:	429a      	cmp	r2, r3
 80003e8:	f200 80e0 	bhi.w	80005ac <__udivmoddi4+0x2dc>
 80003ec:	46c4      	mov	ip, r8
 80003ee:	1a9b      	subs	r3, r3, r2
 80003f0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003f4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003f8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003fc:	fb02 f404 	mul.w	r4, r2, r4
 8000400:	429c      	cmp	r4, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x144>
 8000404:	18fb      	adds	r3, r7, r3
 8000406:	f102 30ff 	add.w	r0, r2, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x142>
 800040c:	429c      	cmp	r4, r3
 800040e:	f200 80ca 	bhi.w	80005a6 <__udivmoddi4+0x2d6>
 8000412:	4602      	mov	r2, r0
 8000414:	1b1b      	subs	r3, r3, r4
 8000416:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800041a:	e7a5      	b.n	8000368 <__udivmoddi4+0x98>
 800041c:	f1c1 0620 	rsb	r6, r1, #32
 8000420:	408b      	lsls	r3, r1
 8000422:	fa22 f706 	lsr.w	r7, r2, r6
 8000426:	431f      	orrs	r7, r3
 8000428:	fa0e f401 	lsl.w	r4, lr, r1
 800042c:	fa20 f306 	lsr.w	r3, r0, r6
 8000430:	fa2e fe06 	lsr.w	lr, lr, r6
 8000434:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000438:	4323      	orrs	r3, r4
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	fa1f fc87 	uxth.w	ip, r7
 8000442:	fbbe f0f9 	udiv	r0, lr, r9
 8000446:	0c1c      	lsrs	r4, r3, #16
 8000448:	fb09 ee10 	mls	lr, r9, r0, lr
 800044c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000450:	fb00 fe0c 	mul.w	lr, r0, ip
 8000454:	45a6      	cmp	lr, r4
 8000456:	fa02 f201 	lsl.w	r2, r2, r1
 800045a:	d909      	bls.n	8000470 <__udivmoddi4+0x1a0>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000462:	f080 809c 	bcs.w	800059e <__udivmoddi4+0x2ce>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f240 8099 	bls.w	800059e <__udivmoddi4+0x2ce>
 800046c:	3802      	subs	r0, #2
 800046e:	443c      	add	r4, r7
 8000470:	eba4 040e 	sub.w	r4, r4, lr
 8000474:	fa1f fe83 	uxth.w	lr, r3
 8000478:	fbb4 f3f9 	udiv	r3, r4, r9
 800047c:	fb09 4413 	mls	r4, r9, r3, r4
 8000480:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000484:	fb03 fc0c 	mul.w	ip, r3, ip
 8000488:	45a4      	cmp	ip, r4
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x1ce>
 800048c:	193c      	adds	r4, r7, r4
 800048e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000492:	f080 8082 	bcs.w	800059a <__udivmoddi4+0x2ca>
 8000496:	45a4      	cmp	ip, r4
 8000498:	d97f      	bls.n	800059a <__udivmoddi4+0x2ca>
 800049a:	3b02      	subs	r3, #2
 800049c:	443c      	add	r4, r7
 800049e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a2:	eba4 040c 	sub.w	r4, r4, ip
 80004a6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004aa:	4564      	cmp	r4, ip
 80004ac:	4673      	mov	r3, lr
 80004ae:	46e1      	mov	r9, ip
 80004b0:	d362      	bcc.n	8000578 <__udivmoddi4+0x2a8>
 80004b2:	d05f      	beq.n	8000574 <__udivmoddi4+0x2a4>
 80004b4:	b15d      	cbz	r5, 80004ce <__udivmoddi4+0x1fe>
 80004b6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ba:	eb64 0409 	sbc.w	r4, r4, r9
 80004be:	fa04 f606 	lsl.w	r6, r4, r6
 80004c2:	fa22 f301 	lsr.w	r3, r2, r1
 80004c6:	431e      	orrs	r6, r3
 80004c8:	40cc      	lsrs	r4, r1
 80004ca:	e9c5 6400 	strd	r6, r4, [r5]
 80004ce:	2100      	movs	r1, #0
 80004d0:	e74f      	b.n	8000372 <__udivmoddi4+0xa2>
 80004d2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004d6:	0c01      	lsrs	r1, r0, #16
 80004d8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004dc:	b280      	uxth	r0, r0
 80004de:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004e2:	463b      	mov	r3, r7
 80004e4:	4638      	mov	r0, r7
 80004e6:	463c      	mov	r4, r7
 80004e8:	46b8      	mov	r8, r7
 80004ea:	46be      	mov	lr, r7
 80004ec:	2620      	movs	r6, #32
 80004ee:	fbb1 f1f7 	udiv	r1, r1, r7
 80004f2:	eba2 0208 	sub.w	r2, r2, r8
 80004f6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004fa:	e766      	b.n	80003ca <__udivmoddi4+0xfa>
 80004fc:	4601      	mov	r1, r0
 80004fe:	e718      	b.n	8000332 <__udivmoddi4+0x62>
 8000500:	4610      	mov	r0, r2
 8000502:	e72c      	b.n	800035e <__udivmoddi4+0x8e>
 8000504:	f1c6 0220 	rsb	r2, r6, #32
 8000508:	fa2e f302 	lsr.w	r3, lr, r2
 800050c:	40b7      	lsls	r7, r6
 800050e:	40b1      	lsls	r1, r6
 8000510:	fa20 f202 	lsr.w	r2, r0, r2
 8000514:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000518:	430a      	orrs	r2, r1
 800051a:	fbb3 f8fe 	udiv	r8, r3, lr
 800051e:	b2bc      	uxth	r4, r7
 8000520:	fb0e 3318 	mls	r3, lr, r8, r3
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb08 f904 	mul.w	r9, r8, r4
 800052e:	40b0      	lsls	r0, r6
 8000530:	4589      	cmp	r9, r1
 8000532:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000536:	b280      	uxth	r0, r0
 8000538:	d93e      	bls.n	80005b8 <__udivmoddi4+0x2e8>
 800053a:	1879      	adds	r1, r7, r1
 800053c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000540:	d201      	bcs.n	8000546 <__udivmoddi4+0x276>
 8000542:	4589      	cmp	r9, r1
 8000544:	d81f      	bhi.n	8000586 <__udivmoddi4+0x2b6>
 8000546:	eba1 0109 	sub.w	r1, r1, r9
 800054a:	fbb1 f9fe 	udiv	r9, r1, lr
 800054e:	fb09 f804 	mul.w	r8, r9, r4
 8000552:	fb0e 1119 	mls	r1, lr, r9, r1
 8000556:	b292      	uxth	r2, r2
 8000558:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800055c:	4542      	cmp	r2, r8
 800055e:	d229      	bcs.n	80005b4 <__udivmoddi4+0x2e4>
 8000560:	18ba      	adds	r2, r7, r2
 8000562:	f109 31ff 	add.w	r1, r9, #4294967295
 8000566:	d2c4      	bcs.n	80004f2 <__udivmoddi4+0x222>
 8000568:	4542      	cmp	r2, r8
 800056a:	d2c2      	bcs.n	80004f2 <__udivmoddi4+0x222>
 800056c:	f1a9 0102 	sub.w	r1, r9, #2
 8000570:	443a      	add	r2, r7
 8000572:	e7be      	b.n	80004f2 <__udivmoddi4+0x222>
 8000574:	45f0      	cmp	r8, lr
 8000576:	d29d      	bcs.n	80004b4 <__udivmoddi4+0x1e4>
 8000578:	ebbe 0302 	subs.w	r3, lr, r2
 800057c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000580:	3801      	subs	r0, #1
 8000582:	46e1      	mov	r9, ip
 8000584:	e796      	b.n	80004b4 <__udivmoddi4+0x1e4>
 8000586:	eba7 0909 	sub.w	r9, r7, r9
 800058a:	4449      	add	r1, r9
 800058c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000590:	fbb1 f9fe 	udiv	r9, r1, lr
 8000594:	fb09 f804 	mul.w	r8, r9, r4
 8000598:	e7db      	b.n	8000552 <__udivmoddi4+0x282>
 800059a:	4673      	mov	r3, lr
 800059c:	e77f      	b.n	800049e <__udivmoddi4+0x1ce>
 800059e:	4650      	mov	r0, sl
 80005a0:	e766      	b.n	8000470 <__udivmoddi4+0x1a0>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e6fd      	b.n	80003a2 <__udivmoddi4+0xd2>
 80005a6:	443b      	add	r3, r7
 80005a8:	3a02      	subs	r2, #2
 80005aa:	e733      	b.n	8000414 <__udivmoddi4+0x144>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	443b      	add	r3, r7
 80005b2:	e71c      	b.n	80003ee <__udivmoddi4+0x11e>
 80005b4:	4649      	mov	r1, r9
 80005b6:	e79c      	b.n	80004f2 <__udivmoddi4+0x222>
 80005b8:	eba1 0109 	sub.w	r1, r1, r9
 80005bc:	46c4      	mov	ip, r8
 80005be:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c2:	fb09 f804 	mul.w	r8, r9, r4
 80005c6:	e7c4      	b.n	8000552 <__udivmoddi4+0x282>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <SH1106_UpdateScreen>:
	
	/* Return OK */
	return 1;
}

void SH1106_UpdateScreen(void) {
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 80005d2:	2300      	movs	r3, #0
 80005d4:	71fb      	strb	r3, [r7, #7]
 80005d6:	e01d      	b.n	8000614 <SH1106_UpdateScreen+0x48>
		SH1106_WRITECOMMAND(0xB0 + m);
 80005d8:	79fb      	ldrb	r3, [r7, #7]
 80005da:	3b50      	subs	r3, #80	@ 0x50
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	461a      	mov	r2, r3
 80005e0:	2100      	movs	r1, #0
 80005e2:	2078      	movs	r0, #120	@ 0x78
 80005e4:	f000 f9b8 	bl	8000958 <SH1106_I2C_Write>
		SH1106_WRITECOMMAND(0x00);
 80005e8:	2200      	movs	r2, #0
 80005ea:	2100      	movs	r1, #0
 80005ec:	2078      	movs	r0, #120	@ 0x78
 80005ee:	f000 f9b3 	bl	8000958 <SH1106_I2C_Write>
		SH1106_WRITECOMMAND(0x10);
 80005f2:	2210      	movs	r2, #16
 80005f4:	2100      	movs	r1, #0
 80005f6:	2078      	movs	r0, #120	@ 0x78
 80005f8:	f000 f9ae 	bl	8000958 <SH1106_I2C_Write>
		
		/* Write multi data */
		SH1106_I2C_WriteMulti(SH1106_I2C_ADDR, 0x40, &SH1106_Buffer[SH1106_WIDTH * m], SH1106_WIDTH);
 80005fc:	79fb      	ldrb	r3, [r7, #7]
 80005fe:	01db      	lsls	r3, r3, #7
 8000600:	4a08      	ldr	r2, [pc, #32]	@ (8000624 <SH1106_UpdateScreen+0x58>)
 8000602:	441a      	add	r2, r3
 8000604:	2380      	movs	r3, #128	@ 0x80
 8000606:	2140      	movs	r1, #64	@ 0x40
 8000608:	2078      	movs	r0, #120	@ 0x78
 800060a:	f000 f93f 	bl	800088c <SH1106_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800060e:	79fb      	ldrb	r3, [r7, #7]
 8000610:	3301      	adds	r3, #1
 8000612:	71fb      	strb	r3, [r7, #7]
 8000614:	79fb      	ldrb	r3, [r7, #7]
 8000616:	2b07      	cmp	r3, #7
 8000618:	d9de      	bls.n	80005d8 <SH1106_UpdateScreen+0xc>
	}
}
 800061a:	bf00      	nop
 800061c:	bf00      	nop
 800061e:	3708      	adds	r7, #8
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	20000084 	.word	0x20000084

08000628 <SH1106_Fill>:
	for (i = 0; i < sizeof(SH1106_Buffer); i++) {
		SH1106_Buffer[i] = ~SH1106_Buffer[i];
	}
}

void SH1106_Fill(SH1106_COLOR_t color) {
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	4603      	mov	r3, r0
 8000630:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SH1106_Buffer, (color == SH1106_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SH1106_Buffer));
 8000632:	79fb      	ldrb	r3, [r7, #7]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d101      	bne.n	800063c <SH1106_Fill+0x14>
 8000638:	2300      	movs	r3, #0
 800063a:	e000      	b.n	800063e <SH1106_Fill+0x16>
 800063c:	23ff      	movs	r3, #255	@ 0xff
 800063e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000642:	4619      	mov	r1, r3
 8000644:	4803      	ldr	r0, [pc, #12]	@ (8000654 <SH1106_Fill+0x2c>)
 8000646:	f005 fc01 	bl	8005e4c <memset>
}
 800064a:	bf00      	nop
 800064c:	3708      	adds	r7, #8
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	20000084 	.word	0x20000084

08000658 <SH1106_DrawPixel>:

void SH1106_DrawPixel(uint16_t x, uint16_t y, SH1106_COLOR_t color) {
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	4603      	mov	r3, r0
 8000660:	80fb      	strh	r3, [r7, #6]
 8000662:	460b      	mov	r3, r1
 8000664:	80bb      	strh	r3, [r7, #4]
 8000666:	4613      	mov	r3, r2
 8000668:	70fb      	strb	r3, [r7, #3]
	if (
 800066a:	88fb      	ldrh	r3, [r7, #6]
 800066c:	2b7f      	cmp	r3, #127	@ 0x7f
 800066e:	d848      	bhi.n	8000702 <SH1106_DrawPixel+0xaa>
		x >= SH1106_WIDTH ||
 8000670:	88bb      	ldrh	r3, [r7, #4]
 8000672:	2b3f      	cmp	r3, #63	@ 0x3f
 8000674:	d845      	bhi.n	8000702 <SH1106_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SH1106.Inverted) {
 8000676:	4b26      	ldr	r3, [pc, #152]	@ (8000710 <SH1106_DrawPixel+0xb8>)
 8000678:	791b      	ldrb	r3, [r3, #4]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d006      	beq.n	800068c <SH1106_DrawPixel+0x34>
		color = (SH1106_COLOR_t)!color;
 800067e:	78fb      	ldrb	r3, [r7, #3]
 8000680:	2b00      	cmp	r3, #0
 8000682:	bf0c      	ite	eq
 8000684:	2301      	moveq	r3, #1
 8000686:	2300      	movne	r3, #0
 8000688:	b2db      	uxtb	r3, r3
 800068a:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SH1106_COLOR_WHITE) {
 800068c:	78fb      	ldrb	r3, [r7, #3]
 800068e:	2b01      	cmp	r3, #1
 8000690:	d11a      	bne.n	80006c8 <SH1106_DrawPixel+0x70>
		SH1106_Buffer[x + (y / 8) * SH1106_WIDTH] |= 1 << (y % 8);
 8000692:	88fa      	ldrh	r2, [r7, #6]
 8000694:	88bb      	ldrh	r3, [r7, #4]
 8000696:	08db      	lsrs	r3, r3, #3
 8000698:	b298      	uxth	r0, r3
 800069a:	4603      	mov	r3, r0
 800069c:	01db      	lsls	r3, r3, #7
 800069e:	4413      	add	r3, r2
 80006a0:	4a1c      	ldr	r2, [pc, #112]	@ (8000714 <SH1106_DrawPixel+0xbc>)
 80006a2:	5cd3      	ldrb	r3, [r2, r3]
 80006a4:	b25a      	sxtb	r2, r3
 80006a6:	88bb      	ldrh	r3, [r7, #4]
 80006a8:	f003 0307 	and.w	r3, r3, #7
 80006ac:	2101      	movs	r1, #1
 80006ae:	fa01 f303 	lsl.w	r3, r1, r3
 80006b2:	b25b      	sxtb	r3, r3
 80006b4:	4313      	orrs	r3, r2
 80006b6:	b259      	sxtb	r1, r3
 80006b8:	88fa      	ldrh	r2, [r7, #6]
 80006ba:	4603      	mov	r3, r0
 80006bc:	01db      	lsls	r3, r3, #7
 80006be:	4413      	add	r3, r2
 80006c0:	b2c9      	uxtb	r1, r1
 80006c2:	4a14      	ldr	r2, [pc, #80]	@ (8000714 <SH1106_DrawPixel+0xbc>)
 80006c4:	54d1      	strb	r1, [r2, r3]
 80006c6:	e01d      	b.n	8000704 <SH1106_DrawPixel+0xac>
	} else {
		SH1106_Buffer[x + (y / 8) * SH1106_WIDTH] &= ~(1 << (y % 8));
 80006c8:	88fa      	ldrh	r2, [r7, #6]
 80006ca:	88bb      	ldrh	r3, [r7, #4]
 80006cc:	08db      	lsrs	r3, r3, #3
 80006ce:	b298      	uxth	r0, r3
 80006d0:	4603      	mov	r3, r0
 80006d2:	01db      	lsls	r3, r3, #7
 80006d4:	4413      	add	r3, r2
 80006d6:	4a0f      	ldr	r2, [pc, #60]	@ (8000714 <SH1106_DrawPixel+0xbc>)
 80006d8:	5cd3      	ldrb	r3, [r2, r3]
 80006da:	b25a      	sxtb	r2, r3
 80006dc:	88bb      	ldrh	r3, [r7, #4]
 80006de:	f003 0307 	and.w	r3, r3, #7
 80006e2:	2101      	movs	r1, #1
 80006e4:	fa01 f303 	lsl.w	r3, r1, r3
 80006e8:	b25b      	sxtb	r3, r3
 80006ea:	43db      	mvns	r3, r3
 80006ec:	b25b      	sxtb	r3, r3
 80006ee:	4013      	ands	r3, r2
 80006f0:	b259      	sxtb	r1, r3
 80006f2:	88fa      	ldrh	r2, [r7, #6]
 80006f4:	4603      	mov	r3, r0
 80006f6:	01db      	lsls	r3, r3, #7
 80006f8:	4413      	add	r3, r2
 80006fa:	b2c9      	uxtb	r1, r1
 80006fc:	4a05      	ldr	r2, [pc, #20]	@ (8000714 <SH1106_DrawPixel+0xbc>)
 80006fe:	54d1      	strb	r1, [r2, r3]
 8000700:	e000      	b.n	8000704 <SH1106_DrawPixel+0xac>
		return;
 8000702:	bf00      	nop
	}
}
 8000704:	370c      	adds	r7, #12
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop
 8000710:	20000484 	.word	0x20000484
 8000714:	20000084 	.word	0x20000084

08000718 <SH1106_GotoXY>:

void SH1106_GotoXY(uint16_t x, uint16_t y) {
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	4603      	mov	r3, r0
 8000720:	460a      	mov	r2, r1
 8000722:	80fb      	strh	r3, [r7, #6]
 8000724:	4613      	mov	r3, r2
 8000726:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SH1106.CurrentX = x;
 8000728:	4a05      	ldr	r2, [pc, #20]	@ (8000740 <SH1106_GotoXY+0x28>)
 800072a:	88fb      	ldrh	r3, [r7, #6]
 800072c:	8013      	strh	r3, [r2, #0]
	SH1106.CurrentY = y;
 800072e:	4a04      	ldr	r2, [pc, #16]	@ (8000740 <SH1106_GotoXY+0x28>)
 8000730:	88bb      	ldrh	r3, [r7, #4]
 8000732:	8053      	strh	r3, [r2, #2]
}
 8000734:	bf00      	nop
 8000736:	370c      	adds	r7, #12
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr
 8000740:	20000484 	.word	0x20000484

08000744 <SH1106_Putc>:

char SH1106_Putc(char ch, FontDef_t* Font, SH1106_COLOR_t color) {
 8000744:	b580      	push	{r7, lr}
 8000746:	b086      	sub	sp, #24
 8000748:	af00      	add	r7, sp, #0
 800074a:	4603      	mov	r3, r0
 800074c:	6039      	str	r1, [r7, #0]
 800074e:	71fb      	strb	r3, [r7, #7]
 8000750:	4613      	mov	r3, r2
 8000752:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SH1106_WIDTH <= (SH1106.CurrentX + Font->FontWidth) ||
 8000754:	4b39      	ldr	r3, [pc, #228]	@ (800083c <SH1106_Putc+0xf8>)
 8000756:	881b      	ldrh	r3, [r3, #0]
 8000758:	461a      	mov	r2, r3
 800075a:	683b      	ldr	r3, [r7, #0]
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	4413      	add	r3, r2
	if (
 8000760:	2b7f      	cmp	r3, #127	@ 0x7f
 8000762:	dc07      	bgt.n	8000774 <SH1106_Putc+0x30>
		SH1106_HEIGHT <= (SH1106.CurrentY + Font->FontHeight)
 8000764:	4b35      	ldr	r3, [pc, #212]	@ (800083c <SH1106_Putc+0xf8>)
 8000766:	885b      	ldrh	r3, [r3, #2]
 8000768:	461a      	mov	r2, r3
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	785b      	ldrb	r3, [r3, #1]
 800076e:	4413      	add	r3, r2
		SH1106_WIDTH <= (SH1106.CurrentX + Font->FontWidth) ||
 8000770:	2b3f      	cmp	r3, #63	@ 0x3f
 8000772:	dd01      	ble.n	8000778 <SH1106_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000774:	2300      	movs	r3, #0
 8000776:	e05d      	b.n	8000834 <SH1106_Putc+0xf0>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000778:	2300      	movs	r3, #0
 800077a:	617b      	str	r3, [r7, #20]
 800077c:	e04b      	b.n	8000816 <SH1106_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800077e:	683b      	ldr	r3, [r7, #0]
 8000780:	685a      	ldr	r2, [r3, #4]
 8000782:	79fb      	ldrb	r3, [r7, #7]
 8000784:	3b20      	subs	r3, #32
 8000786:	6839      	ldr	r1, [r7, #0]
 8000788:	7849      	ldrb	r1, [r1, #1]
 800078a:	fb01 f303 	mul.w	r3, r1, r3
 800078e:	4619      	mov	r1, r3
 8000790:	697b      	ldr	r3, [r7, #20]
 8000792:	440b      	add	r3, r1
 8000794:	005b      	lsls	r3, r3, #1
 8000796:	4413      	add	r3, r2
 8000798:	881b      	ldrh	r3, [r3, #0]
 800079a:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 800079c:	2300      	movs	r3, #0
 800079e:	613b      	str	r3, [r7, #16]
 80007a0:	e030      	b.n	8000804 <SH1106_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80007a2:	68fa      	ldr	r2, [r7, #12]
 80007a4:	693b      	ldr	r3, [r7, #16]
 80007a6:	fa02 f303 	lsl.w	r3, r2, r3
 80007aa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d010      	beq.n	80007d4 <SH1106_Putc+0x90>
				SH1106_DrawPixel(SH1106.CurrentX + j, (SH1106.CurrentY + i), (SH1106_COLOR_t) color);
 80007b2:	4b22      	ldr	r3, [pc, #136]	@ (800083c <SH1106_Putc+0xf8>)
 80007b4:	881a      	ldrh	r2, [r3, #0]
 80007b6:	693b      	ldr	r3, [r7, #16]
 80007b8:	b29b      	uxth	r3, r3
 80007ba:	4413      	add	r3, r2
 80007bc:	b298      	uxth	r0, r3
 80007be:	4b1f      	ldr	r3, [pc, #124]	@ (800083c <SH1106_Putc+0xf8>)
 80007c0:	885a      	ldrh	r2, [r3, #2]
 80007c2:	697b      	ldr	r3, [r7, #20]
 80007c4:	b29b      	uxth	r3, r3
 80007c6:	4413      	add	r3, r2
 80007c8:	b29b      	uxth	r3, r3
 80007ca:	79ba      	ldrb	r2, [r7, #6]
 80007cc:	4619      	mov	r1, r3
 80007ce:	f7ff ff43 	bl	8000658 <SH1106_DrawPixel>
 80007d2:	e014      	b.n	80007fe <SH1106_Putc+0xba>
			} else {
				SH1106_DrawPixel(SH1106.CurrentX + j, (SH1106.CurrentY + i), (SH1106_COLOR_t)!color);
 80007d4:	4b19      	ldr	r3, [pc, #100]	@ (800083c <SH1106_Putc+0xf8>)
 80007d6:	881a      	ldrh	r2, [r3, #0]
 80007d8:	693b      	ldr	r3, [r7, #16]
 80007da:	b29b      	uxth	r3, r3
 80007dc:	4413      	add	r3, r2
 80007de:	b298      	uxth	r0, r3
 80007e0:	4b16      	ldr	r3, [pc, #88]	@ (800083c <SH1106_Putc+0xf8>)
 80007e2:	885a      	ldrh	r2, [r3, #2]
 80007e4:	697b      	ldr	r3, [r7, #20]
 80007e6:	b29b      	uxth	r3, r3
 80007e8:	4413      	add	r3, r2
 80007ea:	b299      	uxth	r1, r3
 80007ec:	79bb      	ldrb	r3, [r7, #6]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	bf0c      	ite	eq
 80007f2:	2301      	moveq	r3, #1
 80007f4:	2300      	movne	r3, #0
 80007f6:	b2db      	uxtb	r3, r3
 80007f8:	461a      	mov	r2, r3
 80007fa:	f7ff ff2d 	bl	8000658 <SH1106_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80007fe:	693b      	ldr	r3, [r7, #16]
 8000800:	3301      	adds	r3, #1
 8000802:	613b      	str	r3, [r7, #16]
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	461a      	mov	r2, r3
 800080a:	693b      	ldr	r3, [r7, #16]
 800080c:	4293      	cmp	r3, r2
 800080e:	d3c8      	bcc.n	80007a2 <SH1106_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000810:	697b      	ldr	r3, [r7, #20]
 8000812:	3301      	adds	r3, #1
 8000814:	617b      	str	r3, [r7, #20]
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	785b      	ldrb	r3, [r3, #1]
 800081a:	461a      	mov	r2, r3
 800081c:	697b      	ldr	r3, [r7, #20]
 800081e:	4293      	cmp	r3, r2
 8000820:	d3ad      	bcc.n	800077e <SH1106_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SH1106.CurrentX += Font->FontWidth;
 8000822:	4b06      	ldr	r3, [pc, #24]	@ (800083c <SH1106_Putc+0xf8>)
 8000824:	881b      	ldrh	r3, [r3, #0]
 8000826:	683a      	ldr	r2, [r7, #0]
 8000828:	7812      	ldrb	r2, [r2, #0]
 800082a:	4413      	add	r3, r2
 800082c:	b29a      	uxth	r2, r3
 800082e:	4b03      	ldr	r3, [pc, #12]	@ (800083c <SH1106_Putc+0xf8>)
 8000830:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8000832:	79fb      	ldrb	r3, [r7, #7]
}
 8000834:	4618      	mov	r0, r3
 8000836:	3718      	adds	r7, #24
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	20000484 	.word	0x20000484

08000840 <SH1106_Puts>:

char SH1106_Puts(char* str, FontDef_t* Font, SH1106_COLOR_t color) {
 8000840:	b580      	push	{r7, lr}
 8000842:	b084      	sub	sp, #16
 8000844:	af00      	add	r7, sp, #0
 8000846:	60f8      	str	r0, [r7, #12]
 8000848:	60b9      	str	r1, [r7, #8]
 800084a:	4613      	mov	r3, r2
 800084c:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800084e:	e012      	b.n	8000876 <SH1106_Puts+0x36>
		/* Write character by character */
		if (SH1106_Putc(*str, Font, color) != *str) {
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	79fa      	ldrb	r2, [r7, #7]
 8000856:	68b9      	ldr	r1, [r7, #8]
 8000858:	4618      	mov	r0, r3
 800085a:	f7ff ff73 	bl	8000744 <SH1106_Putc>
 800085e:	4603      	mov	r3, r0
 8000860:	461a      	mov	r2, r3
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	429a      	cmp	r2, r3
 8000868:	d002      	beq.n	8000870 <SH1106_Puts+0x30>
			/* Return error */
			return *str;
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	e008      	b.n	8000882 <SH1106_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	3301      	adds	r3, #1
 8000874:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d1e8      	bne.n	8000850 <SH1106_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	781b      	ldrb	r3, [r3, #0]
}
 8000882:	4618      	mov	r0, r3
 8000884:	3710      	adds	r7, #16
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
	...

0800088c <SH1106_I2C_WriteMulti>:
	SH1106_WRITECOMMAND(0x8D);
	SH1106_WRITECOMMAND(0x10);
	SH1106_WRITECOMMAND(0xAE);
}

void SH1106_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 800088c:	b590      	push	{r4, r7, lr}
 800088e:	b0c7      	sub	sp, #284	@ 0x11c
 8000890:	af02      	add	r7, sp, #8
 8000892:	4604      	mov	r4, r0
 8000894:	4608      	mov	r0, r1
 8000896:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 800089a:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 800089e:	600a      	str	r2, [r1, #0]
 80008a0:	4619      	mov	r1, r3
 80008a2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80008a6:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80008aa:	4622      	mov	r2, r4
 80008ac:	701a      	strb	r2, [r3, #0]
 80008ae:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80008b2:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80008b6:	4602      	mov	r2, r0
 80008b8:	701a      	strb	r2, [r3, #0]
 80008ba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80008be:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80008c2:	460a      	mov	r2, r1
 80008c4:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80008c6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80008ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80008ce:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80008d2:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 80008d6:	7812      	ldrb	r2, [r2, #0]
 80008d8:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80008da:	2300      	movs	r3, #0
 80008dc:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 80008e0:	e015      	b.n	800090e <SH1106_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 80008e2:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80008e6:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80008ea:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 80008ee:	6812      	ldr	r2, [r2, #0]
 80008f0:	441a      	add	r2, r3
 80008f2:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80008f6:	3301      	adds	r3, #1
 80008f8:	7811      	ldrb	r1, [r2, #0]
 80008fa:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80008fe:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000902:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8000904:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000908:	3301      	adds	r3, #1
 800090a:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 800090e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000912:	b29b      	uxth	r3, r3
 8000914:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000918:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 800091c:	8812      	ldrh	r2, [r2, #0]
 800091e:	429a      	cmp	r2, r3
 8000920:	d8df      	bhi.n	80008e2 <SH1106_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(SH1106_I2C, address, dt, count+1, 10);
 8000922:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000926:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	b299      	uxth	r1, r3
 800092e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000932:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000936:	881b      	ldrh	r3, [r3, #0]
 8000938:	3301      	adds	r3, #1
 800093a:	b29b      	uxth	r3, r3
 800093c:	f107 020c 	add.w	r2, r7, #12
 8000940:	200a      	movs	r0, #10
 8000942:	9000      	str	r0, [sp, #0]
 8000944:	4803      	ldr	r0, [pc, #12]	@ (8000954 <SH1106_I2C_WriteMulti+0xc8>)
 8000946:	f001 fe55 	bl	80025f4 <HAL_I2C_Master_Transmit>
}
 800094a:	bf00      	nop
 800094c:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8000950:	46bd      	mov	sp, r7
 8000952:	bd90      	pop	{r4, r7, pc}
 8000954:	2000048c 	.word	0x2000048c

08000958 <SH1106_I2C_Write>:


void SH1106_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000958:	b580      	push	{r7, lr}
 800095a:	b086      	sub	sp, #24
 800095c:	af02      	add	r7, sp, #8
 800095e:	4603      	mov	r3, r0
 8000960:	71fb      	strb	r3, [r7, #7]
 8000962:	460b      	mov	r3, r1
 8000964:	71bb      	strb	r3, [r7, #6]
 8000966:	4613      	mov	r3, r2
 8000968:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800096a:	79bb      	ldrb	r3, [r7, #6]
 800096c:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800096e:	797b      	ldrb	r3, [r7, #5]
 8000970:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(SH1106_I2C, address, dt, 2, 10);
 8000972:	79fb      	ldrb	r3, [r7, #7]
 8000974:	b299      	uxth	r1, r3
 8000976:	f107 020c 	add.w	r2, r7, #12
 800097a:	230a      	movs	r3, #10
 800097c:	9300      	str	r3, [sp, #0]
 800097e:	2302      	movs	r3, #2
 8000980:	4803      	ldr	r0, [pc, #12]	@ (8000990 <SH1106_I2C_Write+0x38>)
 8000982:	f001 fe37 	bl	80025f4 <HAL_I2C_Master_Transmit>
}
 8000986:	bf00      	nop
 8000988:	3710      	adds	r7, #16
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	2000048c 	.word	0x2000048c

08000994 <bin2bcd>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Hàm chuyển đổi binary sang BCD
uint8_t bin2bcd(uint8_t val) {
 8000994:	b480      	push	{r7}
 8000996:	b083      	sub	sp, #12
 8000998:	af00      	add	r7, sp, #0
 800099a:	4603      	mov	r3, r0
 800099c:	71fb      	strb	r3, [r7, #7]
    return ((val / 10) << 4) | (val % 10);
 800099e:	79fb      	ldrb	r3, [r7, #7]
 80009a0:	4a0e      	ldr	r2, [pc, #56]	@ (80009dc <bin2bcd+0x48>)
 80009a2:	fba2 2303 	umull	r2, r3, r2, r3
 80009a6:	08db      	lsrs	r3, r3, #3
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	b25b      	sxtb	r3, r3
 80009ac:	011b      	lsls	r3, r3, #4
 80009ae:	b258      	sxtb	r0, r3
 80009b0:	79fa      	ldrb	r2, [r7, #7]
 80009b2:	4b0a      	ldr	r3, [pc, #40]	@ (80009dc <bin2bcd+0x48>)
 80009b4:	fba3 1302 	umull	r1, r3, r3, r2
 80009b8:	08d9      	lsrs	r1, r3, #3
 80009ba:	460b      	mov	r3, r1
 80009bc:	009b      	lsls	r3, r3, #2
 80009be:	440b      	add	r3, r1
 80009c0:	005b      	lsls	r3, r3, #1
 80009c2:	1ad3      	subs	r3, r2, r3
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	b25b      	sxtb	r3, r3
 80009c8:	4303      	orrs	r3, r0
 80009ca:	b25b      	sxtb	r3, r3
 80009cc:	b2db      	uxtb	r3, r3
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	370c      	adds	r7, #12
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	cccccccd 	.word	0xcccccccd

080009e0 <bcd2bin>:

// Hàm chuyển đổi BCD sang binary
uint8_t bcd2bin(uint8_t val) {
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	4603      	mov	r3, r0
 80009e8:	71fb      	strb	r3, [r7, #7]
    return ((val >> 4) * 10) + (val & 0x0F);
 80009ea:	79fb      	ldrb	r3, [r7, #7]
 80009ec:	091b      	lsrs	r3, r3, #4
 80009ee:	b2db      	uxtb	r3, r3
 80009f0:	461a      	mov	r2, r3
 80009f2:	0092      	lsls	r2, r2, #2
 80009f4:	4413      	add	r3, r2
 80009f6:	005b      	lsls	r3, r3, #1
 80009f8:	b2da      	uxtb	r2, r3
 80009fa:	79fb      	ldrb	r3, [r7, #7]
 80009fc:	f003 030f 	and.w	r3, r3, #15
 8000a00:	b2db      	uxtb	r3, r3
 8000a02:	4413      	add	r3, r2
 8000a04:	b2db      	uxtb	r3, r3
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	370c      	adds	r7, #12
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
	...

08000a14 <SetTime>:
    uint8_t year;
};


// Hàm ghi thời gian vào DS1307
    void SetTime(struct Time *time) {
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b088      	sub	sp, #32
 8000a18:	af04      	add	r7, sp, #16
 8000a1a:	6078      	str	r0, [r7, #4]
        struct Time bcdTime;

        bcdTime.sec = bin2bcd(time->sec) & 0x7F; // Clear CH bit (bit7)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	4618      	mov	r0, r3
 8000a22:	f7ff ffb7 	bl	8000994 <bin2bcd>
 8000a26:	4603      	mov	r3, r0
 8000a28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000a2c:	b2db      	uxtb	r3, r3
 8000a2e:	723b      	strb	r3, [r7, #8]
        bcdTime.min = bin2bcd(time->min);
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	785b      	ldrb	r3, [r3, #1]
 8000a34:	4618      	mov	r0, r3
 8000a36:	f7ff ffad 	bl	8000994 <bin2bcd>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	727b      	strb	r3, [r7, #9]
        bcdTime.hour = bin2bcd(time->hour) & 0x3F; // 24-hour mode (bit6=0)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	789b      	ldrb	r3, [r3, #2]
 8000a42:	4618      	mov	r0, r3
 8000a44:	f7ff ffa6 	bl	8000994 <bin2bcd>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000a4e:	b2db      	uxtb	r3, r3
 8000a50:	72bb      	strb	r3, [r7, #10]
        bcdTime.weekday = bin2bcd(time->weekday);
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	78db      	ldrb	r3, [r3, #3]
 8000a56:	4618      	mov	r0, r3
 8000a58:	f7ff ff9c 	bl	8000994 <bin2bcd>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	72fb      	strb	r3, [r7, #11]
        bcdTime.day = bin2bcd(time->day);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	791b      	ldrb	r3, [r3, #4]
 8000a64:	4618      	mov	r0, r3
 8000a66:	f7ff ff95 	bl	8000994 <bin2bcd>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	733b      	strb	r3, [r7, #12]
        bcdTime.month = bin2bcd(time->month);
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	795b      	ldrb	r3, [r3, #5]
 8000a72:	4618      	mov	r0, r3
 8000a74:	f7ff ff8e 	bl	8000994 <bin2bcd>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	737b      	strb	r3, [r7, #13]
        bcdTime.year = bin2bcd(time->year);
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	799b      	ldrb	r3, [r3, #6]
 8000a80:	4618      	mov	r0, r3
 8000a82:	f7ff ff87 	bl	8000994 <bin2bcd>
 8000a86:	4603      	mov	r3, r0
 8000a88:	73bb      	strb	r3, [r7, #14]

        HAL_I2C_Mem_Write(&hi2c3, 0xD0, 0, 1, (uint8_t *)&bcdTime, 7, 1000);
 8000a8a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a8e:	9302      	str	r3, [sp, #8]
 8000a90:	2307      	movs	r3, #7
 8000a92:	9301      	str	r3, [sp, #4]
 8000a94:	f107 0308 	add.w	r3, r7, #8
 8000a98:	9300      	str	r3, [sp, #0]
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	21d0      	movs	r1, #208	@ 0xd0
 8000aa0:	4803      	ldr	r0, [pc, #12]	@ (8000ab0 <SetTime+0x9c>)
 8000aa2:	f001 fea5 	bl	80027f0 <HAL_I2C_Mem_Write>
    }
 8000aa6:	bf00      	nop
 8000aa8:	3710      	adds	r7, #16
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	2000048c 	.word	0x2000048c

08000ab4 <GetTime>:

    // Hàm đọc thời gian từ DS1307 (đã cập nhật xử lý BCD)
    void GetTime(struct Time *time) {
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b088      	sub	sp, #32
 8000ab8:	af04      	add	r7, sp, #16
 8000aba:	6078      	str	r0, [r7, #4]
        struct Time bcdTime;
        HAL_I2C_Mem_Read(&hi2c3, 0xD1, 0, 1, (uint8_t *)&bcdTime, 7, 1000);
 8000abc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ac0:	9302      	str	r3, [sp, #8]
 8000ac2:	2307      	movs	r3, #7
 8000ac4:	9301      	str	r3, [sp, #4]
 8000ac6:	f107 0308 	add.w	r3, r7, #8
 8000aca:	9300      	str	r3, [sp, #0]
 8000acc:	2301      	movs	r3, #1
 8000ace:	2200      	movs	r2, #0
 8000ad0:	21d1      	movs	r1, #209	@ 0xd1
 8000ad2:	4822      	ldr	r0, [pc, #136]	@ (8000b5c <GetTime+0xa8>)
 8000ad4:	f001 ff86 	bl	80029e4 <HAL_I2C_Mem_Read>

        time->sec = bcd2bin(bcdTime.sec & 0x7F); // Mask out CH bit
 8000ad8:	7a3b      	ldrb	r3, [r7, #8]
 8000ada:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000ade:	b2db      	uxtb	r3, r3
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f7ff ff7d 	bl	80009e0 <bcd2bin>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	461a      	mov	r2, r3
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	701a      	strb	r2, [r3, #0]
        time->min = bcd2bin(bcdTime.min);
 8000aee:	7a7b      	ldrb	r3, [r7, #9]
 8000af0:	4618      	mov	r0, r3
 8000af2:	f7ff ff75 	bl	80009e0 <bcd2bin>
 8000af6:	4603      	mov	r3, r0
 8000af8:	461a      	mov	r2, r3
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	705a      	strb	r2, [r3, #1]
        time->hour = bcd2bin(bcdTime.hour & 0x3F); // Mask out 12/24 mode bit
 8000afe:	7abb      	ldrb	r3, [r7, #10]
 8000b00:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	4618      	mov	r0, r3
 8000b08:	f7ff ff6a 	bl	80009e0 <bcd2bin>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	461a      	mov	r2, r3
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	709a      	strb	r2, [r3, #2]
        time->weekday = bcd2bin(bcdTime.weekday);
 8000b14:	7afb      	ldrb	r3, [r7, #11]
 8000b16:	4618      	mov	r0, r3
 8000b18:	f7ff ff62 	bl	80009e0 <bcd2bin>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	461a      	mov	r2, r3
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	70da      	strb	r2, [r3, #3]
        time->day = bcd2bin(bcdTime.day);
 8000b24:	7b3b      	ldrb	r3, [r7, #12]
 8000b26:	4618      	mov	r0, r3
 8000b28:	f7ff ff5a 	bl	80009e0 <bcd2bin>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	461a      	mov	r2, r3
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	711a      	strb	r2, [r3, #4]
        time->month = bcd2bin(bcdTime.month);
 8000b34:	7b7b      	ldrb	r3, [r7, #13]
 8000b36:	4618      	mov	r0, r3
 8000b38:	f7ff ff52 	bl	80009e0 <bcd2bin>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	461a      	mov	r2, r3
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	715a      	strb	r2, [r3, #5]
        time->year = bcd2bin(bcdTime.year);
 8000b44:	7bbb      	ldrb	r3, [r7, #14]
 8000b46:	4618      	mov	r0, r3
 8000b48:	f7ff ff4a 	bl	80009e0 <bcd2bin>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	461a      	mov	r2, r3
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	719a      	strb	r2, [r3, #6]
    }
 8000b54:	bf00      	nop
 8000b56:	3710      	adds	r7, #16
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	2000048c 	.word	0x2000048c

08000b60 <isAuthorized>:

uint8_t cardID[5];
char buf[100];

// Hàm kiểm tra mã thẻ hợp lệ
int isAuthorized(uint8_t *id) {
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < authCount; i++) {
 8000b68:	2300      	movs	r3, #0
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	e012      	b.n	8000b94 <isAuthorized+0x34>
        if (memcmp(id, authKeys[i], 5) == 0)
 8000b6e:	68fa      	ldr	r2, [r7, #12]
 8000b70:	4613      	mov	r3, r2
 8000b72:	009b      	lsls	r3, r3, #2
 8000b74:	4413      	add	r3, r2
 8000b76:	4a0c      	ldr	r2, [pc, #48]	@ (8000ba8 <isAuthorized+0x48>)
 8000b78:	4413      	add	r3, r2
 8000b7a:	2205      	movs	r2, #5
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	6878      	ldr	r0, [r7, #4]
 8000b80:	f005 f954 	bl	8005e2c <memcmp>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d101      	bne.n	8000b8e <isAuthorized+0x2e>
            return 1;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	e008      	b.n	8000ba0 <isAuthorized+0x40>
    for (int i = 0; i < authCount; i++) {
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	3301      	adds	r3, #1
 8000b92:	60fb      	str	r3, [r7, #12]
 8000b94:	4b05      	ldr	r3, [pc, #20]	@ (8000bac <isAuthorized+0x4c>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	68fa      	ldr	r2, [r7, #12]
 8000b9a:	429a      	cmp	r2, r3
 8000b9c:	dbe7      	blt.n	8000b6e <isAuthorized+0xe>
    }
    return 0;
 8000b9e:	2300      	movs	r3, #0
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	3710      	adds	r7, #16
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	20000584 	.word	0x20000584
 8000bac:	20000008 	.word	0x20000008

08000bb0 <save_log>:
    uint8_t time[3];      // [giây, phút, giờ]
    uint8_t cardID[5];    // mã thẻ RFID
} DoorLog;
DoorLog logs[MAX_LOGS];
uint8_t logCount = 0;
void save_log(uint8_t *cardID, uint8_t *time) {
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
 8000bb8:	6039      	str	r1, [r7, #0]
    if (logCount < MAX_LOGS) {
 8000bba:	4b11      	ldr	r3, [pc, #68]	@ (8000c00 <save_log+0x50>)
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	2b63      	cmp	r3, #99	@ 0x63
 8000bc0:	d81a      	bhi.n	8000bf8 <save_log+0x48>
        memcpy(logs[logCount].cardID, cardID, 5);
 8000bc2:	4b0f      	ldr	r3, [pc, #60]	@ (8000c00 <save_log+0x50>)
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	00db      	lsls	r3, r3, #3
 8000bc8:	4a0e      	ldr	r2, [pc, #56]	@ (8000c04 <save_log+0x54>)
 8000bca:	4413      	add	r3, r2
 8000bcc:	3303      	adds	r3, #3
 8000bce:	2205      	movs	r2, #5
 8000bd0:	6879      	ldr	r1, [r7, #4]
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f005 f96e 	bl	8005eb4 <memcpy>
        memcpy(logs[logCount].time, time, 3); // time[0]=sec, time[1]=min, time[2]=hour
 8000bd8:	4b09      	ldr	r3, [pc, #36]	@ (8000c00 <save_log+0x50>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	00db      	lsls	r3, r3, #3
 8000bde:	4a09      	ldr	r2, [pc, #36]	@ (8000c04 <save_log+0x54>)
 8000be0:	4413      	add	r3, r2
 8000be2:	2203      	movs	r2, #3
 8000be4:	6839      	ldr	r1, [r7, #0]
 8000be6:	4618      	mov	r0, r3
 8000be8:	f005 f964 	bl	8005eb4 <memcpy>
        logCount++;
 8000bec:	4b04      	ldr	r3, [pc, #16]	@ (8000c00 <save_log+0x50>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	b2da      	uxtb	r2, r3
 8000bf4:	4b02      	ldr	r3, [pc, #8]	@ (8000c00 <save_log+0x50>)
 8000bf6:	701a      	strb	r2, [r3, #0]
    }
}
 8000bf8:	bf00      	nop
 8000bfa:	3708      	adds	r7, #8
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	200008e0 	.word	0x200008e0
 8000c04:	200005c0 	.word	0x200005c0

08000c08 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a08      	ldr	r2, [pc, #32]	@ (8000c38 <HAL_UART_RxCpltCallback+0x30>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d10a      	bne.n	8000c30 <HAL_UART_RxCpltCallback+0x28>
        if (uart_rx == 'L') {
 8000c1a:	4b08      	ldr	r3, [pc, #32]	@ (8000c3c <HAL_UART_RxCpltCallback+0x34>)
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	2b4c      	cmp	r3, #76	@ 0x4c
 8000c20:	d101      	bne.n	8000c26 <HAL_UART_RxCpltCallback+0x1e>
            show_logs();  // Gửi toàn bộ log khi nhận ký tự 'L'
 8000c22:	f000 f80f 	bl	8000c44 <show_logs>
        }

        // Nhận lại tiếp ký tự tiếp theo
        HAL_UART_Receive_IT(&huart1, &uart_rx, 1);
 8000c26:	2201      	movs	r2, #1
 8000c28:	4904      	ldr	r1, [pc, #16]	@ (8000c3c <HAL_UART_RxCpltCallback+0x34>)
 8000c2a:	4805      	ldr	r0, [pc, #20]	@ (8000c40 <HAL_UART_RxCpltCallback+0x38>)
 8000c2c:	f004 f961 	bl	8004ef2 <HAL_UART_Receive_IT>
    }
}
 8000c30:	bf00      	nop
 8000c32:	3708      	adds	r7, #8
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	40011000 	.word	0x40011000
 8000c3c:	20000580 	.word	0x20000580
 8000c40:	20000538 	.word	0x20000538

08000c44 <show_logs>:

void show_logs() {
 8000c44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c46:	b0a7      	sub	sp, #156	@ 0x9c
 8000c48:	af08      	add	r7, sp, #32
    char buffer[100];
    for (int i = 0; i < logCount; i++) {
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	677b      	str	r3, [r7, #116]	@ 0x74
 8000c4e:	e050      	b.n	8000cf2 <show_logs+0xae>
        sprintf(buffer, "Log %02d: %02X%02X%02X%02X%02X at %02d:%02d:%02d\r\n", i + 1,
 8000c50:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000c52:	1c5a      	adds	r2, r3, #1
                logs[i].cardID[0], logs[i].cardID[1], logs[i].cardID[2],
 8000c54:	492c      	ldr	r1, [pc, #176]	@ (8000d08 <show_logs+0xc4>)
 8000c56:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000c58:	00db      	lsls	r3, r3, #3
 8000c5a:	440b      	add	r3, r1
 8000c5c:	78db      	ldrb	r3, [r3, #3]
        sprintf(buffer, "Log %02d: %02X%02X%02X%02X%02X at %02d:%02d:%02d\r\n", i + 1,
 8000c5e:	469c      	mov	ip, r3
                logs[i].cardID[0], logs[i].cardID[1], logs[i].cardID[2],
 8000c60:	4929      	ldr	r1, [pc, #164]	@ (8000d08 <show_logs+0xc4>)
 8000c62:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000c64:	00db      	lsls	r3, r3, #3
 8000c66:	440b      	add	r3, r1
 8000c68:	791b      	ldrb	r3, [r3, #4]
        sprintf(buffer, "Log %02d: %02X%02X%02X%02X%02X at %02d:%02d:%02d\r\n", i + 1,
 8000c6a:	461c      	mov	r4, r3
                logs[i].cardID[0], logs[i].cardID[1], logs[i].cardID[2],
 8000c6c:	4926      	ldr	r1, [pc, #152]	@ (8000d08 <show_logs+0xc4>)
 8000c6e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000c70:	00db      	lsls	r3, r3, #3
 8000c72:	440b      	add	r3, r1
 8000c74:	795b      	ldrb	r3, [r3, #5]
        sprintf(buffer, "Log %02d: %02X%02X%02X%02X%02X at %02d:%02d:%02d\r\n", i + 1,
 8000c76:	461d      	mov	r5, r3
                logs[i].cardID[3], logs[i].cardID[4],
 8000c78:	4923      	ldr	r1, [pc, #140]	@ (8000d08 <show_logs+0xc4>)
 8000c7a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000c7c:	00db      	lsls	r3, r3, #3
 8000c7e:	440b      	add	r3, r1
 8000c80:	799b      	ldrb	r3, [r3, #6]
        sprintf(buffer, "Log %02d: %02X%02X%02X%02X%02X at %02d:%02d:%02d\r\n", i + 1,
 8000c82:	461e      	mov	r6, r3
                logs[i].cardID[3], logs[i].cardID[4],
 8000c84:	4920      	ldr	r1, [pc, #128]	@ (8000d08 <show_logs+0xc4>)
 8000c86:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000c88:	00db      	lsls	r3, r3, #3
 8000c8a:	440b      	add	r3, r1
 8000c8c:	79db      	ldrb	r3, [r3, #7]
        sprintf(buffer, "Log %02d: %02X%02X%02X%02X%02X at %02d:%02d:%02d\r\n", i + 1,
 8000c8e:	60fb      	str	r3, [r7, #12]
                logs[i].time[2], logs[i].time[1], logs[i].time[0]);
 8000c90:	491d      	ldr	r1, [pc, #116]	@ (8000d08 <show_logs+0xc4>)
 8000c92:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000c94:	00db      	lsls	r3, r3, #3
 8000c96:	440b      	add	r3, r1
 8000c98:	789b      	ldrb	r3, [r3, #2]
        sprintf(buffer, "Log %02d: %02X%02X%02X%02X%02X at %02d:%02d:%02d\r\n", i + 1,
 8000c9a:	60bb      	str	r3, [r7, #8]
                logs[i].time[2], logs[i].time[1], logs[i].time[0]);
 8000c9c:	491a      	ldr	r1, [pc, #104]	@ (8000d08 <show_logs+0xc4>)
 8000c9e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000ca0:	00db      	lsls	r3, r3, #3
 8000ca2:	440b      	add	r3, r1
 8000ca4:	785b      	ldrb	r3, [r3, #1]
        sprintf(buffer, "Log %02d: %02X%02X%02X%02X%02X at %02d:%02d:%02d\r\n", i + 1,
 8000ca6:	607b      	str	r3, [r7, #4]
                logs[i].time[2], logs[i].time[1], logs[i].time[0]);
 8000ca8:	4917      	ldr	r1, [pc, #92]	@ (8000d08 <show_logs+0xc4>)
 8000caa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000cac:	f811 3033 	ldrb.w	r3, [r1, r3, lsl #3]
        sprintf(buffer, "Log %02d: %02X%02X%02X%02X%02X at %02d:%02d:%02d\r\n", i + 1,
 8000cb0:	f107 0010 	add.w	r0, r7, #16
 8000cb4:	9306      	str	r3, [sp, #24]
 8000cb6:	6879      	ldr	r1, [r7, #4]
 8000cb8:	9105      	str	r1, [sp, #20]
 8000cba:	68b9      	ldr	r1, [r7, #8]
 8000cbc:	9104      	str	r1, [sp, #16]
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	9303      	str	r3, [sp, #12]
 8000cc2:	9602      	str	r6, [sp, #8]
 8000cc4:	9501      	str	r5, [sp, #4]
 8000cc6:	9400      	str	r4, [sp, #0]
 8000cc8:	4663      	mov	r3, ip
 8000cca:	4910      	ldr	r1, [pc, #64]	@ (8000d0c <show_logs+0xc8>)
 8000ccc:	f005 f88c 	bl	8005de8 <siprintf>
        HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000cd0:	f107 0310 	add.w	r3, r7, #16
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f7ff fa8b 	bl	80001f0 <strlen>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	b29a      	uxth	r2, r3
 8000cde:	f107 0110 	add.w	r1, r7, #16
 8000ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ce6:	480a      	ldr	r0, [pc, #40]	@ (8000d10 <show_logs+0xcc>)
 8000ce8:	f004 f878 	bl	8004ddc <HAL_UART_Transmit>
    for (int i = 0; i < logCount; i++) {
 8000cec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000cee:	3301      	adds	r3, #1
 8000cf0:	677b      	str	r3, [r7, #116]	@ 0x74
 8000cf2:	4b08      	ldr	r3, [pc, #32]	@ (8000d14 <show_logs+0xd0>)
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	dba8      	blt.n	8000c50 <show_logs+0xc>
    }
}
 8000cfe:	bf00      	nop
 8000d00:	bf00      	nop
 8000d02:	377c      	adds	r7, #124	@ 0x7c
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d08:	200005c0 	.word	0x200005c0
 8000d0c:	08006760 	.word	0x08006760
 8000d10:	20000538 	.word	0x20000538
 8000d14:	200008e0 	.word	0x200008e0

08000d18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d1a:	b097      	sub	sp, #92	@ 0x5c
 8000d1c:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d1e:	f000 ff25 	bl	8001b6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d22:	f000 f8e3 	bl	8000eec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d26:	f000 f9f1 	bl	800110c <MX_GPIO_Init>
  MX_I2C3_Init();
 8000d2a:	f000 f94f 	bl	8000fcc <MX_I2C3_Init>
  MX_SPI4_Init();
 8000d2e:	f000 f98d 	bl	800104c <MX_SPI4_Init>
  MX_USART1_UART_Init();
 8000d32:	f000 f9c1 	bl	80010b8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  TM_MFRC522_Init();
 8000d36:	f000 fc2b 	bl	8001590 <TM_MFRC522_Init>
//  uint8_t X = 0, Y = 0;
//  SH1106_Init ();
//
        char buff[30];
//
      uint8_t defaultCard[5] = {0xA3, 0x1E, 0x31, 0xB9, 0x35};
 8000d3a:	4a60      	ldr	r2, [pc, #384]	@ (8000ebc <main+0x1a4>)
 8000d3c:	f107 0318 	add.w	r3, r7, #24
 8000d40:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d44:	6018      	str	r0, [r3, #0]
 8000d46:	3304      	adds	r3, #4
 8000d48:	7019      	strb	r1, [r3, #0]
      memcpy(authKeys[0], defaultCard, 5);
 8000d4a:	4b5d      	ldr	r3, [pc, #372]	@ (8000ec0 <main+0x1a8>)
 8000d4c:	f107 0218 	add.w	r2, r7, #24
 8000d50:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d54:	6018      	str	r0, [r3, #0]
 8000d56:	3304      	adds	r3, #4
 8000d58:	7019      	strb	r1, [r3, #0]
      authCount = 1;
 8000d5a:	4b5a      	ldr	r3, [pc, #360]	@ (8000ec4 <main+0x1ac>)
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	601a      	str	r2, [r3, #0]
      struct Time currentTime = {
 8000d60:	4a59      	ldr	r2, [pc, #356]	@ (8000ec8 <main+0x1b0>)
 8000d62:	f107 0310 	add.w	r3, r7, #16
 8000d66:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d6a:	6018      	str	r0, [r3, #0]
 8000d6c:	3304      	adds	r3, #4
 8000d6e:	8019      	strh	r1, [r3, #0]
 8000d70:	3302      	adds	r3, #2
 8000d72:	0c0a      	lsrs	r2, r1, #16
 8000d74:	701a      	strb	r2, [r3, #0]
           .weekday = 5,
           .day = 17,
           .month = 4,
           .year = 25
       };
       SetTime(&currentTime);  // Gọi một lần để set thời gian ban đầu
 8000d76:	f107 0310 	add.w	r3, r7, #16
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f7ff fe4a 	bl	8000a14 <SetTime>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_UART_Receive_IT(&huart1, &uart_rx, 1); // bắt đầu nhận UART
 8000d80:	2201      	movs	r2, #1
 8000d82:	4952      	ldr	r1, [pc, #328]	@ (8000ecc <main+0x1b4>)
 8000d84:	4852      	ldr	r0, [pc, #328]	@ (8000ed0 <main+0x1b8>)
 8000d86:	f004 f8b4 	bl	8004ef2 <HAL_UART_Receive_IT>
	  GetTime(&currentTime);
 8000d8a:	f107 0310 	add.w	r3, r7, #16
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f7ff fe90 	bl	8000ab4 <GetTime>
      SH1106_Fill(0);
 8000d94:	2000      	movs	r0, #0
 8000d96:	f7ff fc47 	bl	8000628 <SH1106_Fill>

	          if (TM_MFRC522_Check(cardID) == MI_OK) {
 8000d9a:	484e      	ldr	r0, [pc, #312]	@ (8000ed4 <main+0x1bc>)
 8000d9c:	f000 fc1e 	bl	80015dc <TM_MFRC522_Check>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d17a      	bne.n	8000e9c <main+0x184>
	              HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_SET);
 8000da6:	2201      	movs	r2, #1
 8000da8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000dac:	484a      	ldr	r0, [pc, #296]	@ (8000ed8 <main+0x1c0>)
 8000dae:	f001 fac3 	bl	8002338 <HAL_GPIO_WritePin>

	              if (isAuthorized(cardID)) {
 8000db2:	4848      	ldr	r0, [pc, #288]	@ (8000ed4 <main+0x1bc>)
 8000db4:	f7ff fed4 	bl	8000b60 <isAuthorized>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d05e      	beq.n	8000e7c <main+0x164>
	                  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_SET);
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000dc4:	4844      	ldr	r0, [pc, #272]	@ (8000ed8 <main+0x1c0>)
 8000dc6:	f001 fab7 	bl	8002338 <HAL_GPIO_WritePin>
	                  SH1106_GotoXY(10, 10);
 8000dca:	210a      	movs	r1, #10
 8000dcc:	200a      	movs	r0, #10
 8000dce:	f7ff fca3 	bl	8000718 <SH1106_GotoXY>
	                  SH1106_Puts("Welcome", &Font_11x18, 1);
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	4941      	ldr	r1, [pc, #260]	@ (8000edc <main+0x1c4>)
 8000dd6:	4842      	ldr	r0, [pc, #264]	@ (8000ee0 <main+0x1c8>)
 8000dd8:	f7ff fd32 	bl	8000840 <SH1106_Puts>
	                  SH1106_UpdateScreen();
 8000ddc:	f7ff fbf6 	bl	80005cc <SH1106_UpdateScreen>
	                  struct Time readTime;
	                  GetTime(&readTime);
 8000de0:	f107 0308 	add.w	r3, r7, #8
 8000de4:	4618      	mov	r0, r3
 8000de6:	f7ff fe65 	bl	8000ab4 <GetTime>
	                  sprintf(buff, "%02d:%02d:%02d - %02d - %02d/%02d/%02d\r\n",
	                                  readTime.hour,
 8000dea:	7abb      	ldrb	r3, [r7, #10]
	                  sprintf(buff, "%02d:%02d:%02d - %02d - %02d/%02d/%02d\r\n",
 8000dec:	461e      	mov	r6, r3
	                                  readTime.min,
 8000dee:	7a7b      	ldrb	r3, [r7, #9]
	                  sprintf(buff, "%02d:%02d:%02d - %02d - %02d/%02d/%02d\r\n",
 8000df0:	469c      	mov	ip, r3
	                                  readTime.sec,
 8000df2:	7a3b      	ldrb	r3, [r7, #8]
	                                  readTime.weekday,
 8000df4:	7afa      	ldrb	r2, [r7, #11]
	                                  readTime.day,
 8000df6:	7b39      	ldrb	r1, [r7, #12]
	                                  readTime.month,
 8000df8:	7b78      	ldrb	r0, [r7, #13]
	                  sprintf(buff, "%02d:%02d:%02d - %02d - %02d/%02d/%02d\r\n",
 8000dfa:	4604      	mov	r4, r0
	                                  readTime.year);
 8000dfc:	7bb8      	ldrb	r0, [r7, #14]
	                  sprintf(buff, "%02d:%02d:%02d - %02d - %02d/%02d/%02d\r\n",
 8000dfe:	4605      	mov	r5, r0
 8000e00:	f107 0020 	add.w	r0, r7, #32
 8000e04:	9504      	str	r5, [sp, #16]
 8000e06:	9403      	str	r4, [sp, #12]
 8000e08:	9102      	str	r1, [sp, #8]
 8000e0a:	9201      	str	r2, [sp, #4]
 8000e0c:	9300      	str	r3, [sp, #0]
 8000e0e:	4663      	mov	r3, ip
 8000e10:	4632      	mov	r2, r6
 8000e12:	4934      	ldr	r1, [pc, #208]	@ (8000ee4 <main+0x1cc>)
 8000e14:	f004 ffe8 	bl	8005de8 <siprintf>
	                          HAL_Delay(500);
 8000e18:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000e1c:	f000 ff18 	bl	8001c50 <HAL_Delay>
	                                    HAL_UART_Transmit(&huart1, (uint8_t*)buff, strlen(buff), 1000);
 8000e20:	f107 0320 	add.w	r3, r7, #32
 8000e24:	4618      	mov	r0, r3
 8000e26:	f7ff f9e3 	bl	80001f0 <strlen>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	b29a      	uxth	r2, r3
 8000e2e:	f107 0120 	add.w	r1, r7, #32
 8000e32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e36:	4826      	ldr	r0, [pc, #152]	@ (8000ed0 <main+0x1b8>)
 8000e38:	f003 ffd0 	bl	8004ddc <HAL_UART_Transmit>
	                                    HAL_Delay(500);
 8000e3c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000e40:	f000 ff06 	bl	8001c50 <HAL_Delay>
	                                    char time[3];
	              	                  sprintf(time, "%02d:%02d:%02d - %02d - %02d/%02d/%02d\r\n",
	              	                                  readTime.hour,
 8000e44:	7abb      	ldrb	r3, [r7, #10]
	              	                  sprintf(time, "%02d:%02d:%02d - %02d - %02d/%02d/%02d\r\n",
 8000e46:	461e      	mov	r6, r3
	              	                                  readTime.min,
 8000e48:	7a7b      	ldrb	r3, [r7, #9]
	              	                  sprintf(time, "%02d:%02d:%02d - %02d - %02d/%02d/%02d\r\n",
 8000e4a:	469c      	mov	ip, r3
	              	                                  readTime.sec,
 8000e4c:	7a3b      	ldrb	r3, [r7, #8]
	              	                                  readTime.weekday,
 8000e4e:	7afa      	ldrb	r2, [r7, #11]
	              	                                  readTime.day,
 8000e50:	7b39      	ldrb	r1, [r7, #12]
	              	                                  readTime.month,
 8000e52:	7b78      	ldrb	r0, [r7, #13]
	              	                  sprintf(time, "%02d:%02d:%02d - %02d - %02d/%02d/%02d\r\n",
 8000e54:	4604      	mov	r4, r0
	              	                                  readTime.year);
 8000e56:	7bb8      	ldrb	r0, [r7, #14]
	              	                  sprintf(time, "%02d:%02d:%02d - %02d - %02d/%02d/%02d\r\n",
 8000e58:	4605      	mov	r5, r0
 8000e5a:	1d38      	adds	r0, r7, #4
 8000e5c:	9504      	str	r5, [sp, #16]
 8000e5e:	9403      	str	r4, [sp, #12]
 8000e60:	9102      	str	r1, [sp, #8]
 8000e62:	9201      	str	r2, [sp, #4]
 8000e64:	9300      	str	r3, [sp, #0]
 8000e66:	4663      	mov	r3, ip
 8000e68:	4632      	mov	r2, r6
 8000e6a:	491e      	ldr	r1, [pc, #120]	@ (8000ee4 <main+0x1cc>)
 8000e6c:	f004 ffbc 	bl	8005de8 <siprintf>
	                                    save_log(cardID, time);
 8000e70:	1d3b      	adds	r3, r7, #4
 8000e72:	4619      	mov	r1, r3
 8000e74:	4817      	ldr	r0, [pc, #92]	@ (8000ed4 <main+0x1bc>)
 8000e76:	f7ff fe9b 	bl	8000bb0 <save_log>
 8000e7a:	e00a      	b.n	8000e92 <main+0x17a>

	              } else {
	                  SH1106_GotoXY(10, 10);
 8000e7c:	210a      	movs	r1, #10
 8000e7e:	200a      	movs	r0, #10
 8000e80:	f7ff fc4a 	bl	8000718 <SH1106_GotoXY>
	                  SH1106_Puts("Rejected", &Font_11x18, 1);
 8000e84:	2201      	movs	r2, #1
 8000e86:	4915      	ldr	r1, [pc, #84]	@ (8000edc <main+0x1c4>)
 8000e88:	4817      	ldr	r0, [pc, #92]	@ (8000ee8 <main+0x1d0>)
 8000e8a:	f7ff fcd9 	bl	8000840 <SH1106_Puts>
	                  SH1106_UpdateScreen();
 8000e8e:	f7ff fb9d 	bl	80005cc <SH1106_UpdateScreen>
	              }
	              HAL_Delay(1000);
 8000e92:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e96:	f000 fedb 	bl	8001c50 <HAL_Delay>
 8000e9a:	e00b      	b.n	8000eb4 <main+0x19c>
	          } else {
	              HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_RESET);
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ea2:	480d      	ldr	r0, [pc, #52]	@ (8000ed8 <main+0x1c0>)
 8000ea4:	f001 fa48 	bl	8002338 <HAL_GPIO_WritePin>
	              HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_RESET);
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000eae:	480a      	ldr	r0, [pc, #40]	@ (8000ed8 <main+0x1c0>)
 8000eb0:	f001 fa42 	bl	8002338 <HAL_GPIO_WritePin>
	          }

	          HAL_Delay(200);
 8000eb4:	20c8      	movs	r0, #200	@ 0xc8
 8000eb6:	f000 fecb 	bl	8001c50 <HAL_Delay>
	  HAL_UART_Receive_IT(&huart1, &uart_rx, 1); // bắt đầu nhận UART
 8000eba:	e761      	b.n	8000d80 <main+0x68>
 8000ebc:	080067d4 	.word	0x080067d4
 8000ec0:	20000584 	.word	0x20000584
 8000ec4:	20000008 	.word	0x20000008
 8000ec8:	080067dc 	.word	0x080067dc
 8000ecc:	20000580 	.word	0x20000580
 8000ed0:	20000538 	.word	0x20000538
 8000ed4:	200005b8 	.word	0x200005b8
 8000ed8:	40021800 	.word	0x40021800
 8000edc:	20000000 	.word	0x20000000
 8000ee0:	08006794 	.word	0x08006794
 8000ee4:	0800679c 	.word	0x0800679c
 8000ee8:	080067c8 	.word	0x080067c8

08000eec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b094      	sub	sp, #80	@ 0x50
 8000ef0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ef2:	f107 0320 	add.w	r3, r7, #32
 8000ef6:	2230      	movs	r2, #48	@ 0x30
 8000ef8:	2100      	movs	r1, #0
 8000efa:	4618      	mov	r0, r3
 8000efc:	f004 ffa6 	bl	8005e4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f00:	f107 030c 	add.w	r3, r7, #12
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	605a      	str	r2, [r3, #4]
 8000f0a:	609a      	str	r2, [r3, #8]
 8000f0c:	60da      	str	r2, [r3, #12]
 8000f0e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f10:	2300      	movs	r3, #0
 8000f12:	60bb      	str	r3, [r7, #8]
 8000f14:	4b2b      	ldr	r3, [pc, #172]	@ (8000fc4 <SystemClock_Config+0xd8>)
 8000f16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f18:	4a2a      	ldr	r2, [pc, #168]	@ (8000fc4 <SystemClock_Config+0xd8>)
 8000f1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f1e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f20:	4b28      	ldr	r3, [pc, #160]	@ (8000fc4 <SystemClock_Config+0xd8>)
 8000f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f28:	60bb      	str	r3, [r7, #8]
 8000f2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	607b      	str	r3, [r7, #4]
 8000f30:	4b25      	ldr	r3, [pc, #148]	@ (8000fc8 <SystemClock_Config+0xdc>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a24      	ldr	r2, [pc, #144]	@ (8000fc8 <SystemClock_Config+0xdc>)
 8000f36:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000f3a:	6013      	str	r3, [r2, #0]
 8000f3c:	4b22      	ldr	r3, [pc, #136]	@ (8000fc8 <SystemClock_Config+0xdc>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f44:	607b      	str	r3, [r7, #4]
 8000f46:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f4c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f50:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f52:	2302      	movs	r3, #2
 8000f54:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f56:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000f5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f5c:	2304      	movs	r3, #4
 8000f5e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000f60:	23b4      	movs	r3, #180	@ 0xb4
 8000f62:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f64:	2302      	movs	r3, #2
 8000f66:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f68:	2304      	movs	r3, #4
 8000f6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f6c:	f107 0320 	add.w	r3, r7, #32
 8000f70:	4618      	mov	r0, r3
 8000f72:	f002 fc6b 	bl	800384c <HAL_RCC_OscConfig>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000f7c:	f000 f94a 	bl	8001214 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000f80:	f002 fc14 	bl	80037ac <HAL_PWREx_EnableOverDrive>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000f8a:	f000 f943 	bl	8001214 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f8e:	230f      	movs	r3, #15
 8000f90:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f92:	2302      	movs	r3, #2
 8000f94:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f96:	2300      	movs	r3, #0
 8000f98:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f9a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000f9e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fa0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fa4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000fa6:	f107 030c 	add.w	r3, r7, #12
 8000faa:	2105      	movs	r1, #5
 8000fac:	4618      	mov	r0, r3
 8000fae:	f002 fec5 	bl	8003d3c <HAL_RCC_ClockConfig>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000fb8:	f000 f92c 	bl	8001214 <Error_Handler>
  }
}
 8000fbc:	bf00      	nop
 8000fbe:	3750      	adds	r7, #80	@ 0x50
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	40023800 	.word	0x40023800
 8000fc8:	40007000 	.word	0x40007000

08000fcc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000fd0:	4b1b      	ldr	r3, [pc, #108]	@ (8001040 <MX_I2C3_Init+0x74>)
 8000fd2:	4a1c      	ldr	r2, [pc, #112]	@ (8001044 <MX_I2C3_Init+0x78>)
 8000fd4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8000fd6:	4b1a      	ldr	r3, [pc, #104]	@ (8001040 <MX_I2C3_Init+0x74>)
 8000fd8:	4a1b      	ldr	r2, [pc, #108]	@ (8001048 <MX_I2C3_Init+0x7c>)
 8000fda:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fdc:	4b18      	ldr	r3, [pc, #96]	@ (8001040 <MX_I2C3_Init+0x74>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000fe2:	4b17      	ldr	r3, [pc, #92]	@ (8001040 <MX_I2C3_Init+0x74>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fe8:	4b15      	ldr	r3, [pc, #84]	@ (8001040 <MX_I2C3_Init+0x74>)
 8000fea:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000fee:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ff0:	4b13      	ldr	r3, [pc, #76]	@ (8001040 <MX_I2C3_Init+0x74>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000ff6:	4b12      	ldr	r3, [pc, #72]	@ (8001040 <MX_I2C3_Init+0x74>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ffc:	4b10      	ldr	r3, [pc, #64]	@ (8001040 <MX_I2C3_Init+0x74>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001002:	4b0f      	ldr	r3, [pc, #60]	@ (8001040 <MX_I2C3_Init+0x74>)
 8001004:	2200      	movs	r2, #0
 8001006:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001008:	480d      	ldr	r0, [pc, #52]	@ (8001040 <MX_I2C3_Init+0x74>)
 800100a:	f001 f9af 	bl	800236c <HAL_I2C_Init>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001014:	f000 f8fe 	bl	8001214 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001018:	2100      	movs	r1, #0
 800101a:	4809      	ldr	r0, [pc, #36]	@ (8001040 <MX_I2C3_Init+0x74>)
 800101c:	f002 fb4a 	bl	80036b4 <HAL_I2CEx_ConfigAnalogFilter>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001026:	f000 f8f5 	bl	8001214 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800102a:	2100      	movs	r1, #0
 800102c:	4804      	ldr	r0, [pc, #16]	@ (8001040 <MX_I2C3_Init+0x74>)
 800102e:	f002 fb7d 	bl	800372c <HAL_I2CEx_ConfigDigitalFilter>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001038:	f000 f8ec 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800103c:	bf00      	nop
 800103e:	bd80      	pop	{r7, pc}
 8001040:	2000048c 	.word	0x2000048c
 8001044:	40005c00 	.word	0x40005c00
 8001048:	00061a80 	.word	0x00061a80

0800104c <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8001050:	4b17      	ldr	r3, [pc, #92]	@ (80010b0 <MX_SPI4_Init+0x64>)
 8001052:	4a18      	ldr	r2, [pc, #96]	@ (80010b4 <MX_SPI4_Init+0x68>)
 8001054:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001056:	4b16      	ldr	r3, [pc, #88]	@ (80010b0 <MX_SPI4_Init+0x64>)
 8001058:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800105c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800105e:	4b14      	ldr	r3, [pc, #80]	@ (80010b0 <MX_SPI4_Init+0x64>)
 8001060:	2200      	movs	r2, #0
 8001062:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001064:	4b12      	ldr	r3, [pc, #72]	@ (80010b0 <MX_SPI4_Init+0x64>)
 8001066:	2200      	movs	r2, #0
 8001068:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800106a:	4b11      	ldr	r3, [pc, #68]	@ (80010b0 <MX_SPI4_Init+0x64>)
 800106c:	2200      	movs	r2, #0
 800106e:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001070:	4b0f      	ldr	r3, [pc, #60]	@ (80010b0 <MX_SPI4_Init+0x64>)
 8001072:	2200      	movs	r2, #0
 8001074:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001076:	4b0e      	ldr	r3, [pc, #56]	@ (80010b0 <MX_SPI4_Init+0x64>)
 8001078:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800107c:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800107e:	4b0c      	ldr	r3, [pc, #48]	@ (80010b0 <MX_SPI4_Init+0x64>)
 8001080:	2218      	movs	r2, #24
 8001082:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001084:	4b0a      	ldr	r3, [pc, #40]	@ (80010b0 <MX_SPI4_Init+0x64>)
 8001086:	2200      	movs	r2, #0
 8001088:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800108a:	4b09      	ldr	r3, [pc, #36]	@ (80010b0 <MX_SPI4_Init+0x64>)
 800108c:	2200      	movs	r2, #0
 800108e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001090:	4b07      	ldr	r3, [pc, #28]	@ (80010b0 <MX_SPI4_Init+0x64>)
 8001092:	2200      	movs	r2, #0
 8001094:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 10;
 8001096:	4b06      	ldr	r3, [pc, #24]	@ (80010b0 <MX_SPI4_Init+0x64>)
 8001098:	220a      	movs	r2, #10
 800109a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800109c:	4804      	ldr	r0, [pc, #16]	@ (80010b0 <MX_SPI4_Init+0x64>)
 800109e:	f003 f86d 	bl	800417c <HAL_SPI_Init>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 80010a8:	f000 f8b4 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80010ac:	bf00      	nop
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	200004e0 	.word	0x200004e0
 80010b4:	40013400 	.word	0x40013400

080010b8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010bc:	4b11      	ldr	r3, [pc, #68]	@ (8001104 <MX_USART1_UART_Init+0x4c>)
 80010be:	4a12      	ldr	r2, [pc, #72]	@ (8001108 <MX_USART1_UART_Init+0x50>)
 80010c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80010c2:	4b10      	ldr	r3, [pc, #64]	@ (8001104 <MX_USART1_UART_Init+0x4c>)
 80010c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001104 <MX_USART1_UART_Init+0x4c>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001104 <MX_USART1_UART_Init+0x4c>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001104 <MX_USART1_UART_Init+0x4c>)
 80010d8:	2200      	movs	r2, #0
 80010da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010dc:	4b09      	ldr	r3, [pc, #36]	@ (8001104 <MX_USART1_UART_Init+0x4c>)
 80010de:	220c      	movs	r2, #12
 80010e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010e2:	4b08      	ldr	r3, [pc, #32]	@ (8001104 <MX_USART1_UART_Init+0x4c>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010e8:	4b06      	ldr	r3, [pc, #24]	@ (8001104 <MX_USART1_UART_Init+0x4c>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010ee:	4805      	ldr	r0, [pc, #20]	@ (8001104 <MX_USART1_UART_Init+0x4c>)
 80010f0:	f003 fe24 	bl	8004d3c <HAL_UART_Init>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80010fa:	f000 f88b 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	20000538 	.word	0x20000538
 8001108:	40011000 	.word	0x40011000

0800110c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b08a      	sub	sp, #40	@ 0x28
 8001110:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001112:	f107 0314 	add.w	r3, r7, #20
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	605a      	str	r2, [r3, #4]
 800111c:	609a      	str	r2, [r3, #8]
 800111e:	60da      	str	r2, [r3, #12]
 8001120:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	613b      	str	r3, [r7, #16]
 8001126:	4b38      	ldr	r3, [pc, #224]	@ (8001208 <MX_GPIO_Init+0xfc>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112a:	4a37      	ldr	r2, [pc, #220]	@ (8001208 <MX_GPIO_Init+0xfc>)
 800112c:	f043 0310 	orr.w	r3, r3, #16
 8001130:	6313      	str	r3, [r2, #48]	@ 0x30
 8001132:	4b35      	ldr	r3, [pc, #212]	@ (8001208 <MX_GPIO_Init+0xfc>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001136:	f003 0310 	and.w	r3, r3, #16
 800113a:	613b      	str	r3, [r7, #16]
 800113c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	60fb      	str	r3, [r7, #12]
 8001142:	4b31      	ldr	r3, [pc, #196]	@ (8001208 <MX_GPIO_Init+0xfc>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001146:	4a30      	ldr	r2, [pc, #192]	@ (8001208 <MX_GPIO_Init+0xfc>)
 8001148:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800114c:	6313      	str	r3, [r2, #48]	@ 0x30
 800114e:	4b2e      	ldr	r3, [pc, #184]	@ (8001208 <MX_GPIO_Init+0xfc>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001152:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001156:	60fb      	str	r3, [r7, #12]
 8001158:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	60bb      	str	r3, [r7, #8]
 800115e:	4b2a      	ldr	r3, [pc, #168]	@ (8001208 <MX_GPIO_Init+0xfc>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001162:	4a29      	ldr	r2, [pc, #164]	@ (8001208 <MX_GPIO_Init+0xfc>)
 8001164:	f043 0304 	orr.w	r3, r3, #4
 8001168:	6313      	str	r3, [r2, #48]	@ 0x30
 800116a:	4b27      	ldr	r3, [pc, #156]	@ (8001208 <MX_GPIO_Init+0xfc>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116e:	f003 0304 	and.w	r3, r3, #4
 8001172:	60bb      	str	r3, [r7, #8]
 8001174:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	607b      	str	r3, [r7, #4]
 800117a:	4b23      	ldr	r3, [pc, #140]	@ (8001208 <MX_GPIO_Init+0xfc>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117e:	4a22      	ldr	r2, [pc, #136]	@ (8001208 <MX_GPIO_Init+0xfc>)
 8001180:	f043 0301 	orr.w	r3, r3, #1
 8001184:	6313      	str	r3, [r2, #48]	@ 0x30
 8001186:	4b20      	ldr	r3, [pc, #128]	@ (8001208 <MX_GPIO_Init+0xfc>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	607b      	str	r3, [r7, #4]
 8001190:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	603b      	str	r3, [r7, #0]
 8001196:	4b1c      	ldr	r3, [pc, #112]	@ (8001208 <MX_GPIO_Init+0xfc>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800119a:	4a1b      	ldr	r2, [pc, #108]	@ (8001208 <MX_GPIO_Init+0xfc>)
 800119c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80011a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011a2:	4b19      	ldr	r3, [pc, #100]	@ (8001208 <MX_GPIO_Init+0xfc>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80011aa:	603b      	str	r3, [r7, #0]
 80011ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 80011ae:	2200      	movs	r2, #0
 80011b0:	2110      	movs	r1, #16
 80011b2:	4816      	ldr	r0, [pc, #88]	@ (800120c <MX_GPIO_Init+0x100>)
 80011b4:	f001 f8c0 	bl	8002338 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 80011b8:	2200      	movs	r2, #0
 80011ba:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 80011be:	4814      	ldr	r0, [pc, #80]	@ (8001210 <MX_GPIO_Init+0x104>)
 80011c0:	f001 f8ba 	bl	8002338 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80011c4:	2310      	movs	r3, #16
 80011c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c8:	2301      	movs	r3, #1
 80011ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011cc:	2300      	movs	r3, #0
 80011ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d0:	2300      	movs	r3, #0
 80011d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011d4:	f107 0314 	add.w	r3, r7, #20
 80011d8:	4619      	mov	r1, r3
 80011da:	480c      	ldr	r0, [pc, #48]	@ (800120c <MX_GPIO_Init+0x100>)
 80011dc:	f000 ff00 	bl	8001fe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80011e0:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80011e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e6:	2301      	movs	r3, #1
 80011e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ea:	2300      	movs	r3, #0
 80011ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ee:	2300      	movs	r3, #0
 80011f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011f2:	f107 0314 	add.w	r3, r7, #20
 80011f6:	4619      	mov	r1, r3
 80011f8:	4805      	ldr	r0, [pc, #20]	@ (8001210 <MX_GPIO_Init+0x104>)
 80011fa:	f000 fef1 	bl	8001fe0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80011fe:	bf00      	nop
 8001200:	3728      	adds	r7, #40	@ 0x28
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40023800 	.word	0x40023800
 800120c:	40021000 	.word	0x40021000
 8001210:	40021800 	.word	0x40021800

08001214 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001218:	b672      	cpsid	i
}
 800121a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800121c:	bf00      	nop
 800121e:	e7fd      	b.n	800121c <Error_Handler+0x8>

08001220 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	607b      	str	r3, [r7, #4]
 800122a:	4b13      	ldr	r3, [pc, #76]	@ (8001278 <HAL_MspInit+0x58>)
 800122c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800122e:	4a12      	ldr	r2, [pc, #72]	@ (8001278 <HAL_MspInit+0x58>)
 8001230:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001234:	6453      	str	r3, [r2, #68]	@ 0x44
 8001236:	4b10      	ldr	r3, [pc, #64]	@ (8001278 <HAL_MspInit+0x58>)
 8001238:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800123a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800123e:	607b      	str	r3, [r7, #4]
 8001240:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	603b      	str	r3, [r7, #0]
 8001246:	4b0c      	ldr	r3, [pc, #48]	@ (8001278 <HAL_MspInit+0x58>)
 8001248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800124a:	4a0b      	ldr	r2, [pc, #44]	@ (8001278 <HAL_MspInit+0x58>)
 800124c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001250:	6413      	str	r3, [r2, #64]	@ 0x40
 8001252:	4b09      	ldr	r3, [pc, #36]	@ (8001278 <HAL_MspInit+0x58>)
 8001254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001256:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800125a:	603b      	str	r3, [r7, #0]
 800125c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800125e:	2200      	movs	r2, #0
 8001260:	2100      	movs	r1, #0
 8001262:	2005      	movs	r0, #5
 8001264:	f000 fdf3 	bl	8001e4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001268:	2005      	movs	r0, #5
 800126a:	f000 fe0c 	bl	8001e86 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800126e:	bf00      	nop
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	40023800 	.word	0x40023800

0800127c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b08a      	sub	sp, #40	@ 0x28
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001284:	f107 0314 	add.w	r3, r7, #20
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	605a      	str	r2, [r3, #4]
 800128e:	609a      	str	r2, [r3, #8]
 8001290:	60da      	str	r2, [r3, #12]
 8001292:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a29      	ldr	r2, [pc, #164]	@ (8001340 <HAL_I2C_MspInit+0xc4>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d14b      	bne.n	8001336 <HAL_I2C_MspInit+0xba>
  {
    /* USER CODE BEGIN I2C3_MspInit 0 */

    /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	613b      	str	r3, [r7, #16]
 80012a2:	4b28      	ldr	r3, [pc, #160]	@ (8001344 <HAL_I2C_MspInit+0xc8>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a6:	4a27      	ldr	r2, [pc, #156]	@ (8001344 <HAL_I2C_MspInit+0xc8>)
 80012a8:	f043 0304 	orr.w	r3, r3, #4
 80012ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ae:	4b25      	ldr	r3, [pc, #148]	@ (8001344 <HAL_I2C_MspInit+0xc8>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b2:	f003 0304 	and.w	r3, r3, #4
 80012b6:	613b      	str	r3, [r7, #16]
 80012b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	4b21      	ldr	r3, [pc, #132]	@ (8001344 <HAL_I2C_MspInit+0xc8>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c2:	4a20      	ldr	r2, [pc, #128]	@ (8001344 <HAL_I2C_MspInit+0xc8>)
 80012c4:	f043 0301 	orr.w	r3, r3, #1
 80012c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ca:	4b1e      	ldr	r3, [pc, #120]	@ (8001344 <HAL_I2C_MspInit+0xc8>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	60fb      	str	r3, [r7, #12]
 80012d4:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80012d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80012da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012dc:	2312      	movs	r3, #18
 80012de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e4:	2303      	movs	r3, #3
 80012e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80012e8:	2304      	movs	r3, #4
 80012ea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012ec:	f107 0314 	add.w	r3, r7, #20
 80012f0:	4619      	mov	r1, r3
 80012f2:	4815      	ldr	r0, [pc, #84]	@ (8001348 <HAL_I2C_MspInit+0xcc>)
 80012f4:	f000 fe74 	bl	8001fe0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80012f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012fe:	2312      	movs	r3, #18
 8001300:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001302:	2300      	movs	r3, #0
 8001304:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001306:	2303      	movs	r3, #3
 8001308:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800130a:	2304      	movs	r3, #4
 800130c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800130e:	f107 0314 	add.w	r3, r7, #20
 8001312:	4619      	mov	r1, r3
 8001314:	480d      	ldr	r0, [pc, #52]	@ (800134c <HAL_I2C_MspInit+0xd0>)
 8001316:	f000 fe63 	bl	8001fe0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	60bb      	str	r3, [r7, #8]
 800131e:	4b09      	ldr	r3, [pc, #36]	@ (8001344 <HAL_I2C_MspInit+0xc8>)
 8001320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001322:	4a08      	ldr	r2, [pc, #32]	@ (8001344 <HAL_I2C_MspInit+0xc8>)
 8001324:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001328:	6413      	str	r3, [r2, #64]	@ 0x40
 800132a:	4b06      	ldr	r3, [pc, #24]	@ (8001344 <HAL_I2C_MspInit+0xc8>)
 800132c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800132e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001332:	60bb      	str	r3, [r7, #8]
 8001334:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C3_MspInit 1 */

  }

}
 8001336:	bf00      	nop
 8001338:	3728      	adds	r7, #40	@ 0x28
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	40005c00 	.word	0x40005c00
 8001344:	40023800 	.word	0x40023800
 8001348:	40020800 	.word	0x40020800
 800134c:	40020000 	.word	0x40020000

08001350 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b08a      	sub	sp, #40	@ 0x28
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001358:	f107 0314 	add.w	r3, r7, #20
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	60da      	str	r2, [r3, #12]
 8001366:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a19      	ldr	r2, [pc, #100]	@ (80013d4 <HAL_SPI_MspInit+0x84>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d12b      	bne.n	80013ca <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI4_MspInit 0 */

    /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	613b      	str	r3, [r7, #16]
 8001376:	4b18      	ldr	r3, [pc, #96]	@ (80013d8 <HAL_SPI_MspInit+0x88>)
 8001378:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800137a:	4a17      	ldr	r2, [pc, #92]	@ (80013d8 <HAL_SPI_MspInit+0x88>)
 800137c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001380:	6453      	str	r3, [r2, #68]	@ 0x44
 8001382:	4b15      	ldr	r3, [pc, #84]	@ (80013d8 <HAL_SPI_MspInit+0x88>)
 8001384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001386:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800138a:	613b      	str	r3, [r7, #16]
 800138c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	60fb      	str	r3, [r7, #12]
 8001392:	4b11      	ldr	r3, [pc, #68]	@ (80013d8 <HAL_SPI_MspInit+0x88>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001396:	4a10      	ldr	r2, [pc, #64]	@ (80013d8 <HAL_SPI_MspInit+0x88>)
 8001398:	f043 0310 	orr.w	r3, r3, #16
 800139c:	6313      	str	r3, [r2, #48]	@ 0x30
 800139e:	4b0e      	ldr	r3, [pc, #56]	@ (80013d8 <HAL_SPI_MspInit+0x88>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a2:	f003 0310 	and.w	r3, r3, #16
 80013a6:	60fb      	str	r3, [r7, #12]
 80013a8:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 80013aa:	2364      	movs	r3, #100	@ 0x64
 80013ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ae:	2302      	movs	r3, #2
 80013b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b6:	2303      	movs	r3, #3
 80013b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80013ba:	2305      	movs	r3, #5
 80013bc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013be:	f107 0314 	add.w	r3, r7, #20
 80013c2:	4619      	mov	r1, r3
 80013c4:	4805      	ldr	r0, [pc, #20]	@ (80013dc <HAL_SPI_MspInit+0x8c>)
 80013c6:	f000 fe0b 	bl	8001fe0 <HAL_GPIO_Init>

    /* USER CODE END SPI4_MspInit 1 */

  }

}
 80013ca:	bf00      	nop
 80013cc:	3728      	adds	r7, #40	@ 0x28
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	40013400 	.word	0x40013400
 80013d8:	40023800 	.word	0x40023800
 80013dc:	40021000 	.word	0x40021000

080013e0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b08a      	sub	sp, #40	@ 0x28
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e8:	f107 0314 	add.w	r3, r7, #20
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	605a      	str	r2, [r3, #4]
 80013f2:	609a      	str	r2, [r3, #8]
 80013f4:	60da      	str	r2, [r3, #12]
 80013f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a1d      	ldr	r2, [pc, #116]	@ (8001474 <HAL_UART_MspInit+0x94>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d134      	bne.n	800146c <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	613b      	str	r3, [r7, #16]
 8001406:	4b1c      	ldr	r3, [pc, #112]	@ (8001478 <HAL_UART_MspInit+0x98>)
 8001408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800140a:	4a1b      	ldr	r2, [pc, #108]	@ (8001478 <HAL_UART_MspInit+0x98>)
 800140c:	f043 0310 	orr.w	r3, r3, #16
 8001410:	6453      	str	r3, [r2, #68]	@ 0x44
 8001412:	4b19      	ldr	r3, [pc, #100]	@ (8001478 <HAL_UART_MspInit+0x98>)
 8001414:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001416:	f003 0310 	and.w	r3, r3, #16
 800141a:	613b      	str	r3, [r7, #16]
 800141c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	60fb      	str	r3, [r7, #12]
 8001422:	4b15      	ldr	r3, [pc, #84]	@ (8001478 <HAL_UART_MspInit+0x98>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001426:	4a14      	ldr	r2, [pc, #80]	@ (8001478 <HAL_UART_MspInit+0x98>)
 8001428:	f043 0301 	orr.w	r3, r3, #1
 800142c:	6313      	str	r3, [r2, #48]	@ 0x30
 800142e:	4b12      	ldr	r3, [pc, #72]	@ (8001478 <HAL_UART_MspInit+0x98>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	60fb      	str	r3, [r7, #12]
 8001438:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800143a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800143e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001440:	2302      	movs	r3, #2
 8001442:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001444:	2300      	movs	r3, #0
 8001446:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001448:	2303      	movs	r3, #3
 800144a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800144c:	2307      	movs	r3, #7
 800144e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001450:	f107 0314 	add.w	r3, r7, #20
 8001454:	4619      	mov	r1, r3
 8001456:	4809      	ldr	r0, [pc, #36]	@ (800147c <HAL_UART_MspInit+0x9c>)
 8001458:	f000 fdc2 	bl	8001fe0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800145c:	2200      	movs	r2, #0
 800145e:	2100      	movs	r1, #0
 8001460:	2025      	movs	r0, #37	@ 0x25
 8001462:	f000 fcf4 	bl	8001e4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001466:	2025      	movs	r0, #37	@ 0x25
 8001468:	f000 fd0d 	bl	8001e86 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 800146c:	bf00      	nop
 800146e:	3728      	adds	r7, #40	@ 0x28
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	40011000 	.word	0x40011000
 8001478:	40023800 	.word	0x40023800
 800147c:	40020000 	.word	0x40020000

08001480 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001484:	bf00      	nop
 8001486:	e7fd      	b.n	8001484 <NMI_Handler+0x4>

08001488 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800148c:	bf00      	nop
 800148e:	e7fd      	b.n	800148c <HardFault_Handler+0x4>

08001490 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001494:	bf00      	nop
 8001496:	e7fd      	b.n	8001494 <MemManage_Handler+0x4>

08001498 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800149c:	bf00      	nop
 800149e:	e7fd      	b.n	800149c <BusFault_Handler+0x4>

080014a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014a4:	bf00      	nop
 80014a6:	e7fd      	b.n	80014a4 <UsageFault_Handler+0x4>

080014a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014ac:	bf00      	nop
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr

080014b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014b6:	b480      	push	{r7}
 80014b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014ba:	bf00      	nop
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014c8:	bf00      	nop
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr

080014d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014d6:	f000 fb9b 	bl	8001c10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014da:	bf00      	nop
 80014dc:	bd80      	pop	{r7, pc}

080014de <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80014de:	b480      	push	{r7}
 80014e0:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80014e2:	bf00      	nop
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80014f0:	4802      	ldr	r0, [pc, #8]	@ (80014fc <USART1_IRQHandler+0x10>)
 80014f2:	f003 fd23 	bl	8004f3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80014f6:	bf00      	nop
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	20000538 	.word	0x20000538

08001500 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b086      	sub	sp, #24
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001508:	4a14      	ldr	r2, [pc, #80]	@ (800155c <_sbrk+0x5c>)
 800150a:	4b15      	ldr	r3, [pc, #84]	@ (8001560 <_sbrk+0x60>)
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001514:	4b13      	ldr	r3, [pc, #76]	@ (8001564 <_sbrk+0x64>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d102      	bne.n	8001522 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800151c:	4b11      	ldr	r3, [pc, #68]	@ (8001564 <_sbrk+0x64>)
 800151e:	4a12      	ldr	r2, [pc, #72]	@ (8001568 <_sbrk+0x68>)
 8001520:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001522:	4b10      	ldr	r3, [pc, #64]	@ (8001564 <_sbrk+0x64>)
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4413      	add	r3, r2
 800152a:	693a      	ldr	r2, [r7, #16]
 800152c:	429a      	cmp	r2, r3
 800152e:	d207      	bcs.n	8001540 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001530:	f004 fc94 	bl	8005e5c <__errno>
 8001534:	4603      	mov	r3, r0
 8001536:	220c      	movs	r2, #12
 8001538:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800153a:	f04f 33ff 	mov.w	r3, #4294967295
 800153e:	e009      	b.n	8001554 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001540:	4b08      	ldr	r3, [pc, #32]	@ (8001564 <_sbrk+0x64>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001546:	4b07      	ldr	r3, [pc, #28]	@ (8001564 <_sbrk+0x64>)
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4413      	add	r3, r2
 800154e:	4a05      	ldr	r2, [pc, #20]	@ (8001564 <_sbrk+0x64>)
 8001550:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001552:	68fb      	ldr	r3, [r7, #12]
}
 8001554:	4618      	mov	r0, r3
 8001556:	3718      	adds	r7, #24
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	20030000 	.word	0x20030000
 8001560:	00000400 	.word	0x00000400
 8001564:	200008e4 	.word	0x200008e4
 8001568:	20000a38 	.word	0x20000a38

0800156c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001570:	4b06      	ldr	r3, [pc, #24]	@ (800158c <SystemInit+0x20>)
 8001572:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001576:	4a05      	ldr	r2, [pc, #20]	@ (800158c <SystemInit+0x20>)
 8001578:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800157c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001580:	bf00      	nop
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	e000ed00 	.word	0xe000ed00

08001590 <TM_MFRC522_Init>:
 */
#include "tm_stm32f4_mfrc522.h"

extern SPI_HandleTypeDef hspi4;

void TM_MFRC522_Init(void) {
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
	TM_MFRC522_InitPins();
 8001594:	f000 f83c 	bl	8001610 <TM_MFRC522_InitPins>
	//TM_SPI_Init(MFRC522_SPI, MFRC522_SPI_PINSPACK);

	TM_MFRC522_Reset();
 8001598:	f000 f921 	bl	80017de <TM_MFRC522_Reset>

	TM_MFRC522_WriteRegister(MFRC522_REG_T_MODE, 0x8D);
 800159c:	218d      	movs	r1, #141	@ 0x8d
 800159e:	202a      	movs	r0, #42	@ 0x2a
 80015a0:	f000 f842 	bl	8001628 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_PRESCALER, 0x3E);
 80015a4:	213e      	movs	r1, #62	@ 0x3e
 80015a6:	202b      	movs	r0, #43	@ 0x2b
 80015a8:	f000 f83e 	bl	8001628 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_L, 30);           
 80015ac:	211e      	movs	r1, #30
 80015ae:	202d      	movs	r0, #45	@ 0x2d
 80015b0:	f000 f83a 	bl	8001628 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_H, 0);
 80015b4:	2100      	movs	r1, #0
 80015b6:	202c      	movs	r0, #44	@ 0x2c
 80015b8:	f000 f836 	bl	8001628 <TM_MFRC522_WriteRegister>

	/* 48dB gain */
	TM_MFRC522_WriteRegister(MFRC522_REG_RF_CFG, 0x70);
 80015bc:	2170      	movs	r1, #112	@ 0x70
 80015be:	2026      	movs	r0, #38	@ 0x26
 80015c0:	f000 f832 	bl	8001628 <TM_MFRC522_WriteRegister>
	
	TM_MFRC522_WriteRegister(MFRC522_REG_TX_AUTO, 0x40);
 80015c4:	2140      	movs	r1, #64	@ 0x40
 80015c6:	2015      	movs	r0, #21
 80015c8:	f000 f82e 	bl	8001628 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_MODE, 0x3D);
 80015cc:	213d      	movs	r1, #61	@ 0x3d
 80015ce:	2011      	movs	r0, #17
 80015d0:	f000 f82a 	bl	8001628 <TM_MFRC522_WriteRegister>

	TM_MFRC522_AntennaOn();		//Open the antenna
 80015d4:	f000 f8ee 	bl	80017b4 <TM_MFRC522_AntennaOn>
}
 80015d8:	bf00      	nop
 80015da:	bd80      	pop	{r7, pc}

080015dc <TM_MFRC522_Check>:

TM_MFRC522_Status_t TM_MFRC522_Check(uint8_t* id) {
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
	TM_MFRC522_Status_t status;
	//Find cards, return card type
	status = TM_MFRC522_Request(PICC_REQIDL, id);	
 80015e4:	6879      	ldr	r1, [r7, #4]
 80015e6:	2026      	movs	r0, #38	@ 0x26
 80015e8:	f000 f901 	bl	80017ee <TM_MFRC522_Request>
 80015ec:	4603      	mov	r3, r0
 80015ee:	73fb      	strb	r3, [r7, #15]
	if (status == MI_OK) {
 80015f0:	7bfb      	ldrb	r3, [r7, #15]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d104      	bne.n	8001600 <TM_MFRC522_Check+0x24>
		//Card detected
		//Anti-collision, return card serial number 4 bytes
		status = TM_MFRC522_Anticoll(id);	
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f000 f9ed 	bl	80019d6 <TM_MFRC522_Anticoll>
 80015fc:	4603      	mov	r3, r0
 80015fe:	73fb      	strb	r3, [r7, #15]
	}
	TM_MFRC522_Halt();			//Command card into hibernation 
 8001600:	f000 fa6f 	bl	8001ae2 <TM_MFRC522_Halt>

	return status;
 8001604:	7bfb      	ldrb	r3, [r7, #15]
}
 8001606:	4618      	mov	r0, r3
 8001608:	3710      	adds	r7, #16
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
	...

08001610 <TM_MFRC522_InitPins>:
		}
	}
	return MI_OK;
}

void TM_MFRC522_InitPins(void) {
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
//	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
	//CS pin
//	GPIO_InitStruct.GPIO_Pin = MFRC522_CS_PIN;
//	GPIO_Init(MFRC522_CS_PORT, &GPIO_InitStruct);

	MFRC522_CS_HIGH;
 8001614:	2201      	movs	r2, #1
 8001616:	2110      	movs	r1, #16
 8001618:	4802      	ldr	r0, [pc, #8]	@ (8001624 <TM_MFRC522_InitPins+0x14>)
 800161a:	f000 fe8d 	bl	8002338 <HAL_GPIO_WritePin>
}
 800161e:	bf00      	nop
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	40021000 	.word	0x40021000

08001628 <TM_MFRC522_WriteRegister>:

void TM_MFRC522_WriteRegister(uint8_t addr, uint8_t val) {
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	4603      	mov	r3, r0
 8001630:	460a      	mov	r2, r1
 8001632:	71fb      	strb	r3, [r7, #7]
 8001634:	4613      	mov	r3, r2
 8001636:	71bb      	strb	r3, [r7, #6]
	//CS low
	MFRC522_CS_LOW;
 8001638:	2200      	movs	r2, #0
 800163a:	2110      	movs	r1, #16
 800163c:	481a      	ldr	r0, [pc, #104]	@ (80016a8 <TM_MFRC522_WriteRegister+0x80>)
 800163e:	f000 fe7b 	bl	8002338 <HAL_GPIO_WritePin>
	//Send address
	uint8_t buf = (addr << 1) & 0x7E;
 8001642:	79fb      	ldrb	r3, [r7, #7]
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	b2db      	uxtb	r3, r3
 8001648:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 800164c:	b2db      	uxtb	r3, r3
 800164e:	73bb      	strb	r3, [r7, #14]
	HAL_StatusTypeDef ret = 0;
 8001650:	2300      	movs	r3, #0
 8001652:	73fb      	strb	r3, [r7, #15]
	ret = HAL_SPI_Transmit(&hspi4, &buf, 1, 10);
 8001654:	f107 010e 	add.w	r1, r7, #14
 8001658:	230a      	movs	r3, #10
 800165a:	2201      	movs	r2, #1
 800165c:	4813      	ldr	r0, [pc, #76]	@ (80016ac <TM_MFRC522_WriteRegister+0x84>)
 800165e:	f002 fe16 	bl	800428e <HAL_SPI_Transmit>
 8001662:	4603      	mov	r3, r0
 8001664:	73fb      	strb	r3, [r7, #15]
	while ((ret = HAL_SPI_GetState(&hspi4)) == HAL_SPI_STATE_BUSY);
 8001666:	bf00      	nop
 8001668:	4810      	ldr	r0, [pc, #64]	@ (80016ac <TM_MFRC522_WriteRegister+0x84>)
 800166a:	f003 fa16 	bl	8004a9a <HAL_SPI_GetState>
 800166e:	4603      	mov	r3, r0
 8001670:	73fb      	strb	r3, [r7, #15]
 8001672:	7bfb      	ldrb	r3, [r7, #15]
 8001674:	2b02      	cmp	r3, #2
 8001676:	d0f7      	beq.n	8001668 <TM_MFRC522_WriteRegister+0x40>
	//Send data	
	HAL_SPI_Transmit(&hspi4, &val, 1, 10);
 8001678:	1db9      	adds	r1, r7, #6
 800167a:	230a      	movs	r3, #10
 800167c:	2201      	movs	r2, #1
 800167e:	480b      	ldr	r0, [pc, #44]	@ (80016ac <TM_MFRC522_WriteRegister+0x84>)
 8001680:	f002 fe05 	bl	800428e <HAL_SPI_Transmit>
	while ((ret = HAL_SPI_GetState(&hspi4)) == HAL_SPI_STATE_BUSY);
 8001684:	bf00      	nop
 8001686:	4809      	ldr	r0, [pc, #36]	@ (80016ac <TM_MFRC522_WriteRegister+0x84>)
 8001688:	f003 fa07 	bl	8004a9a <HAL_SPI_GetState>
 800168c:	4603      	mov	r3, r0
 800168e:	73fb      	strb	r3, [r7, #15]
 8001690:	7bfb      	ldrb	r3, [r7, #15]
 8001692:	2b02      	cmp	r3, #2
 8001694:	d0f7      	beq.n	8001686 <TM_MFRC522_WriteRegister+0x5e>
	//CS high
	MFRC522_CS_HIGH;
 8001696:	2201      	movs	r2, #1
 8001698:	2110      	movs	r1, #16
 800169a:	4803      	ldr	r0, [pc, #12]	@ (80016a8 <TM_MFRC522_WriteRegister+0x80>)
 800169c:	f000 fe4c 	bl	8002338 <HAL_GPIO_WritePin>
}
 80016a0:	bf00      	nop
 80016a2:	3710      	adds	r7, #16
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	40021000 	.word	0x40021000
 80016ac:	200004e0 	.word	0x200004e0

080016b0 <TM_MFRC522_ReadRegister>:

uint8_t TM_MFRC522_ReadRegister(uint8_t addr) {
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	4603      	mov	r3, r0
 80016b8:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	//CS low
	MFRC522_CS_LOW;
 80016ba:	2200      	movs	r2, #0
 80016bc:	2110      	movs	r1, #16
 80016be:	481f      	ldr	r0, [pc, #124]	@ (800173c <TM_MFRC522_ReadRegister+0x8c>)
 80016c0:	f000 fe3a 	bl	8002338 <HAL_GPIO_WritePin>

	uint8_t buf = ((addr << 1) & 0x7E) | 0x80;
 80016c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c8:	005b      	lsls	r3, r3, #1
 80016ca:	b25b      	sxtb	r3, r3
 80016cc:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 80016d0:	b25b      	sxtb	r3, r3
 80016d2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80016d6:	b25b      	sxtb	r3, r3
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	737b      	strb	r3, [r7, #13]
	HAL_StatusTypeDef ret = 0;
 80016dc:	2300      	movs	r3, #0
 80016de:	73fb      	strb	r3, [r7, #15]
	ret = HAL_SPI_Transmit(&hspi4, &buf, 1, 10);
 80016e0:	f107 010d 	add.w	r1, r7, #13
 80016e4:	230a      	movs	r3, #10
 80016e6:	2201      	movs	r2, #1
 80016e8:	4815      	ldr	r0, [pc, #84]	@ (8001740 <TM_MFRC522_ReadRegister+0x90>)
 80016ea:	f002 fdd0 	bl	800428e <HAL_SPI_Transmit>
 80016ee:	4603      	mov	r3, r0
 80016f0:	73fb      	strb	r3, [r7, #15]
	while ((ret = HAL_SPI_GetState(&hspi4)) == HAL_SPI_STATE_BUSY);
 80016f2:	bf00      	nop
 80016f4:	4812      	ldr	r0, [pc, #72]	@ (8001740 <TM_MFRC522_ReadRegister+0x90>)
 80016f6:	f003 f9d0 	bl	8004a9a <HAL_SPI_GetState>
 80016fa:	4603      	mov	r3, r0
 80016fc:	73fb      	strb	r3, [r7, #15]
 80016fe:	7bfb      	ldrb	r3, [r7, #15]
 8001700:	2b02      	cmp	r3, #2
 8001702:	d0f7      	beq.n	80016f4 <TM_MFRC522_ReadRegister+0x44>
	ret = HAL_SPI_Receive(&hspi4, &val, 1, 10);
 8001704:	f107 010e 	add.w	r1, r7, #14
 8001708:	230a      	movs	r3, #10
 800170a:	2201      	movs	r2, #1
 800170c:	480c      	ldr	r0, [pc, #48]	@ (8001740 <TM_MFRC522_ReadRegister+0x90>)
 800170e:	f002 ff02 	bl	8004516 <HAL_SPI_Receive>
 8001712:	4603      	mov	r3, r0
 8001714:	73fb      	strb	r3, [r7, #15]
	while ((ret = HAL_SPI_GetState(&hspi4)) == HAL_SPI_STATE_BUSY);
 8001716:	bf00      	nop
 8001718:	4809      	ldr	r0, [pc, #36]	@ (8001740 <TM_MFRC522_ReadRegister+0x90>)
 800171a:	f003 f9be 	bl	8004a9a <HAL_SPI_GetState>
 800171e:	4603      	mov	r3, r0
 8001720:	73fb      	strb	r3, [r7, #15]
 8001722:	7bfb      	ldrb	r3, [r7, #15]
 8001724:	2b02      	cmp	r3, #2
 8001726:	d0f7      	beq.n	8001718 <TM_MFRC522_ReadRegister+0x68>
	//CS high
	MFRC522_CS_HIGH;
 8001728:	2201      	movs	r2, #1
 800172a:	2110      	movs	r1, #16
 800172c:	4803      	ldr	r0, [pc, #12]	@ (800173c <TM_MFRC522_ReadRegister+0x8c>)
 800172e:	f000 fe03 	bl	8002338 <HAL_GPIO_WritePin>

	return val;	
 8001732:	7bbb      	ldrb	r3, [r7, #14]
}
 8001734:	4618      	mov	r0, r3
 8001736:	3710      	adds	r7, #16
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	40021000 	.word	0x40021000
 8001740:	200004e0 	.word	0x200004e0

08001744 <TM_MFRC522_SetBitMask>:

void TM_MFRC522_SetBitMask(uint8_t reg, uint8_t mask) {
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	4603      	mov	r3, r0
 800174c:	460a      	mov	r2, r1
 800174e:	71fb      	strb	r3, [r7, #7]
 8001750:	4613      	mov	r3, r2
 8001752:	71bb      	strb	r3, [r7, #6]
	TM_MFRC522_WriteRegister(reg, TM_MFRC522_ReadRegister(reg) | mask);
 8001754:	79fb      	ldrb	r3, [r7, #7]
 8001756:	4618      	mov	r0, r3
 8001758:	f7ff ffaa 	bl	80016b0 <TM_MFRC522_ReadRegister>
 800175c:	4603      	mov	r3, r0
 800175e:	461a      	mov	r2, r3
 8001760:	79bb      	ldrb	r3, [r7, #6]
 8001762:	4313      	orrs	r3, r2
 8001764:	b2da      	uxtb	r2, r3
 8001766:	79fb      	ldrb	r3, [r7, #7]
 8001768:	4611      	mov	r1, r2
 800176a:	4618      	mov	r0, r3
 800176c:	f7ff ff5c 	bl	8001628 <TM_MFRC522_WriteRegister>
}
 8001770:	bf00      	nop
 8001772:	3708      	adds	r7, #8
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}

08001778 <TM_MFRC522_ClearBitMask>:

void TM_MFRC522_ClearBitMask(uint8_t reg, uint8_t mask){
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	4603      	mov	r3, r0
 8001780:	460a      	mov	r2, r1
 8001782:	71fb      	strb	r3, [r7, #7]
 8001784:	4613      	mov	r3, r2
 8001786:	71bb      	strb	r3, [r7, #6]
	TM_MFRC522_WriteRegister(reg, TM_MFRC522_ReadRegister(reg) & (~mask));
 8001788:	79fb      	ldrb	r3, [r7, #7]
 800178a:	4618      	mov	r0, r3
 800178c:	f7ff ff90 	bl	80016b0 <TM_MFRC522_ReadRegister>
 8001790:	4603      	mov	r3, r0
 8001792:	b25a      	sxtb	r2, r3
 8001794:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001798:	43db      	mvns	r3, r3
 800179a:	b25b      	sxtb	r3, r3
 800179c:	4013      	ands	r3, r2
 800179e:	b25b      	sxtb	r3, r3
 80017a0:	b2da      	uxtb	r2, r3
 80017a2:	79fb      	ldrb	r3, [r7, #7]
 80017a4:	4611      	mov	r1, r2
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7ff ff3e 	bl	8001628 <TM_MFRC522_WriteRegister>
} 
 80017ac:	bf00      	nop
 80017ae:	3708      	adds	r7, #8
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <TM_MFRC522_AntennaOn>:

void TM_MFRC522_AntennaOn(void) {
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
	uint8_t temp;

	temp = TM_MFRC522_ReadRegister(MFRC522_REG_TX_CONTROL);
 80017ba:	2014      	movs	r0, #20
 80017bc:	f7ff ff78 	bl	80016b0 <TM_MFRC522_ReadRegister>
 80017c0:	4603      	mov	r3, r0
 80017c2:	71fb      	strb	r3, [r7, #7]
	if (!(temp & 0x03)) {
 80017c4:	79fb      	ldrb	r3, [r7, #7]
 80017c6:	f003 0303 	and.w	r3, r3, #3
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d103      	bne.n	80017d6 <TM_MFRC522_AntennaOn+0x22>
		TM_MFRC522_SetBitMask(MFRC522_REG_TX_CONTROL, 0x03);
 80017ce:	2103      	movs	r1, #3
 80017d0:	2014      	movs	r0, #20
 80017d2:	f7ff ffb7 	bl	8001744 <TM_MFRC522_SetBitMask>
	}
}
 80017d6:	bf00      	nop
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}

080017de <TM_MFRC522_Reset>:

void TM_MFRC522_AntennaOff(void) {
	TM_MFRC522_ClearBitMask(MFRC522_REG_TX_CONTROL, 0x03);
}

void TM_MFRC522_Reset(void) {
 80017de:	b580      	push	{r7, lr}
 80017e0:	af00      	add	r7, sp, #0
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_RESETPHASE);
 80017e2:	210f      	movs	r1, #15
 80017e4:	2001      	movs	r0, #1
 80017e6:	f7ff ff1f 	bl	8001628 <TM_MFRC522_WriteRegister>
}
 80017ea:	bf00      	nop
 80017ec:	bd80      	pop	{r7, pc}

080017ee <TM_MFRC522_Request>:

TM_MFRC522_Status_t TM_MFRC522_Request(uint8_t reqMode, uint8_t* TagType) {
 80017ee:	b580      	push	{r7, lr}
 80017f0:	b086      	sub	sp, #24
 80017f2:	af02      	add	r7, sp, #8
 80017f4:	4603      	mov	r3, r0
 80017f6:	6039      	str	r1, [r7, #0]
 80017f8:	71fb      	strb	r3, [r7, #7]
	TM_MFRC522_Status_t status;  
	uint16_t backBits;			//The received data bits

	TM_MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x07);		//TxLastBists = BitFramingReg[2..0]	???
 80017fa:	2107      	movs	r1, #7
 80017fc:	200d      	movs	r0, #13
 80017fe:	f7ff ff13 	bl	8001628 <TM_MFRC522_WriteRegister>

	TagType[0] = reqMode;
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	79fa      	ldrb	r2, [r7, #7]
 8001806:	701a      	strb	r2, [r3, #0]
	status = TM_MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8001808:	f107 030c 	add.w	r3, r7, #12
 800180c:	9300      	str	r3, [sp, #0]
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	2201      	movs	r2, #1
 8001812:	6839      	ldr	r1, [r7, #0]
 8001814:	200c      	movs	r0, #12
 8001816:	f000 f80f 	bl	8001838 <TM_MFRC522_ToCard>
 800181a:	4603      	mov	r3, r0
 800181c:	73fb      	strb	r3, [r7, #15]

	if ((status != MI_OK) || (backBits != 0x10)) {    
 800181e:	7bfb      	ldrb	r3, [r7, #15]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d102      	bne.n	800182a <TM_MFRC522_Request+0x3c>
 8001824:	89bb      	ldrh	r3, [r7, #12]
 8001826:	2b10      	cmp	r3, #16
 8001828:	d001      	beq.n	800182e <TM_MFRC522_Request+0x40>
		status = MI_ERR;
 800182a:	2302      	movs	r3, #2
 800182c:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 800182e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001830:	4618      	mov	r0, r3
 8001832:	3710      	adds	r7, #16
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}

08001838 <TM_MFRC522_ToCard>:

TM_MFRC522_Status_t TM_MFRC522_ToCard(uint8_t command, uint8_t* sendData, uint8_t sendLen, uint8_t* backData, uint16_t* backLen) {
 8001838:	b590      	push	{r4, r7, lr}
 800183a:	b087      	sub	sp, #28
 800183c:	af00      	add	r7, sp, #0
 800183e:	60b9      	str	r1, [r7, #8]
 8001840:	607b      	str	r3, [r7, #4]
 8001842:	4603      	mov	r3, r0
 8001844:	73fb      	strb	r3, [r7, #15]
 8001846:	4613      	mov	r3, r2
 8001848:	73bb      	strb	r3, [r7, #14]
	TM_MFRC522_Status_t status = MI_ERR;
 800184a:	2302      	movs	r3, #2
 800184c:	75fb      	strb	r3, [r7, #23]
	uint8_t irqEn = 0x00;
 800184e:	2300      	movs	r3, #0
 8001850:	75bb      	strb	r3, [r7, #22]
	uint8_t waitIRq = 0x00;
 8001852:	2300      	movs	r3, #0
 8001854:	757b      	strb	r3, [r7, #21]
	uint8_t lastBits;
	uint8_t n;
	uint16_t i;

	switch (command) {
 8001856:	7bfb      	ldrb	r3, [r7, #15]
 8001858:	2b0c      	cmp	r3, #12
 800185a:	d006      	beq.n	800186a <TM_MFRC522_ToCard+0x32>
 800185c:	2b0e      	cmp	r3, #14
 800185e:	d109      	bne.n	8001874 <TM_MFRC522_ToCard+0x3c>
		case PCD_AUTHENT: {
			irqEn = 0x12;
 8001860:	2312      	movs	r3, #18
 8001862:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x10;
 8001864:	2310      	movs	r3, #16
 8001866:	757b      	strb	r3, [r7, #21]
			break;
 8001868:	e005      	b.n	8001876 <TM_MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE: {
			irqEn = 0x77;
 800186a:	2377      	movs	r3, #119	@ 0x77
 800186c:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x30;
 800186e:	2330      	movs	r3, #48	@ 0x30
 8001870:	757b      	strb	r3, [r7, #21]
			break;
 8001872:	e000      	b.n	8001876 <TM_MFRC522_ToCard+0x3e>
		}
		default:
			break;
 8001874:	bf00      	nop
	}

	TM_MFRC522_WriteRegister(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
 8001876:	7dbb      	ldrb	r3, [r7, #22]
 8001878:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800187c:	b2db      	uxtb	r3, r3
 800187e:	4619      	mov	r1, r3
 8001880:	2002      	movs	r0, #2
 8001882:	f7ff fed1 	bl	8001628 <TM_MFRC522_WriteRegister>
	TM_MFRC522_ClearBitMask(MFRC522_REG_COMM_IRQ, 0x80);
 8001886:	2180      	movs	r1, #128	@ 0x80
 8001888:	2004      	movs	r0, #4
 800188a:	f7ff ff75 	bl	8001778 <TM_MFRC522_ClearBitMask>
	TM_MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);
 800188e:	2180      	movs	r1, #128	@ 0x80
 8001890:	200a      	movs	r0, #10
 8001892:	f7ff ff57 	bl	8001744 <TM_MFRC522_SetBitMask>

	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_IDLE);
 8001896:	2100      	movs	r1, #0
 8001898:	2001      	movs	r0, #1
 800189a:	f7ff fec5 	bl	8001628 <TM_MFRC522_WriteRegister>

	//Writing data to the FIFO
	for (i = 0; i < sendLen; i++) {   
 800189e:	2300      	movs	r3, #0
 80018a0:	827b      	strh	r3, [r7, #18]
 80018a2:	e00a      	b.n	80018ba <TM_MFRC522_ToCard+0x82>
		TM_MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, sendData[i]);    
 80018a4:	8a7b      	ldrh	r3, [r7, #18]
 80018a6:	68ba      	ldr	r2, [r7, #8]
 80018a8:	4413      	add	r3, r2
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	4619      	mov	r1, r3
 80018ae:	2009      	movs	r0, #9
 80018b0:	f7ff feba 	bl	8001628 <TM_MFRC522_WriteRegister>
	for (i = 0; i < sendLen; i++) {   
 80018b4:	8a7b      	ldrh	r3, [r7, #18]
 80018b6:	3301      	adds	r3, #1
 80018b8:	827b      	strh	r3, [r7, #18]
 80018ba:	7bbb      	ldrb	r3, [r7, #14]
 80018bc:	b29b      	uxth	r3, r3
 80018be:	8a7a      	ldrh	r2, [r7, #18]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d3ef      	bcc.n	80018a4 <TM_MFRC522_ToCard+0x6c>
	}

	//Execute the command
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, command);
 80018c4:	7bfb      	ldrb	r3, [r7, #15]
 80018c6:	4619      	mov	r1, r3
 80018c8:	2001      	movs	r0, #1
 80018ca:	f7ff fead 	bl	8001628 <TM_MFRC522_WriteRegister>
	if (command == PCD_TRANSCEIVE) {    
 80018ce:	7bfb      	ldrb	r3, [r7, #15]
 80018d0:	2b0c      	cmp	r3, #12
 80018d2:	d103      	bne.n	80018dc <TM_MFRC522_ToCard+0xa4>
		TM_MFRC522_SetBitMask(MFRC522_REG_BIT_FRAMING, 0x80);		//StartSend=1,transmission of data starts  
 80018d4:	2180      	movs	r1, #128	@ 0x80
 80018d6:	200d      	movs	r0, #13
 80018d8:	f7ff ff34 	bl	8001744 <TM_MFRC522_SetBitMask>
	}   

	//Waiting to receive data to complete
	i = 2000;	//i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
 80018dc:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80018e0:	827b      	strh	r3, [r7, #18]
	do {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = TM_MFRC522_ReadRegister(MFRC522_REG_COMM_IRQ);
 80018e2:	2004      	movs	r0, #4
 80018e4:	f7ff fee4 	bl	80016b0 <TM_MFRC522_ReadRegister>
 80018e8:	4603      	mov	r3, r0
 80018ea:	753b      	strb	r3, [r7, #20]
		i--;
 80018ec:	8a7b      	ldrh	r3, [r7, #18]
 80018ee:	3b01      	subs	r3, #1
 80018f0:	827b      	strh	r3, [r7, #18]
	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 80018f2:	8a7b      	ldrh	r3, [r7, #18]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d00a      	beq.n	800190e <TM_MFRC522_ToCard+0xd6>
 80018f8:	7d3b      	ldrb	r3, [r7, #20]
 80018fa:	f003 0301 	and.w	r3, r3, #1
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d105      	bne.n	800190e <TM_MFRC522_ToCard+0xd6>
 8001902:	7d3a      	ldrb	r2, [r7, #20]
 8001904:	7d7b      	ldrb	r3, [r7, #21]
 8001906:	4013      	ands	r3, r2
 8001908:	b2db      	uxtb	r3, r3
 800190a:	2b00      	cmp	r3, #0
 800190c:	d0e9      	beq.n	80018e2 <TM_MFRC522_ToCard+0xaa>

	TM_MFRC522_ClearBitMask(MFRC522_REG_BIT_FRAMING, 0x80);			//StartSend=0
 800190e:	2180      	movs	r1, #128	@ 0x80
 8001910:	200d      	movs	r0, #13
 8001912:	f7ff ff31 	bl	8001778 <TM_MFRC522_ClearBitMask>

	if (i != 0)  {
 8001916:	8a7b      	ldrh	r3, [r7, #18]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d057      	beq.n	80019cc <TM_MFRC522_ToCard+0x194>
		if (!(TM_MFRC522_ReadRegister(MFRC522_REG_ERROR) & 0x1B)) {
 800191c:	2006      	movs	r0, #6
 800191e:	f7ff fec7 	bl	80016b0 <TM_MFRC522_ReadRegister>
 8001922:	4603      	mov	r3, r0
 8001924:	f003 031b 	and.w	r3, r3, #27
 8001928:	2b00      	cmp	r3, #0
 800192a:	d14d      	bne.n	80019c8 <TM_MFRC522_ToCard+0x190>
			status = MI_OK;
 800192c:	2300      	movs	r3, #0
 800192e:	75fb      	strb	r3, [r7, #23]
			if (n & irqEn & 0x01) {   
 8001930:	7d3a      	ldrb	r2, [r7, #20]
 8001932:	7dbb      	ldrb	r3, [r7, #22]
 8001934:	4013      	ands	r3, r2
 8001936:	b2db      	uxtb	r3, r3
 8001938:	f003 0301 	and.w	r3, r3, #1
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <TM_MFRC522_ToCard+0x10c>
				status = MI_NOTAGERR;			
 8001940:	2301      	movs	r3, #1
 8001942:	75fb      	strb	r3, [r7, #23]
			}

			if (command == PCD_TRANSCEIVE) {
 8001944:	7bfb      	ldrb	r3, [r7, #15]
 8001946:	2b0c      	cmp	r3, #12
 8001948:	d140      	bne.n	80019cc <TM_MFRC522_ToCard+0x194>
				n = TM_MFRC522_ReadRegister(MFRC522_REG_FIFO_LEVEL);
 800194a:	200a      	movs	r0, #10
 800194c:	f7ff feb0 	bl	80016b0 <TM_MFRC522_ReadRegister>
 8001950:	4603      	mov	r3, r0
 8001952:	753b      	strb	r3, [r7, #20]
				lastBits = TM_MFRC522_ReadRegister(MFRC522_REG_CONTROL) & 0x07;
 8001954:	200c      	movs	r0, #12
 8001956:	f7ff feab 	bl	80016b0 <TM_MFRC522_ReadRegister>
 800195a:	4603      	mov	r3, r0
 800195c:	f003 0307 	and.w	r3, r3, #7
 8001960:	747b      	strb	r3, [r7, #17]
				if (lastBits) {   
 8001962:	7c7b      	ldrb	r3, [r7, #17]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d00b      	beq.n	8001980 <TM_MFRC522_ToCard+0x148>
					*backLen = (n - 1) * 8 + lastBits;   
 8001968:	7d3b      	ldrb	r3, [r7, #20]
 800196a:	3b01      	subs	r3, #1
 800196c:	b29b      	uxth	r3, r3
 800196e:	00db      	lsls	r3, r3, #3
 8001970:	b29a      	uxth	r2, r3
 8001972:	7c7b      	ldrb	r3, [r7, #17]
 8001974:	b29b      	uxth	r3, r3
 8001976:	4413      	add	r3, r2
 8001978:	b29a      	uxth	r2, r3
 800197a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800197c:	801a      	strh	r2, [r3, #0]
 800197e:	e005      	b.n	800198c <TM_MFRC522_ToCard+0x154>
				} else {   
					*backLen = n * 8;   
 8001980:	7d3b      	ldrb	r3, [r7, #20]
 8001982:	b29b      	uxth	r3, r3
 8001984:	00db      	lsls	r3, r3, #3
 8001986:	b29a      	uxth	r2, r3
 8001988:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800198a:	801a      	strh	r2, [r3, #0]
				}

				if (n == 0) {   
 800198c:	7d3b      	ldrb	r3, [r7, #20]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d101      	bne.n	8001996 <TM_MFRC522_ToCard+0x15e>
					n = 1;    
 8001992:	2301      	movs	r3, #1
 8001994:	753b      	strb	r3, [r7, #20]
				}
				if (n > MFRC522_MAX_LEN) {   
 8001996:	7d3b      	ldrb	r3, [r7, #20]
 8001998:	2b10      	cmp	r3, #16
 800199a:	d901      	bls.n	80019a0 <TM_MFRC522_ToCard+0x168>
					n = MFRC522_MAX_LEN;   
 800199c:	2310      	movs	r3, #16
 800199e:	753b      	strb	r3, [r7, #20]
				}

				//Reading the received data in FIFO
				for (i = 0; i < n; i++) {   
 80019a0:	2300      	movs	r3, #0
 80019a2:	827b      	strh	r3, [r7, #18]
 80019a4:	e00a      	b.n	80019bc <TM_MFRC522_ToCard+0x184>
					backData[i] = TM_MFRC522_ReadRegister(MFRC522_REG_FIFO_DATA);    
 80019a6:	8a7b      	ldrh	r3, [r7, #18]
 80019a8:	687a      	ldr	r2, [r7, #4]
 80019aa:	18d4      	adds	r4, r2, r3
 80019ac:	2009      	movs	r0, #9
 80019ae:	f7ff fe7f 	bl	80016b0 <TM_MFRC522_ReadRegister>
 80019b2:	4603      	mov	r3, r0
 80019b4:	7023      	strb	r3, [r4, #0]
				for (i = 0; i < n; i++) {   
 80019b6:	8a7b      	ldrh	r3, [r7, #18]
 80019b8:	3301      	adds	r3, #1
 80019ba:	827b      	strh	r3, [r7, #18]
 80019bc:	7d3b      	ldrb	r3, [r7, #20]
 80019be:	b29b      	uxth	r3, r3
 80019c0:	8a7a      	ldrh	r2, [r7, #18]
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d3ef      	bcc.n	80019a6 <TM_MFRC522_ToCard+0x16e>
 80019c6:	e001      	b.n	80019cc <TM_MFRC522_ToCard+0x194>
				}
			}
		} else {   
			status = MI_ERR;  
 80019c8:	2302      	movs	r3, #2
 80019ca:	75fb      	strb	r3, [r7, #23]
		}
	}

	return status;
 80019cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	371c      	adds	r7, #28
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd90      	pop	{r4, r7, pc}

080019d6 <TM_MFRC522_Anticoll>:

TM_MFRC522_Status_t TM_MFRC522_Anticoll(uint8_t* serNum) {
 80019d6:	b580      	push	{r7, lr}
 80019d8:	b086      	sub	sp, #24
 80019da:	af02      	add	r7, sp, #8
 80019dc:	6078      	str	r0, [r7, #4]
	TM_MFRC522_Status_t status;
	uint8_t i;
	uint8_t serNumCheck = 0;
 80019de:	2300      	movs	r3, #0
 80019e0:	737b      	strb	r3, [r7, #13]
	uint16_t unLen;

	TM_MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x00);		//TxLastBists = BitFramingReg[2..0]
 80019e2:	2100      	movs	r1, #0
 80019e4:	200d      	movs	r0, #13
 80019e6:	f7ff fe1f 	bl	8001628 <TM_MFRC522_WriteRegister>

	serNum[0] = PICC_ANTICOLL;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2293      	movs	r2, #147	@ 0x93
 80019ee:	701a      	strb	r2, [r3, #0]
	serNum[1] = 0x20;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	3301      	adds	r3, #1
 80019f4:	2220      	movs	r2, #32
 80019f6:	701a      	strb	r2, [r3, #0]
	status = TM_MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 80019f8:	f107 030a 	add.w	r3, r7, #10
 80019fc:	9300      	str	r3, [sp, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2202      	movs	r2, #2
 8001a02:	6879      	ldr	r1, [r7, #4]
 8001a04:	200c      	movs	r0, #12
 8001a06:	f7ff ff17 	bl	8001838 <TM_MFRC522_ToCard>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	73fb      	strb	r3, [r7, #15]

	if (status == MI_OK) {
 8001a0e:	7bfb      	ldrb	r3, [r7, #15]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d118      	bne.n	8001a46 <TM_MFRC522_Anticoll+0x70>
		//Check card serial number
		for (i = 0; i < 4; i++) {   
 8001a14:	2300      	movs	r3, #0
 8001a16:	73bb      	strb	r3, [r7, #14]
 8001a18:	e009      	b.n	8001a2e <TM_MFRC522_Anticoll+0x58>
			serNumCheck ^= serNum[i];
 8001a1a:	7bbb      	ldrb	r3, [r7, #14]
 8001a1c:	687a      	ldr	r2, [r7, #4]
 8001a1e:	4413      	add	r3, r2
 8001a20:	781a      	ldrb	r2, [r3, #0]
 8001a22:	7b7b      	ldrb	r3, [r7, #13]
 8001a24:	4053      	eors	r3, r2
 8001a26:	737b      	strb	r3, [r7, #13]
		for (i = 0; i < 4; i++) {   
 8001a28:	7bbb      	ldrb	r3, [r7, #14]
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	73bb      	strb	r3, [r7, #14]
 8001a2e:	7bbb      	ldrb	r3, [r7, #14]
 8001a30:	2b03      	cmp	r3, #3
 8001a32:	d9f2      	bls.n	8001a1a <TM_MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i]) {   
 8001a34:	7bbb      	ldrb	r3, [r7, #14]
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	4413      	add	r3, r2
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	7b7a      	ldrb	r2, [r7, #13]
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d001      	beq.n	8001a46 <TM_MFRC522_Anticoll+0x70>
			status = MI_ERR;    
 8001a42:	2302      	movs	r3, #2
 8001a44:	73fb      	strb	r3, [r7, #15]
		}
	}
	return status;
 8001a46:	7bfb      	ldrb	r3, [r7, #15]
} 
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3710      	adds	r7, #16
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <TM_MFRC522_CalculateCRC>:

void TM_MFRC522_CalculateCRC(uint8_t*  pIndata, uint8_t len, uint8_t* pOutData) {
 8001a50:	b590      	push	{r4, r7, lr}
 8001a52:	b087      	sub	sp, #28
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	460b      	mov	r3, r1
 8001a5a:	607a      	str	r2, [r7, #4]
 8001a5c:	72fb      	strb	r3, [r7, #11]
	uint8_t i, n;

	TM_MFRC522_ClearBitMask(MFRC522_REG_DIV_IRQ, 0x04);				//CRCIrq = 0
 8001a5e:	2104      	movs	r1, #4
 8001a60:	2005      	movs	r0, #5
 8001a62:	f7ff fe89 	bl	8001778 <TM_MFRC522_ClearBitMask>
	TM_MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);			//Clear the FIFO pointer
 8001a66:	2180      	movs	r1, #128	@ 0x80
 8001a68:	200a      	movs	r0, #10
 8001a6a:	f7ff fe6b 	bl	8001744 <TM_MFRC522_SetBitMask>
	//Write_MFRC522(CommandReg, PCD_IDLE);

	//Writing data to the FIFO	
	for (i = 0; i < len; i++) {   
 8001a6e:	2300      	movs	r3, #0
 8001a70:	75fb      	strb	r3, [r7, #23]
 8001a72:	e00a      	b.n	8001a8a <TM_MFRC522_CalculateCRC+0x3a>
		TM_MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, *(pIndata+i));   
 8001a74:	7dfb      	ldrb	r3, [r7, #23]
 8001a76:	68fa      	ldr	r2, [r7, #12]
 8001a78:	4413      	add	r3, r2
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	2009      	movs	r0, #9
 8001a80:	f7ff fdd2 	bl	8001628 <TM_MFRC522_WriteRegister>
	for (i = 0; i < len; i++) {   
 8001a84:	7dfb      	ldrb	r3, [r7, #23]
 8001a86:	3301      	adds	r3, #1
 8001a88:	75fb      	strb	r3, [r7, #23]
 8001a8a:	7dfa      	ldrb	r2, [r7, #23]
 8001a8c:	7afb      	ldrb	r3, [r7, #11]
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d3f0      	bcc.n	8001a74 <TM_MFRC522_CalculateCRC+0x24>
	}
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_CALCCRC);
 8001a92:	2103      	movs	r1, #3
 8001a94:	2001      	movs	r0, #1
 8001a96:	f7ff fdc7 	bl	8001628 <TM_MFRC522_WriteRegister>

	//Wait CRC calculation is complete
	i = 0xFF;
 8001a9a:	23ff      	movs	r3, #255	@ 0xff
 8001a9c:	75fb      	strb	r3, [r7, #23]
	do {
		n = TM_MFRC522_ReadRegister(MFRC522_REG_DIV_IRQ);
 8001a9e:	2005      	movs	r0, #5
 8001aa0:	f7ff fe06 	bl	80016b0 <TM_MFRC522_ReadRegister>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	75bb      	strb	r3, [r7, #22]
		i--;
 8001aa8:	7dfb      	ldrb	r3, [r7, #23]
 8001aaa:	3b01      	subs	r3, #1
 8001aac:	75fb      	strb	r3, [r7, #23]
	} while ((i!=0) && !(n&0x04));			//CRCIrq = 1
 8001aae:	7dfb      	ldrb	r3, [r7, #23]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d004      	beq.n	8001abe <TM_MFRC522_CalculateCRC+0x6e>
 8001ab4:	7dbb      	ldrb	r3, [r7, #22]
 8001ab6:	f003 0304 	and.w	r3, r3, #4
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d0ef      	beq.n	8001a9e <TM_MFRC522_CalculateCRC+0x4e>

	//Read CRC calculation result
	pOutData[0] = TM_MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_L);
 8001abe:	2022      	movs	r0, #34	@ 0x22
 8001ac0:	f7ff fdf6 	bl	80016b0 <TM_MFRC522_ReadRegister>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	701a      	strb	r2, [r3, #0]
	pOutData[1] = TM_MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_M);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	1c5c      	adds	r4, r3, #1
 8001ad0:	2021      	movs	r0, #33	@ 0x21
 8001ad2:	f7ff fded 	bl	80016b0 <TM_MFRC522_ReadRegister>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	7023      	strb	r3, [r4, #0]
}
 8001ada:	bf00      	nop
 8001adc:	371c      	adds	r7, #28
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd90      	pop	{r4, r7, pc}

08001ae2 <TM_MFRC522_Halt>:
	}

	return status;
}

void TM_MFRC522_Halt(void) {
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b084      	sub	sp, #16
 8001ae6:	af02      	add	r7, sp, #8
	uint16_t unLen;
	uint8_t buff[4]; 

	buff[0] = PICC_HALT;
 8001ae8:	2350      	movs	r3, #80	@ 0x50
 8001aea:	703b      	strb	r3, [r7, #0]
	buff[1] = 0;
 8001aec:	2300      	movs	r3, #0
 8001aee:	707b      	strb	r3, [r7, #1]
	TM_MFRC522_CalculateCRC(buff, 2, &buff[2]);
 8001af0:	463b      	mov	r3, r7
 8001af2:	1c9a      	adds	r2, r3, #2
 8001af4:	463b      	mov	r3, r7
 8001af6:	2102      	movs	r1, #2
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7ff ffa9 	bl	8001a50 <TM_MFRC522_CalculateCRC>

	TM_MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff, &unLen);
 8001afe:	463a      	mov	r2, r7
 8001b00:	4639      	mov	r1, r7
 8001b02:	1dbb      	adds	r3, r7, #6
 8001b04:	9300      	str	r3, [sp, #0]
 8001b06:	4613      	mov	r3, r2
 8001b08:	2204      	movs	r2, #4
 8001b0a:	200c      	movs	r0, #12
 8001b0c:	f7ff fe94 	bl	8001838 <TM_MFRC522_ToCard>
}
 8001b10:	bf00      	nop
 8001b12:	3708      	adds	r7, #8
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001b18:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b50 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b1c:	f7ff fd26 	bl	800156c <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b20:	480c      	ldr	r0, [pc, #48]	@ (8001b54 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b22:	490d      	ldr	r1, [pc, #52]	@ (8001b58 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b24:	4a0d      	ldr	r2, [pc, #52]	@ (8001b5c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b28:	e002      	b.n	8001b30 <LoopCopyDataInit>

08001b2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b2e:	3304      	adds	r3, #4

08001b30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b34:	d3f9      	bcc.n	8001b2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b36:	4a0a      	ldr	r2, [pc, #40]	@ (8001b60 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b38:	4c0a      	ldr	r4, [pc, #40]	@ (8001b64 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b3c:	e001      	b.n	8001b42 <LoopFillZerobss>

08001b3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b40:	3204      	adds	r2, #4

08001b42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b44:	d3fb      	bcc.n	8001b3e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001b46:	f004 f98f 	bl	8005e68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b4a:	f7ff f8e5 	bl	8000d18 <main>
  bx  lr    
 8001b4e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001b50:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001b54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b58:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001b5c:	0800759c 	.word	0x0800759c
  ldr r2, =_sbss
 8001b60:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001b64:	20000a34 	.word	0x20000a34

08001b68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b68:	e7fe      	b.n	8001b68 <ADC_IRQHandler>
	...

08001b6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b70:	4b0e      	ldr	r3, [pc, #56]	@ (8001bac <HAL_Init+0x40>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a0d      	ldr	r2, [pc, #52]	@ (8001bac <HAL_Init+0x40>)
 8001b76:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b7c:	4b0b      	ldr	r3, [pc, #44]	@ (8001bac <HAL_Init+0x40>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a0a      	ldr	r2, [pc, #40]	@ (8001bac <HAL_Init+0x40>)
 8001b82:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b88:	4b08      	ldr	r3, [pc, #32]	@ (8001bac <HAL_Init+0x40>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a07      	ldr	r2, [pc, #28]	@ (8001bac <HAL_Init+0x40>)
 8001b8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b94:	2003      	movs	r0, #3
 8001b96:	f000 f94f 	bl	8001e38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b9a:	200f      	movs	r0, #15
 8001b9c:	f000 f808 	bl	8001bb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ba0:	f7ff fb3e 	bl	8001220 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	40023c00 	.word	0x40023c00

08001bb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bb8:	4b12      	ldr	r3, [pc, #72]	@ (8001c04 <HAL_InitTick+0x54>)
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	4b12      	ldr	r3, [pc, #72]	@ (8001c08 <HAL_InitTick+0x58>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f000 f967 	bl	8001ea2 <HAL_SYSTICK_Config>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e00e      	b.n	8001bfc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2b0f      	cmp	r3, #15
 8001be2:	d80a      	bhi.n	8001bfa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001be4:	2200      	movs	r2, #0
 8001be6:	6879      	ldr	r1, [r7, #4]
 8001be8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bec:	f000 f92f 	bl	8001e4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bf0:	4a06      	ldr	r2, [pc, #24]	@ (8001c0c <HAL_InitTick+0x5c>)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	e000      	b.n	8001bfc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3708      	adds	r7, #8
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	2000000c 	.word	0x2000000c
 8001c08:	20000014 	.word	0x20000014
 8001c0c:	20000010 	.word	0x20000010

08001c10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c14:	4b06      	ldr	r3, [pc, #24]	@ (8001c30 <HAL_IncTick+0x20>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	461a      	mov	r2, r3
 8001c1a:	4b06      	ldr	r3, [pc, #24]	@ (8001c34 <HAL_IncTick+0x24>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4413      	add	r3, r2
 8001c20:	4a04      	ldr	r2, [pc, #16]	@ (8001c34 <HAL_IncTick+0x24>)
 8001c22:	6013      	str	r3, [r2, #0]
}
 8001c24:	bf00      	nop
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	20000014 	.word	0x20000014
 8001c34:	200008e8 	.word	0x200008e8

08001c38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c3c:	4b03      	ldr	r3, [pc, #12]	@ (8001c4c <HAL_GetTick+0x14>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	200008e8 	.word	0x200008e8

08001c50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c58:	f7ff ffee 	bl	8001c38 <HAL_GetTick>
 8001c5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c68:	d005      	beq.n	8001c76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c6a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c94 <HAL_Delay+0x44>)
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	461a      	mov	r2, r3
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	4413      	add	r3, r2
 8001c74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c76:	bf00      	nop
 8001c78:	f7ff ffde 	bl	8001c38 <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	68fa      	ldr	r2, [r7, #12]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d8f7      	bhi.n	8001c78 <HAL_Delay+0x28>
  {
  }
}
 8001c88:	bf00      	nop
 8001c8a:	bf00      	nop
 8001c8c:	3710      	adds	r7, #16
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	20000014 	.word	0x20000014

08001c98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b085      	sub	sp, #20
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f003 0307 	and.w	r3, r3, #7
 8001ca6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ca8:	4b0c      	ldr	r3, [pc, #48]	@ (8001cdc <__NVIC_SetPriorityGrouping+0x44>)
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cae:	68ba      	ldr	r2, [r7, #8]
 8001cb0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cc0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001cc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cca:	4a04      	ldr	r2, [pc, #16]	@ (8001cdc <__NVIC_SetPriorityGrouping+0x44>)
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	60d3      	str	r3, [r2, #12]
}
 8001cd0:	bf00      	nop
 8001cd2:	3714      	adds	r7, #20
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr
 8001cdc:	e000ed00 	.word	0xe000ed00

08001ce0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ce4:	4b04      	ldr	r3, [pc, #16]	@ (8001cf8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	0a1b      	lsrs	r3, r3, #8
 8001cea:	f003 0307 	and.w	r3, r3, #7
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr
 8001cf8:	e000ed00 	.word	0xe000ed00

08001cfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	4603      	mov	r3, r0
 8001d04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	db0b      	blt.n	8001d26 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d0e:	79fb      	ldrb	r3, [r7, #7]
 8001d10:	f003 021f 	and.w	r2, r3, #31
 8001d14:	4907      	ldr	r1, [pc, #28]	@ (8001d34 <__NVIC_EnableIRQ+0x38>)
 8001d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1a:	095b      	lsrs	r3, r3, #5
 8001d1c:	2001      	movs	r0, #1
 8001d1e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d26:	bf00      	nop
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	e000e100 	.word	0xe000e100

08001d38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	4603      	mov	r3, r0
 8001d40:	6039      	str	r1, [r7, #0]
 8001d42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	db0a      	blt.n	8001d62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	b2da      	uxtb	r2, r3
 8001d50:	490c      	ldr	r1, [pc, #48]	@ (8001d84 <__NVIC_SetPriority+0x4c>)
 8001d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d56:	0112      	lsls	r2, r2, #4
 8001d58:	b2d2      	uxtb	r2, r2
 8001d5a:	440b      	add	r3, r1
 8001d5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d60:	e00a      	b.n	8001d78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	b2da      	uxtb	r2, r3
 8001d66:	4908      	ldr	r1, [pc, #32]	@ (8001d88 <__NVIC_SetPriority+0x50>)
 8001d68:	79fb      	ldrb	r3, [r7, #7]
 8001d6a:	f003 030f 	and.w	r3, r3, #15
 8001d6e:	3b04      	subs	r3, #4
 8001d70:	0112      	lsls	r2, r2, #4
 8001d72:	b2d2      	uxtb	r2, r2
 8001d74:	440b      	add	r3, r1
 8001d76:	761a      	strb	r2, [r3, #24]
}
 8001d78:	bf00      	nop
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr
 8001d84:	e000e100 	.word	0xe000e100
 8001d88:	e000ed00 	.word	0xe000ed00

08001d8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b089      	sub	sp, #36	@ 0x24
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	60f8      	str	r0, [r7, #12]
 8001d94:	60b9      	str	r1, [r7, #8]
 8001d96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	f003 0307 	and.w	r3, r3, #7
 8001d9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	f1c3 0307 	rsb	r3, r3, #7
 8001da6:	2b04      	cmp	r3, #4
 8001da8:	bf28      	it	cs
 8001daa:	2304      	movcs	r3, #4
 8001dac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	3304      	adds	r3, #4
 8001db2:	2b06      	cmp	r3, #6
 8001db4:	d902      	bls.n	8001dbc <NVIC_EncodePriority+0x30>
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	3b03      	subs	r3, #3
 8001dba:	e000      	b.n	8001dbe <NVIC_EncodePriority+0x32>
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dca:	43da      	mvns	r2, r3
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	401a      	ands	r2, r3
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dd4:	f04f 31ff 	mov.w	r1, #4294967295
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	fa01 f303 	lsl.w	r3, r1, r3
 8001dde:	43d9      	mvns	r1, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de4:	4313      	orrs	r3, r2
         );
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3724      	adds	r7, #36	@ 0x24
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
	...

08001df4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	3b01      	subs	r3, #1
 8001e00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e04:	d301      	bcc.n	8001e0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e06:	2301      	movs	r3, #1
 8001e08:	e00f      	b.n	8001e2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e0a:	4a0a      	ldr	r2, [pc, #40]	@ (8001e34 <SysTick_Config+0x40>)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	3b01      	subs	r3, #1
 8001e10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e12:	210f      	movs	r1, #15
 8001e14:	f04f 30ff 	mov.w	r0, #4294967295
 8001e18:	f7ff ff8e 	bl	8001d38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e1c:	4b05      	ldr	r3, [pc, #20]	@ (8001e34 <SysTick_Config+0x40>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e22:	4b04      	ldr	r3, [pc, #16]	@ (8001e34 <SysTick_Config+0x40>)
 8001e24:	2207      	movs	r2, #7
 8001e26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	e000e010 	.word	0xe000e010

08001e38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f7ff ff29 	bl	8001c98 <__NVIC_SetPriorityGrouping>
}
 8001e46:	bf00      	nop
 8001e48:	3708      	adds	r7, #8
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}

08001e4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	b086      	sub	sp, #24
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	4603      	mov	r3, r0
 8001e56:	60b9      	str	r1, [r7, #8]
 8001e58:	607a      	str	r2, [r7, #4]
 8001e5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e60:	f7ff ff3e 	bl	8001ce0 <__NVIC_GetPriorityGrouping>
 8001e64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	68b9      	ldr	r1, [r7, #8]
 8001e6a:	6978      	ldr	r0, [r7, #20]
 8001e6c:	f7ff ff8e 	bl	8001d8c <NVIC_EncodePriority>
 8001e70:	4602      	mov	r2, r0
 8001e72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e76:	4611      	mov	r1, r2
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7ff ff5d 	bl	8001d38 <__NVIC_SetPriority>
}
 8001e7e:	bf00      	nop
 8001e80:	3718      	adds	r7, #24
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b082      	sub	sp, #8
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7ff ff31 	bl	8001cfc <__NVIC_EnableIRQ>
}
 8001e9a:	bf00      	nop
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b082      	sub	sp, #8
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f7ff ffa2 	bl	8001df4 <SysTick_Config>
 8001eb0:	4603      	mov	r3, r0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	b084      	sub	sp, #16
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ec6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001ec8:	f7ff feb6 	bl	8001c38 <HAL_GetTick>
 8001ecc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d008      	beq.n	8001eec <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2280      	movs	r2, #128	@ 0x80
 8001ede:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e052      	b.n	8001f92 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f022 0216 	bic.w	r2, r2, #22
 8001efa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	695a      	ldr	r2, [r3, #20]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001f0a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d103      	bne.n	8001f1c <HAL_DMA_Abort+0x62>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d007      	beq.n	8001f2c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f022 0208 	bic.w	r2, r2, #8
 8001f2a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f022 0201 	bic.w	r2, r2, #1
 8001f3a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f3c:	e013      	b.n	8001f66 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f3e:	f7ff fe7b 	bl	8001c38 <HAL_GetTick>
 8001f42:	4602      	mov	r2, r0
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	2b05      	cmp	r3, #5
 8001f4a:	d90c      	bls.n	8001f66 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2220      	movs	r2, #32
 8001f50:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2203      	movs	r2, #3
 8001f56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e015      	b.n	8001f92 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0301 	and.w	r3, r3, #1
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d1e4      	bne.n	8001f3e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f78:	223f      	movs	r2, #63	@ 0x3f
 8001f7a:	409a      	lsls	r2, r3
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2201      	movs	r2, #1
 8001f84:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3710      	adds	r7, #16
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	b083      	sub	sp, #12
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d004      	beq.n	8001fb8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2280      	movs	r2, #128	@ 0x80
 8001fb2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e00c      	b.n	8001fd2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2205      	movs	r2, #5
 8001fbc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f022 0201 	bic.w	r2, r2, #1
 8001fce:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001fd0:	2300      	movs	r3, #0
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	370c      	adds	r7, #12
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
	...

08001fe0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b089      	sub	sp, #36	@ 0x24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001fea:	2300      	movs	r3, #0
 8001fec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	61fb      	str	r3, [r7, #28]
 8001ffa:	e177      	b.n	80022ec <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	fa02 f303 	lsl.w	r3, r2, r3
 8002004:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	697a      	ldr	r2, [r7, #20]
 800200c:	4013      	ands	r3, r2
 800200e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002010:	693a      	ldr	r2, [r7, #16]
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	429a      	cmp	r2, r3
 8002016:	f040 8166 	bne.w	80022e6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f003 0303 	and.w	r3, r3, #3
 8002022:	2b01      	cmp	r3, #1
 8002024:	d005      	beq.n	8002032 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800202e:	2b02      	cmp	r3, #2
 8002030:	d130      	bne.n	8002094 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	2203      	movs	r2, #3
 800203e:	fa02 f303 	lsl.w	r3, r2, r3
 8002042:	43db      	mvns	r3, r3
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	4013      	ands	r3, r2
 8002048:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	68da      	ldr	r2, [r3, #12]
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	005b      	lsls	r3, r3, #1
 8002052:	fa02 f303 	lsl.w	r3, r2, r3
 8002056:	69ba      	ldr	r2, [r7, #24]
 8002058:	4313      	orrs	r3, r2
 800205a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	69ba      	ldr	r2, [r7, #24]
 8002060:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002068:	2201      	movs	r2, #1
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	fa02 f303 	lsl.w	r3, r2, r3
 8002070:	43db      	mvns	r3, r3
 8002072:	69ba      	ldr	r2, [r7, #24]
 8002074:	4013      	ands	r3, r2
 8002076:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	091b      	lsrs	r3, r3, #4
 800207e:	f003 0201 	and.w	r2, r3, #1
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	fa02 f303 	lsl.w	r3, r2, r3
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	4313      	orrs	r3, r2
 800208c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f003 0303 	and.w	r3, r3, #3
 800209c:	2b03      	cmp	r3, #3
 800209e:	d017      	beq.n	80020d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	005b      	lsls	r3, r3, #1
 80020aa:	2203      	movs	r2, #3
 80020ac:	fa02 f303 	lsl.w	r3, r2, r3
 80020b0:	43db      	mvns	r3, r3
 80020b2:	69ba      	ldr	r2, [r7, #24]
 80020b4:	4013      	ands	r3, r2
 80020b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	689a      	ldr	r2, [r3, #8]
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	005b      	lsls	r3, r3, #1
 80020c0:	fa02 f303 	lsl.w	r3, r2, r3
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f003 0303 	and.w	r3, r3, #3
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d123      	bne.n	8002124 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	08da      	lsrs	r2, r3, #3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	3208      	adds	r2, #8
 80020e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	f003 0307 	and.w	r3, r3, #7
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	220f      	movs	r2, #15
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	43db      	mvns	r3, r3
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	4013      	ands	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	691a      	ldr	r2, [r3, #16]
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	f003 0307 	and.w	r3, r3, #7
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	fa02 f303 	lsl.w	r3, r2, r3
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	4313      	orrs	r3, r2
 8002114:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	08da      	lsrs	r2, r3, #3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	3208      	adds	r2, #8
 800211e:	69b9      	ldr	r1, [r7, #24]
 8002120:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	005b      	lsls	r3, r3, #1
 800212e:	2203      	movs	r2, #3
 8002130:	fa02 f303 	lsl.w	r3, r2, r3
 8002134:	43db      	mvns	r3, r3
 8002136:	69ba      	ldr	r2, [r7, #24]
 8002138:	4013      	ands	r3, r2
 800213a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f003 0203 	and.w	r2, r3, #3
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	fa02 f303 	lsl.w	r3, r2, r3
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	4313      	orrs	r3, r2
 8002150:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002160:	2b00      	cmp	r3, #0
 8002162:	f000 80c0 	beq.w	80022e6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002166:	2300      	movs	r3, #0
 8002168:	60fb      	str	r3, [r7, #12]
 800216a:	4b66      	ldr	r3, [pc, #408]	@ (8002304 <HAL_GPIO_Init+0x324>)
 800216c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800216e:	4a65      	ldr	r2, [pc, #404]	@ (8002304 <HAL_GPIO_Init+0x324>)
 8002170:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002174:	6453      	str	r3, [r2, #68]	@ 0x44
 8002176:	4b63      	ldr	r3, [pc, #396]	@ (8002304 <HAL_GPIO_Init+0x324>)
 8002178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800217a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800217e:	60fb      	str	r3, [r7, #12]
 8002180:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002182:	4a61      	ldr	r2, [pc, #388]	@ (8002308 <HAL_GPIO_Init+0x328>)
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	089b      	lsrs	r3, r3, #2
 8002188:	3302      	adds	r3, #2
 800218a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800218e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	f003 0303 	and.w	r3, r3, #3
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	220f      	movs	r2, #15
 800219a:	fa02 f303 	lsl.w	r3, r2, r3
 800219e:	43db      	mvns	r3, r3
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	4013      	ands	r3, r2
 80021a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a58      	ldr	r2, [pc, #352]	@ (800230c <HAL_GPIO_Init+0x32c>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d037      	beq.n	800221e <HAL_GPIO_Init+0x23e>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a57      	ldr	r2, [pc, #348]	@ (8002310 <HAL_GPIO_Init+0x330>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d031      	beq.n	800221a <HAL_GPIO_Init+0x23a>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a56      	ldr	r2, [pc, #344]	@ (8002314 <HAL_GPIO_Init+0x334>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d02b      	beq.n	8002216 <HAL_GPIO_Init+0x236>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a55      	ldr	r2, [pc, #340]	@ (8002318 <HAL_GPIO_Init+0x338>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d025      	beq.n	8002212 <HAL_GPIO_Init+0x232>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a54      	ldr	r2, [pc, #336]	@ (800231c <HAL_GPIO_Init+0x33c>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d01f      	beq.n	800220e <HAL_GPIO_Init+0x22e>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a53      	ldr	r2, [pc, #332]	@ (8002320 <HAL_GPIO_Init+0x340>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d019      	beq.n	800220a <HAL_GPIO_Init+0x22a>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a52      	ldr	r2, [pc, #328]	@ (8002324 <HAL_GPIO_Init+0x344>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d013      	beq.n	8002206 <HAL_GPIO_Init+0x226>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a51      	ldr	r2, [pc, #324]	@ (8002328 <HAL_GPIO_Init+0x348>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d00d      	beq.n	8002202 <HAL_GPIO_Init+0x222>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a50      	ldr	r2, [pc, #320]	@ (800232c <HAL_GPIO_Init+0x34c>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d007      	beq.n	80021fe <HAL_GPIO_Init+0x21e>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a4f      	ldr	r2, [pc, #316]	@ (8002330 <HAL_GPIO_Init+0x350>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d101      	bne.n	80021fa <HAL_GPIO_Init+0x21a>
 80021f6:	2309      	movs	r3, #9
 80021f8:	e012      	b.n	8002220 <HAL_GPIO_Init+0x240>
 80021fa:	230a      	movs	r3, #10
 80021fc:	e010      	b.n	8002220 <HAL_GPIO_Init+0x240>
 80021fe:	2308      	movs	r3, #8
 8002200:	e00e      	b.n	8002220 <HAL_GPIO_Init+0x240>
 8002202:	2307      	movs	r3, #7
 8002204:	e00c      	b.n	8002220 <HAL_GPIO_Init+0x240>
 8002206:	2306      	movs	r3, #6
 8002208:	e00a      	b.n	8002220 <HAL_GPIO_Init+0x240>
 800220a:	2305      	movs	r3, #5
 800220c:	e008      	b.n	8002220 <HAL_GPIO_Init+0x240>
 800220e:	2304      	movs	r3, #4
 8002210:	e006      	b.n	8002220 <HAL_GPIO_Init+0x240>
 8002212:	2303      	movs	r3, #3
 8002214:	e004      	b.n	8002220 <HAL_GPIO_Init+0x240>
 8002216:	2302      	movs	r3, #2
 8002218:	e002      	b.n	8002220 <HAL_GPIO_Init+0x240>
 800221a:	2301      	movs	r3, #1
 800221c:	e000      	b.n	8002220 <HAL_GPIO_Init+0x240>
 800221e:	2300      	movs	r3, #0
 8002220:	69fa      	ldr	r2, [r7, #28]
 8002222:	f002 0203 	and.w	r2, r2, #3
 8002226:	0092      	lsls	r2, r2, #2
 8002228:	4093      	lsls	r3, r2
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	4313      	orrs	r3, r2
 800222e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002230:	4935      	ldr	r1, [pc, #212]	@ (8002308 <HAL_GPIO_Init+0x328>)
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	089b      	lsrs	r3, r3, #2
 8002236:	3302      	adds	r3, #2
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800223e:	4b3d      	ldr	r3, [pc, #244]	@ (8002334 <HAL_GPIO_Init+0x354>)
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	43db      	mvns	r3, r3
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	4013      	ands	r3, r2
 800224c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d003      	beq.n	8002262 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800225a:	69ba      	ldr	r2, [r7, #24]
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	4313      	orrs	r3, r2
 8002260:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002262:	4a34      	ldr	r2, [pc, #208]	@ (8002334 <HAL_GPIO_Init+0x354>)
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002268:	4b32      	ldr	r3, [pc, #200]	@ (8002334 <HAL_GPIO_Init+0x354>)
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	43db      	mvns	r3, r3
 8002272:	69ba      	ldr	r2, [r7, #24]
 8002274:	4013      	ands	r3, r2
 8002276:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d003      	beq.n	800228c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	4313      	orrs	r3, r2
 800228a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800228c:	4a29      	ldr	r2, [pc, #164]	@ (8002334 <HAL_GPIO_Init+0x354>)
 800228e:	69bb      	ldr	r3, [r7, #24]
 8002290:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002292:	4b28      	ldr	r3, [pc, #160]	@ (8002334 <HAL_GPIO_Init+0x354>)
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	43db      	mvns	r3, r3
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	4013      	ands	r3, r2
 80022a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d003      	beq.n	80022b6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022b6:	4a1f      	ldr	r2, [pc, #124]	@ (8002334 <HAL_GPIO_Init+0x354>)
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022bc:	4b1d      	ldr	r3, [pc, #116]	@ (8002334 <HAL_GPIO_Init+0x354>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	43db      	mvns	r3, r3
 80022c6:	69ba      	ldr	r2, [r7, #24]
 80022c8:	4013      	ands	r3, r2
 80022ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d003      	beq.n	80022e0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	4313      	orrs	r3, r2
 80022de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022e0:	4a14      	ldr	r2, [pc, #80]	@ (8002334 <HAL_GPIO_Init+0x354>)
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	3301      	adds	r3, #1
 80022ea:	61fb      	str	r3, [r7, #28]
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	2b0f      	cmp	r3, #15
 80022f0:	f67f ae84 	bls.w	8001ffc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022f4:	bf00      	nop
 80022f6:	bf00      	nop
 80022f8:	3724      	adds	r7, #36	@ 0x24
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	40023800 	.word	0x40023800
 8002308:	40013800 	.word	0x40013800
 800230c:	40020000 	.word	0x40020000
 8002310:	40020400 	.word	0x40020400
 8002314:	40020800 	.word	0x40020800
 8002318:	40020c00 	.word	0x40020c00
 800231c:	40021000 	.word	0x40021000
 8002320:	40021400 	.word	0x40021400
 8002324:	40021800 	.word	0x40021800
 8002328:	40021c00 	.word	0x40021c00
 800232c:	40022000 	.word	0x40022000
 8002330:	40022400 	.word	0x40022400
 8002334:	40013c00 	.word	0x40013c00

08002338 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	460b      	mov	r3, r1
 8002342:	807b      	strh	r3, [r7, #2]
 8002344:	4613      	mov	r3, r2
 8002346:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002348:	787b      	ldrb	r3, [r7, #1]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d003      	beq.n	8002356 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800234e:	887a      	ldrh	r2, [r7, #2]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002354:	e003      	b.n	800235e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002356:	887b      	ldrh	r3, [r7, #2]
 8002358:	041a      	lsls	r2, r3, #16
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	619a      	str	r2, [r3, #24]
}
 800235e:	bf00      	nop
 8002360:	370c      	adds	r7, #12
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
	...

0800236c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d101      	bne.n	800237e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e12b      	b.n	80025d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002384:	b2db      	uxtb	r3, r3
 8002386:	2b00      	cmp	r3, #0
 8002388:	d106      	bne.n	8002398 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f7fe ff72 	bl	800127c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2224      	movs	r2, #36	@ 0x24
 800239c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f022 0201 	bic.w	r2, r2, #1
 80023ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80023be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80023ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80023d0:	f001 feac 	bl	800412c <HAL_RCC_GetPCLK1Freq>
 80023d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	4a81      	ldr	r2, [pc, #516]	@ (80025e0 <HAL_I2C_Init+0x274>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d807      	bhi.n	80023f0 <HAL_I2C_Init+0x84>
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	4a80      	ldr	r2, [pc, #512]	@ (80025e4 <HAL_I2C_Init+0x278>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	bf94      	ite	ls
 80023e8:	2301      	movls	r3, #1
 80023ea:	2300      	movhi	r3, #0
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	e006      	b.n	80023fe <HAL_I2C_Init+0x92>
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	4a7d      	ldr	r2, [pc, #500]	@ (80025e8 <HAL_I2C_Init+0x27c>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	bf94      	ite	ls
 80023f8:	2301      	movls	r3, #1
 80023fa:	2300      	movhi	r3, #0
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d001      	beq.n	8002406 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e0e7      	b.n	80025d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	4a78      	ldr	r2, [pc, #480]	@ (80025ec <HAL_I2C_Init+0x280>)
 800240a:	fba2 2303 	umull	r2, r3, r2, r3
 800240e:	0c9b      	lsrs	r3, r3, #18
 8002410:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	68ba      	ldr	r2, [r7, #8]
 8002422:	430a      	orrs	r2, r1
 8002424:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	6a1b      	ldr	r3, [r3, #32]
 800242c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	4a6a      	ldr	r2, [pc, #424]	@ (80025e0 <HAL_I2C_Init+0x274>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d802      	bhi.n	8002440 <HAL_I2C_Init+0xd4>
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	3301      	adds	r3, #1
 800243e:	e009      	b.n	8002454 <HAL_I2C_Init+0xe8>
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002446:	fb02 f303 	mul.w	r3, r2, r3
 800244a:	4a69      	ldr	r2, [pc, #420]	@ (80025f0 <HAL_I2C_Init+0x284>)
 800244c:	fba2 2303 	umull	r2, r3, r2, r3
 8002450:	099b      	lsrs	r3, r3, #6
 8002452:	3301      	adds	r3, #1
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	6812      	ldr	r2, [r2, #0]
 8002458:	430b      	orrs	r3, r1
 800245a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	69db      	ldr	r3, [r3, #28]
 8002462:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002466:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	495c      	ldr	r1, [pc, #368]	@ (80025e0 <HAL_I2C_Init+0x274>)
 8002470:	428b      	cmp	r3, r1
 8002472:	d819      	bhi.n	80024a8 <HAL_I2C_Init+0x13c>
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	1e59      	subs	r1, r3, #1
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	005b      	lsls	r3, r3, #1
 800247e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002482:	1c59      	adds	r1, r3, #1
 8002484:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002488:	400b      	ands	r3, r1
 800248a:	2b00      	cmp	r3, #0
 800248c:	d00a      	beq.n	80024a4 <HAL_I2C_Init+0x138>
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	1e59      	subs	r1, r3, #1
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	005b      	lsls	r3, r3, #1
 8002498:	fbb1 f3f3 	udiv	r3, r1, r3
 800249c:	3301      	adds	r3, #1
 800249e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024a2:	e051      	b.n	8002548 <HAL_I2C_Init+0x1dc>
 80024a4:	2304      	movs	r3, #4
 80024a6:	e04f      	b.n	8002548 <HAL_I2C_Init+0x1dc>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d111      	bne.n	80024d4 <HAL_I2C_Init+0x168>
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	1e58      	subs	r0, r3, #1
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6859      	ldr	r1, [r3, #4]
 80024b8:	460b      	mov	r3, r1
 80024ba:	005b      	lsls	r3, r3, #1
 80024bc:	440b      	add	r3, r1
 80024be:	fbb0 f3f3 	udiv	r3, r0, r3
 80024c2:	3301      	adds	r3, #1
 80024c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	bf0c      	ite	eq
 80024cc:	2301      	moveq	r3, #1
 80024ce:	2300      	movne	r3, #0
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	e012      	b.n	80024fa <HAL_I2C_Init+0x18e>
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	1e58      	subs	r0, r3, #1
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6859      	ldr	r1, [r3, #4]
 80024dc:	460b      	mov	r3, r1
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	440b      	add	r3, r1
 80024e2:	0099      	lsls	r1, r3, #2
 80024e4:	440b      	add	r3, r1
 80024e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80024ea:	3301      	adds	r3, #1
 80024ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	bf0c      	ite	eq
 80024f4:	2301      	moveq	r3, #1
 80024f6:	2300      	movne	r3, #0
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <HAL_I2C_Init+0x196>
 80024fe:	2301      	movs	r3, #1
 8002500:	e022      	b.n	8002548 <HAL_I2C_Init+0x1dc>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d10e      	bne.n	8002528 <HAL_I2C_Init+0x1bc>
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	1e58      	subs	r0, r3, #1
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6859      	ldr	r1, [r3, #4]
 8002512:	460b      	mov	r3, r1
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	440b      	add	r3, r1
 8002518:	fbb0 f3f3 	udiv	r3, r0, r3
 800251c:	3301      	adds	r3, #1
 800251e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002522:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002526:	e00f      	b.n	8002548 <HAL_I2C_Init+0x1dc>
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	1e58      	subs	r0, r3, #1
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6859      	ldr	r1, [r3, #4]
 8002530:	460b      	mov	r3, r1
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	440b      	add	r3, r1
 8002536:	0099      	lsls	r1, r3, #2
 8002538:	440b      	add	r3, r1
 800253a:	fbb0 f3f3 	udiv	r3, r0, r3
 800253e:	3301      	adds	r3, #1
 8002540:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002544:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002548:	6879      	ldr	r1, [r7, #4]
 800254a:	6809      	ldr	r1, [r1, #0]
 800254c:	4313      	orrs	r3, r2
 800254e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	69da      	ldr	r2, [r3, #28]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6a1b      	ldr	r3, [r3, #32]
 8002562:	431a      	orrs	r2, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	430a      	orrs	r2, r1
 800256a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002576:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	6911      	ldr	r1, [r2, #16]
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	68d2      	ldr	r2, [r2, #12]
 8002582:	4311      	orrs	r1, r2
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	6812      	ldr	r2, [r2, #0]
 8002588:	430b      	orrs	r3, r1
 800258a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	695a      	ldr	r2, [r3, #20]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	699b      	ldr	r3, [r3, #24]
 800259e:	431a      	orrs	r2, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	430a      	orrs	r2, r1
 80025a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f042 0201 	orr.w	r2, r2, #1
 80025b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2200      	movs	r2, #0
 80025bc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2220      	movs	r2, #32
 80025c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2200      	movs	r2, #0
 80025ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2200      	movs	r2, #0
 80025d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80025d4:	2300      	movs	r3, #0
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3710      	adds	r7, #16
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	000186a0 	.word	0x000186a0
 80025e4:	001e847f 	.word	0x001e847f
 80025e8:	003d08ff 	.word	0x003d08ff
 80025ec:	431bde83 	.word	0x431bde83
 80025f0:	10624dd3 	.word	0x10624dd3

080025f4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b088      	sub	sp, #32
 80025f8:	af02      	add	r7, sp, #8
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	607a      	str	r2, [r7, #4]
 80025fe:	461a      	mov	r2, r3
 8002600:	460b      	mov	r3, r1
 8002602:	817b      	strh	r3, [r7, #10]
 8002604:	4613      	mov	r3, r2
 8002606:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002608:	f7ff fb16 	bl	8001c38 <HAL_GetTick>
 800260c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2b20      	cmp	r3, #32
 8002618:	f040 80e0 	bne.w	80027dc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	9300      	str	r3, [sp, #0]
 8002620:	2319      	movs	r3, #25
 8002622:	2201      	movs	r2, #1
 8002624:	4970      	ldr	r1, [pc, #448]	@ (80027e8 <HAL_I2C_Master_Transmit+0x1f4>)
 8002626:	68f8      	ldr	r0, [r7, #12]
 8002628:	f000 fe0e 	bl	8003248 <I2C_WaitOnFlagUntilTimeout>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002632:	2302      	movs	r3, #2
 8002634:	e0d3      	b.n	80027de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800263c:	2b01      	cmp	r3, #1
 800263e:	d101      	bne.n	8002644 <HAL_I2C_Master_Transmit+0x50>
 8002640:	2302      	movs	r3, #2
 8002642:	e0cc      	b.n	80027de <HAL_I2C_Master_Transmit+0x1ea>
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2201      	movs	r2, #1
 8002648:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0301 	and.w	r3, r3, #1
 8002656:	2b01      	cmp	r3, #1
 8002658:	d007      	beq.n	800266a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f042 0201 	orr.w	r2, r2, #1
 8002668:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002678:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2221      	movs	r2, #33	@ 0x21
 800267e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2210      	movs	r2, #16
 8002686:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2200      	movs	r2, #0
 800268e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	893a      	ldrh	r2, [r7, #8]
 800269a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026a0:	b29a      	uxth	r2, r3
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	4a50      	ldr	r2, [pc, #320]	@ (80027ec <HAL_I2C_Master_Transmit+0x1f8>)
 80026aa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80026ac:	8979      	ldrh	r1, [r7, #10]
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	6a3a      	ldr	r2, [r7, #32]
 80026b2:	68f8      	ldr	r0, [r7, #12]
 80026b4:	f000 fbc8 	bl	8002e48 <I2C_MasterRequestWrite>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d001      	beq.n	80026c2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e08d      	b.n	80027de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026c2:	2300      	movs	r3, #0
 80026c4:	613b      	str	r3, [r7, #16]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	695b      	ldr	r3, [r3, #20]
 80026cc:	613b      	str	r3, [r7, #16]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	699b      	ldr	r3, [r3, #24]
 80026d4:	613b      	str	r3, [r7, #16]
 80026d6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80026d8:	e066      	b.n	80027a8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026da:	697a      	ldr	r2, [r7, #20]
 80026dc:	6a39      	ldr	r1, [r7, #32]
 80026de:	68f8      	ldr	r0, [r7, #12]
 80026e0:	f000 fecc 	bl	800347c <I2C_WaitOnTXEFlagUntilTimeout>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d00d      	beq.n	8002706 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ee:	2b04      	cmp	r3, #4
 80026f0:	d107      	bne.n	8002702 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002700:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e06b      	b.n	80027de <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800270a:	781a      	ldrb	r2, [r3, #0]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002716:	1c5a      	adds	r2, r3, #1
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002720:	b29b      	uxth	r3, r3
 8002722:	3b01      	subs	r3, #1
 8002724:	b29a      	uxth	r2, r3
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800272e:	3b01      	subs	r3, #1
 8002730:	b29a      	uxth	r2, r3
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	695b      	ldr	r3, [r3, #20]
 800273c:	f003 0304 	and.w	r3, r3, #4
 8002740:	2b04      	cmp	r3, #4
 8002742:	d11b      	bne.n	800277c <HAL_I2C_Master_Transmit+0x188>
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002748:	2b00      	cmp	r3, #0
 800274a:	d017      	beq.n	800277c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002750:	781a      	ldrb	r2, [r3, #0]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800275c:	1c5a      	adds	r2, r3, #1
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002766:	b29b      	uxth	r3, r3
 8002768:	3b01      	subs	r3, #1
 800276a:	b29a      	uxth	r2, r3
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002774:	3b01      	subs	r3, #1
 8002776:	b29a      	uxth	r2, r3
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800277c:	697a      	ldr	r2, [r7, #20]
 800277e:	6a39      	ldr	r1, [r7, #32]
 8002780:	68f8      	ldr	r0, [r7, #12]
 8002782:	f000 fec3 	bl	800350c <I2C_WaitOnBTFFlagUntilTimeout>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d00d      	beq.n	80027a8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002790:	2b04      	cmp	r3, #4
 8002792:	d107      	bne.n	80027a4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027a2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e01a      	b.n	80027de <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d194      	bne.n	80026da <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2220      	movs	r2, #32
 80027c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2200      	movs	r2, #0
 80027cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80027d8:	2300      	movs	r3, #0
 80027da:	e000      	b.n	80027de <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80027dc:	2302      	movs	r3, #2
  }
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3718      	adds	r7, #24
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	00100002 	.word	0x00100002
 80027ec:	ffff0000 	.word	0xffff0000

080027f0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b088      	sub	sp, #32
 80027f4:	af02      	add	r7, sp, #8
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	4608      	mov	r0, r1
 80027fa:	4611      	mov	r1, r2
 80027fc:	461a      	mov	r2, r3
 80027fe:	4603      	mov	r3, r0
 8002800:	817b      	strh	r3, [r7, #10]
 8002802:	460b      	mov	r3, r1
 8002804:	813b      	strh	r3, [r7, #8]
 8002806:	4613      	mov	r3, r2
 8002808:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800280a:	f7ff fa15 	bl	8001c38 <HAL_GetTick>
 800280e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002816:	b2db      	uxtb	r3, r3
 8002818:	2b20      	cmp	r3, #32
 800281a:	f040 80d9 	bne.w	80029d0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	9300      	str	r3, [sp, #0]
 8002822:	2319      	movs	r3, #25
 8002824:	2201      	movs	r2, #1
 8002826:	496d      	ldr	r1, [pc, #436]	@ (80029dc <HAL_I2C_Mem_Write+0x1ec>)
 8002828:	68f8      	ldr	r0, [r7, #12]
 800282a:	f000 fd0d 	bl	8003248 <I2C_WaitOnFlagUntilTimeout>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d001      	beq.n	8002838 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002834:	2302      	movs	r3, #2
 8002836:	e0cc      	b.n	80029d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800283e:	2b01      	cmp	r3, #1
 8002840:	d101      	bne.n	8002846 <HAL_I2C_Mem_Write+0x56>
 8002842:	2302      	movs	r3, #2
 8002844:	e0c5      	b.n	80029d2 <HAL_I2C_Mem_Write+0x1e2>
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2201      	movs	r2, #1
 800284a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0301 	and.w	r3, r3, #1
 8002858:	2b01      	cmp	r3, #1
 800285a:	d007      	beq.n	800286c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f042 0201 	orr.w	r2, r2, #1
 800286a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800287a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2221      	movs	r2, #33	@ 0x21
 8002880:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2240      	movs	r2, #64	@ 0x40
 8002888:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2200      	movs	r2, #0
 8002890:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	6a3a      	ldr	r2, [r7, #32]
 8002896:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800289c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028a2:	b29a      	uxth	r2, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	4a4d      	ldr	r2, [pc, #308]	@ (80029e0 <HAL_I2C_Mem_Write+0x1f0>)
 80028ac:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80028ae:	88f8      	ldrh	r0, [r7, #6]
 80028b0:	893a      	ldrh	r2, [r7, #8]
 80028b2:	8979      	ldrh	r1, [r7, #10]
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	9301      	str	r3, [sp, #4]
 80028b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028ba:	9300      	str	r3, [sp, #0]
 80028bc:	4603      	mov	r3, r0
 80028be:	68f8      	ldr	r0, [r7, #12]
 80028c0:	f000 fb44 	bl	8002f4c <I2C_RequestMemoryWrite>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d052      	beq.n	8002970 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e081      	b.n	80029d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028ce:	697a      	ldr	r2, [r7, #20]
 80028d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80028d2:	68f8      	ldr	r0, [r7, #12]
 80028d4:	f000 fdd2 	bl	800347c <I2C_WaitOnTXEFlagUntilTimeout>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d00d      	beq.n	80028fa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e2:	2b04      	cmp	r3, #4
 80028e4:	d107      	bne.n	80028f6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e06b      	b.n	80029d2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028fe:	781a      	ldrb	r2, [r3, #0]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800290a:	1c5a      	adds	r2, r3, #1
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002914:	3b01      	subs	r3, #1
 8002916:	b29a      	uxth	r2, r3
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002920:	b29b      	uxth	r3, r3
 8002922:	3b01      	subs	r3, #1
 8002924:	b29a      	uxth	r2, r3
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	695b      	ldr	r3, [r3, #20]
 8002930:	f003 0304 	and.w	r3, r3, #4
 8002934:	2b04      	cmp	r3, #4
 8002936:	d11b      	bne.n	8002970 <HAL_I2C_Mem_Write+0x180>
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800293c:	2b00      	cmp	r3, #0
 800293e:	d017      	beq.n	8002970 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002944:	781a      	ldrb	r2, [r3, #0]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002950:	1c5a      	adds	r2, r3, #1
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800295a:	3b01      	subs	r3, #1
 800295c:	b29a      	uxth	r2, r3
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002966:	b29b      	uxth	r3, r3
 8002968:	3b01      	subs	r3, #1
 800296a:	b29a      	uxth	r2, r3
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002974:	2b00      	cmp	r3, #0
 8002976:	d1aa      	bne.n	80028ce <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002978:	697a      	ldr	r2, [r7, #20]
 800297a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800297c:	68f8      	ldr	r0, [r7, #12]
 800297e:	f000 fdc5 	bl	800350c <I2C_WaitOnBTFFlagUntilTimeout>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d00d      	beq.n	80029a4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800298c:	2b04      	cmp	r3, #4
 800298e:	d107      	bne.n	80029a0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800299e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e016      	b.n	80029d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2220      	movs	r2, #32
 80029b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2200      	movs	r2, #0
 80029c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80029cc:	2300      	movs	r3, #0
 80029ce:	e000      	b.n	80029d2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80029d0:	2302      	movs	r3, #2
  }
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3718      	adds	r7, #24
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	00100002 	.word	0x00100002
 80029e0:	ffff0000 	.word	0xffff0000

080029e4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b08c      	sub	sp, #48	@ 0x30
 80029e8:	af02      	add	r7, sp, #8
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	4608      	mov	r0, r1
 80029ee:	4611      	mov	r1, r2
 80029f0:	461a      	mov	r2, r3
 80029f2:	4603      	mov	r3, r0
 80029f4:	817b      	strh	r3, [r7, #10]
 80029f6:	460b      	mov	r3, r1
 80029f8:	813b      	strh	r3, [r7, #8]
 80029fa:	4613      	mov	r3, r2
 80029fc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80029fe:	f7ff f91b 	bl	8001c38 <HAL_GetTick>
 8002a02:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	2b20      	cmp	r3, #32
 8002a0e:	f040 8214 	bne.w	8002e3a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a14:	9300      	str	r3, [sp, #0]
 8002a16:	2319      	movs	r3, #25
 8002a18:	2201      	movs	r2, #1
 8002a1a:	497b      	ldr	r1, [pc, #492]	@ (8002c08 <HAL_I2C_Mem_Read+0x224>)
 8002a1c:	68f8      	ldr	r0, [r7, #12]
 8002a1e:	f000 fc13 	bl	8003248 <I2C_WaitOnFlagUntilTimeout>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d001      	beq.n	8002a2c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002a28:	2302      	movs	r3, #2
 8002a2a:	e207      	b.n	8002e3c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d101      	bne.n	8002a3a <HAL_I2C_Mem_Read+0x56>
 8002a36:	2302      	movs	r3, #2
 8002a38:	e200      	b.n	8002e3c <HAL_I2C_Mem_Read+0x458>
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0301 	and.w	r3, r3, #1
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d007      	beq.n	8002a60 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f042 0201 	orr.w	r2, r2, #1
 8002a5e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a6e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2222      	movs	r2, #34	@ 0x22
 8002a74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2240      	movs	r2, #64	@ 0x40
 8002a7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2200      	movs	r2, #0
 8002a84:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a8a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002a90:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a96:	b29a      	uxth	r2, r3
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	4a5b      	ldr	r2, [pc, #364]	@ (8002c0c <HAL_I2C_Mem_Read+0x228>)
 8002aa0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002aa2:	88f8      	ldrh	r0, [r7, #6]
 8002aa4:	893a      	ldrh	r2, [r7, #8]
 8002aa6:	8979      	ldrh	r1, [r7, #10]
 8002aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aaa:	9301      	str	r3, [sp, #4]
 8002aac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002aae:	9300      	str	r3, [sp, #0]
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	68f8      	ldr	r0, [r7, #12]
 8002ab4:	f000 fae0 	bl	8003078 <I2C_RequestMemoryRead>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d001      	beq.n	8002ac2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e1bc      	b.n	8002e3c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d113      	bne.n	8002af2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002aca:	2300      	movs	r3, #0
 8002acc:	623b      	str	r3, [r7, #32]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	695b      	ldr	r3, [r3, #20]
 8002ad4:	623b      	str	r3, [r7, #32]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	699b      	ldr	r3, [r3, #24]
 8002adc:	623b      	str	r3, [r7, #32]
 8002ade:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002aee:	601a      	str	r2, [r3, #0]
 8002af0:	e190      	b.n	8002e14 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d11b      	bne.n	8002b32 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b08:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	61fb      	str	r3, [r7, #28]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	695b      	ldr	r3, [r3, #20]
 8002b14:	61fb      	str	r3, [r7, #28]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	699b      	ldr	r3, [r3, #24]
 8002b1c:	61fb      	str	r3, [r7, #28]
 8002b1e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b2e:	601a      	str	r2, [r3, #0]
 8002b30:	e170      	b.n	8002e14 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d11b      	bne.n	8002b72 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b48:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b58:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	61bb      	str	r3, [r7, #24]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	695b      	ldr	r3, [r3, #20]
 8002b64:	61bb      	str	r3, [r7, #24]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	699b      	ldr	r3, [r3, #24]
 8002b6c:	61bb      	str	r3, [r7, #24]
 8002b6e:	69bb      	ldr	r3, [r7, #24]
 8002b70:	e150      	b.n	8002e14 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b72:	2300      	movs	r3, #0
 8002b74:	617b      	str	r3, [r7, #20]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	695b      	ldr	r3, [r3, #20]
 8002b7c:	617b      	str	r3, [r7, #20]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	699b      	ldr	r3, [r3, #24]
 8002b84:	617b      	str	r3, [r7, #20]
 8002b86:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002b88:	e144      	b.n	8002e14 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b8e:	2b03      	cmp	r3, #3
 8002b90:	f200 80f1 	bhi.w	8002d76 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d123      	bne.n	8002be4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b9e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002ba0:	68f8      	ldr	r0, [r7, #12]
 8002ba2:	f000 fcfb 	bl	800359c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d001      	beq.n	8002bb0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e145      	b.n	8002e3c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	691a      	ldr	r2, [r3, #16]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bba:	b2d2      	uxtb	r2, r2
 8002bbc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bc2:	1c5a      	adds	r2, r3, #1
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bcc:	3b01      	subs	r3, #1
 8002bce:	b29a      	uxth	r2, r3
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	3b01      	subs	r3, #1
 8002bdc:	b29a      	uxth	r2, r3
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002be2:	e117      	b.n	8002e14 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	d14e      	bne.n	8002c8a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bee:	9300      	str	r3, [sp, #0]
 8002bf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	4906      	ldr	r1, [pc, #24]	@ (8002c10 <HAL_I2C_Mem_Read+0x22c>)
 8002bf6:	68f8      	ldr	r0, [r7, #12]
 8002bf8:	f000 fb26 	bl	8003248 <I2C_WaitOnFlagUntilTimeout>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d008      	beq.n	8002c14 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e11a      	b.n	8002e3c <HAL_I2C_Mem_Read+0x458>
 8002c06:	bf00      	nop
 8002c08:	00100002 	.word	0x00100002
 8002c0c:	ffff0000 	.word	0xffff0000
 8002c10:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	691a      	ldr	r2, [r3, #16]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c2e:	b2d2      	uxtb	r2, r2
 8002c30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c36:	1c5a      	adds	r2, r3, #1
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c40:	3b01      	subs	r3, #1
 8002c42:	b29a      	uxth	r2, r3
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	3b01      	subs	r3, #1
 8002c50:	b29a      	uxth	r2, r3
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	691a      	ldr	r2, [r3, #16]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c60:	b2d2      	uxtb	r2, r2
 8002c62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c68:	1c5a      	adds	r2, r3, #1
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c72:	3b01      	subs	r3, #1
 8002c74:	b29a      	uxth	r2, r3
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	3b01      	subs	r3, #1
 8002c82:	b29a      	uxth	r2, r3
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002c88:	e0c4      	b.n	8002e14 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c8c:	9300      	str	r3, [sp, #0]
 8002c8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c90:	2200      	movs	r2, #0
 8002c92:	496c      	ldr	r1, [pc, #432]	@ (8002e44 <HAL_I2C_Mem_Read+0x460>)
 8002c94:	68f8      	ldr	r0, [r7, #12]
 8002c96:	f000 fad7 	bl	8003248 <I2C_WaitOnFlagUntilTimeout>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d001      	beq.n	8002ca4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e0cb      	b.n	8002e3c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002cb2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	691a      	ldr	r2, [r3, #16]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cbe:	b2d2      	uxtb	r2, r2
 8002cc0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cc6:	1c5a      	adds	r2, r3, #1
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cd0:	3b01      	subs	r3, #1
 8002cd2:	b29a      	uxth	r2, r3
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	3b01      	subs	r3, #1
 8002ce0:	b29a      	uxth	r2, r3
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce8:	9300      	str	r3, [sp, #0]
 8002cea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cec:	2200      	movs	r2, #0
 8002cee:	4955      	ldr	r1, [pc, #340]	@ (8002e44 <HAL_I2C_Mem_Read+0x460>)
 8002cf0:	68f8      	ldr	r0, [r7, #12]
 8002cf2:	f000 faa9 	bl	8003248 <I2C_WaitOnFlagUntilTimeout>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d001      	beq.n	8002d00 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e09d      	b.n	8002e3c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	691a      	ldr	r2, [r3, #16]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d1a:	b2d2      	uxtb	r2, r2
 8002d1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d22:	1c5a      	adds	r2, r3, #1
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d2c:	3b01      	subs	r3, #1
 8002d2e:	b29a      	uxth	r2, r3
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	3b01      	subs	r3, #1
 8002d3c:	b29a      	uxth	r2, r3
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	691a      	ldr	r2, [r3, #16]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d4c:	b2d2      	uxtb	r2, r2
 8002d4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d54:	1c5a      	adds	r2, r3, #1
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	b29a      	uxth	r2, r3
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	3b01      	subs	r3, #1
 8002d6e:	b29a      	uxth	r2, r3
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002d74:	e04e      	b.n	8002e14 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d78:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002d7a:	68f8      	ldr	r0, [r7, #12]
 8002d7c:	f000 fc0e 	bl	800359c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d001      	beq.n	8002d8a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e058      	b.n	8002e3c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	691a      	ldr	r2, [r3, #16]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d94:	b2d2      	uxtb	r2, r2
 8002d96:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d9c:	1c5a      	adds	r2, r3, #1
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002da6:	3b01      	subs	r3, #1
 8002da8:	b29a      	uxth	r2, r3
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	3b01      	subs	r3, #1
 8002db6:	b29a      	uxth	r2, r3
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	695b      	ldr	r3, [r3, #20]
 8002dc2:	f003 0304 	and.w	r3, r3, #4
 8002dc6:	2b04      	cmp	r3, #4
 8002dc8:	d124      	bne.n	8002e14 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dce:	2b03      	cmp	r3, #3
 8002dd0:	d107      	bne.n	8002de2 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002de0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	691a      	ldr	r2, [r3, #16]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dec:	b2d2      	uxtb	r2, r2
 8002dee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002df4:	1c5a      	adds	r2, r3, #1
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dfe:	3b01      	subs	r3, #1
 8002e00:	b29a      	uxth	r2, r3
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	3b01      	subs	r3, #1
 8002e0e:	b29a      	uxth	r2, r3
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	f47f aeb6 	bne.w	8002b8a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2220      	movs	r2, #32
 8002e22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2200      	movs	r2, #0
 8002e32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002e36:	2300      	movs	r3, #0
 8002e38:	e000      	b.n	8002e3c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002e3a:	2302      	movs	r3, #2
  }
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3728      	adds	r7, #40	@ 0x28
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	00010004 	.word	0x00010004

08002e48 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b088      	sub	sp, #32
 8002e4c:	af02      	add	r7, sp, #8
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	607a      	str	r2, [r7, #4]
 8002e52:	603b      	str	r3, [r7, #0]
 8002e54:	460b      	mov	r3, r1
 8002e56:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e5c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	2b08      	cmp	r3, #8
 8002e62:	d006      	beq.n	8002e72 <I2C_MasterRequestWrite+0x2a>
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d003      	beq.n	8002e72 <I2C_MasterRequestWrite+0x2a>
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002e70:	d108      	bne.n	8002e84 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e80:	601a      	str	r2, [r3, #0]
 8002e82:	e00b      	b.n	8002e9c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e88:	2b12      	cmp	r3, #18
 8002e8a:	d107      	bne.n	8002e9c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e9a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	9300      	str	r3, [sp, #0]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002ea8:	68f8      	ldr	r0, [r7, #12]
 8002eaa:	f000 f9cd 	bl	8003248 <I2C_WaitOnFlagUntilTimeout>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d00d      	beq.n	8002ed0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ebe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ec2:	d103      	bne.n	8002ecc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002eca:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	e035      	b.n	8002f3c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	691b      	ldr	r3, [r3, #16]
 8002ed4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002ed8:	d108      	bne.n	8002eec <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002eda:	897b      	ldrh	r3, [r7, #10]
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	461a      	mov	r2, r3
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002ee8:	611a      	str	r2, [r3, #16]
 8002eea:	e01b      	b.n	8002f24 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002eec:	897b      	ldrh	r3, [r7, #10]
 8002eee:	11db      	asrs	r3, r3, #7
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	f003 0306 	and.w	r3, r3, #6
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	f063 030f 	orn	r3, r3, #15
 8002efc:	b2da      	uxtb	r2, r3
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	490e      	ldr	r1, [pc, #56]	@ (8002f44 <I2C_MasterRequestWrite+0xfc>)
 8002f0a:	68f8      	ldr	r0, [r7, #12]
 8002f0c:	f000 fa16 	bl	800333c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d001      	beq.n	8002f1a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e010      	b.n	8002f3c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002f1a:	897b      	ldrh	r3, [r7, #10]
 8002f1c:	b2da      	uxtb	r2, r3
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	4907      	ldr	r1, [pc, #28]	@ (8002f48 <I2C_MasterRequestWrite+0x100>)
 8002f2a:	68f8      	ldr	r0, [r7, #12]
 8002f2c:	f000 fa06 	bl	800333c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d001      	beq.n	8002f3a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e000      	b.n	8002f3c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002f3a:	2300      	movs	r3, #0
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3718      	adds	r7, #24
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	00010008 	.word	0x00010008
 8002f48:	00010002 	.word	0x00010002

08002f4c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b088      	sub	sp, #32
 8002f50:	af02      	add	r7, sp, #8
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	4608      	mov	r0, r1
 8002f56:	4611      	mov	r1, r2
 8002f58:	461a      	mov	r2, r3
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	817b      	strh	r3, [r7, #10]
 8002f5e:	460b      	mov	r3, r1
 8002f60:	813b      	strh	r3, [r7, #8]
 8002f62:	4613      	mov	r3, r2
 8002f64:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f74:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f78:	9300      	str	r3, [sp, #0]
 8002f7a:	6a3b      	ldr	r3, [r7, #32]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002f82:	68f8      	ldr	r0, [r7, #12]
 8002f84:	f000 f960 	bl	8003248 <I2C_WaitOnFlagUntilTimeout>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d00d      	beq.n	8002faa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f9c:	d103      	bne.n	8002fa6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002fa4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e05f      	b.n	800306a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002faa:	897b      	ldrh	r3, [r7, #10]
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	461a      	mov	r2, r3
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002fb8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fbc:	6a3a      	ldr	r2, [r7, #32]
 8002fbe:	492d      	ldr	r1, [pc, #180]	@ (8003074 <I2C_RequestMemoryWrite+0x128>)
 8002fc0:	68f8      	ldr	r0, [r7, #12]
 8002fc2:	f000 f9bb 	bl	800333c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d001      	beq.n	8002fd0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e04c      	b.n	800306a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	617b      	str	r3, [r7, #20]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	695b      	ldr	r3, [r3, #20]
 8002fda:	617b      	str	r3, [r7, #20]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	699b      	ldr	r3, [r3, #24]
 8002fe2:	617b      	str	r3, [r7, #20]
 8002fe4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fe6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fe8:	6a39      	ldr	r1, [r7, #32]
 8002fea:	68f8      	ldr	r0, [r7, #12]
 8002fec:	f000 fa46 	bl	800347c <I2C_WaitOnTXEFlagUntilTimeout>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d00d      	beq.n	8003012 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ffa:	2b04      	cmp	r3, #4
 8002ffc:	d107      	bne.n	800300e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800300c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e02b      	b.n	800306a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003012:	88fb      	ldrh	r3, [r7, #6]
 8003014:	2b01      	cmp	r3, #1
 8003016:	d105      	bne.n	8003024 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003018:	893b      	ldrh	r3, [r7, #8]
 800301a:	b2da      	uxtb	r2, r3
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	611a      	str	r2, [r3, #16]
 8003022:	e021      	b.n	8003068 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003024:	893b      	ldrh	r3, [r7, #8]
 8003026:	0a1b      	lsrs	r3, r3, #8
 8003028:	b29b      	uxth	r3, r3
 800302a:	b2da      	uxtb	r2, r3
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003032:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003034:	6a39      	ldr	r1, [r7, #32]
 8003036:	68f8      	ldr	r0, [r7, #12]
 8003038:	f000 fa20 	bl	800347c <I2C_WaitOnTXEFlagUntilTimeout>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d00d      	beq.n	800305e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003046:	2b04      	cmp	r3, #4
 8003048:	d107      	bne.n	800305a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003058:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e005      	b.n	800306a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800305e:	893b      	ldrh	r3, [r7, #8]
 8003060:	b2da      	uxtb	r2, r3
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3718      	adds	r7, #24
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	00010002 	.word	0x00010002

08003078 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b088      	sub	sp, #32
 800307c:	af02      	add	r7, sp, #8
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	4608      	mov	r0, r1
 8003082:	4611      	mov	r1, r2
 8003084:	461a      	mov	r2, r3
 8003086:	4603      	mov	r3, r0
 8003088:	817b      	strh	r3, [r7, #10]
 800308a:	460b      	mov	r3, r1
 800308c:	813b      	strh	r3, [r7, #8]
 800308e:	4613      	mov	r3, r2
 8003090:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80030a0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80030b0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030b4:	9300      	str	r3, [sp, #0]
 80030b6:	6a3b      	ldr	r3, [r7, #32]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80030be:	68f8      	ldr	r0, [r7, #12]
 80030c0:	f000 f8c2 	bl	8003248 <I2C_WaitOnFlagUntilTimeout>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d00d      	beq.n	80030e6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80030d8:	d103      	bne.n	80030e2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80030e0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e0aa      	b.n	800323c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80030e6:	897b      	ldrh	r3, [r7, #10]
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	461a      	mov	r2, r3
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80030f4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030f8:	6a3a      	ldr	r2, [r7, #32]
 80030fa:	4952      	ldr	r1, [pc, #328]	@ (8003244 <I2C_RequestMemoryRead+0x1cc>)
 80030fc:	68f8      	ldr	r0, [r7, #12]
 80030fe:	f000 f91d 	bl	800333c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d001      	beq.n	800310c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e097      	b.n	800323c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800310c:	2300      	movs	r3, #0
 800310e:	617b      	str	r3, [r7, #20]
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	695b      	ldr	r3, [r3, #20]
 8003116:	617b      	str	r3, [r7, #20]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	699b      	ldr	r3, [r3, #24]
 800311e:	617b      	str	r3, [r7, #20]
 8003120:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003122:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003124:	6a39      	ldr	r1, [r7, #32]
 8003126:	68f8      	ldr	r0, [r7, #12]
 8003128:	f000 f9a8 	bl	800347c <I2C_WaitOnTXEFlagUntilTimeout>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d00d      	beq.n	800314e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003136:	2b04      	cmp	r3, #4
 8003138:	d107      	bne.n	800314a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003148:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e076      	b.n	800323c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800314e:	88fb      	ldrh	r3, [r7, #6]
 8003150:	2b01      	cmp	r3, #1
 8003152:	d105      	bne.n	8003160 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003154:	893b      	ldrh	r3, [r7, #8]
 8003156:	b2da      	uxtb	r2, r3
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	611a      	str	r2, [r3, #16]
 800315e:	e021      	b.n	80031a4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003160:	893b      	ldrh	r3, [r7, #8]
 8003162:	0a1b      	lsrs	r3, r3, #8
 8003164:	b29b      	uxth	r3, r3
 8003166:	b2da      	uxtb	r2, r3
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800316e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003170:	6a39      	ldr	r1, [r7, #32]
 8003172:	68f8      	ldr	r0, [r7, #12]
 8003174:	f000 f982 	bl	800347c <I2C_WaitOnTXEFlagUntilTimeout>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d00d      	beq.n	800319a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003182:	2b04      	cmp	r3, #4
 8003184:	d107      	bne.n	8003196 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003194:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e050      	b.n	800323c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800319a:	893b      	ldrh	r3, [r7, #8]
 800319c:	b2da      	uxtb	r2, r3
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031a6:	6a39      	ldr	r1, [r7, #32]
 80031a8:	68f8      	ldr	r0, [r7, #12]
 80031aa:	f000 f967 	bl	800347c <I2C_WaitOnTXEFlagUntilTimeout>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d00d      	beq.n	80031d0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031b8:	2b04      	cmp	r3, #4
 80031ba:	d107      	bne.n	80031cc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031ca:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e035      	b.n	800323c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80031de:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80031e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031e2:	9300      	str	r3, [sp, #0]
 80031e4:	6a3b      	ldr	r3, [r7, #32]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80031ec:	68f8      	ldr	r0, [r7, #12]
 80031ee:	f000 f82b 	bl	8003248 <I2C_WaitOnFlagUntilTimeout>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d00d      	beq.n	8003214 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003202:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003206:	d103      	bne.n	8003210 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800320e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003210:	2303      	movs	r3, #3
 8003212:	e013      	b.n	800323c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003214:	897b      	ldrh	r3, [r7, #10]
 8003216:	b2db      	uxtb	r3, r3
 8003218:	f043 0301 	orr.w	r3, r3, #1
 800321c:	b2da      	uxtb	r2, r3
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003226:	6a3a      	ldr	r2, [r7, #32]
 8003228:	4906      	ldr	r1, [pc, #24]	@ (8003244 <I2C_RequestMemoryRead+0x1cc>)
 800322a:	68f8      	ldr	r0, [r7, #12]
 800322c:	f000 f886 	bl	800333c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d001      	beq.n	800323a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e000      	b.n	800323c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800323a:	2300      	movs	r3, #0
}
 800323c:	4618      	mov	r0, r3
 800323e:	3718      	adds	r7, #24
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}
 8003244:	00010002 	.word	0x00010002

08003248 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	603b      	str	r3, [r7, #0]
 8003254:	4613      	mov	r3, r2
 8003256:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003258:	e048      	b.n	80032ec <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003260:	d044      	beq.n	80032ec <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003262:	f7fe fce9 	bl	8001c38 <HAL_GetTick>
 8003266:	4602      	mov	r2, r0
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	683a      	ldr	r2, [r7, #0]
 800326e:	429a      	cmp	r2, r3
 8003270:	d302      	bcc.n	8003278 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d139      	bne.n	80032ec <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	0c1b      	lsrs	r3, r3, #16
 800327c:	b2db      	uxtb	r3, r3
 800327e:	2b01      	cmp	r3, #1
 8003280:	d10d      	bne.n	800329e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	695b      	ldr	r3, [r3, #20]
 8003288:	43da      	mvns	r2, r3
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	4013      	ands	r3, r2
 800328e:	b29b      	uxth	r3, r3
 8003290:	2b00      	cmp	r3, #0
 8003292:	bf0c      	ite	eq
 8003294:	2301      	moveq	r3, #1
 8003296:	2300      	movne	r3, #0
 8003298:	b2db      	uxtb	r3, r3
 800329a:	461a      	mov	r2, r3
 800329c:	e00c      	b.n	80032b8 <I2C_WaitOnFlagUntilTimeout+0x70>
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	699b      	ldr	r3, [r3, #24]
 80032a4:	43da      	mvns	r2, r3
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	4013      	ands	r3, r2
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	bf0c      	ite	eq
 80032b0:	2301      	moveq	r3, #1
 80032b2:	2300      	movne	r3, #0
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	461a      	mov	r2, r3
 80032b8:	79fb      	ldrb	r3, [r7, #7]
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d116      	bne.n	80032ec <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2200      	movs	r2, #0
 80032c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2220      	movs	r2, #32
 80032c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2200      	movs	r2, #0
 80032d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d8:	f043 0220 	orr.w	r2, r3, #32
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2200      	movs	r2, #0
 80032e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e023      	b.n	8003334 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	0c1b      	lsrs	r3, r3, #16
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d10d      	bne.n	8003312 <I2C_WaitOnFlagUntilTimeout+0xca>
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	695b      	ldr	r3, [r3, #20]
 80032fc:	43da      	mvns	r2, r3
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	4013      	ands	r3, r2
 8003302:	b29b      	uxth	r3, r3
 8003304:	2b00      	cmp	r3, #0
 8003306:	bf0c      	ite	eq
 8003308:	2301      	moveq	r3, #1
 800330a:	2300      	movne	r3, #0
 800330c:	b2db      	uxtb	r3, r3
 800330e:	461a      	mov	r2, r3
 8003310:	e00c      	b.n	800332c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	699b      	ldr	r3, [r3, #24]
 8003318:	43da      	mvns	r2, r3
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	4013      	ands	r3, r2
 800331e:	b29b      	uxth	r3, r3
 8003320:	2b00      	cmp	r3, #0
 8003322:	bf0c      	ite	eq
 8003324:	2301      	moveq	r3, #1
 8003326:	2300      	movne	r3, #0
 8003328:	b2db      	uxtb	r3, r3
 800332a:	461a      	mov	r2, r3
 800332c:	79fb      	ldrb	r3, [r7, #7]
 800332e:	429a      	cmp	r2, r3
 8003330:	d093      	beq.n	800325a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003332:	2300      	movs	r3, #0
}
 8003334:	4618      	mov	r0, r3
 8003336:	3710      	adds	r7, #16
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}

0800333c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af00      	add	r7, sp, #0
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	60b9      	str	r1, [r7, #8]
 8003346:	607a      	str	r2, [r7, #4]
 8003348:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800334a:	e071      	b.n	8003430 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	695b      	ldr	r3, [r3, #20]
 8003352:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003356:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800335a:	d123      	bne.n	80033a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800336a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003374:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2200      	movs	r2, #0
 800337a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2220      	movs	r2, #32
 8003380:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2200      	movs	r2, #0
 8003388:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003390:	f043 0204 	orr.w	r2, r3, #4
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2200      	movs	r2, #0
 800339c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e067      	b.n	8003474 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033aa:	d041      	beq.n	8003430 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033ac:	f7fe fc44 	bl	8001c38 <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d302      	bcc.n	80033c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d136      	bne.n	8003430 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	0c1b      	lsrs	r3, r3, #16
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d10c      	bne.n	80033e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	695b      	ldr	r3, [r3, #20]
 80033d2:	43da      	mvns	r2, r3
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	4013      	ands	r3, r2
 80033d8:	b29b      	uxth	r3, r3
 80033da:	2b00      	cmp	r3, #0
 80033dc:	bf14      	ite	ne
 80033de:	2301      	movne	r3, #1
 80033e0:	2300      	moveq	r3, #0
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	e00b      	b.n	80033fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	699b      	ldr	r3, [r3, #24]
 80033ec:	43da      	mvns	r2, r3
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	4013      	ands	r3, r2
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	bf14      	ite	ne
 80033f8:	2301      	movne	r3, #1
 80033fa:	2300      	moveq	r3, #0
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d016      	beq.n	8003430 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2200      	movs	r2, #0
 8003406:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2220      	movs	r2, #32
 800340c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2200      	movs	r2, #0
 8003414:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800341c:	f043 0220 	orr.w	r2, r3, #32
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2200      	movs	r2, #0
 8003428:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e021      	b.n	8003474 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	0c1b      	lsrs	r3, r3, #16
 8003434:	b2db      	uxtb	r3, r3
 8003436:	2b01      	cmp	r3, #1
 8003438:	d10c      	bne.n	8003454 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	695b      	ldr	r3, [r3, #20]
 8003440:	43da      	mvns	r2, r3
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	4013      	ands	r3, r2
 8003446:	b29b      	uxth	r3, r3
 8003448:	2b00      	cmp	r3, #0
 800344a:	bf14      	ite	ne
 800344c:	2301      	movne	r3, #1
 800344e:	2300      	moveq	r3, #0
 8003450:	b2db      	uxtb	r3, r3
 8003452:	e00b      	b.n	800346c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	699b      	ldr	r3, [r3, #24]
 800345a:	43da      	mvns	r2, r3
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	4013      	ands	r3, r2
 8003460:	b29b      	uxth	r3, r3
 8003462:	2b00      	cmp	r3, #0
 8003464:	bf14      	ite	ne
 8003466:	2301      	movne	r3, #1
 8003468:	2300      	moveq	r3, #0
 800346a:	b2db      	uxtb	r3, r3
 800346c:	2b00      	cmp	r3, #0
 800346e:	f47f af6d 	bne.w	800334c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003472:	2300      	movs	r3, #0
}
 8003474:	4618      	mov	r0, r3
 8003476:	3710      	adds	r7, #16
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}

0800347c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	60f8      	str	r0, [r7, #12]
 8003484:	60b9      	str	r1, [r7, #8]
 8003486:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003488:	e034      	b.n	80034f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800348a:	68f8      	ldr	r0, [r7, #12]
 800348c:	f000 f8e3 	bl	8003656 <I2C_IsAcknowledgeFailed>
 8003490:	4603      	mov	r3, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d001      	beq.n	800349a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e034      	b.n	8003504 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034a0:	d028      	beq.n	80034f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034a2:	f7fe fbc9 	bl	8001c38 <HAL_GetTick>
 80034a6:	4602      	mov	r2, r0
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	68ba      	ldr	r2, [r7, #8]
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d302      	bcc.n	80034b8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d11d      	bne.n	80034f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	695b      	ldr	r3, [r3, #20]
 80034be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034c2:	2b80      	cmp	r3, #128	@ 0x80
 80034c4:	d016      	beq.n	80034f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2200      	movs	r2, #0
 80034ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2220      	movs	r2, #32
 80034d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2200      	movs	r2, #0
 80034d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034e0:	f043 0220 	orr.w	r2, r3, #32
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e007      	b.n	8003504 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	695b      	ldr	r3, [r3, #20]
 80034fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034fe:	2b80      	cmp	r3, #128	@ 0x80
 8003500:	d1c3      	bne.n	800348a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003502:	2300      	movs	r3, #0
}
 8003504:	4618      	mov	r0, r3
 8003506:	3710      	adds	r7, #16
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}

0800350c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	60b9      	str	r1, [r7, #8]
 8003516:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003518:	e034      	b.n	8003584 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800351a:	68f8      	ldr	r0, [r7, #12]
 800351c:	f000 f89b 	bl	8003656 <I2C_IsAcknowledgeFailed>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d001      	beq.n	800352a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e034      	b.n	8003594 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003530:	d028      	beq.n	8003584 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003532:	f7fe fb81 	bl	8001c38 <HAL_GetTick>
 8003536:	4602      	mov	r2, r0
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	68ba      	ldr	r2, [r7, #8]
 800353e:	429a      	cmp	r2, r3
 8003540:	d302      	bcc.n	8003548 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d11d      	bne.n	8003584 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	695b      	ldr	r3, [r3, #20]
 800354e:	f003 0304 	and.w	r3, r3, #4
 8003552:	2b04      	cmp	r3, #4
 8003554:	d016      	beq.n	8003584 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2200      	movs	r2, #0
 800355a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2220      	movs	r2, #32
 8003560:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2200      	movs	r2, #0
 8003568:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003570:	f043 0220 	orr.w	r2, r3, #32
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2200      	movs	r2, #0
 800357c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e007      	b.n	8003594 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	695b      	ldr	r3, [r3, #20]
 800358a:	f003 0304 	and.w	r3, r3, #4
 800358e:	2b04      	cmp	r3, #4
 8003590:	d1c3      	bne.n	800351a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003592:	2300      	movs	r3, #0
}
 8003594:	4618      	mov	r0, r3
 8003596:	3710      	adds	r7, #16
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}

0800359c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80035a8:	e049      	b.n	800363e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	695b      	ldr	r3, [r3, #20]
 80035b0:	f003 0310 	and.w	r3, r3, #16
 80035b4:	2b10      	cmp	r3, #16
 80035b6:	d119      	bne.n	80035ec <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f06f 0210 	mvn.w	r2, #16
 80035c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2200      	movs	r2, #0
 80035c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2220      	movs	r2, #32
 80035cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2200      	movs	r2, #0
 80035d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e030      	b.n	800364e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035ec:	f7fe fb24 	bl	8001c38 <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	68ba      	ldr	r2, [r7, #8]
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d302      	bcc.n	8003602 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d11d      	bne.n	800363e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	695b      	ldr	r3, [r3, #20]
 8003608:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800360c:	2b40      	cmp	r3, #64	@ 0x40
 800360e:	d016      	beq.n	800363e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2200      	movs	r2, #0
 8003614:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2220      	movs	r2, #32
 800361a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2200      	movs	r2, #0
 8003622:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800362a:	f043 0220 	orr.w	r2, r3, #32
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2200      	movs	r2, #0
 8003636:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e007      	b.n	800364e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	695b      	ldr	r3, [r3, #20]
 8003644:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003648:	2b40      	cmp	r3, #64	@ 0x40
 800364a:	d1ae      	bne.n	80035aa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800364c:	2300      	movs	r3, #0
}
 800364e:	4618      	mov	r0, r3
 8003650:	3710      	adds	r7, #16
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}

08003656 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003656:	b480      	push	{r7}
 8003658:	b083      	sub	sp, #12
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	695b      	ldr	r3, [r3, #20]
 8003664:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003668:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800366c:	d11b      	bne.n	80036a6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003676:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2200      	movs	r2, #0
 800367c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2220      	movs	r2, #32
 8003682:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003692:	f043 0204 	orr.w	r2, r3, #4
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e000      	b.n	80036a8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80036a6:	2300      	movs	r3, #0
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	370c      	adds	r7, #12
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr

080036b4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	2b20      	cmp	r3, #32
 80036c8:	d129      	bne.n	800371e <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2224      	movs	r2, #36	@ 0x24
 80036ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f022 0201 	bic.w	r2, r2, #1
 80036e0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f022 0210 	bic.w	r2, r2, #16
 80036f0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	683a      	ldr	r2, [r7, #0]
 80036fe:	430a      	orrs	r2, r1
 8003700:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f042 0201 	orr.w	r2, r2, #1
 8003710:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2220      	movs	r2, #32
 8003716:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800371a:	2300      	movs	r3, #0
 800371c:	e000      	b.n	8003720 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800371e:	2302      	movs	r3, #2
  }
}
 8003720:	4618      	mov	r0, r3
 8003722:	370c      	adds	r7, #12
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr

0800372c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800372c:	b480      	push	{r7}
 800372e:	b085      	sub	sp, #20
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003736:	2300      	movs	r3, #0
 8003738:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003740:	b2db      	uxtb	r3, r3
 8003742:	2b20      	cmp	r3, #32
 8003744:	d12a      	bne.n	800379c <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2224      	movs	r2, #36	@ 0x24
 800374a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f022 0201 	bic.w	r2, r2, #1
 800375c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003764:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003766:	89fb      	ldrh	r3, [r7, #14]
 8003768:	f023 030f 	bic.w	r3, r3, #15
 800376c:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	b29a      	uxth	r2, r3
 8003772:	89fb      	ldrh	r3, [r7, #14]
 8003774:	4313      	orrs	r3, r2
 8003776:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	89fa      	ldrh	r2, [r7, #14]
 800377e:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f042 0201 	orr.w	r2, r2, #1
 800378e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2220      	movs	r2, #32
 8003794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8003798:	2300      	movs	r3, #0
 800379a:	e000      	b.n	800379e <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800379c:	2302      	movs	r3, #2
  }
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3714      	adds	r7, #20
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr
	...

080037ac <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80037b2:	2300      	movs	r3, #0
 80037b4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80037b6:	2300      	movs	r3, #0
 80037b8:	603b      	str	r3, [r7, #0]
 80037ba:	4b20      	ldr	r3, [pc, #128]	@ (800383c <HAL_PWREx_EnableOverDrive+0x90>)
 80037bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037be:	4a1f      	ldr	r2, [pc, #124]	@ (800383c <HAL_PWREx_EnableOverDrive+0x90>)
 80037c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80037c6:	4b1d      	ldr	r3, [pc, #116]	@ (800383c <HAL_PWREx_EnableOverDrive+0x90>)
 80037c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037ce:	603b      	str	r3, [r7, #0]
 80037d0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80037d2:	4b1b      	ldr	r3, [pc, #108]	@ (8003840 <HAL_PWREx_EnableOverDrive+0x94>)
 80037d4:	2201      	movs	r2, #1
 80037d6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80037d8:	f7fe fa2e 	bl	8001c38 <HAL_GetTick>
 80037dc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80037de:	e009      	b.n	80037f4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80037e0:	f7fe fa2a 	bl	8001c38 <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80037ee:	d901      	bls.n	80037f4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80037f0:	2303      	movs	r3, #3
 80037f2:	e01f      	b.n	8003834 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80037f4:	4b13      	ldr	r3, [pc, #76]	@ (8003844 <HAL_PWREx_EnableOverDrive+0x98>)
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003800:	d1ee      	bne.n	80037e0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003802:	4b11      	ldr	r3, [pc, #68]	@ (8003848 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003804:	2201      	movs	r2, #1
 8003806:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003808:	f7fe fa16 	bl	8001c38 <HAL_GetTick>
 800380c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800380e:	e009      	b.n	8003824 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003810:	f7fe fa12 	bl	8001c38 <HAL_GetTick>
 8003814:	4602      	mov	r2, r0
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800381e:	d901      	bls.n	8003824 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003820:	2303      	movs	r3, #3
 8003822:	e007      	b.n	8003834 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003824:	4b07      	ldr	r3, [pc, #28]	@ (8003844 <HAL_PWREx_EnableOverDrive+0x98>)
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800382c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003830:	d1ee      	bne.n	8003810 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003832:	2300      	movs	r3, #0
}
 8003834:	4618      	mov	r0, r3
 8003836:	3708      	adds	r7, #8
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}
 800383c:	40023800 	.word	0x40023800
 8003840:	420e0040 	.word	0x420e0040
 8003844:	40007000 	.word	0x40007000
 8003848:	420e0044 	.word	0x420e0044

0800384c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b086      	sub	sp, #24
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d101      	bne.n	800385e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e267      	b.n	8003d2e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0301 	and.w	r3, r3, #1
 8003866:	2b00      	cmp	r3, #0
 8003868:	d075      	beq.n	8003956 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800386a:	4b88      	ldr	r3, [pc, #544]	@ (8003a8c <HAL_RCC_OscConfig+0x240>)
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	f003 030c 	and.w	r3, r3, #12
 8003872:	2b04      	cmp	r3, #4
 8003874:	d00c      	beq.n	8003890 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003876:	4b85      	ldr	r3, [pc, #532]	@ (8003a8c <HAL_RCC_OscConfig+0x240>)
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800387e:	2b08      	cmp	r3, #8
 8003880:	d112      	bne.n	80038a8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003882:	4b82      	ldr	r3, [pc, #520]	@ (8003a8c <HAL_RCC_OscConfig+0x240>)
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800388a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800388e:	d10b      	bne.n	80038a8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003890:	4b7e      	ldr	r3, [pc, #504]	@ (8003a8c <HAL_RCC_OscConfig+0x240>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003898:	2b00      	cmp	r3, #0
 800389a:	d05b      	beq.n	8003954 <HAL_RCC_OscConfig+0x108>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d157      	bne.n	8003954 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e242      	b.n	8003d2e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038b0:	d106      	bne.n	80038c0 <HAL_RCC_OscConfig+0x74>
 80038b2:	4b76      	ldr	r3, [pc, #472]	@ (8003a8c <HAL_RCC_OscConfig+0x240>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a75      	ldr	r2, [pc, #468]	@ (8003a8c <HAL_RCC_OscConfig+0x240>)
 80038b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038bc:	6013      	str	r3, [r2, #0]
 80038be:	e01d      	b.n	80038fc <HAL_RCC_OscConfig+0xb0>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80038c8:	d10c      	bne.n	80038e4 <HAL_RCC_OscConfig+0x98>
 80038ca:	4b70      	ldr	r3, [pc, #448]	@ (8003a8c <HAL_RCC_OscConfig+0x240>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a6f      	ldr	r2, [pc, #444]	@ (8003a8c <HAL_RCC_OscConfig+0x240>)
 80038d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80038d4:	6013      	str	r3, [r2, #0]
 80038d6:	4b6d      	ldr	r3, [pc, #436]	@ (8003a8c <HAL_RCC_OscConfig+0x240>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a6c      	ldr	r2, [pc, #432]	@ (8003a8c <HAL_RCC_OscConfig+0x240>)
 80038dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038e0:	6013      	str	r3, [r2, #0]
 80038e2:	e00b      	b.n	80038fc <HAL_RCC_OscConfig+0xb0>
 80038e4:	4b69      	ldr	r3, [pc, #420]	@ (8003a8c <HAL_RCC_OscConfig+0x240>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a68      	ldr	r2, [pc, #416]	@ (8003a8c <HAL_RCC_OscConfig+0x240>)
 80038ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038ee:	6013      	str	r3, [r2, #0]
 80038f0:	4b66      	ldr	r3, [pc, #408]	@ (8003a8c <HAL_RCC_OscConfig+0x240>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a65      	ldr	r2, [pc, #404]	@ (8003a8c <HAL_RCC_OscConfig+0x240>)
 80038f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d013      	beq.n	800392c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003904:	f7fe f998 	bl	8001c38 <HAL_GetTick>
 8003908:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800390a:	e008      	b.n	800391e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800390c:	f7fe f994 	bl	8001c38 <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	2b64      	cmp	r3, #100	@ 0x64
 8003918:	d901      	bls.n	800391e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	e207      	b.n	8003d2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800391e:	4b5b      	ldr	r3, [pc, #364]	@ (8003a8c <HAL_RCC_OscConfig+0x240>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d0f0      	beq.n	800390c <HAL_RCC_OscConfig+0xc0>
 800392a:	e014      	b.n	8003956 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800392c:	f7fe f984 	bl	8001c38 <HAL_GetTick>
 8003930:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003932:	e008      	b.n	8003946 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003934:	f7fe f980 	bl	8001c38 <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	2b64      	cmp	r3, #100	@ 0x64
 8003940:	d901      	bls.n	8003946 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e1f3      	b.n	8003d2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003946:	4b51      	ldr	r3, [pc, #324]	@ (8003a8c <HAL_RCC_OscConfig+0x240>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d1f0      	bne.n	8003934 <HAL_RCC_OscConfig+0xe8>
 8003952:	e000      	b.n	8003956 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003954:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0302 	and.w	r3, r3, #2
 800395e:	2b00      	cmp	r3, #0
 8003960:	d063      	beq.n	8003a2a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003962:	4b4a      	ldr	r3, [pc, #296]	@ (8003a8c <HAL_RCC_OscConfig+0x240>)
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	f003 030c 	and.w	r3, r3, #12
 800396a:	2b00      	cmp	r3, #0
 800396c:	d00b      	beq.n	8003986 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800396e:	4b47      	ldr	r3, [pc, #284]	@ (8003a8c <HAL_RCC_OscConfig+0x240>)
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003976:	2b08      	cmp	r3, #8
 8003978:	d11c      	bne.n	80039b4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800397a:	4b44      	ldr	r3, [pc, #272]	@ (8003a8c <HAL_RCC_OscConfig+0x240>)
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d116      	bne.n	80039b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003986:	4b41      	ldr	r3, [pc, #260]	@ (8003a8c <HAL_RCC_OscConfig+0x240>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 0302 	and.w	r3, r3, #2
 800398e:	2b00      	cmp	r3, #0
 8003990:	d005      	beq.n	800399e <HAL_RCC_OscConfig+0x152>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	2b01      	cmp	r3, #1
 8003998:	d001      	beq.n	800399e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e1c7      	b.n	8003d2e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800399e:	4b3b      	ldr	r3, [pc, #236]	@ (8003a8c <HAL_RCC_OscConfig+0x240>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	691b      	ldr	r3, [r3, #16]
 80039aa:	00db      	lsls	r3, r3, #3
 80039ac:	4937      	ldr	r1, [pc, #220]	@ (8003a8c <HAL_RCC_OscConfig+0x240>)
 80039ae:	4313      	orrs	r3, r2
 80039b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039b2:	e03a      	b.n	8003a2a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d020      	beq.n	80039fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039bc:	4b34      	ldr	r3, [pc, #208]	@ (8003a90 <HAL_RCC_OscConfig+0x244>)
 80039be:	2201      	movs	r2, #1
 80039c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039c2:	f7fe f939 	bl	8001c38 <HAL_GetTick>
 80039c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039c8:	e008      	b.n	80039dc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039ca:	f7fe f935 	bl	8001c38 <HAL_GetTick>
 80039ce:	4602      	mov	r2, r0
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	2b02      	cmp	r3, #2
 80039d6:	d901      	bls.n	80039dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80039d8:	2303      	movs	r3, #3
 80039da:	e1a8      	b.n	8003d2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039dc:	4b2b      	ldr	r3, [pc, #172]	@ (8003a8c <HAL_RCC_OscConfig+0x240>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0302 	and.w	r3, r3, #2
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d0f0      	beq.n	80039ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039e8:	4b28      	ldr	r3, [pc, #160]	@ (8003a8c <HAL_RCC_OscConfig+0x240>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	691b      	ldr	r3, [r3, #16]
 80039f4:	00db      	lsls	r3, r3, #3
 80039f6:	4925      	ldr	r1, [pc, #148]	@ (8003a8c <HAL_RCC_OscConfig+0x240>)
 80039f8:	4313      	orrs	r3, r2
 80039fa:	600b      	str	r3, [r1, #0]
 80039fc:	e015      	b.n	8003a2a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039fe:	4b24      	ldr	r3, [pc, #144]	@ (8003a90 <HAL_RCC_OscConfig+0x244>)
 8003a00:	2200      	movs	r2, #0
 8003a02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a04:	f7fe f918 	bl	8001c38 <HAL_GetTick>
 8003a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a0a:	e008      	b.n	8003a1e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a0c:	f7fe f914 	bl	8001c38 <HAL_GetTick>
 8003a10:	4602      	mov	r2, r0
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d901      	bls.n	8003a1e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e187      	b.n	8003d2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a1e:	4b1b      	ldr	r3, [pc, #108]	@ (8003a8c <HAL_RCC_OscConfig+0x240>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0302 	and.w	r3, r3, #2
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d1f0      	bne.n	8003a0c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0308 	and.w	r3, r3, #8
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d036      	beq.n	8003aa4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	695b      	ldr	r3, [r3, #20]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d016      	beq.n	8003a6c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a3e:	4b15      	ldr	r3, [pc, #84]	@ (8003a94 <HAL_RCC_OscConfig+0x248>)
 8003a40:	2201      	movs	r2, #1
 8003a42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a44:	f7fe f8f8 	bl	8001c38 <HAL_GetTick>
 8003a48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a4a:	e008      	b.n	8003a5e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a4c:	f7fe f8f4 	bl	8001c38 <HAL_GetTick>
 8003a50:	4602      	mov	r2, r0
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	2b02      	cmp	r3, #2
 8003a58:	d901      	bls.n	8003a5e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	e167      	b.n	8003d2e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a5e:	4b0b      	ldr	r3, [pc, #44]	@ (8003a8c <HAL_RCC_OscConfig+0x240>)
 8003a60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a62:	f003 0302 	and.w	r3, r3, #2
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d0f0      	beq.n	8003a4c <HAL_RCC_OscConfig+0x200>
 8003a6a:	e01b      	b.n	8003aa4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a6c:	4b09      	ldr	r3, [pc, #36]	@ (8003a94 <HAL_RCC_OscConfig+0x248>)
 8003a6e:	2200      	movs	r2, #0
 8003a70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a72:	f7fe f8e1 	bl	8001c38 <HAL_GetTick>
 8003a76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a78:	e00e      	b.n	8003a98 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a7a:	f7fe f8dd 	bl	8001c38 <HAL_GetTick>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	1ad3      	subs	r3, r2, r3
 8003a84:	2b02      	cmp	r3, #2
 8003a86:	d907      	bls.n	8003a98 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003a88:	2303      	movs	r3, #3
 8003a8a:	e150      	b.n	8003d2e <HAL_RCC_OscConfig+0x4e2>
 8003a8c:	40023800 	.word	0x40023800
 8003a90:	42470000 	.word	0x42470000
 8003a94:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a98:	4b88      	ldr	r3, [pc, #544]	@ (8003cbc <HAL_RCC_OscConfig+0x470>)
 8003a9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a9c:	f003 0302 	and.w	r3, r3, #2
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d1ea      	bne.n	8003a7a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0304 	and.w	r3, r3, #4
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	f000 8097 	beq.w	8003be0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ab6:	4b81      	ldr	r3, [pc, #516]	@ (8003cbc <HAL_RCC_OscConfig+0x470>)
 8003ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d10f      	bne.n	8003ae2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	60bb      	str	r3, [r7, #8]
 8003ac6:	4b7d      	ldr	r3, [pc, #500]	@ (8003cbc <HAL_RCC_OscConfig+0x470>)
 8003ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aca:	4a7c      	ldr	r2, [pc, #496]	@ (8003cbc <HAL_RCC_OscConfig+0x470>)
 8003acc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ad0:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ad2:	4b7a      	ldr	r3, [pc, #488]	@ (8003cbc <HAL_RCC_OscConfig+0x470>)
 8003ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ad6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ada:	60bb      	str	r3, [r7, #8]
 8003adc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ae2:	4b77      	ldr	r3, [pc, #476]	@ (8003cc0 <HAL_RCC_OscConfig+0x474>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d118      	bne.n	8003b20 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003aee:	4b74      	ldr	r3, [pc, #464]	@ (8003cc0 <HAL_RCC_OscConfig+0x474>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a73      	ldr	r2, [pc, #460]	@ (8003cc0 <HAL_RCC_OscConfig+0x474>)
 8003af4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003af8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003afa:	f7fe f89d 	bl	8001c38 <HAL_GetTick>
 8003afe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b00:	e008      	b.n	8003b14 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b02:	f7fe f899 	bl	8001c38 <HAL_GetTick>
 8003b06:	4602      	mov	r2, r0
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	2b02      	cmp	r3, #2
 8003b0e:	d901      	bls.n	8003b14 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003b10:	2303      	movs	r3, #3
 8003b12:	e10c      	b.n	8003d2e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b14:	4b6a      	ldr	r3, [pc, #424]	@ (8003cc0 <HAL_RCC_OscConfig+0x474>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d0f0      	beq.n	8003b02 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d106      	bne.n	8003b36 <HAL_RCC_OscConfig+0x2ea>
 8003b28:	4b64      	ldr	r3, [pc, #400]	@ (8003cbc <HAL_RCC_OscConfig+0x470>)
 8003b2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b2c:	4a63      	ldr	r2, [pc, #396]	@ (8003cbc <HAL_RCC_OscConfig+0x470>)
 8003b2e:	f043 0301 	orr.w	r3, r3, #1
 8003b32:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b34:	e01c      	b.n	8003b70 <HAL_RCC_OscConfig+0x324>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	2b05      	cmp	r3, #5
 8003b3c:	d10c      	bne.n	8003b58 <HAL_RCC_OscConfig+0x30c>
 8003b3e:	4b5f      	ldr	r3, [pc, #380]	@ (8003cbc <HAL_RCC_OscConfig+0x470>)
 8003b40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b42:	4a5e      	ldr	r2, [pc, #376]	@ (8003cbc <HAL_RCC_OscConfig+0x470>)
 8003b44:	f043 0304 	orr.w	r3, r3, #4
 8003b48:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b4a:	4b5c      	ldr	r3, [pc, #368]	@ (8003cbc <HAL_RCC_OscConfig+0x470>)
 8003b4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b4e:	4a5b      	ldr	r2, [pc, #364]	@ (8003cbc <HAL_RCC_OscConfig+0x470>)
 8003b50:	f043 0301 	orr.w	r3, r3, #1
 8003b54:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b56:	e00b      	b.n	8003b70 <HAL_RCC_OscConfig+0x324>
 8003b58:	4b58      	ldr	r3, [pc, #352]	@ (8003cbc <HAL_RCC_OscConfig+0x470>)
 8003b5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b5c:	4a57      	ldr	r2, [pc, #348]	@ (8003cbc <HAL_RCC_OscConfig+0x470>)
 8003b5e:	f023 0301 	bic.w	r3, r3, #1
 8003b62:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b64:	4b55      	ldr	r3, [pc, #340]	@ (8003cbc <HAL_RCC_OscConfig+0x470>)
 8003b66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b68:	4a54      	ldr	r2, [pc, #336]	@ (8003cbc <HAL_RCC_OscConfig+0x470>)
 8003b6a:	f023 0304 	bic.w	r3, r3, #4
 8003b6e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d015      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b78:	f7fe f85e 	bl	8001c38 <HAL_GetTick>
 8003b7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b7e:	e00a      	b.n	8003b96 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b80:	f7fe f85a 	bl	8001c38 <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d901      	bls.n	8003b96 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e0cb      	b.n	8003d2e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b96:	4b49      	ldr	r3, [pc, #292]	@ (8003cbc <HAL_RCC_OscConfig+0x470>)
 8003b98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b9a:	f003 0302 	and.w	r3, r3, #2
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d0ee      	beq.n	8003b80 <HAL_RCC_OscConfig+0x334>
 8003ba2:	e014      	b.n	8003bce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ba4:	f7fe f848 	bl	8001c38 <HAL_GetTick>
 8003ba8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003baa:	e00a      	b.n	8003bc2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bac:	f7fe f844 	bl	8001c38 <HAL_GetTick>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d901      	bls.n	8003bc2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e0b5      	b.n	8003d2e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bc2:	4b3e      	ldr	r3, [pc, #248]	@ (8003cbc <HAL_RCC_OscConfig+0x470>)
 8003bc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bc6:	f003 0302 	and.w	r3, r3, #2
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d1ee      	bne.n	8003bac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003bce:	7dfb      	ldrb	r3, [r7, #23]
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d105      	bne.n	8003be0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bd4:	4b39      	ldr	r3, [pc, #228]	@ (8003cbc <HAL_RCC_OscConfig+0x470>)
 8003bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bd8:	4a38      	ldr	r2, [pc, #224]	@ (8003cbc <HAL_RCC_OscConfig+0x470>)
 8003bda:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003bde:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	699b      	ldr	r3, [r3, #24]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	f000 80a1 	beq.w	8003d2c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003bea:	4b34      	ldr	r3, [pc, #208]	@ (8003cbc <HAL_RCC_OscConfig+0x470>)
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	f003 030c 	and.w	r3, r3, #12
 8003bf2:	2b08      	cmp	r3, #8
 8003bf4:	d05c      	beq.n	8003cb0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	699b      	ldr	r3, [r3, #24]
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	d141      	bne.n	8003c82 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bfe:	4b31      	ldr	r3, [pc, #196]	@ (8003cc4 <HAL_RCC_OscConfig+0x478>)
 8003c00:	2200      	movs	r2, #0
 8003c02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c04:	f7fe f818 	bl	8001c38 <HAL_GetTick>
 8003c08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c0a:	e008      	b.n	8003c1e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c0c:	f7fe f814 	bl	8001c38 <HAL_GetTick>
 8003c10:	4602      	mov	r2, r0
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d901      	bls.n	8003c1e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e087      	b.n	8003d2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c1e:	4b27      	ldr	r3, [pc, #156]	@ (8003cbc <HAL_RCC_OscConfig+0x470>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d1f0      	bne.n	8003c0c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	69da      	ldr	r2, [r3, #28]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6a1b      	ldr	r3, [r3, #32]
 8003c32:	431a      	orrs	r2, r3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c38:	019b      	lsls	r3, r3, #6
 8003c3a:	431a      	orrs	r2, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c40:	085b      	lsrs	r3, r3, #1
 8003c42:	3b01      	subs	r3, #1
 8003c44:	041b      	lsls	r3, r3, #16
 8003c46:	431a      	orrs	r2, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c4c:	061b      	lsls	r3, r3, #24
 8003c4e:	491b      	ldr	r1, [pc, #108]	@ (8003cbc <HAL_RCC_OscConfig+0x470>)
 8003c50:	4313      	orrs	r3, r2
 8003c52:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c54:	4b1b      	ldr	r3, [pc, #108]	@ (8003cc4 <HAL_RCC_OscConfig+0x478>)
 8003c56:	2201      	movs	r2, #1
 8003c58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c5a:	f7fd ffed 	bl	8001c38 <HAL_GetTick>
 8003c5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c60:	e008      	b.n	8003c74 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c62:	f7fd ffe9 	bl	8001c38 <HAL_GetTick>
 8003c66:	4602      	mov	r2, r0
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	2b02      	cmp	r3, #2
 8003c6e:	d901      	bls.n	8003c74 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003c70:	2303      	movs	r3, #3
 8003c72:	e05c      	b.n	8003d2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c74:	4b11      	ldr	r3, [pc, #68]	@ (8003cbc <HAL_RCC_OscConfig+0x470>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d0f0      	beq.n	8003c62 <HAL_RCC_OscConfig+0x416>
 8003c80:	e054      	b.n	8003d2c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c82:	4b10      	ldr	r3, [pc, #64]	@ (8003cc4 <HAL_RCC_OscConfig+0x478>)
 8003c84:	2200      	movs	r2, #0
 8003c86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c88:	f7fd ffd6 	bl	8001c38 <HAL_GetTick>
 8003c8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c8e:	e008      	b.n	8003ca2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c90:	f7fd ffd2 	bl	8001c38 <HAL_GetTick>
 8003c94:	4602      	mov	r2, r0
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d901      	bls.n	8003ca2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e045      	b.n	8003d2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ca2:	4b06      	ldr	r3, [pc, #24]	@ (8003cbc <HAL_RCC_OscConfig+0x470>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d1f0      	bne.n	8003c90 <HAL_RCC_OscConfig+0x444>
 8003cae:	e03d      	b.n	8003d2c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	699b      	ldr	r3, [r3, #24]
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d107      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e038      	b.n	8003d2e <HAL_RCC_OscConfig+0x4e2>
 8003cbc:	40023800 	.word	0x40023800
 8003cc0:	40007000 	.word	0x40007000
 8003cc4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003cc8:	4b1b      	ldr	r3, [pc, #108]	@ (8003d38 <HAL_RCC_OscConfig+0x4ec>)
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	699b      	ldr	r3, [r3, #24]
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d028      	beq.n	8003d28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d121      	bne.n	8003d28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d11a      	bne.n	8003d28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cf2:	68fa      	ldr	r2, [r7, #12]
 8003cf4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	687a      	ldr	r2, [r7, #4]
 8003cfc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003cfe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d111      	bne.n	8003d28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d0e:	085b      	lsrs	r3, r3, #1
 8003d10:	3b01      	subs	r3, #1
 8003d12:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d107      	bne.n	8003d28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d22:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d001      	beq.n	8003d2c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e000      	b.n	8003d2e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003d2c:	2300      	movs	r3, #0
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3718      	adds	r7, #24
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	40023800 	.word	0x40023800

08003d3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b084      	sub	sp, #16
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d101      	bne.n	8003d50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e0cc      	b.n	8003eea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d50:	4b68      	ldr	r3, [pc, #416]	@ (8003ef4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 030f 	and.w	r3, r3, #15
 8003d58:	683a      	ldr	r2, [r7, #0]
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d90c      	bls.n	8003d78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d5e:	4b65      	ldr	r3, [pc, #404]	@ (8003ef4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d60:	683a      	ldr	r2, [r7, #0]
 8003d62:	b2d2      	uxtb	r2, r2
 8003d64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d66:	4b63      	ldr	r3, [pc, #396]	@ (8003ef4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 030f 	and.w	r3, r3, #15
 8003d6e:	683a      	ldr	r2, [r7, #0]
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d001      	beq.n	8003d78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e0b8      	b.n	8003eea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0302 	and.w	r3, r3, #2
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d020      	beq.n	8003dc6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0304 	and.w	r3, r3, #4
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d005      	beq.n	8003d9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d90:	4b59      	ldr	r3, [pc, #356]	@ (8003ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	4a58      	ldr	r2, [pc, #352]	@ (8003ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d96:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003d9a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 0308 	and.w	r3, r3, #8
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d005      	beq.n	8003db4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003da8:	4b53      	ldr	r3, [pc, #332]	@ (8003ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	4a52      	ldr	r2, [pc, #328]	@ (8003ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8003dae:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003db2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003db4:	4b50      	ldr	r3, [pc, #320]	@ (8003ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	494d      	ldr	r1, [pc, #308]	@ (8003ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 0301 	and.w	r3, r3, #1
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d044      	beq.n	8003e5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d107      	bne.n	8003dea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dda:	4b47      	ldr	r3, [pc, #284]	@ (8003ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d119      	bne.n	8003e1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e07f      	b.n	8003eea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	2b02      	cmp	r3, #2
 8003df0:	d003      	beq.n	8003dfa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003df6:	2b03      	cmp	r3, #3
 8003df8:	d107      	bne.n	8003e0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dfa:	4b3f      	ldr	r3, [pc, #252]	@ (8003ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d109      	bne.n	8003e1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e06f      	b.n	8003eea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e0a:	4b3b      	ldr	r3, [pc, #236]	@ (8003ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 0302 	and.w	r3, r3, #2
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d101      	bne.n	8003e1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e067      	b.n	8003eea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e1a:	4b37      	ldr	r3, [pc, #220]	@ (8003ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	f023 0203 	bic.w	r2, r3, #3
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	4934      	ldr	r1, [pc, #208]	@ (8003ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e2c:	f7fd ff04 	bl	8001c38 <HAL_GetTick>
 8003e30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e32:	e00a      	b.n	8003e4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e34:	f7fd ff00 	bl	8001c38 <HAL_GetTick>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d901      	bls.n	8003e4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	e04f      	b.n	8003eea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e4a:	4b2b      	ldr	r3, [pc, #172]	@ (8003ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	f003 020c 	and.w	r2, r3, #12
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d1eb      	bne.n	8003e34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e5c:	4b25      	ldr	r3, [pc, #148]	@ (8003ef4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 030f 	and.w	r3, r3, #15
 8003e64:	683a      	ldr	r2, [r7, #0]
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d20c      	bcs.n	8003e84 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e6a:	4b22      	ldr	r3, [pc, #136]	@ (8003ef4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e6c:	683a      	ldr	r2, [r7, #0]
 8003e6e:	b2d2      	uxtb	r2, r2
 8003e70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e72:	4b20      	ldr	r3, [pc, #128]	@ (8003ef4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 030f 	and.w	r3, r3, #15
 8003e7a:	683a      	ldr	r2, [r7, #0]
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d001      	beq.n	8003e84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e032      	b.n	8003eea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 0304 	and.w	r3, r3, #4
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d008      	beq.n	8003ea2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e90:	4b19      	ldr	r3, [pc, #100]	@ (8003ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	4916      	ldr	r1, [pc, #88]	@ (8003ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 0308 	and.w	r3, r3, #8
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d009      	beq.n	8003ec2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003eae:	4b12      	ldr	r3, [pc, #72]	@ (8003ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	691b      	ldr	r3, [r3, #16]
 8003eba:	00db      	lsls	r3, r3, #3
 8003ebc:	490e      	ldr	r1, [pc, #56]	@ (8003ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003ec2:	f000 f821 	bl	8003f08 <HAL_RCC_GetSysClockFreq>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	4b0b      	ldr	r3, [pc, #44]	@ (8003ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	091b      	lsrs	r3, r3, #4
 8003ece:	f003 030f 	and.w	r3, r3, #15
 8003ed2:	490a      	ldr	r1, [pc, #40]	@ (8003efc <HAL_RCC_ClockConfig+0x1c0>)
 8003ed4:	5ccb      	ldrb	r3, [r1, r3]
 8003ed6:	fa22 f303 	lsr.w	r3, r2, r3
 8003eda:	4a09      	ldr	r2, [pc, #36]	@ (8003f00 <HAL_RCC_ClockConfig+0x1c4>)
 8003edc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003ede:	4b09      	ldr	r3, [pc, #36]	@ (8003f04 <HAL_RCC_ClockConfig+0x1c8>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f7fd fe64 	bl	8001bb0 <HAL_InitTick>

  return HAL_OK;
 8003ee8:	2300      	movs	r3, #0
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3710      	adds	r7, #16
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	40023c00 	.word	0x40023c00
 8003ef8:	40023800 	.word	0x40023800
 8003efc:	08007540 	.word	0x08007540
 8003f00:	2000000c 	.word	0x2000000c
 8003f04:	20000010 	.word	0x20000010

08003f08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f0c:	b094      	sub	sp, #80	@ 0x50
 8003f0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003f10:	2300      	movs	r3, #0
 8003f12:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003f14:	2300      	movs	r3, #0
 8003f16:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f20:	4b79      	ldr	r3, [pc, #484]	@ (8004108 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	f003 030c 	and.w	r3, r3, #12
 8003f28:	2b08      	cmp	r3, #8
 8003f2a:	d00d      	beq.n	8003f48 <HAL_RCC_GetSysClockFreq+0x40>
 8003f2c:	2b08      	cmp	r3, #8
 8003f2e:	f200 80e1 	bhi.w	80040f4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d002      	beq.n	8003f3c <HAL_RCC_GetSysClockFreq+0x34>
 8003f36:	2b04      	cmp	r3, #4
 8003f38:	d003      	beq.n	8003f42 <HAL_RCC_GetSysClockFreq+0x3a>
 8003f3a:	e0db      	b.n	80040f4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f3c:	4b73      	ldr	r3, [pc, #460]	@ (800410c <HAL_RCC_GetSysClockFreq+0x204>)
 8003f3e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003f40:	e0db      	b.n	80040fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f42:	4b73      	ldr	r3, [pc, #460]	@ (8004110 <HAL_RCC_GetSysClockFreq+0x208>)
 8003f44:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003f46:	e0d8      	b.n	80040fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f48:	4b6f      	ldr	r3, [pc, #444]	@ (8004108 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f50:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f52:	4b6d      	ldr	r3, [pc, #436]	@ (8004108 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d063      	beq.n	8004026 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f5e:	4b6a      	ldr	r3, [pc, #424]	@ (8004108 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	099b      	lsrs	r3, r3, #6
 8003f64:	2200      	movs	r2, #0
 8003f66:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003f68:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003f6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f70:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f72:	2300      	movs	r3, #0
 8003f74:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f76:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003f7a:	4622      	mov	r2, r4
 8003f7c:	462b      	mov	r3, r5
 8003f7e:	f04f 0000 	mov.w	r0, #0
 8003f82:	f04f 0100 	mov.w	r1, #0
 8003f86:	0159      	lsls	r1, r3, #5
 8003f88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f8c:	0150      	lsls	r0, r2, #5
 8003f8e:	4602      	mov	r2, r0
 8003f90:	460b      	mov	r3, r1
 8003f92:	4621      	mov	r1, r4
 8003f94:	1a51      	subs	r1, r2, r1
 8003f96:	6139      	str	r1, [r7, #16]
 8003f98:	4629      	mov	r1, r5
 8003f9a:	eb63 0301 	sbc.w	r3, r3, r1
 8003f9e:	617b      	str	r3, [r7, #20]
 8003fa0:	f04f 0200 	mov.w	r2, #0
 8003fa4:	f04f 0300 	mov.w	r3, #0
 8003fa8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003fac:	4659      	mov	r1, fp
 8003fae:	018b      	lsls	r3, r1, #6
 8003fb0:	4651      	mov	r1, sl
 8003fb2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003fb6:	4651      	mov	r1, sl
 8003fb8:	018a      	lsls	r2, r1, #6
 8003fba:	4651      	mov	r1, sl
 8003fbc:	ebb2 0801 	subs.w	r8, r2, r1
 8003fc0:	4659      	mov	r1, fp
 8003fc2:	eb63 0901 	sbc.w	r9, r3, r1
 8003fc6:	f04f 0200 	mov.w	r2, #0
 8003fca:	f04f 0300 	mov.w	r3, #0
 8003fce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003fd2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003fd6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003fda:	4690      	mov	r8, r2
 8003fdc:	4699      	mov	r9, r3
 8003fde:	4623      	mov	r3, r4
 8003fe0:	eb18 0303 	adds.w	r3, r8, r3
 8003fe4:	60bb      	str	r3, [r7, #8]
 8003fe6:	462b      	mov	r3, r5
 8003fe8:	eb49 0303 	adc.w	r3, r9, r3
 8003fec:	60fb      	str	r3, [r7, #12]
 8003fee:	f04f 0200 	mov.w	r2, #0
 8003ff2:	f04f 0300 	mov.w	r3, #0
 8003ff6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003ffa:	4629      	mov	r1, r5
 8003ffc:	024b      	lsls	r3, r1, #9
 8003ffe:	4621      	mov	r1, r4
 8004000:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004004:	4621      	mov	r1, r4
 8004006:	024a      	lsls	r2, r1, #9
 8004008:	4610      	mov	r0, r2
 800400a:	4619      	mov	r1, r3
 800400c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800400e:	2200      	movs	r2, #0
 8004010:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004012:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004014:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004018:	f7fc f942 	bl	80002a0 <__aeabi_uldivmod>
 800401c:	4602      	mov	r2, r0
 800401e:	460b      	mov	r3, r1
 8004020:	4613      	mov	r3, r2
 8004022:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004024:	e058      	b.n	80040d8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004026:	4b38      	ldr	r3, [pc, #224]	@ (8004108 <HAL_RCC_GetSysClockFreq+0x200>)
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	099b      	lsrs	r3, r3, #6
 800402c:	2200      	movs	r2, #0
 800402e:	4618      	mov	r0, r3
 8004030:	4611      	mov	r1, r2
 8004032:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004036:	623b      	str	r3, [r7, #32]
 8004038:	2300      	movs	r3, #0
 800403a:	627b      	str	r3, [r7, #36]	@ 0x24
 800403c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004040:	4642      	mov	r2, r8
 8004042:	464b      	mov	r3, r9
 8004044:	f04f 0000 	mov.w	r0, #0
 8004048:	f04f 0100 	mov.w	r1, #0
 800404c:	0159      	lsls	r1, r3, #5
 800404e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004052:	0150      	lsls	r0, r2, #5
 8004054:	4602      	mov	r2, r0
 8004056:	460b      	mov	r3, r1
 8004058:	4641      	mov	r1, r8
 800405a:	ebb2 0a01 	subs.w	sl, r2, r1
 800405e:	4649      	mov	r1, r9
 8004060:	eb63 0b01 	sbc.w	fp, r3, r1
 8004064:	f04f 0200 	mov.w	r2, #0
 8004068:	f04f 0300 	mov.w	r3, #0
 800406c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004070:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004074:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004078:	ebb2 040a 	subs.w	r4, r2, sl
 800407c:	eb63 050b 	sbc.w	r5, r3, fp
 8004080:	f04f 0200 	mov.w	r2, #0
 8004084:	f04f 0300 	mov.w	r3, #0
 8004088:	00eb      	lsls	r3, r5, #3
 800408a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800408e:	00e2      	lsls	r2, r4, #3
 8004090:	4614      	mov	r4, r2
 8004092:	461d      	mov	r5, r3
 8004094:	4643      	mov	r3, r8
 8004096:	18e3      	adds	r3, r4, r3
 8004098:	603b      	str	r3, [r7, #0]
 800409a:	464b      	mov	r3, r9
 800409c:	eb45 0303 	adc.w	r3, r5, r3
 80040a0:	607b      	str	r3, [r7, #4]
 80040a2:	f04f 0200 	mov.w	r2, #0
 80040a6:	f04f 0300 	mov.w	r3, #0
 80040aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80040ae:	4629      	mov	r1, r5
 80040b0:	028b      	lsls	r3, r1, #10
 80040b2:	4621      	mov	r1, r4
 80040b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80040b8:	4621      	mov	r1, r4
 80040ba:	028a      	lsls	r2, r1, #10
 80040bc:	4610      	mov	r0, r2
 80040be:	4619      	mov	r1, r3
 80040c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040c2:	2200      	movs	r2, #0
 80040c4:	61bb      	str	r3, [r7, #24]
 80040c6:	61fa      	str	r2, [r7, #28]
 80040c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040cc:	f7fc f8e8 	bl	80002a0 <__aeabi_uldivmod>
 80040d0:	4602      	mov	r2, r0
 80040d2:	460b      	mov	r3, r1
 80040d4:	4613      	mov	r3, r2
 80040d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80040d8:	4b0b      	ldr	r3, [pc, #44]	@ (8004108 <HAL_RCC_GetSysClockFreq+0x200>)
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	0c1b      	lsrs	r3, r3, #16
 80040de:	f003 0303 	and.w	r3, r3, #3
 80040e2:	3301      	adds	r3, #1
 80040e4:	005b      	lsls	r3, r3, #1
 80040e6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80040e8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80040ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80040f0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80040f2:	e002      	b.n	80040fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80040f4:	4b05      	ldr	r3, [pc, #20]	@ (800410c <HAL_RCC_GetSysClockFreq+0x204>)
 80040f6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80040f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3750      	adds	r7, #80	@ 0x50
 8004100:	46bd      	mov	sp, r7
 8004102:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004106:	bf00      	nop
 8004108:	40023800 	.word	0x40023800
 800410c:	00f42400 	.word	0x00f42400
 8004110:	007a1200 	.word	0x007a1200

08004114 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004114:	b480      	push	{r7}
 8004116:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004118:	4b03      	ldr	r3, [pc, #12]	@ (8004128 <HAL_RCC_GetHCLKFreq+0x14>)
 800411a:	681b      	ldr	r3, [r3, #0]
}
 800411c:	4618      	mov	r0, r3
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr
 8004126:	bf00      	nop
 8004128:	2000000c 	.word	0x2000000c

0800412c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004130:	f7ff fff0 	bl	8004114 <HAL_RCC_GetHCLKFreq>
 8004134:	4602      	mov	r2, r0
 8004136:	4b05      	ldr	r3, [pc, #20]	@ (800414c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	0a9b      	lsrs	r3, r3, #10
 800413c:	f003 0307 	and.w	r3, r3, #7
 8004140:	4903      	ldr	r1, [pc, #12]	@ (8004150 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004142:	5ccb      	ldrb	r3, [r1, r3]
 8004144:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004148:	4618      	mov	r0, r3
 800414a:	bd80      	pop	{r7, pc}
 800414c:	40023800 	.word	0x40023800
 8004150:	08007550 	.word	0x08007550

08004154 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004158:	f7ff ffdc 	bl	8004114 <HAL_RCC_GetHCLKFreq>
 800415c:	4602      	mov	r2, r0
 800415e:	4b05      	ldr	r3, [pc, #20]	@ (8004174 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	0b5b      	lsrs	r3, r3, #13
 8004164:	f003 0307 	and.w	r3, r3, #7
 8004168:	4903      	ldr	r1, [pc, #12]	@ (8004178 <HAL_RCC_GetPCLK2Freq+0x24>)
 800416a:	5ccb      	ldrb	r3, [r1, r3]
 800416c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004170:	4618      	mov	r0, r3
 8004172:	bd80      	pop	{r7, pc}
 8004174:	40023800 	.word	0x40023800
 8004178:	08007550 	.word	0x08007550

0800417c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b082      	sub	sp, #8
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d101      	bne.n	800418e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e07b      	b.n	8004286 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004192:	2b00      	cmp	r3, #0
 8004194:	d108      	bne.n	80041a8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800419e:	d009      	beq.n	80041b4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	61da      	str	r2, [r3, #28]
 80041a6:	e005      	b.n	80041b4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d106      	bne.n	80041d4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2200      	movs	r2, #0
 80041ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f7fd f8be 	bl	8001350 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2202      	movs	r2, #2
 80041d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80041ea:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80041fc:	431a      	orrs	r2, r3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004206:	431a      	orrs	r2, r3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	691b      	ldr	r3, [r3, #16]
 800420c:	f003 0302 	and.w	r3, r3, #2
 8004210:	431a      	orrs	r2, r3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	695b      	ldr	r3, [r3, #20]
 8004216:	f003 0301 	and.w	r3, r3, #1
 800421a:	431a      	orrs	r2, r3
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	699b      	ldr	r3, [r3, #24]
 8004220:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004224:	431a      	orrs	r2, r3
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	69db      	ldr	r3, [r3, #28]
 800422a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800422e:	431a      	orrs	r2, r3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6a1b      	ldr	r3, [r3, #32]
 8004234:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004238:	ea42 0103 	orr.w	r1, r2, r3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004240:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	430a      	orrs	r2, r1
 800424a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	699b      	ldr	r3, [r3, #24]
 8004250:	0c1b      	lsrs	r3, r3, #16
 8004252:	f003 0104 	and.w	r1, r3, #4
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800425a:	f003 0210 	and.w	r2, r3, #16
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	430a      	orrs	r2, r1
 8004264:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	69da      	ldr	r2, [r3, #28]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004274:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2200      	movs	r2, #0
 800427a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004284:	2300      	movs	r3, #0
}
 8004286:	4618      	mov	r0, r3
 8004288:	3708      	adds	r7, #8
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}

0800428e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800428e:	b580      	push	{r7, lr}
 8004290:	b088      	sub	sp, #32
 8004292:	af00      	add	r7, sp, #0
 8004294:	60f8      	str	r0, [r7, #12]
 8004296:	60b9      	str	r1, [r7, #8]
 8004298:	603b      	str	r3, [r7, #0]
 800429a:	4613      	mov	r3, r2
 800429c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800429e:	f7fd fccb 	bl	8001c38 <HAL_GetTick>
 80042a2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80042a4:	88fb      	ldrh	r3, [r7, #6]
 80042a6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d001      	beq.n	80042b8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80042b4:	2302      	movs	r3, #2
 80042b6:	e12a      	b.n	800450e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d002      	beq.n	80042c4 <HAL_SPI_Transmit+0x36>
 80042be:	88fb      	ldrh	r3, [r7, #6]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d101      	bne.n	80042c8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e122      	b.n	800450e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d101      	bne.n	80042d6 <HAL_SPI_Transmit+0x48>
 80042d2:	2302      	movs	r3, #2
 80042d4:	e11b      	b.n	800450e <HAL_SPI_Transmit+0x280>
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2201      	movs	r2, #1
 80042da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2203      	movs	r2, #3
 80042e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2200      	movs	r2, #0
 80042ea:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	68ba      	ldr	r2, [r7, #8]
 80042f0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	88fa      	ldrh	r2, [r7, #6]
 80042f6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	88fa      	ldrh	r2, [r7, #6]
 80042fc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2200      	movs	r2, #0
 8004302:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2200      	movs	r2, #0
 8004308:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2200      	movs	r2, #0
 800430e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2200      	movs	r2, #0
 8004314:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2200      	movs	r2, #0
 800431a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004324:	d10f      	bne.n	8004346 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004334:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004344:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004350:	2b40      	cmp	r3, #64	@ 0x40
 8004352:	d007      	beq.n	8004364 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004362:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800436c:	d152      	bne.n	8004414 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d002      	beq.n	800437c <HAL_SPI_Transmit+0xee>
 8004376:	8b7b      	ldrh	r3, [r7, #26]
 8004378:	2b01      	cmp	r3, #1
 800437a:	d145      	bne.n	8004408 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004380:	881a      	ldrh	r2, [r3, #0]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800438c:	1c9a      	adds	r2, r3, #2
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004396:	b29b      	uxth	r3, r3
 8004398:	3b01      	subs	r3, #1
 800439a:	b29a      	uxth	r2, r3
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80043a0:	e032      	b.n	8004408 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	f003 0302 	and.w	r3, r3, #2
 80043ac:	2b02      	cmp	r3, #2
 80043ae:	d112      	bne.n	80043d6 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043b4:	881a      	ldrh	r2, [r3, #0]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043c0:	1c9a      	adds	r2, r3, #2
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	3b01      	subs	r3, #1
 80043ce:	b29a      	uxth	r2, r3
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	86da      	strh	r2, [r3, #54]	@ 0x36
 80043d4:	e018      	b.n	8004408 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80043d6:	f7fd fc2f 	bl	8001c38 <HAL_GetTick>
 80043da:	4602      	mov	r2, r0
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	1ad3      	subs	r3, r2, r3
 80043e0:	683a      	ldr	r2, [r7, #0]
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d803      	bhi.n	80043ee <HAL_SPI_Transmit+0x160>
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ec:	d102      	bne.n	80043f4 <HAL_SPI_Transmit+0x166>
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d109      	bne.n	8004408 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2200      	movs	r2, #0
 8004400:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004404:	2303      	movs	r3, #3
 8004406:	e082      	b.n	800450e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800440c:	b29b      	uxth	r3, r3
 800440e:	2b00      	cmp	r3, #0
 8004410:	d1c7      	bne.n	80043a2 <HAL_SPI_Transmit+0x114>
 8004412:	e053      	b.n	80044bc <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d002      	beq.n	8004422 <HAL_SPI_Transmit+0x194>
 800441c:	8b7b      	ldrh	r3, [r7, #26]
 800441e:	2b01      	cmp	r3, #1
 8004420:	d147      	bne.n	80044b2 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	330c      	adds	r3, #12
 800442c:	7812      	ldrb	r2, [r2, #0]
 800442e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004434:	1c5a      	adds	r2, r3, #1
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800443e:	b29b      	uxth	r3, r3
 8004440:	3b01      	subs	r3, #1
 8004442:	b29a      	uxth	r2, r3
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004448:	e033      	b.n	80044b2 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	f003 0302 	and.w	r3, r3, #2
 8004454:	2b02      	cmp	r3, #2
 8004456:	d113      	bne.n	8004480 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	330c      	adds	r3, #12
 8004462:	7812      	ldrb	r2, [r2, #0]
 8004464:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800446a:	1c5a      	adds	r2, r3, #1
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004474:	b29b      	uxth	r3, r3
 8004476:	3b01      	subs	r3, #1
 8004478:	b29a      	uxth	r2, r3
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800447e:	e018      	b.n	80044b2 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004480:	f7fd fbda 	bl	8001c38 <HAL_GetTick>
 8004484:	4602      	mov	r2, r0
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	683a      	ldr	r2, [r7, #0]
 800448c:	429a      	cmp	r2, r3
 800448e:	d803      	bhi.n	8004498 <HAL_SPI_Transmit+0x20a>
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004496:	d102      	bne.n	800449e <HAL_SPI_Transmit+0x210>
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d109      	bne.n	80044b2 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2201      	movs	r2, #1
 80044a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2200      	movs	r2, #0
 80044aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	e02d      	b.n	800450e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d1c6      	bne.n	800444a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80044bc:	69fa      	ldr	r2, [r7, #28]
 80044be:	6839      	ldr	r1, [r7, #0]
 80044c0:	68f8      	ldr	r0, [r7, #12]
 80044c2:	f000 fbe7 	bl	8004c94 <SPI_EndRxTxTransaction>
 80044c6:	4603      	mov	r3, r0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d002      	beq.n	80044d2 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2220      	movs	r2, #32
 80044d0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d10a      	bne.n	80044f0 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80044da:	2300      	movs	r3, #0
 80044dc:	617b      	str	r3, [r7, #20]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	617b      	str	r3, [r7, #20]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	617b      	str	r3, [r7, #20]
 80044ee:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2200      	movs	r2, #0
 80044fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004504:	2b00      	cmp	r3, #0
 8004506:	d001      	beq.n	800450c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	e000      	b.n	800450e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800450c:	2300      	movs	r3, #0
  }
}
 800450e:	4618      	mov	r0, r3
 8004510:	3720      	adds	r7, #32
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}

08004516 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004516:	b580      	push	{r7, lr}
 8004518:	b088      	sub	sp, #32
 800451a:	af02      	add	r7, sp, #8
 800451c:	60f8      	str	r0, [r7, #12]
 800451e:	60b9      	str	r1, [r7, #8]
 8004520:	603b      	str	r3, [r7, #0]
 8004522:	4613      	mov	r3, r2
 8004524:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800452c:	b2db      	uxtb	r3, r3
 800452e:	2b01      	cmp	r3, #1
 8004530:	d001      	beq.n	8004536 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8004532:	2302      	movs	r3, #2
 8004534:	e104      	b.n	8004740 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800453e:	d112      	bne.n	8004566 <HAL_SPI_Receive+0x50>
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d10e      	bne.n	8004566 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2204      	movs	r2, #4
 800454c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004550:	88fa      	ldrh	r2, [r7, #6]
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	9300      	str	r3, [sp, #0]
 8004556:	4613      	mov	r3, r2
 8004558:	68ba      	ldr	r2, [r7, #8]
 800455a:	68b9      	ldr	r1, [r7, #8]
 800455c:	68f8      	ldr	r0, [r7, #12]
 800455e:	f000 f8f3 	bl	8004748 <HAL_SPI_TransmitReceive>
 8004562:	4603      	mov	r3, r0
 8004564:	e0ec      	b.n	8004740 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004566:	f7fd fb67 	bl	8001c38 <HAL_GetTick>
 800456a:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d002      	beq.n	8004578 <HAL_SPI_Receive+0x62>
 8004572:	88fb      	ldrh	r3, [r7, #6]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d101      	bne.n	800457c <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e0e1      	b.n	8004740 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004582:	2b01      	cmp	r3, #1
 8004584:	d101      	bne.n	800458a <HAL_SPI_Receive+0x74>
 8004586:	2302      	movs	r3, #2
 8004588:	e0da      	b.n	8004740 <HAL_SPI_Receive+0x22a>
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2201      	movs	r2, #1
 800458e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2204      	movs	r2, #4
 8004596:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2200      	movs	r2, #0
 800459e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	68ba      	ldr	r2, [r7, #8]
 80045a4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	88fa      	ldrh	r2, [r7, #6]
 80045aa:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	88fa      	ldrh	r2, [r7, #6]
 80045b0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2200      	movs	r2, #0
 80045b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2200      	movs	r2, #0
 80045bc:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2200      	movs	r2, #0
 80045c2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2200      	movs	r2, #0
 80045c8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2200      	movs	r2, #0
 80045ce:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80045d8:	d10f      	bne.n	80045fa <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80045e8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80045f8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004604:	2b40      	cmp	r3, #64	@ 0x40
 8004606:	d007      	beq.n	8004618 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004616:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d170      	bne.n	8004702 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004620:	e035      	b.n	800468e <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	f003 0301 	and.w	r3, r3, #1
 800462c:	2b01      	cmp	r3, #1
 800462e:	d115      	bne.n	800465c <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f103 020c 	add.w	r2, r3, #12
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800463c:	7812      	ldrb	r2, [r2, #0]
 800463e:	b2d2      	uxtb	r2, r2
 8004640:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004646:	1c5a      	adds	r2, r3, #1
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004650:	b29b      	uxth	r3, r3
 8004652:	3b01      	subs	r3, #1
 8004654:	b29a      	uxth	r2, r3
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800465a:	e018      	b.n	800468e <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800465c:	f7fd faec 	bl	8001c38 <HAL_GetTick>
 8004660:	4602      	mov	r2, r0
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	683a      	ldr	r2, [r7, #0]
 8004668:	429a      	cmp	r2, r3
 800466a:	d803      	bhi.n	8004674 <HAL_SPI_Receive+0x15e>
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004672:	d102      	bne.n	800467a <HAL_SPI_Receive+0x164>
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d109      	bne.n	800468e <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2201      	movs	r2, #1
 800467e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2200      	movs	r2, #0
 8004686:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800468a:	2303      	movs	r3, #3
 800468c:	e058      	b.n	8004740 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004692:	b29b      	uxth	r3, r3
 8004694:	2b00      	cmp	r3, #0
 8004696:	d1c4      	bne.n	8004622 <HAL_SPI_Receive+0x10c>
 8004698:	e038      	b.n	800470c <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	f003 0301 	and.w	r3, r3, #1
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d113      	bne.n	80046d0 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	68da      	ldr	r2, [r3, #12]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046b2:	b292      	uxth	r2, r2
 80046b4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046ba:	1c9a      	adds	r2, r3, #2
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	3b01      	subs	r3, #1
 80046c8:	b29a      	uxth	r2, r3
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80046ce:	e018      	b.n	8004702 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046d0:	f7fd fab2 	bl	8001c38 <HAL_GetTick>
 80046d4:	4602      	mov	r2, r0
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	683a      	ldr	r2, [r7, #0]
 80046dc:	429a      	cmp	r2, r3
 80046de:	d803      	bhi.n	80046e8 <HAL_SPI_Receive+0x1d2>
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046e6:	d102      	bne.n	80046ee <HAL_SPI_Receive+0x1d8>
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d109      	bne.n	8004702 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2201      	movs	r2, #1
 80046f2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2200      	movs	r2, #0
 80046fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80046fe:	2303      	movs	r3, #3
 8004700:	e01e      	b.n	8004740 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004706:	b29b      	uxth	r3, r3
 8004708:	2b00      	cmp	r3, #0
 800470a:	d1c6      	bne.n	800469a <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800470c:	697a      	ldr	r2, [r7, #20]
 800470e:	6839      	ldr	r1, [r7, #0]
 8004710:	68f8      	ldr	r0, [r7, #12]
 8004712:	f000 fa59 	bl	8004bc8 <SPI_EndRxTransaction>
 8004716:	4603      	mov	r3, r0
 8004718:	2b00      	cmp	r3, #0
 800471a:	d002      	beq.n	8004722 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2220      	movs	r2, #32
 8004720:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2201      	movs	r2, #1
 8004726:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2200      	movs	r2, #0
 800472e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004736:	2b00      	cmp	r3, #0
 8004738:	d001      	beq.n	800473e <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e000      	b.n	8004740 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800473e:	2300      	movs	r3, #0
  }
}
 8004740:	4618      	mov	r0, r3
 8004742:	3718      	adds	r7, #24
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}

08004748 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b08a      	sub	sp, #40	@ 0x28
 800474c:	af00      	add	r7, sp, #0
 800474e:	60f8      	str	r0, [r7, #12]
 8004750:	60b9      	str	r1, [r7, #8]
 8004752:	607a      	str	r2, [r7, #4]
 8004754:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004756:	2301      	movs	r3, #1
 8004758:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800475a:	f7fd fa6d 	bl	8001c38 <HAL_GetTick>
 800475e:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004766:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800476e:	887b      	ldrh	r3, [r7, #2]
 8004770:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004772:	7ffb      	ldrb	r3, [r7, #31]
 8004774:	2b01      	cmp	r3, #1
 8004776:	d00c      	beq.n	8004792 <HAL_SPI_TransmitReceive+0x4a>
 8004778:	69bb      	ldr	r3, [r7, #24]
 800477a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800477e:	d106      	bne.n	800478e <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d102      	bne.n	800478e <HAL_SPI_TransmitReceive+0x46>
 8004788:	7ffb      	ldrb	r3, [r7, #31]
 800478a:	2b04      	cmp	r3, #4
 800478c:	d001      	beq.n	8004792 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 800478e:	2302      	movs	r3, #2
 8004790:	e17f      	b.n	8004a92 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d005      	beq.n	80047a4 <HAL_SPI_TransmitReceive+0x5c>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d002      	beq.n	80047a4 <HAL_SPI_TransmitReceive+0x5c>
 800479e:	887b      	ldrh	r3, [r7, #2]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d101      	bne.n	80047a8 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e174      	b.n	8004a92 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d101      	bne.n	80047b6 <HAL_SPI_TransmitReceive+0x6e>
 80047b2:	2302      	movs	r3, #2
 80047b4:	e16d      	b.n	8004a92 <HAL_SPI_TransmitReceive+0x34a>
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2201      	movs	r2, #1
 80047ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	2b04      	cmp	r3, #4
 80047c8:	d003      	beq.n	80047d2 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2205      	movs	r2, #5
 80047ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2200      	movs	r2, #0
 80047d6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	887a      	ldrh	r2, [r7, #2]
 80047e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	887a      	ldrh	r2, [r7, #2]
 80047e8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	68ba      	ldr	r2, [r7, #8]
 80047ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	887a      	ldrh	r2, [r7, #2]
 80047f4:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	887a      	ldrh	r2, [r7, #2]
 80047fa:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2200      	movs	r2, #0
 8004800:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2200      	movs	r2, #0
 8004806:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004812:	2b40      	cmp	r3, #64	@ 0x40
 8004814:	d007      	beq.n	8004826 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004824:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	68db      	ldr	r3, [r3, #12]
 800482a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800482e:	d17e      	bne.n	800492e <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d002      	beq.n	800483e <HAL_SPI_TransmitReceive+0xf6>
 8004838:	8afb      	ldrh	r3, [r7, #22]
 800483a:	2b01      	cmp	r3, #1
 800483c:	d16c      	bne.n	8004918 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004842:	881a      	ldrh	r2, [r3, #0]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800484e:	1c9a      	adds	r2, r3, #2
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004858:	b29b      	uxth	r3, r3
 800485a:	3b01      	subs	r3, #1
 800485c:	b29a      	uxth	r2, r3
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004862:	e059      	b.n	8004918 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	f003 0302 	and.w	r3, r3, #2
 800486e:	2b02      	cmp	r3, #2
 8004870:	d11b      	bne.n	80048aa <HAL_SPI_TransmitReceive+0x162>
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004876:	b29b      	uxth	r3, r3
 8004878:	2b00      	cmp	r3, #0
 800487a:	d016      	beq.n	80048aa <HAL_SPI_TransmitReceive+0x162>
 800487c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800487e:	2b01      	cmp	r3, #1
 8004880:	d113      	bne.n	80048aa <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004886:	881a      	ldrh	r2, [r3, #0]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004892:	1c9a      	adds	r2, r3, #2
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800489c:	b29b      	uxth	r3, r3
 800489e:	3b01      	subs	r3, #1
 80048a0:	b29a      	uxth	r2, r3
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80048a6:	2300      	movs	r3, #0
 80048a8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	f003 0301 	and.w	r3, r3, #1
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d119      	bne.n	80048ec <HAL_SPI_TransmitReceive+0x1a4>
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80048bc:	b29b      	uxth	r3, r3
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d014      	beq.n	80048ec <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	68da      	ldr	r2, [r3, #12]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048cc:	b292      	uxth	r2, r2
 80048ce:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048d4:	1c9a      	adds	r2, r3, #2
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80048de:	b29b      	uxth	r3, r3
 80048e0:	3b01      	subs	r3, #1
 80048e2:	b29a      	uxth	r2, r3
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80048e8:	2301      	movs	r3, #1
 80048ea:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80048ec:	f7fd f9a4 	bl	8001c38 <HAL_GetTick>
 80048f0:	4602      	mov	r2, r0
 80048f2:	6a3b      	ldr	r3, [r7, #32]
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d80d      	bhi.n	8004918 <HAL_SPI_TransmitReceive+0x1d0>
 80048fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004902:	d009      	beq.n	8004918 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2200      	movs	r2, #0
 8004910:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004914:	2303      	movs	r3, #3
 8004916:	e0bc      	b.n	8004a92 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800491c:	b29b      	uxth	r3, r3
 800491e:	2b00      	cmp	r3, #0
 8004920:	d1a0      	bne.n	8004864 <HAL_SPI_TransmitReceive+0x11c>
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004926:	b29b      	uxth	r3, r3
 8004928:	2b00      	cmp	r3, #0
 800492a:	d19b      	bne.n	8004864 <HAL_SPI_TransmitReceive+0x11c>
 800492c:	e082      	b.n	8004a34 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d002      	beq.n	800493c <HAL_SPI_TransmitReceive+0x1f4>
 8004936:	8afb      	ldrh	r3, [r7, #22]
 8004938:	2b01      	cmp	r3, #1
 800493a:	d171      	bne.n	8004a20 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	330c      	adds	r3, #12
 8004946:	7812      	ldrb	r2, [r2, #0]
 8004948:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800494e:	1c5a      	adds	r2, r3, #1
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004958:	b29b      	uxth	r3, r3
 800495a:	3b01      	subs	r3, #1
 800495c:	b29a      	uxth	r2, r3
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004962:	e05d      	b.n	8004a20 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	f003 0302 	and.w	r3, r3, #2
 800496e:	2b02      	cmp	r3, #2
 8004970:	d11c      	bne.n	80049ac <HAL_SPI_TransmitReceive+0x264>
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004976:	b29b      	uxth	r3, r3
 8004978:	2b00      	cmp	r3, #0
 800497a:	d017      	beq.n	80049ac <HAL_SPI_TransmitReceive+0x264>
 800497c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800497e:	2b01      	cmp	r3, #1
 8004980:	d114      	bne.n	80049ac <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	330c      	adds	r3, #12
 800498c:	7812      	ldrb	r2, [r2, #0]
 800498e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004994:	1c5a      	adds	r2, r3, #1
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800499e:	b29b      	uxth	r3, r3
 80049a0:	3b01      	subs	r3, #1
 80049a2:	b29a      	uxth	r2, r3
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80049a8:	2300      	movs	r3, #0
 80049aa:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	f003 0301 	and.w	r3, r3, #1
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d119      	bne.n	80049ee <HAL_SPI_TransmitReceive+0x2a6>
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049be:	b29b      	uxth	r3, r3
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d014      	beq.n	80049ee <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	68da      	ldr	r2, [r3, #12]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049ce:	b2d2      	uxtb	r2, r2
 80049d0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049d6:	1c5a      	adds	r2, r3, #1
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	3b01      	subs	r3, #1
 80049e4:	b29a      	uxth	r2, r3
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80049ea:	2301      	movs	r3, #1
 80049ec:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80049ee:	f7fd f923 	bl	8001c38 <HAL_GetTick>
 80049f2:	4602      	mov	r2, r0
 80049f4:	6a3b      	ldr	r3, [r7, #32]
 80049f6:	1ad3      	subs	r3, r2, r3
 80049f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d803      	bhi.n	8004a06 <HAL_SPI_TransmitReceive+0x2be>
 80049fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a04:	d102      	bne.n	8004a0c <HAL_SPI_TransmitReceive+0x2c4>
 8004a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d109      	bne.n	8004a20 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2200      	movs	r2, #0
 8004a18:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004a1c:	2303      	movs	r3, #3
 8004a1e:	e038      	b.n	8004a92 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d19c      	bne.n	8004964 <HAL_SPI_TransmitReceive+0x21c>
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d197      	bne.n	8004964 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a34:	6a3a      	ldr	r2, [r7, #32]
 8004a36:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004a38:	68f8      	ldr	r0, [r7, #12]
 8004a3a:	f000 f92b 	bl	8004c94 <SPI_EndRxTxTransaction>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d008      	beq.n	8004a56 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2220      	movs	r2, #32
 8004a48:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e01d      	b.n	8004a92 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d10a      	bne.n	8004a74 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a5e:	2300      	movs	r3, #0
 8004a60:	613b      	str	r3, [r7, #16]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	68db      	ldr	r3, [r3, #12]
 8004a68:	613b      	str	r3, [r7, #16]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	613b      	str	r3, [r7, #16]
 8004a72:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d001      	beq.n	8004a90 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e000      	b.n	8004a92 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8004a90:	2300      	movs	r3, #0
  }
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3728      	adds	r7, #40	@ 0x28
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}

08004a9a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8004a9a:	b480      	push	{r7}
 8004a9c:	b083      	sub	sp, #12
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004aa8:	b2db      	uxtb	r3, r3
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	370c      	adds	r7, #12
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr
	...

08004ab8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b088      	sub	sp, #32
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	60f8      	str	r0, [r7, #12]
 8004ac0:	60b9      	str	r1, [r7, #8]
 8004ac2:	603b      	str	r3, [r7, #0]
 8004ac4:	4613      	mov	r3, r2
 8004ac6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004ac8:	f7fd f8b6 	bl	8001c38 <HAL_GetTick>
 8004acc:	4602      	mov	r2, r0
 8004ace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ad0:	1a9b      	subs	r3, r3, r2
 8004ad2:	683a      	ldr	r2, [r7, #0]
 8004ad4:	4413      	add	r3, r2
 8004ad6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004ad8:	f7fd f8ae 	bl	8001c38 <HAL_GetTick>
 8004adc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004ade:	4b39      	ldr	r3, [pc, #228]	@ (8004bc4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	015b      	lsls	r3, r3, #5
 8004ae4:	0d1b      	lsrs	r3, r3, #20
 8004ae6:	69fa      	ldr	r2, [r7, #28]
 8004ae8:	fb02 f303 	mul.w	r3, r2, r3
 8004aec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004aee:	e054      	b.n	8004b9a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004af6:	d050      	beq.n	8004b9a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004af8:	f7fd f89e 	bl	8001c38 <HAL_GetTick>
 8004afc:	4602      	mov	r2, r0
 8004afe:	69bb      	ldr	r3, [r7, #24]
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	69fa      	ldr	r2, [r7, #28]
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d902      	bls.n	8004b0e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004b08:	69fb      	ldr	r3, [r7, #28]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d13d      	bne.n	8004b8a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	685a      	ldr	r2, [r3, #4]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004b1c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004b26:	d111      	bne.n	8004b4c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b30:	d004      	beq.n	8004b3c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b3a:	d107      	bne.n	8004b4c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b4a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b50:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b54:	d10f      	bne.n	8004b76 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004b64:	601a      	str	r2, [r3, #0]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004b74:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2201      	movs	r2, #1
 8004b7a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2200      	movs	r2, #0
 8004b82:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004b86:	2303      	movs	r3, #3
 8004b88:	e017      	b.n	8004bba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d101      	bne.n	8004b94 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004b90:	2300      	movs	r3, #0
 8004b92:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	3b01      	subs	r3, #1
 8004b98:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	689a      	ldr	r2, [r3, #8]
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	4013      	ands	r3, r2
 8004ba4:	68ba      	ldr	r2, [r7, #8]
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	bf0c      	ite	eq
 8004baa:	2301      	moveq	r3, #1
 8004bac:	2300      	movne	r3, #0
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	79fb      	ldrb	r3, [r7, #7]
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d19b      	bne.n	8004af0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004bb8:	2300      	movs	r3, #0
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3720      	adds	r7, #32
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
 8004bc2:	bf00      	nop
 8004bc4:	2000000c 	.word	0x2000000c

08004bc8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b086      	sub	sp, #24
 8004bcc:	af02      	add	r7, sp, #8
 8004bce:	60f8      	str	r0, [r7, #12]
 8004bd0:	60b9      	str	r1, [r7, #8]
 8004bd2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004bdc:	d111      	bne.n	8004c02 <SPI_EndRxTransaction+0x3a>
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004be6:	d004      	beq.n	8004bf2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bf0:	d107      	bne.n	8004c02 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c00:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c0a:	d12a      	bne.n	8004c62 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c14:	d012      	beq.n	8004c3c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	9300      	str	r3, [sp, #0]
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	2180      	movs	r1, #128	@ 0x80
 8004c20:	68f8      	ldr	r0, [r7, #12]
 8004c22:	f7ff ff49 	bl	8004ab8 <SPI_WaitFlagStateUntilTimeout>
 8004c26:	4603      	mov	r3, r0
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d02d      	beq.n	8004c88 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c30:	f043 0220 	orr.w	r2, r3, #32
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004c38:	2303      	movs	r3, #3
 8004c3a:	e026      	b.n	8004c8a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	9300      	str	r3, [sp, #0]
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	2200      	movs	r2, #0
 8004c44:	2101      	movs	r1, #1
 8004c46:	68f8      	ldr	r0, [r7, #12]
 8004c48:	f7ff ff36 	bl	8004ab8 <SPI_WaitFlagStateUntilTimeout>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d01a      	beq.n	8004c88 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c56:	f043 0220 	orr.w	r2, r3, #32
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	e013      	b.n	8004c8a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	9300      	str	r3, [sp, #0]
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	2101      	movs	r1, #1
 8004c6c:	68f8      	ldr	r0, [r7, #12]
 8004c6e:	f7ff ff23 	bl	8004ab8 <SPI_WaitFlagStateUntilTimeout>
 8004c72:	4603      	mov	r3, r0
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d007      	beq.n	8004c88 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c7c:	f043 0220 	orr.w	r2, r3, #32
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004c84:	2303      	movs	r3, #3
 8004c86:	e000      	b.n	8004c8a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004c88:	2300      	movs	r3, #0
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3710      	adds	r7, #16
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}
	...

08004c94 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b088      	sub	sp, #32
 8004c98:	af02      	add	r7, sp, #8
 8004c9a:	60f8      	str	r0, [r7, #12]
 8004c9c:	60b9      	str	r1, [r7, #8]
 8004c9e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	9300      	str	r3, [sp, #0]
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	2102      	movs	r1, #2
 8004caa:	68f8      	ldr	r0, [r7, #12]
 8004cac:	f7ff ff04 	bl	8004ab8 <SPI_WaitFlagStateUntilTimeout>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d007      	beq.n	8004cc6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cba:	f043 0220 	orr.w	r2, r3, #32
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004cc2:	2303      	movs	r3, #3
 8004cc4:	e032      	b.n	8004d2c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004cc6:	4b1b      	ldr	r3, [pc, #108]	@ (8004d34 <SPI_EndRxTxTransaction+0xa0>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a1b      	ldr	r2, [pc, #108]	@ (8004d38 <SPI_EndRxTxTransaction+0xa4>)
 8004ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8004cd0:	0d5b      	lsrs	r3, r3, #21
 8004cd2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004cd6:	fb02 f303 	mul.w	r3, r2, r3
 8004cda:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004ce4:	d112      	bne.n	8004d0c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	9300      	str	r3, [sp, #0]
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	2200      	movs	r2, #0
 8004cee:	2180      	movs	r1, #128	@ 0x80
 8004cf0:	68f8      	ldr	r0, [r7, #12]
 8004cf2:	f7ff fee1 	bl	8004ab8 <SPI_WaitFlagStateUntilTimeout>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d016      	beq.n	8004d2a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d00:	f043 0220 	orr.w	r2, r3, #32
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004d08:	2303      	movs	r3, #3
 8004d0a:	e00f      	b.n	8004d2c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d00a      	beq.n	8004d28 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	3b01      	subs	r3, #1
 8004d16:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d22:	2b80      	cmp	r3, #128	@ 0x80
 8004d24:	d0f2      	beq.n	8004d0c <SPI_EndRxTxTransaction+0x78>
 8004d26:	e000      	b.n	8004d2a <SPI_EndRxTxTransaction+0x96>
        break;
 8004d28:	bf00      	nop
  }

  return HAL_OK;
 8004d2a:	2300      	movs	r3, #0
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	3718      	adds	r7, #24
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}
 8004d34:	2000000c 	.word	0x2000000c
 8004d38:	165e9f81 	.word	0x165e9f81

08004d3c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b082      	sub	sp, #8
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d101      	bne.n	8004d4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e042      	b.n	8004dd4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d106      	bne.n	8004d68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f7fc fb3c 	bl	80013e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2224      	movs	r2, #36	@ 0x24
 8004d6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	68da      	ldr	r2, [r3, #12]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004d7e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f000 fdbd 	bl	8005900 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	691a      	ldr	r2, [r3, #16]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004d94:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	695a      	ldr	r2, [r3, #20]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004da4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	68da      	ldr	r2, [r3, #12]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004db4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2200      	movs	r2, #0
 8004dba:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2220      	movs	r2, #32
 8004dc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2220      	movs	r2, #32
 8004dc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004dd2:	2300      	movs	r3, #0
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3708      	adds	r7, #8
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b08a      	sub	sp, #40	@ 0x28
 8004de0:	af02      	add	r7, sp, #8
 8004de2:	60f8      	str	r0, [r7, #12]
 8004de4:	60b9      	str	r1, [r7, #8]
 8004de6:	603b      	str	r3, [r7, #0]
 8004de8:	4613      	mov	r3, r2
 8004dea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004dec:	2300      	movs	r3, #0
 8004dee:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	2b20      	cmp	r3, #32
 8004dfa:	d175      	bne.n	8004ee8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d002      	beq.n	8004e08 <HAL_UART_Transmit+0x2c>
 8004e02:	88fb      	ldrh	r3, [r7, #6]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d101      	bne.n	8004e0c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e06e      	b.n	8004eea <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2221      	movs	r2, #33	@ 0x21
 8004e16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e1a:	f7fc ff0d 	bl	8001c38 <HAL_GetTick>
 8004e1e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	88fa      	ldrh	r2, [r7, #6]
 8004e24:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	88fa      	ldrh	r2, [r7, #6]
 8004e2a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e34:	d108      	bne.n	8004e48 <HAL_UART_Transmit+0x6c>
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	691b      	ldr	r3, [r3, #16]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d104      	bne.n	8004e48 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	61bb      	str	r3, [r7, #24]
 8004e46:	e003      	b.n	8004e50 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004e50:	e02e      	b.n	8004eb0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	9300      	str	r3, [sp, #0]
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	2180      	movs	r1, #128	@ 0x80
 8004e5c:	68f8      	ldr	r0, [r7, #12]
 8004e5e:	f000 fb1f 	bl	80054a0 <UART_WaitOnFlagUntilTimeout>
 8004e62:	4603      	mov	r3, r0
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d005      	beq.n	8004e74 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2220      	movs	r2, #32
 8004e6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004e70:	2303      	movs	r3, #3
 8004e72:	e03a      	b.n	8004eea <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004e74:	69fb      	ldr	r3, [r7, #28]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d10b      	bne.n	8004e92 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e7a:	69bb      	ldr	r3, [r7, #24]
 8004e7c:	881b      	ldrh	r3, [r3, #0]
 8004e7e:	461a      	mov	r2, r3
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e88:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004e8a:	69bb      	ldr	r3, [r7, #24]
 8004e8c:	3302      	adds	r3, #2
 8004e8e:	61bb      	str	r3, [r7, #24]
 8004e90:	e007      	b.n	8004ea2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e92:	69fb      	ldr	r3, [r7, #28]
 8004e94:	781a      	ldrb	r2, [r3, #0]
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004e9c:	69fb      	ldr	r3, [r7, #28]
 8004e9e:	3301      	adds	r3, #1
 8004ea0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	3b01      	subs	r3, #1
 8004eaa:	b29a      	uxth	r2, r3
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d1cb      	bne.n	8004e52 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	9300      	str	r3, [sp, #0]
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	2140      	movs	r1, #64	@ 0x40
 8004ec4:	68f8      	ldr	r0, [r7, #12]
 8004ec6:	f000 faeb 	bl	80054a0 <UART_WaitOnFlagUntilTimeout>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d005      	beq.n	8004edc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2220      	movs	r2, #32
 8004ed4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004ed8:	2303      	movs	r3, #3
 8004eda:	e006      	b.n	8004eea <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2220      	movs	r2, #32
 8004ee0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	e000      	b.n	8004eea <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004ee8:	2302      	movs	r3, #2
  }
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3720      	adds	r7, #32
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}

08004ef2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ef2:	b580      	push	{r7, lr}
 8004ef4:	b084      	sub	sp, #16
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	60f8      	str	r0, [r7, #12]
 8004efa:	60b9      	str	r1, [r7, #8]
 8004efc:	4613      	mov	r3, r2
 8004efe:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	2b20      	cmp	r3, #32
 8004f0a:	d112      	bne.n	8004f32 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d002      	beq.n	8004f18 <HAL_UART_Receive_IT+0x26>
 8004f12:	88fb      	ldrh	r3, [r7, #6]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d101      	bne.n	8004f1c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	e00b      	b.n	8004f34 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004f22:	88fb      	ldrh	r3, [r7, #6]
 8004f24:	461a      	mov	r2, r3
 8004f26:	68b9      	ldr	r1, [r7, #8]
 8004f28:	68f8      	ldr	r0, [r7, #12]
 8004f2a:	f000 fb12 	bl	8005552 <UART_Start_Receive_IT>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	e000      	b.n	8004f34 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004f32:	2302      	movs	r3, #2
  }
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3710      	adds	r7, #16
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}

08004f3c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b0ba      	sub	sp, #232	@ 0xe8
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	68db      	ldr	r3, [r3, #12]
 8004f54:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	695b      	ldr	r3, [r3, #20]
 8004f5e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004f62:	2300      	movs	r3, #0
 8004f64:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004f6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f72:	f003 030f 	and.w	r3, r3, #15
 8004f76:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004f7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d10f      	bne.n	8004fa2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f86:	f003 0320 	and.w	r3, r3, #32
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d009      	beq.n	8004fa2 <HAL_UART_IRQHandler+0x66>
 8004f8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f92:	f003 0320 	and.w	r3, r3, #32
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d003      	beq.n	8004fa2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f000 fbf2 	bl	8005784 <UART_Receive_IT>
      return;
 8004fa0:	e25b      	b.n	800545a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004fa2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	f000 80de 	beq.w	8005168 <HAL_UART_IRQHandler+0x22c>
 8004fac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004fb0:	f003 0301 	and.w	r3, r3, #1
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d106      	bne.n	8004fc6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004fb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fbc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	f000 80d1 	beq.w	8005168 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004fc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fca:	f003 0301 	and.w	r3, r3, #1
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d00b      	beq.n	8004fea <HAL_UART_IRQHandler+0xae>
 8004fd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d005      	beq.n	8004fea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fe2:	f043 0201 	orr.w	r2, r3, #1
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004fea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fee:	f003 0304 	and.w	r3, r3, #4
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d00b      	beq.n	800500e <HAL_UART_IRQHandler+0xd2>
 8004ff6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ffa:	f003 0301 	and.w	r3, r3, #1
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d005      	beq.n	800500e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005006:	f043 0202 	orr.w	r2, r3, #2
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800500e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005012:	f003 0302 	and.w	r3, r3, #2
 8005016:	2b00      	cmp	r3, #0
 8005018:	d00b      	beq.n	8005032 <HAL_UART_IRQHandler+0xf6>
 800501a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800501e:	f003 0301 	and.w	r3, r3, #1
 8005022:	2b00      	cmp	r3, #0
 8005024:	d005      	beq.n	8005032 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800502a:	f043 0204 	orr.w	r2, r3, #4
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005032:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005036:	f003 0308 	and.w	r3, r3, #8
 800503a:	2b00      	cmp	r3, #0
 800503c:	d011      	beq.n	8005062 <HAL_UART_IRQHandler+0x126>
 800503e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005042:	f003 0320 	and.w	r3, r3, #32
 8005046:	2b00      	cmp	r3, #0
 8005048:	d105      	bne.n	8005056 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800504a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800504e:	f003 0301 	and.w	r3, r3, #1
 8005052:	2b00      	cmp	r3, #0
 8005054:	d005      	beq.n	8005062 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800505a:	f043 0208 	orr.w	r2, r3, #8
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005066:	2b00      	cmp	r3, #0
 8005068:	f000 81f2 	beq.w	8005450 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800506c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005070:	f003 0320 	and.w	r3, r3, #32
 8005074:	2b00      	cmp	r3, #0
 8005076:	d008      	beq.n	800508a <HAL_UART_IRQHandler+0x14e>
 8005078:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800507c:	f003 0320 	and.w	r3, r3, #32
 8005080:	2b00      	cmp	r3, #0
 8005082:	d002      	beq.n	800508a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f000 fb7d 	bl	8005784 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	695b      	ldr	r3, [r3, #20]
 8005090:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005094:	2b40      	cmp	r3, #64	@ 0x40
 8005096:	bf0c      	ite	eq
 8005098:	2301      	moveq	r3, #1
 800509a:	2300      	movne	r3, #0
 800509c:	b2db      	uxtb	r3, r3
 800509e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050a6:	f003 0308 	and.w	r3, r3, #8
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d103      	bne.n	80050b6 <HAL_UART_IRQHandler+0x17a>
 80050ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d04f      	beq.n	8005156 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f000 fa85 	bl	80055c6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	695b      	ldr	r3, [r3, #20]
 80050c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050c6:	2b40      	cmp	r3, #64	@ 0x40
 80050c8:	d141      	bne.n	800514e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	3314      	adds	r3, #20
 80050d0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80050d8:	e853 3f00 	ldrex	r3, [r3]
 80050dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80050e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80050e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80050e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	3314      	adds	r3, #20
 80050f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80050f6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80050fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005102:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005106:	e841 2300 	strex	r3, r2, [r1]
 800510a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800510e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005112:	2b00      	cmp	r3, #0
 8005114:	d1d9      	bne.n	80050ca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800511a:	2b00      	cmp	r3, #0
 800511c:	d013      	beq.n	8005146 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005122:	4a7e      	ldr	r2, [pc, #504]	@ (800531c <HAL_UART_IRQHandler+0x3e0>)
 8005124:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800512a:	4618      	mov	r0, r3
 800512c:	f7fc ff35 	bl	8001f9a <HAL_DMA_Abort_IT>
 8005130:	4603      	mov	r3, r0
 8005132:	2b00      	cmp	r3, #0
 8005134:	d016      	beq.n	8005164 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800513a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800513c:	687a      	ldr	r2, [r7, #4]
 800513e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005140:	4610      	mov	r0, r2
 8005142:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005144:	e00e      	b.n	8005164 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f000 f994 	bl	8005474 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800514c:	e00a      	b.n	8005164 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f000 f990 	bl	8005474 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005154:	e006      	b.n	8005164 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f000 f98c 	bl	8005474 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2200      	movs	r2, #0
 8005160:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005162:	e175      	b.n	8005450 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005164:	bf00      	nop
    return;
 8005166:	e173      	b.n	8005450 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800516c:	2b01      	cmp	r3, #1
 800516e:	f040 814f 	bne.w	8005410 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005172:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005176:	f003 0310 	and.w	r3, r3, #16
 800517a:	2b00      	cmp	r3, #0
 800517c:	f000 8148 	beq.w	8005410 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005180:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005184:	f003 0310 	and.w	r3, r3, #16
 8005188:	2b00      	cmp	r3, #0
 800518a:	f000 8141 	beq.w	8005410 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800518e:	2300      	movs	r3, #0
 8005190:	60bb      	str	r3, [r7, #8]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	60bb      	str	r3, [r7, #8]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	60bb      	str	r3, [r7, #8]
 80051a2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	695b      	ldr	r3, [r3, #20]
 80051aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051ae:	2b40      	cmp	r3, #64	@ 0x40
 80051b0:	f040 80b6 	bne.w	8005320 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80051c0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	f000 8145 	beq.w	8005454 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80051ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80051d2:	429a      	cmp	r2, r3
 80051d4:	f080 813e 	bcs.w	8005454 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80051de:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051e4:	69db      	ldr	r3, [r3, #28]
 80051e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80051ea:	f000 8088 	beq.w	80052fe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	330c      	adds	r3, #12
 80051f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80051fc:	e853 3f00 	ldrex	r3, [r3]
 8005200:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005204:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005208:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800520c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	330c      	adds	r3, #12
 8005216:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800521a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800521e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005222:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005226:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800522a:	e841 2300 	strex	r3, r2, [r1]
 800522e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005232:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005236:	2b00      	cmp	r3, #0
 8005238:	d1d9      	bne.n	80051ee <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	3314      	adds	r3, #20
 8005240:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005242:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005244:	e853 3f00 	ldrex	r3, [r3]
 8005248:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800524a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800524c:	f023 0301 	bic.w	r3, r3, #1
 8005250:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	3314      	adds	r3, #20
 800525a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800525e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005262:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005264:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005266:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800526a:	e841 2300 	strex	r3, r2, [r1]
 800526e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005270:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005272:	2b00      	cmp	r3, #0
 8005274:	d1e1      	bne.n	800523a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	3314      	adds	r3, #20
 800527c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800527e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005280:	e853 3f00 	ldrex	r3, [r3]
 8005284:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005286:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005288:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800528c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	3314      	adds	r3, #20
 8005296:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800529a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800529c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800529e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80052a0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80052a2:	e841 2300 	strex	r3, r2, [r1]
 80052a6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80052a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d1e3      	bne.n	8005276 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2220      	movs	r2, #32
 80052b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2200      	movs	r2, #0
 80052ba:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	330c      	adds	r3, #12
 80052c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80052c6:	e853 3f00 	ldrex	r3, [r3]
 80052ca:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80052cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80052ce:	f023 0310 	bic.w	r3, r3, #16
 80052d2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	330c      	adds	r3, #12
 80052dc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80052e0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80052e2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80052e6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80052e8:	e841 2300 	strex	r3, r2, [r1]
 80052ec:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80052ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d1e3      	bne.n	80052bc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052f8:	4618      	mov	r0, r3
 80052fa:	f7fc fdde 	bl	8001eba <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2202      	movs	r2, #2
 8005302:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800530c:	b29b      	uxth	r3, r3
 800530e:	1ad3      	subs	r3, r2, r3
 8005310:	b29b      	uxth	r3, r3
 8005312:	4619      	mov	r1, r3
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f000 f8b7 	bl	8005488 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800531a:	e09b      	b.n	8005454 <HAL_UART_IRQHandler+0x518>
 800531c:	0800568d 	.word	0x0800568d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005328:	b29b      	uxth	r3, r3
 800532a:	1ad3      	subs	r3, r2, r3
 800532c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005334:	b29b      	uxth	r3, r3
 8005336:	2b00      	cmp	r3, #0
 8005338:	f000 808e 	beq.w	8005458 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800533c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005340:	2b00      	cmp	r3, #0
 8005342:	f000 8089 	beq.w	8005458 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	330c      	adds	r3, #12
 800534c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800534e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005350:	e853 3f00 	ldrex	r3, [r3]
 8005354:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005356:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005358:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800535c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	330c      	adds	r3, #12
 8005366:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800536a:	647a      	str	r2, [r7, #68]	@ 0x44
 800536c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800536e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005370:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005372:	e841 2300 	strex	r3, r2, [r1]
 8005376:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005378:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800537a:	2b00      	cmp	r3, #0
 800537c:	d1e3      	bne.n	8005346 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	3314      	adds	r3, #20
 8005384:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005388:	e853 3f00 	ldrex	r3, [r3]
 800538c:	623b      	str	r3, [r7, #32]
   return(result);
 800538e:	6a3b      	ldr	r3, [r7, #32]
 8005390:	f023 0301 	bic.w	r3, r3, #1
 8005394:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	3314      	adds	r3, #20
 800539e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80053a2:	633a      	str	r2, [r7, #48]	@ 0x30
 80053a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80053a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053aa:	e841 2300 	strex	r3, r2, [r1]
 80053ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80053b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d1e3      	bne.n	800537e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2220      	movs	r2, #32
 80053ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	330c      	adds	r3, #12
 80053ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	e853 3f00 	ldrex	r3, [r3]
 80053d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f023 0310 	bic.w	r3, r3, #16
 80053da:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	330c      	adds	r3, #12
 80053e4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80053e8:	61fa      	str	r2, [r7, #28]
 80053ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ec:	69b9      	ldr	r1, [r7, #24]
 80053ee:	69fa      	ldr	r2, [r7, #28]
 80053f0:	e841 2300 	strex	r3, r2, [r1]
 80053f4:	617b      	str	r3, [r7, #20]
   return(result);
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d1e3      	bne.n	80053c4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2202      	movs	r2, #2
 8005400:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005402:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005406:	4619      	mov	r1, r3
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f000 f83d 	bl	8005488 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800540e:	e023      	b.n	8005458 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005410:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005414:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005418:	2b00      	cmp	r3, #0
 800541a:	d009      	beq.n	8005430 <HAL_UART_IRQHandler+0x4f4>
 800541c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005420:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005424:	2b00      	cmp	r3, #0
 8005426:	d003      	beq.n	8005430 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f000 f943 	bl	80056b4 <UART_Transmit_IT>
    return;
 800542e:	e014      	b.n	800545a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005430:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005434:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005438:	2b00      	cmp	r3, #0
 800543a:	d00e      	beq.n	800545a <HAL_UART_IRQHandler+0x51e>
 800543c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005440:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005444:	2b00      	cmp	r3, #0
 8005446:	d008      	beq.n	800545a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	f000 f983 	bl	8005754 <UART_EndTransmit_IT>
    return;
 800544e:	e004      	b.n	800545a <HAL_UART_IRQHandler+0x51e>
    return;
 8005450:	bf00      	nop
 8005452:	e002      	b.n	800545a <HAL_UART_IRQHandler+0x51e>
      return;
 8005454:	bf00      	nop
 8005456:	e000      	b.n	800545a <HAL_UART_IRQHandler+0x51e>
      return;
 8005458:	bf00      	nop
  }
}
 800545a:	37e8      	adds	r7, #232	@ 0xe8
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}

08005460 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005460:	b480      	push	{r7}
 8005462:	b083      	sub	sp, #12
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005468:	bf00      	nop
 800546a:	370c      	adds	r7, #12
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr

08005474 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005474:	b480      	push	{r7}
 8005476:	b083      	sub	sp, #12
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800547c:	bf00      	nop
 800547e:	370c      	adds	r7, #12
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr

08005488 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005488:	b480      	push	{r7}
 800548a:	b083      	sub	sp, #12
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
 8005490:	460b      	mov	r3, r1
 8005492:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005494:	bf00      	nop
 8005496:	370c      	adds	r7, #12
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr

080054a0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b086      	sub	sp, #24
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	60f8      	str	r0, [r7, #12]
 80054a8:	60b9      	str	r1, [r7, #8]
 80054aa:	603b      	str	r3, [r7, #0]
 80054ac:	4613      	mov	r3, r2
 80054ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054b0:	e03b      	b.n	800552a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054b2:	6a3b      	ldr	r3, [r7, #32]
 80054b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054b8:	d037      	beq.n	800552a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054ba:	f7fc fbbd 	bl	8001c38 <HAL_GetTick>
 80054be:	4602      	mov	r2, r0
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	1ad3      	subs	r3, r2, r3
 80054c4:	6a3a      	ldr	r2, [r7, #32]
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d302      	bcc.n	80054d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80054ca:	6a3b      	ldr	r3, [r7, #32]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d101      	bne.n	80054d4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80054d0:	2303      	movs	r3, #3
 80054d2:	e03a      	b.n	800554a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	68db      	ldr	r3, [r3, #12]
 80054da:	f003 0304 	and.w	r3, r3, #4
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d023      	beq.n	800552a <UART_WaitOnFlagUntilTimeout+0x8a>
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	2b80      	cmp	r3, #128	@ 0x80
 80054e6:	d020      	beq.n	800552a <UART_WaitOnFlagUntilTimeout+0x8a>
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	2b40      	cmp	r3, #64	@ 0x40
 80054ec:	d01d      	beq.n	800552a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f003 0308 	and.w	r3, r3, #8
 80054f8:	2b08      	cmp	r3, #8
 80054fa:	d116      	bne.n	800552a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80054fc:	2300      	movs	r3, #0
 80054fe:	617b      	str	r3, [r7, #20]
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	617b      	str	r3, [r7, #20]
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	617b      	str	r3, [r7, #20]
 8005510:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005512:	68f8      	ldr	r0, [r7, #12]
 8005514:	f000 f857 	bl	80055c6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2208      	movs	r2, #8
 800551c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2200      	movs	r2, #0
 8005522:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	e00f      	b.n	800554a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	4013      	ands	r3, r2
 8005534:	68ba      	ldr	r2, [r7, #8]
 8005536:	429a      	cmp	r2, r3
 8005538:	bf0c      	ite	eq
 800553a:	2301      	moveq	r3, #1
 800553c:	2300      	movne	r3, #0
 800553e:	b2db      	uxtb	r3, r3
 8005540:	461a      	mov	r2, r3
 8005542:	79fb      	ldrb	r3, [r7, #7]
 8005544:	429a      	cmp	r2, r3
 8005546:	d0b4      	beq.n	80054b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005548:	2300      	movs	r3, #0
}
 800554a:	4618      	mov	r0, r3
 800554c:	3718      	adds	r7, #24
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}

08005552 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005552:	b480      	push	{r7}
 8005554:	b085      	sub	sp, #20
 8005556:	af00      	add	r7, sp, #0
 8005558:	60f8      	str	r0, [r7, #12]
 800555a:	60b9      	str	r1, [r7, #8]
 800555c:	4613      	mov	r3, r2
 800555e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	68ba      	ldr	r2, [r7, #8]
 8005564:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	88fa      	ldrh	r2, [r7, #6]
 800556a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	88fa      	ldrh	r2, [r7, #6]
 8005570:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2200      	movs	r2, #0
 8005576:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2222      	movs	r2, #34	@ 0x22
 800557c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	691b      	ldr	r3, [r3, #16]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d007      	beq.n	8005598 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	68da      	ldr	r2, [r3, #12]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005596:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	695a      	ldr	r2, [r3, #20]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f042 0201 	orr.w	r2, r2, #1
 80055a6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	68da      	ldr	r2, [r3, #12]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f042 0220 	orr.w	r2, r2, #32
 80055b6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80055b8:	2300      	movs	r3, #0
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3714      	adds	r7, #20
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr

080055c6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80055c6:	b480      	push	{r7}
 80055c8:	b095      	sub	sp, #84	@ 0x54
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	330c      	adds	r3, #12
 80055d4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055d8:	e853 3f00 	ldrex	r3, [r3]
 80055dc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80055de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80055e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	330c      	adds	r3, #12
 80055ec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80055ee:	643a      	str	r2, [r7, #64]	@ 0x40
 80055f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80055f4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80055f6:	e841 2300 	strex	r3, r2, [r1]
 80055fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80055fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d1e5      	bne.n	80055ce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	3314      	adds	r3, #20
 8005608:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800560a:	6a3b      	ldr	r3, [r7, #32]
 800560c:	e853 3f00 	ldrex	r3, [r3]
 8005610:	61fb      	str	r3, [r7, #28]
   return(result);
 8005612:	69fb      	ldr	r3, [r7, #28]
 8005614:	f023 0301 	bic.w	r3, r3, #1
 8005618:	64bb      	str	r3, [r7, #72]	@ 0x48
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	3314      	adds	r3, #20
 8005620:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005622:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005624:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005626:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005628:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800562a:	e841 2300 	strex	r3, r2, [r1]
 800562e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005632:	2b00      	cmp	r3, #0
 8005634:	d1e5      	bne.n	8005602 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800563a:	2b01      	cmp	r3, #1
 800563c:	d119      	bne.n	8005672 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	330c      	adds	r3, #12
 8005644:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	e853 3f00 	ldrex	r3, [r3]
 800564c:	60bb      	str	r3, [r7, #8]
   return(result);
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	f023 0310 	bic.w	r3, r3, #16
 8005654:	647b      	str	r3, [r7, #68]	@ 0x44
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	330c      	adds	r3, #12
 800565c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800565e:	61ba      	str	r2, [r7, #24]
 8005660:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005662:	6979      	ldr	r1, [r7, #20]
 8005664:	69ba      	ldr	r2, [r7, #24]
 8005666:	e841 2300 	strex	r3, r2, [r1]
 800566a:	613b      	str	r3, [r7, #16]
   return(result);
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d1e5      	bne.n	800563e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2220      	movs	r2, #32
 8005676:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2200      	movs	r2, #0
 800567e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005680:	bf00      	nop
 8005682:	3754      	adds	r7, #84	@ 0x54
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr

0800568c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b084      	sub	sp, #16
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005698:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2200      	movs	r2, #0
 800569e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2200      	movs	r2, #0
 80056a4:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80056a6:	68f8      	ldr	r0, [r7, #12]
 80056a8:	f7ff fee4 	bl	8005474 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80056ac:	bf00      	nop
 80056ae:	3710      	adds	r7, #16
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}

080056b4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b085      	sub	sp, #20
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056c2:	b2db      	uxtb	r3, r3
 80056c4:	2b21      	cmp	r3, #33	@ 0x21
 80056c6:	d13e      	bne.n	8005746 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056d0:	d114      	bne.n	80056fc <UART_Transmit_IT+0x48>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	691b      	ldr	r3, [r3, #16]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d110      	bne.n	80056fc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6a1b      	ldr	r3, [r3, #32]
 80056de:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	881b      	ldrh	r3, [r3, #0]
 80056e4:	461a      	mov	r2, r3
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056ee:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6a1b      	ldr	r3, [r3, #32]
 80056f4:	1c9a      	adds	r2, r3, #2
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	621a      	str	r2, [r3, #32]
 80056fa:	e008      	b.n	800570e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6a1b      	ldr	r3, [r3, #32]
 8005700:	1c59      	adds	r1, r3, #1
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	6211      	str	r1, [r2, #32]
 8005706:	781a      	ldrb	r2, [r3, #0]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005712:	b29b      	uxth	r3, r3
 8005714:	3b01      	subs	r3, #1
 8005716:	b29b      	uxth	r3, r3
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	4619      	mov	r1, r3
 800571c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800571e:	2b00      	cmp	r3, #0
 8005720:	d10f      	bne.n	8005742 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	68da      	ldr	r2, [r3, #12]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005730:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	68da      	ldr	r2, [r3, #12]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005740:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005742:	2300      	movs	r3, #0
 8005744:	e000      	b.n	8005748 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005746:	2302      	movs	r3, #2
  }
}
 8005748:	4618      	mov	r0, r3
 800574a:	3714      	adds	r7, #20
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr

08005754 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b082      	sub	sp, #8
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	68da      	ldr	r2, [r3, #12]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800576a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2220      	movs	r2, #32
 8005770:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f7ff fe73 	bl	8005460 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800577a:	2300      	movs	r3, #0
}
 800577c:	4618      	mov	r0, r3
 800577e:	3708      	adds	r7, #8
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}

08005784 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b08c      	sub	sp, #48	@ 0x30
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005792:	b2db      	uxtb	r3, r3
 8005794:	2b22      	cmp	r3, #34	@ 0x22
 8005796:	f040 80ae 	bne.w	80058f6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057a2:	d117      	bne.n	80057d4 <UART_Receive_IT+0x50>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	691b      	ldr	r3, [r3, #16]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d113      	bne.n	80057d4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80057ac:	2300      	movs	r3, #0
 80057ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057b4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	b29b      	uxth	r3, r3
 80057be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057c2:	b29a      	uxth	r2, r3
 80057c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057c6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057cc:	1c9a      	adds	r2, r3, #2
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	629a      	str	r2, [r3, #40]	@ 0x28
 80057d2:	e026      	b.n	8005822 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80057da:	2300      	movs	r3, #0
 80057dc:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	689b      	ldr	r3, [r3, #8]
 80057e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057e6:	d007      	beq.n	80057f8 <UART_Receive_IT+0x74>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d10a      	bne.n	8005806 <UART_Receive_IT+0x82>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	691b      	ldr	r3, [r3, #16]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d106      	bne.n	8005806 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	b2da      	uxtb	r2, r3
 8005800:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005802:	701a      	strb	r2, [r3, #0]
 8005804:	e008      	b.n	8005818 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	b2db      	uxtb	r3, r3
 800580e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005812:	b2da      	uxtb	r2, r3
 8005814:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005816:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800581c:	1c5a      	adds	r2, r3, #1
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005826:	b29b      	uxth	r3, r3
 8005828:	3b01      	subs	r3, #1
 800582a:	b29b      	uxth	r3, r3
 800582c:	687a      	ldr	r2, [r7, #4]
 800582e:	4619      	mov	r1, r3
 8005830:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005832:	2b00      	cmp	r3, #0
 8005834:	d15d      	bne.n	80058f2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	68da      	ldr	r2, [r3, #12]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f022 0220 	bic.w	r2, r2, #32
 8005844:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	68da      	ldr	r2, [r3, #12]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005854:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	695a      	ldr	r2, [r3, #20]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f022 0201 	bic.w	r2, r2, #1
 8005864:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2220      	movs	r2, #32
 800586a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2200      	movs	r2, #0
 8005872:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005878:	2b01      	cmp	r3, #1
 800587a:	d135      	bne.n	80058e8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2200      	movs	r2, #0
 8005880:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	330c      	adds	r3, #12
 8005888:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	e853 3f00 	ldrex	r3, [r3]
 8005890:	613b      	str	r3, [r7, #16]
   return(result);
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	f023 0310 	bic.w	r3, r3, #16
 8005898:	627b      	str	r3, [r7, #36]	@ 0x24
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	330c      	adds	r3, #12
 80058a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058a2:	623a      	str	r2, [r7, #32]
 80058a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a6:	69f9      	ldr	r1, [r7, #28]
 80058a8:	6a3a      	ldr	r2, [r7, #32]
 80058aa:	e841 2300 	strex	r3, r2, [r1]
 80058ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80058b0:	69bb      	ldr	r3, [r7, #24]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d1e5      	bne.n	8005882 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f003 0310 	and.w	r3, r3, #16
 80058c0:	2b10      	cmp	r3, #16
 80058c2:	d10a      	bne.n	80058da <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80058c4:	2300      	movs	r3, #0
 80058c6:	60fb      	str	r3, [r7, #12]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	60fb      	str	r3, [r7, #12]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	60fb      	str	r3, [r7, #12]
 80058d8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80058de:	4619      	mov	r1, r3
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f7ff fdd1 	bl	8005488 <HAL_UARTEx_RxEventCallback>
 80058e6:	e002      	b.n	80058ee <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f7fb f98d 	bl	8000c08 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80058ee:	2300      	movs	r3, #0
 80058f0:	e002      	b.n	80058f8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80058f2:	2300      	movs	r3, #0
 80058f4:	e000      	b.n	80058f8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80058f6:	2302      	movs	r3, #2
  }
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3730      	adds	r7, #48	@ 0x30
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}

08005900 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005900:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005904:	b0c0      	sub	sp, #256	@ 0x100
 8005906:	af00      	add	r7, sp, #0
 8005908:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800590c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	691b      	ldr	r3, [r3, #16]
 8005914:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800591c:	68d9      	ldr	r1, [r3, #12]
 800591e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	ea40 0301 	orr.w	r3, r0, r1
 8005928:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800592a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800592e:	689a      	ldr	r2, [r3, #8]
 8005930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005934:	691b      	ldr	r3, [r3, #16]
 8005936:	431a      	orrs	r2, r3
 8005938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800593c:	695b      	ldr	r3, [r3, #20]
 800593e:	431a      	orrs	r2, r3
 8005940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005944:	69db      	ldr	r3, [r3, #28]
 8005946:	4313      	orrs	r3, r2
 8005948:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800594c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005958:	f021 010c 	bic.w	r1, r1, #12
 800595c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005966:	430b      	orrs	r3, r1
 8005968:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800596a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	695b      	ldr	r3, [r3, #20]
 8005972:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005976:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800597a:	6999      	ldr	r1, [r3, #24]
 800597c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	ea40 0301 	orr.w	r3, r0, r1
 8005986:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800598c:	681a      	ldr	r2, [r3, #0]
 800598e:	4b8f      	ldr	r3, [pc, #572]	@ (8005bcc <UART_SetConfig+0x2cc>)
 8005990:	429a      	cmp	r2, r3
 8005992:	d005      	beq.n	80059a0 <UART_SetConfig+0xa0>
 8005994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	4b8d      	ldr	r3, [pc, #564]	@ (8005bd0 <UART_SetConfig+0x2d0>)
 800599c:	429a      	cmp	r2, r3
 800599e:	d104      	bne.n	80059aa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80059a0:	f7fe fbd8 	bl	8004154 <HAL_RCC_GetPCLK2Freq>
 80059a4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80059a8:	e003      	b.n	80059b2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80059aa:	f7fe fbbf 	bl	800412c <HAL_RCC_GetPCLK1Freq>
 80059ae:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059b6:	69db      	ldr	r3, [r3, #28]
 80059b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80059bc:	f040 810c 	bne.w	8005bd8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80059c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059c4:	2200      	movs	r2, #0
 80059c6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80059ca:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80059ce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80059d2:	4622      	mov	r2, r4
 80059d4:	462b      	mov	r3, r5
 80059d6:	1891      	adds	r1, r2, r2
 80059d8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80059da:	415b      	adcs	r3, r3
 80059dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80059de:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80059e2:	4621      	mov	r1, r4
 80059e4:	eb12 0801 	adds.w	r8, r2, r1
 80059e8:	4629      	mov	r1, r5
 80059ea:	eb43 0901 	adc.w	r9, r3, r1
 80059ee:	f04f 0200 	mov.w	r2, #0
 80059f2:	f04f 0300 	mov.w	r3, #0
 80059f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80059fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80059fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005a02:	4690      	mov	r8, r2
 8005a04:	4699      	mov	r9, r3
 8005a06:	4623      	mov	r3, r4
 8005a08:	eb18 0303 	adds.w	r3, r8, r3
 8005a0c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005a10:	462b      	mov	r3, r5
 8005a12:	eb49 0303 	adc.w	r3, r9, r3
 8005a16:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005a1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	2200      	movs	r2, #0
 8005a22:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005a26:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005a2a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005a2e:	460b      	mov	r3, r1
 8005a30:	18db      	adds	r3, r3, r3
 8005a32:	653b      	str	r3, [r7, #80]	@ 0x50
 8005a34:	4613      	mov	r3, r2
 8005a36:	eb42 0303 	adc.w	r3, r2, r3
 8005a3a:	657b      	str	r3, [r7, #84]	@ 0x54
 8005a3c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005a40:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005a44:	f7fa fc2c 	bl	80002a0 <__aeabi_uldivmod>
 8005a48:	4602      	mov	r2, r0
 8005a4a:	460b      	mov	r3, r1
 8005a4c:	4b61      	ldr	r3, [pc, #388]	@ (8005bd4 <UART_SetConfig+0x2d4>)
 8005a4e:	fba3 2302 	umull	r2, r3, r3, r2
 8005a52:	095b      	lsrs	r3, r3, #5
 8005a54:	011c      	lsls	r4, r3, #4
 8005a56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005a60:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005a64:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005a68:	4642      	mov	r2, r8
 8005a6a:	464b      	mov	r3, r9
 8005a6c:	1891      	adds	r1, r2, r2
 8005a6e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005a70:	415b      	adcs	r3, r3
 8005a72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a74:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005a78:	4641      	mov	r1, r8
 8005a7a:	eb12 0a01 	adds.w	sl, r2, r1
 8005a7e:	4649      	mov	r1, r9
 8005a80:	eb43 0b01 	adc.w	fp, r3, r1
 8005a84:	f04f 0200 	mov.w	r2, #0
 8005a88:	f04f 0300 	mov.w	r3, #0
 8005a8c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005a90:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005a94:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a98:	4692      	mov	sl, r2
 8005a9a:	469b      	mov	fp, r3
 8005a9c:	4643      	mov	r3, r8
 8005a9e:	eb1a 0303 	adds.w	r3, sl, r3
 8005aa2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005aa6:	464b      	mov	r3, r9
 8005aa8:	eb4b 0303 	adc.w	r3, fp, r3
 8005aac:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005ab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005abc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005ac0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005ac4:	460b      	mov	r3, r1
 8005ac6:	18db      	adds	r3, r3, r3
 8005ac8:	643b      	str	r3, [r7, #64]	@ 0x40
 8005aca:	4613      	mov	r3, r2
 8005acc:	eb42 0303 	adc.w	r3, r2, r3
 8005ad0:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ad2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005ad6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005ada:	f7fa fbe1 	bl	80002a0 <__aeabi_uldivmod>
 8005ade:	4602      	mov	r2, r0
 8005ae0:	460b      	mov	r3, r1
 8005ae2:	4611      	mov	r1, r2
 8005ae4:	4b3b      	ldr	r3, [pc, #236]	@ (8005bd4 <UART_SetConfig+0x2d4>)
 8005ae6:	fba3 2301 	umull	r2, r3, r3, r1
 8005aea:	095b      	lsrs	r3, r3, #5
 8005aec:	2264      	movs	r2, #100	@ 0x64
 8005aee:	fb02 f303 	mul.w	r3, r2, r3
 8005af2:	1acb      	subs	r3, r1, r3
 8005af4:	00db      	lsls	r3, r3, #3
 8005af6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005afa:	4b36      	ldr	r3, [pc, #216]	@ (8005bd4 <UART_SetConfig+0x2d4>)
 8005afc:	fba3 2302 	umull	r2, r3, r3, r2
 8005b00:	095b      	lsrs	r3, r3, #5
 8005b02:	005b      	lsls	r3, r3, #1
 8005b04:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005b08:	441c      	add	r4, r3
 8005b0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b0e:	2200      	movs	r2, #0
 8005b10:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005b14:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005b18:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005b1c:	4642      	mov	r2, r8
 8005b1e:	464b      	mov	r3, r9
 8005b20:	1891      	adds	r1, r2, r2
 8005b22:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005b24:	415b      	adcs	r3, r3
 8005b26:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b28:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005b2c:	4641      	mov	r1, r8
 8005b2e:	1851      	adds	r1, r2, r1
 8005b30:	6339      	str	r1, [r7, #48]	@ 0x30
 8005b32:	4649      	mov	r1, r9
 8005b34:	414b      	adcs	r3, r1
 8005b36:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b38:	f04f 0200 	mov.w	r2, #0
 8005b3c:	f04f 0300 	mov.w	r3, #0
 8005b40:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005b44:	4659      	mov	r1, fp
 8005b46:	00cb      	lsls	r3, r1, #3
 8005b48:	4651      	mov	r1, sl
 8005b4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b4e:	4651      	mov	r1, sl
 8005b50:	00ca      	lsls	r2, r1, #3
 8005b52:	4610      	mov	r0, r2
 8005b54:	4619      	mov	r1, r3
 8005b56:	4603      	mov	r3, r0
 8005b58:	4642      	mov	r2, r8
 8005b5a:	189b      	adds	r3, r3, r2
 8005b5c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005b60:	464b      	mov	r3, r9
 8005b62:	460a      	mov	r2, r1
 8005b64:	eb42 0303 	adc.w	r3, r2, r3
 8005b68:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	2200      	movs	r2, #0
 8005b74:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005b78:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005b7c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005b80:	460b      	mov	r3, r1
 8005b82:	18db      	adds	r3, r3, r3
 8005b84:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b86:	4613      	mov	r3, r2
 8005b88:	eb42 0303 	adc.w	r3, r2, r3
 8005b8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b8e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005b92:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005b96:	f7fa fb83 	bl	80002a0 <__aeabi_uldivmod>
 8005b9a:	4602      	mov	r2, r0
 8005b9c:	460b      	mov	r3, r1
 8005b9e:	4b0d      	ldr	r3, [pc, #52]	@ (8005bd4 <UART_SetConfig+0x2d4>)
 8005ba0:	fba3 1302 	umull	r1, r3, r3, r2
 8005ba4:	095b      	lsrs	r3, r3, #5
 8005ba6:	2164      	movs	r1, #100	@ 0x64
 8005ba8:	fb01 f303 	mul.w	r3, r1, r3
 8005bac:	1ad3      	subs	r3, r2, r3
 8005bae:	00db      	lsls	r3, r3, #3
 8005bb0:	3332      	adds	r3, #50	@ 0x32
 8005bb2:	4a08      	ldr	r2, [pc, #32]	@ (8005bd4 <UART_SetConfig+0x2d4>)
 8005bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8005bb8:	095b      	lsrs	r3, r3, #5
 8005bba:	f003 0207 	and.w	r2, r3, #7
 8005bbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4422      	add	r2, r4
 8005bc6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005bc8:	e106      	b.n	8005dd8 <UART_SetConfig+0x4d8>
 8005bca:	bf00      	nop
 8005bcc:	40011000 	.word	0x40011000
 8005bd0:	40011400 	.word	0x40011400
 8005bd4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005bd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005bdc:	2200      	movs	r2, #0
 8005bde:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005be2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005be6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005bea:	4642      	mov	r2, r8
 8005bec:	464b      	mov	r3, r9
 8005bee:	1891      	adds	r1, r2, r2
 8005bf0:	6239      	str	r1, [r7, #32]
 8005bf2:	415b      	adcs	r3, r3
 8005bf4:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bf6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005bfa:	4641      	mov	r1, r8
 8005bfc:	1854      	adds	r4, r2, r1
 8005bfe:	4649      	mov	r1, r9
 8005c00:	eb43 0501 	adc.w	r5, r3, r1
 8005c04:	f04f 0200 	mov.w	r2, #0
 8005c08:	f04f 0300 	mov.w	r3, #0
 8005c0c:	00eb      	lsls	r3, r5, #3
 8005c0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005c12:	00e2      	lsls	r2, r4, #3
 8005c14:	4614      	mov	r4, r2
 8005c16:	461d      	mov	r5, r3
 8005c18:	4643      	mov	r3, r8
 8005c1a:	18e3      	adds	r3, r4, r3
 8005c1c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005c20:	464b      	mov	r3, r9
 8005c22:	eb45 0303 	adc.w	r3, r5, r3
 8005c26:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005c2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	2200      	movs	r2, #0
 8005c32:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005c36:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005c3a:	f04f 0200 	mov.w	r2, #0
 8005c3e:	f04f 0300 	mov.w	r3, #0
 8005c42:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005c46:	4629      	mov	r1, r5
 8005c48:	008b      	lsls	r3, r1, #2
 8005c4a:	4621      	mov	r1, r4
 8005c4c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c50:	4621      	mov	r1, r4
 8005c52:	008a      	lsls	r2, r1, #2
 8005c54:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005c58:	f7fa fb22 	bl	80002a0 <__aeabi_uldivmod>
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	460b      	mov	r3, r1
 8005c60:	4b60      	ldr	r3, [pc, #384]	@ (8005de4 <UART_SetConfig+0x4e4>)
 8005c62:	fba3 2302 	umull	r2, r3, r3, r2
 8005c66:	095b      	lsrs	r3, r3, #5
 8005c68:	011c      	lsls	r4, r3, #4
 8005c6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c6e:	2200      	movs	r2, #0
 8005c70:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005c74:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005c78:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005c7c:	4642      	mov	r2, r8
 8005c7e:	464b      	mov	r3, r9
 8005c80:	1891      	adds	r1, r2, r2
 8005c82:	61b9      	str	r1, [r7, #24]
 8005c84:	415b      	adcs	r3, r3
 8005c86:	61fb      	str	r3, [r7, #28]
 8005c88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c8c:	4641      	mov	r1, r8
 8005c8e:	1851      	adds	r1, r2, r1
 8005c90:	6139      	str	r1, [r7, #16]
 8005c92:	4649      	mov	r1, r9
 8005c94:	414b      	adcs	r3, r1
 8005c96:	617b      	str	r3, [r7, #20]
 8005c98:	f04f 0200 	mov.w	r2, #0
 8005c9c:	f04f 0300 	mov.w	r3, #0
 8005ca0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005ca4:	4659      	mov	r1, fp
 8005ca6:	00cb      	lsls	r3, r1, #3
 8005ca8:	4651      	mov	r1, sl
 8005caa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005cae:	4651      	mov	r1, sl
 8005cb0:	00ca      	lsls	r2, r1, #3
 8005cb2:	4610      	mov	r0, r2
 8005cb4:	4619      	mov	r1, r3
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	4642      	mov	r2, r8
 8005cba:	189b      	adds	r3, r3, r2
 8005cbc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005cc0:	464b      	mov	r3, r9
 8005cc2:	460a      	mov	r2, r1
 8005cc4:	eb42 0303 	adc.w	r3, r2, r3
 8005cc8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005cd6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005cd8:	f04f 0200 	mov.w	r2, #0
 8005cdc:	f04f 0300 	mov.w	r3, #0
 8005ce0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005ce4:	4649      	mov	r1, r9
 8005ce6:	008b      	lsls	r3, r1, #2
 8005ce8:	4641      	mov	r1, r8
 8005cea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005cee:	4641      	mov	r1, r8
 8005cf0:	008a      	lsls	r2, r1, #2
 8005cf2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005cf6:	f7fa fad3 	bl	80002a0 <__aeabi_uldivmod>
 8005cfa:	4602      	mov	r2, r0
 8005cfc:	460b      	mov	r3, r1
 8005cfe:	4611      	mov	r1, r2
 8005d00:	4b38      	ldr	r3, [pc, #224]	@ (8005de4 <UART_SetConfig+0x4e4>)
 8005d02:	fba3 2301 	umull	r2, r3, r3, r1
 8005d06:	095b      	lsrs	r3, r3, #5
 8005d08:	2264      	movs	r2, #100	@ 0x64
 8005d0a:	fb02 f303 	mul.w	r3, r2, r3
 8005d0e:	1acb      	subs	r3, r1, r3
 8005d10:	011b      	lsls	r3, r3, #4
 8005d12:	3332      	adds	r3, #50	@ 0x32
 8005d14:	4a33      	ldr	r2, [pc, #204]	@ (8005de4 <UART_SetConfig+0x4e4>)
 8005d16:	fba2 2303 	umull	r2, r3, r2, r3
 8005d1a:	095b      	lsrs	r3, r3, #5
 8005d1c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005d20:	441c      	add	r4, r3
 8005d22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d26:	2200      	movs	r2, #0
 8005d28:	673b      	str	r3, [r7, #112]	@ 0x70
 8005d2a:	677a      	str	r2, [r7, #116]	@ 0x74
 8005d2c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005d30:	4642      	mov	r2, r8
 8005d32:	464b      	mov	r3, r9
 8005d34:	1891      	adds	r1, r2, r2
 8005d36:	60b9      	str	r1, [r7, #8]
 8005d38:	415b      	adcs	r3, r3
 8005d3a:	60fb      	str	r3, [r7, #12]
 8005d3c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005d40:	4641      	mov	r1, r8
 8005d42:	1851      	adds	r1, r2, r1
 8005d44:	6039      	str	r1, [r7, #0]
 8005d46:	4649      	mov	r1, r9
 8005d48:	414b      	adcs	r3, r1
 8005d4a:	607b      	str	r3, [r7, #4]
 8005d4c:	f04f 0200 	mov.w	r2, #0
 8005d50:	f04f 0300 	mov.w	r3, #0
 8005d54:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005d58:	4659      	mov	r1, fp
 8005d5a:	00cb      	lsls	r3, r1, #3
 8005d5c:	4651      	mov	r1, sl
 8005d5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d62:	4651      	mov	r1, sl
 8005d64:	00ca      	lsls	r2, r1, #3
 8005d66:	4610      	mov	r0, r2
 8005d68:	4619      	mov	r1, r3
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	4642      	mov	r2, r8
 8005d6e:	189b      	adds	r3, r3, r2
 8005d70:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005d72:	464b      	mov	r3, r9
 8005d74:	460a      	mov	r2, r1
 8005d76:	eb42 0303 	adc.w	r3, r2, r3
 8005d7a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	2200      	movs	r2, #0
 8005d84:	663b      	str	r3, [r7, #96]	@ 0x60
 8005d86:	667a      	str	r2, [r7, #100]	@ 0x64
 8005d88:	f04f 0200 	mov.w	r2, #0
 8005d8c:	f04f 0300 	mov.w	r3, #0
 8005d90:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005d94:	4649      	mov	r1, r9
 8005d96:	008b      	lsls	r3, r1, #2
 8005d98:	4641      	mov	r1, r8
 8005d9a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d9e:	4641      	mov	r1, r8
 8005da0:	008a      	lsls	r2, r1, #2
 8005da2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005da6:	f7fa fa7b 	bl	80002a0 <__aeabi_uldivmod>
 8005daa:	4602      	mov	r2, r0
 8005dac:	460b      	mov	r3, r1
 8005dae:	4b0d      	ldr	r3, [pc, #52]	@ (8005de4 <UART_SetConfig+0x4e4>)
 8005db0:	fba3 1302 	umull	r1, r3, r3, r2
 8005db4:	095b      	lsrs	r3, r3, #5
 8005db6:	2164      	movs	r1, #100	@ 0x64
 8005db8:	fb01 f303 	mul.w	r3, r1, r3
 8005dbc:	1ad3      	subs	r3, r2, r3
 8005dbe:	011b      	lsls	r3, r3, #4
 8005dc0:	3332      	adds	r3, #50	@ 0x32
 8005dc2:	4a08      	ldr	r2, [pc, #32]	@ (8005de4 <UART_SetConfig+0x4e4>)
 8005dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8005dc8:	095b      	lsrs	r3, r3, #5
 8005dca:	f003 020f 	and.w	r2, r3, #15
 8005dce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4422      	add	r2, r4
 8005dd6:	609a      	str	r2, [r3, #8]
}
 8005dd8:	bf00      	nop
 8005dda:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005dde:	46bd      	mov	sp, r7
 8005de0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005de4:	51eb851f 	.word	0x51eb851f

08005de8 <siprintf>:
 8005de8:	b40e      	push	{r1, r2, r3}
 8005dea:	b510      	push	{r4, lr}
 8005dec:	b09d      	sub	sp, #116	@ 0x74
 8005dee:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005df0:	9002      	str	r0, [sp, #8]
 8005df2:	9006      	str	r0, [sp, #24]
 8005df4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005df8:	480a      	ldr	r0, [pc, #40]	@ (8005e24 <siprintf+0x3c>)
 8005dfa:	9107      	str	r1, [sp, #28]
 8005dfc:	9104      	str	r1, [sp, #16]
 8005dfe:	490a      	ldr	r1, [pc, #40]	@ (8005e28 <siprintf+0x40>)
 8005e00:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e04:	9105      	str	r1, [sp, #20]
 8005e06:	2400      	movs	r4, #0
 8005e08:	a902      	add	r1, sp, #8
 8005e0a:	6800      	ldr	r0, [r0, #0]
 8005e0c:	9301      	str	r3, [sp, #4]
 8005e0e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005e10:	f000 f9b2 	bl	8006178 <_svfiprintf_r>
 8005e14:	9b02      	ldr	r3, [sp, #8]
 8005e16:	701c      	strb	r4, [r3, #0]
 8005e18:	b01d      	add	sp, #116	@ 0x74
 8005e1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e1e:	b003      	add	sp, #12
 8005e20:	4770      	bx	lr
 8005e22:	bf00      	nop
 8005e24:	20000018 	.word	0x20000018
 8005e28:	ffff0208 	.word	0xffff0208

08005e2c <memcmp>:
 8005e2c:	b510      	push	{r4, lr}
 8005e2e:	3901      	subs	r1, #1
 8005e30:	4402      	add	r2, r0
 8005e32:	4290      	cmp	r0, r2
 8005e34:	d101      	bne.n	8005e3a <memcmp+0xe>
 8005e36:	2000      	movs	r0, #0
 8005e38:	e005      	b.n	8005e46 <memcmp+0x1a>
 8005e3a:	7803      	ldrb	r3, [r0, #0]
 8005e3c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005e40:	42a3      	cmp	r3, r4
 8005e42:	d001      	beq.n	8005e48 <memcmp+0x1c>
 8005e44:	1b18      	subs	r0, r3, r4
 8005e46:	bd10      	pop	{r4, pc}
 8005e48:	3001      	adds	r0, #1
 8005e4a:	e7f2      	b.n	8005e32 <memcmp+0x6>

08005e4c <memset>:
 8005e4c:	4402      	add	r2, r0
 8005e4e:	4603      	mov	r3, r0
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d100      	bne.n	8005e56 <memset+0xa>
 8005e54:	4770      	bx	lr
 8005e56:	f803 1b01 	strb.w	r1, [r3], #1
 8005e5a:	e7f9      	b.n	8005e50 <memset+0x4>

08005e5c <__errno>:
 8005e5c:	4b01      	ldr	r3, [pc, #4]	@ (8005e64 <__errno+0x8>)
 8005e5e:	6818      	ldr	r0, [r3, #0]
 8005e60:	4770      	bx	lr
 8005e62:	bf00      	nop
 8005e64:	20000018 	.word	0x20000018

08005e68 <__libc_init_array>:
 8005e68:	b570      	push	{r4, r5, r6, lr}
 8005e6a:	4d0d      	ldr	r5, [pc, #52]	@ (8005ea0 <__libc_init_array+0x38>)
 8005e6c:	4c0d      	ldr	r4, [pc, #52]	@ (8005ea4 <__libc_init_array+0x3c>)
 8005e6e:	1b64      	subs	r4, r4, r5
 8005e70:	10a4      	asrs	r4, r4, #2
 8005e72:	2600      	movs	r6, #0
 8005e74:	42a6      	cmp	r6, r4
 8005e76:	d109      	bne.n	8005e8c <__libc_init_array+0x24>
 8005e78:	4d0b      	ldr	r5, [pc, #44]	@ (8005ea8 <__libc_init_array+0x40>)
 8005e7a:	4c0c      	ldr	r4, [pc, #48]	@ (8005eac <__libc_init_array+0x44>)
 8005e7c:	f000 fc64 	bl	8006748 <_init>
 8005e80:	1b64      	subs	r4, r4, r5
 8005e82:	10a4      	asrs	r4, r4, #2
 8005e84:	2600      	movs	r6, #0
 8005e86:	42a6      	cmp	r6, r4
 8005e88:	d105      	bne.n	8005e96 <__libc_init_array+0x2e>
 8005e8a:	bd70      	pop	{r4, r5, r6, pc}
 8005e8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e90:	4798      	blx	r3
 8005e92:	3601      	adds	r6, #1
 8005e94:	e7ee      	b.n	8005e74 <__libc_init_array+0xc>
 8005e96:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e9a:	4798      	blx	r3
 8005e9c:	3601      	adds	r6, #1
 8005e9e:	e7f2      	b.n	8005e86 <__libc_init_array+0x1e>
 8005ea0:	08007594 	.word	0x08007594
 8005ea4:	08007594 	.word	0x08007594
 8005ea8:	08007594 	.word	0x08007594
 8005eac:	08007598 	.word	0x08007598

08005eb0 <__retarget_lock_acquire_recursive>:
 8005eb0:	4770      	bx	lr

08005eb2 <__retarget_lock_release_recursive>:
 8005eb2:	4770      	bx	lr

08005eb4 <memcpy>:
 8005eb4:	440a      	add	r2, r1
 8005eb6:	4291      	cmp	r1, r2
 8005eb8:	f100 33ff 	add.w	r3, r0, #4294967295
 8005ebc:	d100      	bne.n	8005ec0 <memcpy+0xc>
 8005ebe:	4770      	bx	lr
 8005ec0:	b510      	push	{r4, lr}
 8005ec2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ec6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005eca:	4291      	cmp	r1, r2
 8005ecc:	d1f9      	bne.n	8005ec2 <memcpy+0xe>
 8005ece:	bd10      	pop	{r4, pc}

08005ed0 <_free_r>:
 8005ed0:	b538      	push	{r3, r4, r5, lr}
 8005ed2:	4605      	mov	r5, r0
 8005ed4:	2900      	cmp	r1, #0
 8005ed6:	d041      	beq.n	8005f5c <_free_r+0x8c>
 8005ed8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005edc:	1f0c      	subs	r4, r1, #4
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	bfb8      	it	lt
 8005ee2:	18e4      	addlt	r4, r4, r3
 8005ee4:	f000 f8e0 	bl	80060a8 <__malloc_lock>
 8005ee8:	4a1d      	ldr	r2, [pc, #116]	@ (8005f60 <_free_r+0x90>)
 8005eea:	6813      	ldr	r3, [r2, #0]
 8005eec:	b933      	cbnz	r3, 8005efc <_free_r+0x2c>
 8005eee:	6063      	str	r3, [r4, #4]
 8005ef0:	6014      	str	r4, [r2, #0]
 8005ef2:	4628      	mov	r0, r5
 8005ef4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ef8:	f000 b8dc 	b.w	80060b4 <__malloc_unlock>
 8005efc:	42a3      	cmp	r3, r4
 8005efe:	d908      	bls.n	8005f12 <_free_r+0x42>
 8005f00:	6820      	ldr	r0, [r4, #0]
 8005f02:	1821      	adds	r1, r4, r0
 8005f04:	428b      	cmp	r3, r1
 8005f06:	bf01      	itttt	eq
 8005f08:	6819      	ldreq	r1, [r3, #0]
 8005f0a:	685b      	ldreq	r3, [r3, #4]
 8005f0c:	1809      	addeq	r1, r1, r0
 8005f0e:	6021      	streq	r1, [r4, #0]
 8005f10:	e7ed      	b.n	8005eee <_free_r+0x1e>
 8005f12:	461a      	mov	r2, r3
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	b10b      	cbz	r3, 8005f1c <_free_r+0x4c>
 8005f18:	42a3      	cmp	r3, r4
 8005f1a:	d9fa      	bls.n	8005f12 <_free_r+0x42>
 8005f1c:	6811      	ldr	r1, [r2, #0]
 8005f1e:	1850      	adds	r0, r2, r1
 8005f20:	42a0      	cmp	r0, r4
 8005f22:	d10b      	bne.n	8005f3c <_free_r+0x6c>
 8005f24:	6820      	ldr	r0, [r4, #0]
 8005f26:	4401      	add	r1, r0
 8005f28:	1850      	adds	r0, r2, r1
 8005f2a:	4283      	cmp	r3, r0
 8005f2c:	6011      	str	r1, [r2, #0]
 8005f2e:	d1e0      	bne.n	8005ef2 <_free_r+0x22>
 8005f30:	6818      	ldr	r0, [r3, #0]
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	6053      	str	r3, [r2, #4]
 8005f36:	4408      	add	r0, r1
 8005f38:	6010      	str	r0, [r2, #0]
 8005f3a:	e7da      	b.n	8005ef2 <_free_r+0x22>
 8005f3c:	d902      	bls.n	8005f44 <_free_r+0x74>
 8005f3e:	230c      	movs	r3, #12
 8005f40:	602b      	str	r3, [r5, #0]
 8005f42:	e7d6      	b.n	8005ef2 <_free_r+0x22>
 8005f44:	6820      	ldr	r0, [r4, #0]
 8005f46:	1821      	adds	r1, r4, r0
 8005f48:	428b      	cmp	r3, r1
 8005f4a:	bf04      	itt	eq
 8005f4c:	6819      	ldreq	r1, [r3, #0]
 8005f4e:	685b      	ldreq	r3, [r3, #4]
 8005f50:	6063      	str	r3, [r4, #4]
 8005f52:	bf04      	itt	eq
 8005f54:	1809      	addeq	r1, r1, r0
 8005f56:	6021      	streq	r1, [r4, #0]
 8005f58:	6054      	str	r4, [r2, #4]
 8005f5a:	e7ca      	b.n	8005ef2 <_free_r+0x22>
 8005f5c:	bd38      	pop	{r3, r4, r5, pc}
 8005f5e:	bf00      	nop
 8005f60:	20000a30 	.word	0x20000a30

08005f64 <sbrk_aligned>:
 8005f64:	b570      	push	{r4, r5, r6, lr}
 8005f66:	4e0f      	ldr	r6, [pc, #60]	@ (8005fa4 <sbrk_aligned+0x40>)
 8005f68:	460c      	mov	r4, r1
 8005f6a:	6831      	ldr	r1, [r6, #0]
 8005f6c:	4605      	mov	r5, r0
 8005f6e:	b911      	cbnz	r1, 8005f76 <sbrk_aligned+0x12>
 8005f70:	f000 fba4 	bl	80066bc <_sbrk_r>
 8005f74:	6030      	str	r0, [r6, #0]
 8005f76:	4621      	mov	r1, r4
 8005f78:	4628      	mov	r0, r5
 8005f7a:	f000 fb9f 	bl	80066bc <_sbrk_r>
 8005f7e:	1c43      	adds	r3, r0, #1
 8005f80:	d103      	bne.n	8005f8a <sbrk_aligned+0x26>
 8005f82:	f04f 34ff 	mov.w	r4, #4294967295
 8005f86:	4620      	mov	r0, r4
 8005f88:	bd70      	pop	{r4, r5, r6, pc}
 8005f8a:	1cc4      	adds	r4, r0, #3
 8005f8c:	f024 0403 	bic.w	r4, r4, #3
 8005f90:	42a0      	cmp	r0, r4
 8005f92:	d0f8      	beq.n	8005f86 <sbrk_aligned+0x22>
 8005f94:	1a21      	subs	r1, r4, r0
 8005f96:	4628      	mov	r0, r5
 8005f98:	f000 fb90 	bl	80066bc <_sbrk_r>
 8005f9c:	3001      	adds	r0, #1
 8005f9e:	d1f2      	bne.n	8005f86 <sbrk_aligned+0x22>
 8005fa0:	e7ef      	b.n	8005f82 <sbrk_aligned+0x1e>
 8005fa2:	bf00      	nop
 8005fa4:	20000a2c 	.word	0x20000a2c

08005fa8 <_malloc_r>:
 8005fa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005fac:	1ccd      	adds	r5, r1, #3
 8005fae:	f025 0503 	bic.w	r5, r5, #3
 8005fb2:	3508      	adds	r5, #8
 8005fb4:	2d0c      	cmp	r5, #12
 8005fb6:	bf38      	it	cc
 8005fb8:	250c      	movcc	r5, #12
 8005fba:	2d00      	cmp	r5, #0
 8005fbc:	4606      	mov	r6, r0
 8005fbe:	db01      	blt.n	8005fc4 <_malloc_r+0x1c>
 8005fc0:	42a9      	cmp	r1, r5
 8005fc2:	d904      	bls.n	8005fce <_malloc_r+0x26>
 8005fc4:	230c      	movs	r3, #12
 8005fc6:	6033      	str	r3, [r6, #0]
 8005fc8:	2000      	movs	r0, #0
 8005fca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005fce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80060a4 <_malloc_r+0xfc>
 8005fd2:	f000 f869 	bl	80060a8 <__malloc_lock>
 8005fd6:	f8d8 3000 	ldr.w	r3, [r8]
 8005fda:	461c      	mov	r4, r3
 8005fdc:	bb44      	cbnz	r4, 8006030 <_malloc_r+0x88>
 8005fde:	4629      	mov	r1, r5
 8005fe0:	4630      	mov	r0, r6
 8005fe2:	f7ff ffbf 	bl	8005f64 <sbrk_aligned>
 8005fe6:	1c43      	adds	r3, r0, #1
 8005fe8:	4604      	mov	r4, r0
 8005fea:	d158      	bne.n	800609e <_malloc_r+0xf6>
 8005fec:	f8d8 4000 	ldr.w	r4, [r8]
 8005ff0:	4627      	mov	r7, r4
 8005ff2:	2f00      	cmp	r7, #0
 8005ff4:	d143      	bne.n	800607e <_malloc_r+0xd6>
 8005ff6:	2c00      	cmp	r4, #0
 8005ff8:	d04b      	beq.n	8006092 <_malloc_r+0xea>
 8005ffa:	6823      	ldr	r3, [r4, #0]
 8005ffc:	4639      	mov	r1, r7
 8005ffe:	4630      	mov	r0, r6
 8006000:	eb04 0903 	add.w	r9, r4, r3
 8006004:	f000 fb5a 	bl	80066bc <_sbrk_r>
 8006008:	4581      	cmp	r9, r0
 800600a:	d142      	bne.n	8006092 <_malloc_r+0xea>
 800600c:	6821      	ldr	r1, [r4, #0]
 800600e:	1a6d      	subs	r5, r5, r1
 8006010:	4629      	mov	r1, r5
 8006012:	4630      	mov	r0, r6
 8006014:	f7ff ffa6 	bl	8005f64 <sbrk_aligned>
 8006018:	3001      	adds	r0, #1
 800601a:	d03a      	beq.n	8006092 <_malloc_r+0xea>
 800601c:	6823      	ldr	r3, [r4, #0]
 800601e:	442b      	add	r3, r5
 8006020:	6023      	str	r3, [r4, #0]
 8006022:	f8d8 3000 	ldr.w	r3, [r8]
 8006026:	685a      	ldr	r2, [r3, #4]
 8006028:	bb62      	cbnz	r2, 8006084 <_malloc_r+0xdc>
 800602a:	f8c8 7000 	str.w	r7, [r8]
 800602e:	e00f      	b.n	8006050 <_malloc_r+0xa8>
 8006030:	6822      	ldr	r2, [r4, #0]
 8006032:	1b52      	subs	r2, r2, r5
 8006034:	d420      	bmi.n	8006078 <_malloc_r+0xd0>
 8006036:	2a0b      	cmp	r2, #11
 8006038:	d917      	bls.n	800606a <_malloc_r+0xc2>
 800603a:	1961      	adds	r1, r4, r5
 800603c:	42a3      	cmp	r3, r4
 800603e:	6025      	str	r5, [r4, #0]
 8006040:	bf18      	it	ne
 8006042:	6059      	strne	r1, [r3, #4]
 8006044:	6863      	ldr	r3, [r4, #4]
 8006046:	bf08      	it	eq
 8006048:	f8c8 1000 	streq.w	r1, [r8]
 800604c:	5162      	str	r2, [r4, r5]
 800604e:	604b      	str	r3, [r1, #4]
 8006050:	4630      	mov	r0, r6
 8006052:	f000 f82f 	bl	80060b4 <__malloc_unlock>
 8006056:	f104 000b 	add.w	r0, r4, #11
 800605a:	1d23      	adds	r3, r4, #4
 800605c:	f020 0007 	bic.w	r0, r0, #7
 8006060:	1ac2      	subs	r2, r0, r3
 8006062:	bf1c      	itt	ne
 8006064:	1a1b      	subne	r3, r3, r0
 8006066:	50a3      	strne	r3, [r4, r2]
 8006068:	e7af      	b.n	8005fca <_malloc_r+0x22>
 800606a:	6862      	ldr	r2, [r4, #4]
 800606c:	42a3      	cmp	r3, r4
 800606e:	bf0c      	ite	eq
 8006070:	f8c8 2000 	streq.w	r2, [r8]
 8006074:	605a      	strne	r2, [r3, #4]
 8006076:	e7eb      	b.n	8006050 <_malloc_r+0xa8>
 8006078:	4623      	mov	r3, r4
 800607a:	6864      	ldr	r4, [r4, #4]
 800607c:	e7ae      	b.n	8005fdc <_malloc_r+0x34>
 800607e:	463c      	mov	r4, r7
 8006080:	687f      	ldr	r7, [r7, #4]
 8006082:	e7b6      	b.n	8005ff2 <_malloc_r+0x4a>
 8006084:	461a      	mov	r2, r3
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	42a3      	cmp	r3, r4
 800608a:	d1fb      	bne.n	8006084 <_malloc_r+0xdc>
 800608c:	2300      	movs	r3, #0
 800608e:	6053      	str	r3, [r2, #4]
 8006090:	e7de      	b.n	8006050 <_malloc_r+0xa8>
 8006092:	230c      	movs	r3, #12
 8006094:	6033      	str	r3, [r6, #0]
 8006096:	4630      	mov	r0, r6
 8006098:	f000 f80c 	bl	80060b4 <__malloc_unlock>
 800609c:	e794      	b.n	8005fc8 <_malloc_r+0x20>
 800609e:	6005      	str	r5, [r0, #0]
 80060a0:	e7d6      	b.n	8006050 <_malloc_r+0xa8>
 80060a2:	bf00      	nop
 80060a4:	20000a30 	.word	0x20000a30

080060a8 <__malloc_lock>:
 80060a8:	4801      	ldr	r0, [pc, #4]	@ (80060b0 <__malloc_lock+0x8>)
 80060aa:	f7ff bf01 	b.w	8005eb0 <__retarget_lock_acquire_recursive>
 80060ae:	bf00      	nop
 80060b0:	20000a28 	.word	0x20000a28

080060b4 <__malloc_unlock>:
 80060b4:	4801      	ldr	r0, [pc, #4]	@ (80060bc <__malloc_unlock+0x8>)
 80060b6:	f7ff befc 	b.w	8005eb2 <__retarget_lock_release_recursive>
 80060ba:	bf00      	nop
 80060bc:	20000a28 	.word	0x20000a28

080060c0 <__ssputs_r>:
 80060c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060c4:	688e      	ldr	r6, [r1, #8]
 80060c6:	461f      	mov	r7, r3
 80060c8:	42be      	cmp	r6, r7
 80060ca:	680b      	ldr	r3, [r1, #0]
 80060cc:	4682      	mov	sl, r0
 80060ce:	460c      	mov	r4, r1
 80060d0:	4690      	mov	r8, r2
 80060d2:	d82d      	bhi.n	8006130 <__ssputs_r+0x70>
 80060d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80060d8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80060dc:	d026      	beq.n	800612c <__ssputs_r+0x6c>
 80060de:	6965      	ldr	r5, [r4, #20]
 80060e0:	6909      	ldr	r1, [r1, #16]
 80060e2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80060e6:	eba3 0901 	sub.w	r9, r3, r1
 80060ea:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80060ee:	1c7b      	adds	r3, r7, #1
 80060f0:	444b      	add	r3, r9
 80060f2:	106d      	asrs	r5, r5, #1
 80060f4:	429d      	cmp	r5, r3
 80060f6:	bf38      	it	cc
 80060f8:	461d      	movcc	r5, r3
 80060fa:	0553      	lsls	r3, r2, #21
 80060fc:	d527      	bpl.n	800614e <__ssputs_r+0x8e>
 80060fe:	4629      	mov	r1, r5
 8006100:	f7ff ff52 	bl	8005fa8 <_malloc_r>
 8006104:	4606      	mov	r6, r0
 8006106:	b360      	cbz	r0, 8006162 <__ssputs_r+0xa2>
 8006108:	6921      	ldr	r1, [r4, #16]
 800610a:	464a      	mov	r2, r9
 800610c:	f7ff fed2 	bl	8005eb4 <memcpy>
 8006110:	89a3      	ldrh	r3, [r4, #12]
 8006112:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006116:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800611a:	81a3      	strh	r3, [r4, #12]
 800611c:	6126      	str	r6, [r4, #16]
 800611e:	6165      	str	r5, [r4, #20]
 8006120:	444e      	add	r6, r9
 8006122:	eba5 0509 	sub.w	r5, r5, r9
 8006126:	6026      	str	r6, [r4, #0]
 8006128:	60a5      	str	r5, [r4, #8]
 800612a:	463e      	mov	r6, r7
 800612c:	42be      	cmp	r6, r7
 800612e:	d900      	bls.n	8006132 <__ssputs_r+0x72>
 8006130:	463e      	mov	r6, r7
 8006132:	6820      	ldr	r0, [r4, #0]
 8006134:	4632      	mov	r2, r6
 8006136:	4641      	mov	r1, r8
 8006138:	f000 faa6 	bl	8006688 <memmove>
 800613c:	68a3      	ldr	r3, [r4, #8]
 800613e:	1b9b      	subs	r3, r3, r6
 8006140:	60a3      	str	r3, [r4, #8]
 8006142:	6823      	ldr	r3, [r4, #0]
 8006144:	4433      	add	r3, r6
 8006146:	6023      	str	r3, [r4, #0]
 8006148:	2000      	movs	r0, #0
 800614a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800614e:	462a      	mov	r2, r5
 8006150:	f000 fac4 	bl	80066dc <_realloc_r>
 8006154:	4606      	mov	r6, r0
 8006156:	2800      	cmp	r0, #0
 8006158:	d1e0      	bne.n	800611c <__ssputs_r+0x5c>
 800615a:	6921      	ldr	r1, [r4, #16]
 800615c:	4650      	mov	r0, sl
 800615e:	f7ff feb7 	bl	8005ed0 <_free_r>
 8006162:	230c      	movs	r3, #12
 8006164:	f8ca 3000 	str.w	r3, [sl]
 8006168:	89a3      	ldrh	r3, [r4, #12]
 800616a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800616e:	81a3      	strh	r3, [r4, #12]
 8006170:	f04f 30ff 	mov.w	r0, #4294967295
 8006174:	e7e9      	b.n	800614a <__ssputs_r+0x8a>
	...

08006178 <_svfiprintf_r>:
 8006178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800617c:	4698      	mov	r8, r3
 800617e:	898b      	ldrh	r3, [r1, #12]
 8006180:	061b      	lsls	r3, r3, #24
 8006182:	b09d      	sub	sp, #116	@ 0x74
 8006184:	4607      	mov	r7, r0
 8006186:	460d      	mov	r5, r1
 8006188:	4614      	mov	r4, r2
 800618a:	d510      	bpl.n	80061ae <_svfiprintf_r+0x36>
 800618c:	690b      	ldr	r3, [r1, #16]
 800618e:	b973      	cbnz	r3, 80061ae <_svfiprintf_r+0x36>
 8006190:	2140      	movs	r1, #64	@ 0x40
 8006192:	f7ff ff09 	bl	8005fa8 <_malloc_r>
 8006196:	6028      	str	r0, [r5, #0]
 8006198:	6128      	str	r0, [r5, #16]
 800619a:	b930      	cbnz	r0, 80061aa <_svfiprintf_r+0x32>
 800619c:	230c      	movs	r3, #12
 800619e:	603b      	str	r3, [r7, #0]
 80061a0:	f04f 30ff 	mov.w	r0, #4294967295
 80061a4:	b01d      	add	sp, #116	@ 0x74
 80061a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061aa:	2340      	movs	r3, #64	@ 0x40
 80061ac:	616b      	str	r3, [r5, #20]
 80061ae:	2300      	movs	r3, #0
 80061b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80061b2:	2320      	movs	r3, #32
 80061b4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80061b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80061bc:	2330      	movs	r3, #48	@ 0x30
 80061be:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800635c <_svfiprintf_r+0x1e4>
 80061c2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80061c6:	f04f 0901 	mov.w	r9, #1
 80061ca:	4623      	mov	r3, r4
 80061cc:	469a      	mov	sl, r3
 80061ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80061d2:	b10a      	cbz	r2, 80061d8 <_svfiprintf_r+0x60>
 80061d4:	2a25      	cmp	r2, #37	@ 0x25
 80061d6:	d1f9      	bne.n	80061cc <_svfiprintf_r+0x54>
 80061d8:	ebba 0b04 	subs.w	fp, sl, r4
 80061dc:	d00b      	beq.n	80061f6 <_svfiprintf_r+0x7e>
 80061de:	465b      	mov	r3, fp
 80061e0:	4622      	mov	r2, r4
 80061e2:	4629      	mov	r1, r5
 80061e4:	4638      	mov	r0, r7
 80061e6:	f7ff ff6b 	bl	80060c0 <__ssputs_r>
 80061ea:	3001      	adds	r0, #1
 80061ec:	f000 80a7 	beq.w	800633e <_svfiprintf_r+0x1c6>
 80061f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80061f2:	445a      	add	r2, fp
 80061f4:	9209      	str	r2, [sp, #36]	@ 0x24
 80061f6:	f89a 3000 	ldrb.w	r3, [sl]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	f000 809f 	beq.w	800633e <_svfiprintf_r+0x1c6>
 8006200:	2300      	movs	r3, #0
 8006202:	f04f 32ff 	mov.w	r2, #4294967295
 8006206:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800620a:	f10a 0a01 	add.w	sl, sl, #1
 800620e:	9304      	str	r3, [sp, #16]
 8006210:	9307      	str	r3, [sp, #28]
 8006212:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006216:	931a      	str	r3, [sp, #104]	@ 0x68
 8006218:	4654      	mov	r4, sl
 800621a:	2205      	movs	r2, #5
 800621c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006220:	484e      	ldr	r0, [pc, #312]	@ (800635c <_svfiprintf_r+0x1e4>)
 8006222:	f7f9 ffed 	bl	8000200 <memchr>
 8006226:	9a04      	ldr	r2, [sp, #16]
 8006228:	b9d8      	cbnz	r0, 8006262 <_svfiprintf_r+0xea>
 800622a:	06d0      	lsls	r0, r2, #27
 800622c:	bf44      	itt	mi
 800622e:	2320      	movmi	r3, #32
 8006230:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006234:	0711      	lsls	r1, r2, #28
 8006236:	bf44      	itt	mi
 8006238:	232b      	movmi	r3, #43	@ 0x2b
 800623a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800623e:	f89a 3000 	ldrb.w	r3, [sl]
 8006242:	2b2a      	cmp	r3, #42	@ 0x2a
 8006244:	d015      	beq.n	8006272 <_svfiprintf_r+0xfa>
 8006246:	9a07      	ldr	r2, [sp, #28]
 8006248:	4654      	mov	r4, sl
 800624a:	2000      	movs	r0, #0
 800624c:	f04f 0c0a 	mov.w	ip, #10
 8006250:	4621      	mov	r1, r4
 8006252:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006256:	3b30      	subs	r3, #48	@ 0x30
 8006258:	2b09      	cmp	r3, #9
 800625a:	d94b      	bls.n	80062f4 <_svfiprintf_r+0x17c>
 800625c:	b1b0      	cbz	r0, 800628c <_svfiprintf_r+0x114>
 800625e:	9207      	str	r2, [sp, #28]
 8006260:	e014      	b.n	800628c <_svfiprintf_r+0x114>
 8006262:	eba0 0308 	sub.w	r3, r0, r8
 8006266:	fa09 f303 	lsl.w	r3, r9, r3
 800626a:	4313      	orrs	r3, r2
 800626c:	9304      	str	r3, [sp, #16]
 800626e:	46a2      	mov	sl, r4
 8006270:	e7d2      	b.n	8006218 <_svfiprintf_r+0xa0>
 8006272:	9b03      	ldr	r3, [sp, #12]
 8006274:	1d19      	adds	r1, r3, #4
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	9103      	str	r1, [sp, #12]
 800627a:	2b00      	cmp	r3, #0
 800627c:	bfbb      	ittet	lt
 800627e:	425b      	neglt	r3, r3
 8006280:	f042 0202 	orrlt.w	r2, r2, #2
 8006284:	9307      	strge	r3, [sp, #28]
 8006286:	9307      	strlt	r3, [sp, #28]
 8006288:	bfb8      	it	lt
 800628a:	9204      	strlt	r2, [sp, #16]
 800628c:	7823      	ldrb	r3, [r4, #0]
 800628e:	2b2e      	cmp	r3, #46	@ 0x2e
 8006290:	d10a      	bne.n	80062a8 <_svfiprintf_r+0x130>
 8006292:	7863      	ldrb	r3, [r4, #1]
 8006294:	2b2a      	cmp	r3, #42	@ 0x2a
 8006296:	d132      	bne.n	80062fe <_svfiprintf_r+0x186>
 8006298:	9b03      	ldr	r3, [sp, #12]
 800629a:	1d1a      	adds	r2, r3, #4
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	9203      	str	r2, [sp, #12]
 80062a0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80062a4:	3402      	adds	r4, #2
 80062a6:	9305      	str	r3, [sp, #20]
 80062a8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800636c <_svfiprintf_r+0x1f4>
 80062ac:	7821      	ldrb	r1, [r4, #0]
 80062ae:	2203      	movs	r2, #3
 80062b0:	4650      	mov	r0, sl
 80062b2:	f7f9 ffa5 	bl	8000200 <memchr>
 80062b6:	b138      	cbz	r0, 80062c8 <_svfiprintf_r+0x150>
 80062b8:	9b04      	ldr	r3, [sp, #16]
 80062ba:	eba0 000a 	sub.w	r0, r0, sl
 80062be:	2240      	movs	r2, #64	@ 0x40
 80062c0:	4082      	lsls	r2, r0
 80062c2:	4313      	orrs	r3, r2
 80062c4:	3401      	adds	r4, #1
 80062c6:	9304      	str	r3, [sp, #16]
 80062c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062cc:	4824      	ldr	r0, [pc, #144]	@ (8006360 <_svfiprintf_r+0x1e8>)
 80062ce:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80062d2:	2206      	movs	r2, #6
 80062d4:	f7f9 ff94 	bl	8000200 <memchr>
 80062d8:	2800      	cmp	r0, #0
 80062da:	d036      	beq.n	800634a <_svfiprintf_r+0x1d2>
 80062dc:	4b21      	ldr	r3, [pc, #132]	@ (8006364 <_svfiprintf_r+0x1ec>)
 80062de:	bb1b      	cbnz	r3, 8006328 <_svfiprintf_r+0x1b0>
 80062e0:	9b03      	ldr	r3, [sp, #12]
 80062e2:	3307      	adds	r3, #7
 80062e4:	f023 0307 	bic.w	r3, r3, #7
 80062e8:	3308      	adds	r3, #8
 80062ea:	9303      	str	r3, [sp, #12]
 80062ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062ee:	4433      	add	r3, r6
 80062f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80062f2:	e76a      	b.n	80061ca <_svfiprintf_r+0x52>
 80062f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80062f8:	460c      	mov	r4, r1
 80062fa:	2001      	movs	r0, #1
 80062fc:	e7a8      	b.n	8006250 <_svfiprintf_r+0xd8>
 80062fe:	2300      	movs	r3, #0
 8006300:	3401      	adds	r4, #1
 8006302:	9305      	str	r3, [sp, #20]
 8006304:	4619      	mov	r1, r3
 8006306:	f04f 0c0a 	mov.w	ip, #10
 800630a:	4620      	mov	r0, r4
 800630c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006310:	3a30      	subs	r2, #48	@ 0x30
 8006312:	2a09      	cmp	r2, #9
 8006314:	d903      	bls.n	800631e <_svfiprintf_r+0x1a6>
 8006316:	2b00      	cmp	r3, #0
 8006318:	d0c6      	beq.n	80062a8 <_svfiprintf_r+0x130>
 800631a:	9105      	str	r1, [sp, #20]
 800631c:	e7c4      	b.n	80062a8 <_svfiprintf_r+0x130>
 800631e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006322:	4604      	mov	r4, r0
 8006324:	2301      	movs	r3, #1
 8006326:	e7f0      	b.n	800630a <_svfiprintf_r+0x192>
 8006328:	ab03      	add	r3, sp, #12
 800632a:	9300      	str	r3, [sp, #0]
 800632c:	462a      	mov	r2, r5
 800632e:	4b0e      	ldr	r3, [pc, #56]	@ (8006368 <_svfiprintf_r+0x1f0>)
 8006330:	a904      	add	r1, sp, #16
 8006332:	4638      	mov	r0, r7
 8006334:	f3af 8000 	nop.w
 8006338:	1c42      	adds	r2, r0, #1
 800633a:	4606      	mov	r6, r0
 800633c:	d1d6      	bne.n	80062ec <_svfiprintf_r+0x174>
 800633e:	89ab      	ldrh	r3, [r5, #12]
 8006340:	065b      	lsls	r3, r3, #25
 8006342:	f53f af2d 	bmi.w	80061a0 <_svfiprintf_r+0x28>
 8006346:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006348:	e72c      	b.n	80061a4 <_svfiprintf_r+0x2c>
 800634a:	ab03      	add	r3, sp, #12
 800634c:	9300      	str	r3, [sp, #0]
 800634e:	462a      	mov	r2, r5
 8006350:	4b05      	ldr	r3, [pc, #20]	@ (8006368 <_svfiprintf_r+0x1f0>)
 8006352:	a904      	add	r1, sp, #16
 8006354:	4638      	mov	r0, r7
 8006356:	f000 f879 	bl	800644c <_printf_i>
 800635a:	e7ed      	b.n	8006338 <_svfiprintf_r+0x1c0>
 800635c:	08007558 	.word	0x08007558
 8006360:	08007562 	.word	0x08007562
 8006364:	00000000 	.word	0x00000000
 8006368:	080060c1 	.word	0x080060c1
 800636c:	0800755e 	.word	0x0800755e

08006370 <_printf_common>:
 8006370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006374:	4616      	mov	r6, r2
 8006376:	4698      	mov	r8, r3
 8006378:	688a      	ldr	r2, [r1, #8]
 800637a:	690b      	ldr	r3, [r1, #16]
 800637c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006380:	4293      	cmp	r3, r2
 8006382:	bfb8      	it	lt
 8006384:	4613      	movlt	r3, r2
 8006386:	6033      	str	r3, [r6, #0]
 8006388:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800638c:	4607      	mov	r7, r0
 800638e:	460c      	mov	r4, r1
 8006390:	b10a      	cbz	r2, 8006396 <_printf_common+0x26>
 8006392:	3301      	adds	r3, #1
 8006394:	6033      	str	r3, [r6, #0]
 8006396:	6823      	ldr	r3, [r4, #0]
 8006398:	0699      	lsls	r1, r3, #26
 800639a:	bf42      	ittt	mi
 800639c:	6833      	ldrmi	r3, [r6, #0]
 800639e:	3302      	addmi	r3, #2
 80063a0:	6033      	strmi	r3, [r6, #0]
 80063a2:	6825      	ldr	r5, [r4, #0]
 80063a4:	f015 0506 	ands.w	r5, r5, #6
 80063a8:	d106      	bne.n	80063b8 <_printf_common+0x48>
 80063aa:	f104 0a19 	add.w	sl, r4, #25
 80063ae:	68e3      	ldr	r3, [r4, #12]
 80063b0:	6832      	ldr	r2, [r6, #0]
 80063b2:	1a9b      	subs	r3, r3, r2
 80063b4:	42ab      	cmp	r3, r5
 80063b6:	dc26      	bgt.n	8006406 <_printf_common+0x96>
 80063b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80063bc:	6822      	ldr	r2, [r4, #0]
 80063be:	3b00      	subs	r3, #0
 80063c0:	bf18      	it	ne
 80063c2:	2301      	movne	r3, #1
 80063c4:	0692      	lsls	r2, r2, #26
 80063c6:	d42b      	bmi.n	8006420 <_printf_common+0xb0>
 80063c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80063cc:	4641      	mov	r1, r8
 80063ce:	4638      	mov	r0, r7
 80063d0:	47c8      	blx	r9
 80063d2:	3001      	adds	r0, #1
 80063d4:	d01e      	beq.n	8006414 <_printf_common+0xa4>
 80063d6:	6823      	ldr	r3, [r4, #0]
 80063d8:	6922      	ldr	r2, [r4, #16]
 80063da:	f003 0306 	and.w	r3, r3, #6
 80063de:	2b04      	cmp	r3, #4
 80063e0:	bf02      	ittt	eq
 80063e2:	68e5      	ldreq	r5, [r4, #12]
 80063e4:	6833      	ldreq	r3, [r6, #0]
 80063e6:	1aed      	subeq	r5, r5, r3
 80063e8:	68a3      	ldr	r3, [r4, #8]
 80063ea:	bf0c      	ite	eq
 80063ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80063f0:	2500      	movne	r5, #0
 80063f2:	4293      	cmp	r3, r2
 80063f4:	bfc4      	itt	gt
 80063f6:	1a9b      	subgt	r3, r3, r2
 80063f8:	18ed      	addgt	r5, r5, r3
 80063fa:	2600      	movs	r6, #0
 80063fc:	341a      	adds	r4, #26
 80063fe:	42b5      	cmp	r5, r6
 8006400:	d11a      	bne.n	8006438 <_printf_common+0xc8>
 8006402:	2000      	movs	r0, #0
 8006404:	e008      	b.n	8006418 <_printf_common+0xa8>
 8006406:	2301      	movs	r3, #1
 8006408:	4652      	mov	r2, sl
 800640a:	4641      	mov	r1, r8
 800640c:	4638      	mov	r0, r7
 800640e:	47c8      	blx	r9
 8006410:	3001      	adds	r0, #1
 8006412:	d103      	bne.n	800641c <_printf_common+0xac>
 8006414:	f04f 30ff 	mov.w	r0, #4294967295
 8006418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800641c:	3501      	adds	r5, #1
 800641e:	e7c6      	b.n	80063ae <_printf_common+0x3e>
 8006420:	18e1      	adds	r1, r4, r3
 8006422:	1c5a      	adds	r2, r3, #1
 8006424:	2030      	movs	r0, #48	@ 0x30
 8006426:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800642a:	4422      	add	r2, r4
 800642c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006430:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006434:	3302      	adds	r3, #2
 8006436:	e7c7      	b.n	80063c8 <_printf_common+0x58>
 8006438:	2301      	movs	r3, #1
 800643a:	4622      	mov	r2, r4
 800643c:	4641      	mov	r1, r8
 800643e:	4638      	mov	r0, r7
 8006440:	47c8      	blx	r9
 8006442:	3001      	adds	r0, #1
 8006444:	d0e6      	beq.n	8006414 <_printf_common+0xa4>
 8006446:	3601      	adds	r6, #1
 8006448:	e7d9      	b.n	80063fe <_printf_common+0x8e>
	...

0800644c <_printf_i>:
 800644c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006450:	7e0f      	ldrb	r7, [r1, #24]
 8006452:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006454:	2f78      	cmp	r7, #120	@ 0x78
 8006456:	4691      	mov	r9, r2
 8006458:	4680      	mov	r8, r0
 800645a:	460c      	mov	r4, r1
 800645c:	469a      	mov	sl, r3
 800645e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006462:	d807      	bhi.n	8006474 <_printf_i+0x28>
 8006464:	2f62      	cmp	r7, #98	@ 0x62
 8006466:	d80a      	bhi.n	800647e <_printf_i+0x32>
 8006468:	2f00      	cmp	r7, #0
 800646a:	f000 80d1 	beq.w	8006610 <_printf_i+0x1c4>
 800646e:	2f58      	cmp	r7, #88	@ 0x58
 8006470:	f000 80b8 	beq.w	80065e4 <_printf_i+0x198>
 8006474:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006478:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800647c:	e03a      	b.n	80064f4 <_printf_i+0xa8>
 800647e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006482:	2b15      	cmp	r3, #21
 8006484:	d8f6      	bhi.n	8006474 <_printf_i+0x28>
 8006486:	a101      	add	r1, pc, #4	@ (adr r1, 800648c <_printf_i+0x40>)
 8006488:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800648c:	080064e5 	.word	0x080064e5
 8006490:	080064f9 	.word	0x080064f9
 8006494:	08006475 	.word	0x08006475
 8006498:	08006475 	.word	0x08006475
 800649c:	08006475 	.word	0x08006475
 80064a0:	08006475 	.word	0x08006475
 80064a4:	080064f9 	.word	0x080064f9
 80064a8:	08006475 	.word	0x08006475
 80064ac:	08006475 	.word	0x08006475
 80064b0:	08006475 	.word	0x08006475
 80064b4:	08006475 	.word	0x08006475
 80064b8:	080065f7 	.word	0x080065f7
 80064bc:	08006523 	.word	0x08006523
 80064c0:	080065b1 	.word	0x080065b1
 80064c4:	08006475 	.word	0x08006475
 80064c8:	08006475 	.word	0x08006475
 80064cc:	08006619 	.word	0x08006619
 80064d0:	08006475 	.word	0x08006475
 80064d4:	08006523 	.word	0x08006523
 80064d8:	08006475 	.word	0x08006475
 80064dc:	08006475 	.word	0x08006475
 80064e0:	080065b9 	.word	0x080065b9
 80064e4:	6833      	ldr	r3, [r6, #0]
 80064e6:	1d1a      	adds	r2, r3, #4
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	6032      	str	r2, [r6, #0]
 80064ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80064f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80064f4:	2301      	movs	r3, #1
 80064f6:	e09c      	b.n	8006632 <_printf_i+0x1e6>
 80064f8:	6833      	ldr	r3, [r6, #0]
 80064fa:	6820      	ldr	r0, [r4, #0]
 80064fc:	1d19      	adds	r1, r3, #4
 80064fe:	6031      	str	r1, [r6, #0]
 8006500:	0606      	lsls	r6, r0, #24
 8006502:	d501      	bpl.n	8006508 <_printf_i+0xbc>
 8006504:	681d      	ldr	r5, [r3, #0]
 8006506:	e003      	b.n	8006510 <_printf_i+0xc4>
 8006508:	0645      	lsls	r5, r0, #25
 800650a:	d5fb      	bpl.n	8006504 <_printf_i+0xb8>
 800650c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006510:	2d00      	cmp	r5, #0
 8006512:	da03      	bge.n	800651c <_printf_i+0xd0>
 8006514:	232d      	movs	r3, #45	@ 0x2d
 8006516:	426d      	negs	r5, r5
 8006518:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800651c:	4858      	ldr	r0, [pc, #352]	@ (8006680 <_printf_i+0x234>)
 800651e:	230a      	movs	r3, #10
 8006520:	e011      	b.n	8006546 <_printf_i+0xfa>
 8006522:	6821      	ldr	r1, [r4, #0]
 8006524:	6833      	ldr	r3, [r6, #0]
 8006526:	0608      	lsls	r0, r1, #24
 8006528:	f853 5b04 	ldr.w	r5, [r3], #4
 800652c:	d402      	bmi.n	8006534 <_printf_i+0xe8>
 800652e:	0649      	lsls	r1, r1, #25
 8006530:	bf48      	it	mi
 8006532:	b2ad      	uxthmi	r5, r5
 8006534:	2f6f      	cmp	r7, #111	@ 0x6f
 8006536:	4852      	ldr	r0, [pc, #328]	@ (8006680 <_printf_i+0x234>)
 8006538:	6033      	str	r3, [r6, #0]
 800653a:	bf14      	ite	ne
 800653c:	230a      	movne	r3, #10
 800653e:	2308      	moveq	r3, #8
 8006540:	2100      	movs	r1, #0
 8006542:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006546:	6866      	ldr	r6, [r4, #4]
 8006548:	60a6      	str	r6, [r4, #8]
 800654a:	2e00      	cmp	r6, #0
 800654c:	db05      	blt.n	800655a <_printf_i+0x10e>
 800654e:	6821      	ldr	r1, [r4, #0]
 8006550:	432e      	orrs	r6, r5
 8006552:	f021 0104 	bic.w	r1, r1, #4
 8006556:	6021      	str	r1, [r4, #0]
 8006558:	d04b      	beq.n	80065f2 <_printf_i+0x1a6>
 800655a:	4616      	mov	r6, r2
 800655c:	fbb5 f1f3 	udiv	r1, r5, r3
 8006560:	fb03 5711 	mls	r7, r3, r1, r5
 8006564:	5dc7      	ldrb	r7, [r0, r7]
 8006566:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800656a:	462f      	mov	r7, r5
 800656c:	42bb      	cmp	r3, r7
 800656e:	460d      	mov	r5, r1
 8006570:	d9f4      	bls.n	800655c <_printf_i+0x110>
 8006572:	2b08      	cmp	r3, #8
 8006574:	d10b      	bne.n	800658e <_printf_i+0x142>
 8006576:	6823      	ldr	r3, [r4, #0]
 8006578:	07df      	lsls	r7, r3, #31
 800657a:	d508      	bpl.n	800658e <_printf_i+0x142>
 800657c:	6923      	ldr	r3, [r4, #16]
 800657e:	6861      	ldr	r1, [r4, #4]
 8006580:	4299      	cmp	r1, r3
 8006582:	bfde      	ittt	le
 8006584:	2330      	movle	r3, #48	@ 0x30
 8006586:	f806 3c01 	strble.w	r3, [r6, #-1]
 800658a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800658e:	1b92      	subs	r2, r2, r6
 8006590:	6122      	str	r2, [r4, #16]
 8006592:	f8cd a000 	str.w	sl, [sp]
 8006596:	464b      	mov	r3, r9
 8006598:	aa03      	add	r2, sp, #12
 800659a:	4621      	mov	r1, r4
 800659c:	4640      	mov	r0, r8
 800659e:	f7ff fee7 	bl	8006370 <_printf_common>
 80065a2:	3001      	adds	r0, #1
 80065a4:	d14a      	bne.n	800663c <_printf_i+0x1f0>
 80065a6:	f04f 30ff 	mov.w	r0, #4294967295
 80065aa:	b004      	add	sp, #16
 80065ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065b0:	6823      	ldr	r3, [r4, #0]
 80065b2:	f043 0320 	orr.w	r3, r3, #32
 80065b6:	6023      	str	r3, [r4, #0]
 80065b8:	4832      	ldr	r0, [pc, #200]	@ (8006684 <_printf_i+0x238>)
 80065ba:	2778      	movs	r7, #120	@ 0x78
 80065bc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80065c0:	6823      	ldr	r3, [r4, #0]
 80065c2:	6831      	ldr	r1, [r6, #0]
 80065c4:	061f      	lsls	r7, r3, #24
 80065c6:	f851 5b04 	ldr.w	r5, [r1], #4
 80065ca:	d402      	bmi.n	80065d2 <_printf_i+0x186>
 80065cc:	065f      	lsls	r7, r3, #25
 80065ce:	bf48      	it	mi
 80065d0:	b2ad      	uxthmi	r5, r5
 80065d2:	6031      	str	r1, [r6, #0]
 80065d4:	07d9      	lsls	r1, r3, #31
 80065d6:	bf44      	itt	mi
 80065d8:	f043 0320 	orrmi.w	r3, r3, #32
 80065dc:	6023      	strmi	r3, [r4, #0]
 80065de:	b11d      	cbz	r5, 80065e8 <_printf_i+0x19c>
 80065e0:	2310      	movs	r3, #16
 80065e2:	e7ad      	b.n	8006540 <_printf_i+0xf4>
 80065e4:	4826      	ldr	r0, [pc, #152]	@ (8006680 <_printf_i+0x234>)
 80065e6:	e7e9      	b.n	80065bc <_printf_i+0x170>
 80065e8:	6823      	ldr	r3, [r4, #0]
 80065ea:	f023 0320 	bic.w	r3, r3, #32
 80065ee:	6023      	str	r3, [r4, #0]
 80065f0:	e7f6      	b.n	80065e0 <_printf_i+0x194>
 80065f2:	4616      	mov	r6, r2
 80065f4:	e7bd      	b.n	8006572 <_printf_i+0x126>
 80065f6:	6833      	ldr	r3, [r6, #0]
 80065f8:	6825      	ldr	r5, [r4, #0]
 80065fa:	6961      	ldr	r1, [r4, #20]
 80065fc:	1d18      	adds	r0, r3, #4
 80065fe:	6030      	str	r0, [r6, #0]
 8006600:	062e      	lsls	r6, r5, #24
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	d501      	bpl.n	800660a <_printf_i+0x1be>
 8006606:	6019      	str	r1, [r3, #0]
 8006608:	e002      	b.n	8006610 <_printf_i+0x1c4>
 800660a:	0668      	lsls	r0, r5, #25
 800660c:	d5fb      	bpl.n	8006606 <_printf_i+0x1ba>
 800660e:	8019      	strh	r1, [r3, #0]
 8006610:	2300      	movs	r3, #0
 8006612:	6123      	str	r3, [r4, #16]
 8006614:	4616      	mov	r6, r2
 8006616:	e7bc      	b.n	8006592 <_printf_i+0x146>
 8006618:	6833      	ldr	r3, [r6, #0]
 800661a:	1d1a      	adds	r2, r3, #4
 800661c:	6032      	str	r2, [r6, #0]
 800661e:	681e      	ldr	r6, [r3, #0]
 8006620:	6862      	ldr	r2, [r4, #4]
 8006622:	2100      	movs	r1, #0
 8006624:	4630      	mov	r0, r6
 8006626:	f7f9 fdeb 	bl	8000200 <memchr>
 800662a:	b108      	cbz	r0, 8006630 <_printf_i+0x1e4>
 800662c:	1b80      	subs	r0, r0, r6
 800662e:	6060      	str	r0, [r4, #4]
 8006630:	6863      	ldr	r3, [r4, #4]
 8006632:	6123      	str	r3, [r4, #16]
 8006634:	2300      	movs	r3, #0
 8006636:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800663a:	e7aa      	b.n	8006592 <_printf_i+0x146>
 800663c:	6923      	ldr	r3, [r4, #16]
 800663e:	4632      	mov	r2, r6
 8006640:	4649      	mov	r1, r9
 8006642:	4640      	mov	r0, r8
 8006644:	47d0      	blx	sl
 8006646:	3001      	adds	r0, #1
 8006648:	d0ad      	beq.n	80065a6 <_printf_i+0x15a>
 800664a:	6823      	ldr	r3, [r4, #0]
 800664c:	079b      	lsls	r3, r3, #30
 800664e:	d413      	bmi.n	8006678 <_printf_i+0x22c>
 8006650:	68e0      	ldr	r0, [r4, #12]
 8006652:	9b03      	ldr	r3, [sp, #12]
 8006654:	4298      	cmp	r0, r3
 8006656:	bfb8      	it	lt
 8006658:	4618      	movlt	r0, r3
 800665a:	e7a6      	b.n	80065aa <_printf_i+0x15e>
 800665c:	2301      	movs	r3, #1
 800665e:	4632      	mov	r2, r6
 8006660:	4649      	mov	r1, r9
 8006662:	4640      	mov	r0, r8
 8006664:	47d0      	blx	sl
 8006666:	3001      	adds	r0, #1
 8006668:	d09d      	beq.n	80065a6 <_printf_i+0x15a>
 800666a:	3501      	adds	r5, #1
 800666c:	68e3      	ldr	r3, [r4, #12]
 800666e:	9903      	ldr	r1, [sp, #12]
 8006670:	1a5b      	subs	r3, r3, r1
 8006672:	42ab      	cmp	r3, r5
 8006674:	dcf2      	bgt.n	800665c <_printf_i+0x210>
 8006676:	e7eb      	b.n	8006650 <_printf_i+0x204>
 8006678:	2500      	movs	r5, #0
 800667a:	f104 0619 	add.w	r6, r4, #25
 800667e:	e7f5      	b.n	800666c <_printf_i+0x220>
 8006680:	08007569 	.word	0x08007569
 8006684:	0800757a 	.word	0x0800757a

08006688 <memmove>:
 8006688:	4288      	cmp	r0, r1
 800668a:	b510      	push	{r4, lr}
 800668c:	eb01 0402 	add.w	r4, r1, r2
 8006690:	d902      	bls.n	8006698 <memmove+0x10>
 8006692:	4284      	cmp	r4, r0
 8006694:	4623      	mov	r3, r4
 8006696:	d807      	bhi.n	80066a8 <memmove+0x20>
 8006698:	1e43      	subs	r3, r0, #1
 800669a:	42a1      	cmp	r1, r4
 800669c:	d008      	beq.n	80066b0 <memmove+0x28>
 800669e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80066a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80066a6:	e7f8      	b.n	800669a <memmove+0x12>
 80066a8:	4402      	add	r2, r0
 80066aa:	4601      	mov	r1, r0
 80066ac:	428a      	cmp	r2, r1
 80066ae:	d100      	bne.n	80066b2 <memmove+0x2a>
 80066b0:	bd10      	pop	{r4, pc}
 80066b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80066b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80066ba:	e7f7      	b.n	80066ac <memmove+0x24>

080066bc <_sbrk_r>:
 80066bc:	b538      	push	{r3, r4, r5, lr}
 80066be:	4d06      	ldr	r5, [pc, #24]	@ (80066d8 <_sbrk_r+0x1c>)
 80066c0:	2300      	movs	r3, #0
 80066c2:	4604      	mov	r4, r0
 80066c4:	4608      	mov	r0, r1
 80066c6:	602b      	str	r3, [r5, #0]
 80066c8:	f7fa ff1a 	bl	8001500 <_sbrk>
 80066cc:	1c43      	adds	r3, r0, #1
 80066ce:	d102      	bne.n	80066d6 <_sbrk_r+0x1a>
 80066d0:	682b      	ldr	r3, [r5, #0]
 80066d2:	b103      	cbz	r3, 80066d6 <_sbrk_r+0x1a>
 80066d4:	6023      	str	r3, [r4, #0]
 80066d6:	bd38      	pop	{r3, r4, r5, pc}
 80066d8:	20000a24 	.word	0x20000a24

080066dc <_realloc_r>:
 80066dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066e0:	4607      	mov	r7, r0
 80066e2:	4614      	mov	r4, r2
 80066e4:	460d      	mov	r5, r1
 80066e6:	b921      	cbnz	r1, 80066f2 <_realloc_r+0x16>
 80066e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80066ec:	4611      	mov	r1, r2
 80066ee:	f7ff bc5b 	b.w	8005fa8 <_malloc_r>
 80066f2:	b92a      	cbnz	r2, 8006700 <_realloc_r+0x24>
 80066f4:	f7ff fbec 	bl	8005ed0 <_free_r>
 80066f8:	4625      	mov	r5, r4
 80066fa:	4628      	mov	r0, r5
 80066fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006700:	f000 f81a 	bl	8006738 <_malloc_usable_size_r>
 8006704:	4284      	cmp	r4, r0
 8006706:	4606      	mov	r6, r0
 8006708:	d802      	bhi.n	8006710 <_realloc_r+0x34>
 800670a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800670e:	d8f4      	bhi.n	80066fa <_realloc_r+0x1e>
 8006710:	4621      	mov	r1, r4
 8006712:	4638      	mov	r0, r7
 8006714:	f7ff fc48 	bl	8005fa8 <_malloc_r>
 8006718:	4680      	mov	r8, r0
 800671a:	b908      	cbnz	r0, 8006720 <_realloc_r+0x44>
 800671c:	4645      	mov	r5, r8
 800671e:	e7ec      	b.n	80066fa <_realloc_r+0x1e>
 8006720:	42b4      	cmp	r4, r6
 8006722:	4622      	mov	r2, r4
 8006724:	4629      	mov	r1, r5
 8006726:	bf28      	it	cs
 8006728:	4632      	movcs	r2, r6
 800672a:	f7ff fbc3 	bl	8005eb4 <memcpy>
 800672e:	4629      	mov	r1, r5
 8006730:	4638      	mov	r0, r7
 8006732:	f7ff fbcd 	bl	8005ed0 <_free_r>
 8006736:	e7f1      	b.n	800671c <_realloc_r+0x40>

08006738 <_malloc_usable_size_r>:
 8006738:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800673c:	1f18      	subs	r0, r3, #4
 800673e:	2b00      	cmp	r3, #0
 8006740:	bfbc      	itt	lt
 8006742:	580b      	ldrlt	r3, [r1, r0]
 8006744:	18c0      	addlt	r0, r0, r3
 8006746:	4770      	bx	lr

08006748 <_init>:
 8006748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800674a:	bf00      	nop
 800674c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800674e:	bc08      	pop	{r3}
 8006750:	469e      	mov	lr, r3
 8006752:	4770      	bx	lr

08006754 <_fini>:
 8006754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006756:	bf00      	nop
 8006758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800675a:	bc08      	pop	{r3}
 800675c:	469e      	mov	lr, r3
 800675e:	4770      	bx	lr
