
STM32F429I-DISCO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012ea0  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001914  08013050  08013050  00014050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 00000c82  08014964  08014964  00015964  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 00000030  080155e8  080155e8  000165e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 000000c8  08015618  08015618  00016618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 ExtFlashSection 000d1b60  080156e0  080156e0  000166e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.extab    00000000  080e7240  080e7240  000e90f0  2**0
                  CONTENTS
  8 .ARM          00000008  080e7240  080e7240  000e8240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .preinit_array 00000000  080e7248  080e7248  000e90f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .init_array   00000014  080e7248  080e7248  000e8248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .fini_array   00000008  080e725c  080e725c  000e825c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .data         000000f0  20000000  080e7264  000e9000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .bss          000128bc  200000f0  080e7354  000e90f0  2**2
                  ALLOC
 14 ._user_heap_stack 00001404  200129ac  080e7354  000e99ac  2**0
                  ALLOC
 15 .ARM.attributes 00000030  00000000  00000000  000e90f0  2**0
                  CONTENTS, READONLY
 16 TouchGFX_Framebuffer 00070800  d0000000  d0000000  000ea000  2**2
                  ALLOC
 17 .debug_line   0004a912  00000000  00000000  000e9120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000007e  00000000  00000000  00133a32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_info   000a4fb1  00000000  00000000  00133ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_abbrev 00013886  00000000  00000000  001d8a61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_aranges 00002db0  00000000  00000000  001ec2e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    0010ef69  00000000  00000000  001ef098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_rnglists 00003348  00000000  00000000  002fe001  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_loclists 0001a231  00000000  00000000  00301349  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_macro  0002f9ea  00000000  00000000  0031b57a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .comment      000000c2  00000000  00000000  0034af64  2**0
                  CONTENTS, READONLY
 27 .debug_frame  00008048  00000000  00000000  0034b028  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000f0 	.word	0x200000f0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08013038 	.word	0x08013038

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000f4 	.word	0x200000f4
 80001ec:	08013038 	.word	0x08013038

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80005bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80005f4 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80005c0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80005c2:	e003      	b.n	80005cc <LoopCopyDataInit>

080005c4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80005c4:	4b0c      	ldr	r3, [pc, #48]	@ (80005f8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80005c6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80005c8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80005ca:	3104      	adds	r1, #4

080005cc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80005cc:	480b      	ldr	r0, [pc, #44]	@ (80005fc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80005ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000600 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80005d0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80005d2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80005d4:	d3f6      	bcc.n	80005c4 <CopyDataInit>
  ldr  r2, =_sbss
 80005d6:	4a0b      	ldr	r2, [pc, #44]	@ (8000604 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80005d8:	e002      	b.n	80005e0 <LoopFillZerobss>

080005da <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80005da:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80005dc:	f842 3b04 	str.w	r3, [r2], #4

080005e0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80005e0:	4b09      	ldr	r3, [pc, #36]	@ (8000608 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80005e2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80005e4:	d3f9      	bcc.n	80005da <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80005e6:	f003 fc7b 	bl	8003ee0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005ea:	f011 ffb7 	bl	801255c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80005ee:	f000 ff07 	bl	8001400 <main>
  bx  lr    
 80005f2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80005f4:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80005f8:	080e7264 	.word	0x080e7264
  ldr  r0, =_sdata
 80005fc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000600:	200000f0 	.word	0x200000f0
  ldr  r2, =_sbss
 8000604:	200000f0 	.word	0x200000f0
  ldr  r3, = _ebss
 8000608:	200129ac 	.word	0x200129ac

0800060c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800060c:	e7fe      	b.n	800060c <ADC_IRQHandler>

0800060e <MX_TouchGFX_Init>:
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_init();
 800060e:	f000 bcc1 	b.w	8000f94 <touchgfx_init>

08000612 <TouchGFX_Task>:
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 8000612:	f000 bd2f 	b.w	8001074 <touchgfx_taskEntry>

08000616 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8000616:	4770      	bx	lr

08000618 <_ZN20STM32TouchControllerD0Ev>:
 8000618:	b510      	push	{r4, lr}
 800061a:	2104      	movs	r1, #4
 800061c:	4604      	mov	r4, r0
 800061e:	f011 fcbf 	bl	8011fa0 <_ZdlPvj>
 8000622:	4620      	mov	r0, r4
 8000624:	bd10      	pop	{r4, pc}
	...

08000628 <_Z11BSP_TS_Inittt>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 8000628:	b538      	push	{r3, r4, r5, lr}

	uint8_t ret = TS_ERROR;

    /* Initialize x and y positions boundaries */
    TsXBoundary = XSize;
 800062a:	4b0c      	ldr	r3, [pc, #48]	@ (800065c <_Z11BSP_TS_Inittt+0x34>)
    TsYBoundary = YSize;

    /* Read ID and verify if the IO expander is ready */
    if (stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 800062c:	4c0c      	ldr	r4, [pc, #48]	@ (8000660 <_Z11BSP_TS_Inittt+0x38>)
    TsXBoundary = XSize;
 800062e:	8018      	strh	r0, [r3, #0]
    TsYBoundary = YSize;
 8000630:	4b0c      	ldr	r3, [pc, #48]	@ (8000664 <_Z11BSP_TS_Inittt+0x3c>)
    if (stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 8000632:	2082      	movs	r0, #130	@ 0x82
    TsYBoundary = YSize;
 8000634:	8019      	strh	r1, [r3, #0]
    if (stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 8000636:	6863      	ldr	r3, [r4, #4]
 8000638:	4798      	blx	r3
 800063a:	f640 0311 	movw	r3, #2065	@ 0x811
 800063e:	4298      	cmp	r0, r3
 8000640:	d10a      	bne.n	8000658 <_Z11BSP_TS_Inittt+0x30>
    {
        /* Initialize the TS driver structure */
        TsDrv = &stmpe811_ts_drv;
 8000642:	4d09      	ldr	r5, [pc, #36]	@ (8000668 <_Z11BSP_TS_Inittt+0x40>)
    }

    if (ret == TS_OK)
    {
        /* Initialize the LL TS Driver */
        TsDrv->Init(TS_I2C_ADDRESS);
 8000644:	6823      	ldr	r3, [r4, #0]
        TsDrv = &stmpe811_ts_drv;
 8000646:	602c      	str	r4, [r5, #0]
        TsDrv->Init(TS_I2C_ADDRESS);
 8000648:	2082      	movs	r0, #130	@ 0x82
 800064a:	4798      	blx	r3
        TsDrv->Start(TS_I2C_ADDRESS);
 800064c:	682b      	ldr	r3, [r5, #0]
 800064e:	2082      	movs	r0, #130	@ 0x82
 8000650:	68db      	ldr	r3, [r3, #12]
 8000652:	4798      	blx	r3
 8000654:	2000      	movs	r0, #0
    }

    return ret;
}
 8000656:	bd38      	pop	{r3, r4, r5, pc}
	uint8_t ret = TS_ERROR;
 8000658:	2001      	movs	r0, #1
 800065a:	e7fc      	b.n	8000656 <_Z11BSP_TS_Inittt+0x2e>
 800065c:	20000116 	.word	0x20000116
 8000660:	2000004c 	.word	0x2000004c
 8000664:	20000114 	.word	0x20000114
 8000668:	20000118 	.word	0x20000118

0800066c <_ZN20STM32TouchController4initEv>:
    BSP_TS_Init(240, 320);
 800066c:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8000670:	20f0      	movs	r0, #240	@ 0xf0
 8000672:	f7ff bfd9 	b.w	8000628 <_Z11BSP_TS_Inittt>
	...

08000678 <_Z15BSP_TS_GetStateP15TS_StateTypeDef>:
/**
  * @brief  Returns status and positions of the touch screen.
  * @param  TsState: Pointer to touch screen current state structure
  */
void BSP_TS_GetState(TS_StateTypeDef* TsState)
{
 8000678:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    static uint32_t _x = 0, _y = 0;
    uint16_t xDiff, yDiff, x, y, xr, yr;

    TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 800067a:	4d35      	ldr	r5, [pc, #212]	@ (8000750 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xd8>)
 800067c:	682b      	ldr	r3, [r5, #0]
{
 800067e:	4604      	mov	r4, r0
    TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 8000680:	691b      	ldr	r3, [r3, #16]
 8000682:	2082      	movs	r0, #130	@ 0x82
 8000684:	4798      	blx	r3
 8000686:	8020      	strh	r0, [r4, #0]

    if (TsState->TouchDetected)
 8000688:	2800      	cmp	r0, #0
 800068a:	d04b      	beq.n	8000724 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xac>
    {
        TsDrv->GetXY(TS_I2C_ADDRESS, &x, &y);
 800068c:	682b      	ldr	r3, [r5, #0]
 800068e:	f10d 0206 	add.w	r2, sp, #6
 8000692:	695b      	ldr	r3, [r3, #20]
 8000694:	a901      	add	r1, sp, #4
 8000696:	2082      	movs	r0, #130	@ 0x82
 8000698:	4798      	blx	r3

        //Ensures the coordinates is within the screen
        if (y > 3700)
 800069a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800069e:	f640 6274 	movw	r2, #3700	@ 0xe74
 80006a2:	4293      	cmp	r3, r2
 80006a4:	d940      	bls.n	8000728 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xb0>
        {
            y = 3700;
 80006a6:	f8ad 2006 	strh.w	r2, [sp, #6]

        /* Y value first correction */
        y -= 180;

        /* Y value second correction */
        y = 3520 - y;
 80006aa:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80006ae:	1ad2      	subs	r2, r2, r3
 80006b0:	b292      	uxth	r2, r2

        /* Y value third correction */
        yr = y / 11;

        /* Return y position value */
        if (yr <= 0)
 80006b2:	2a0a      	cmp	r2, #10
 80006b4:	d93e      	bls.n	8000734 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xbc>
        yr = y / 11;
 80006b6:	230b      	movs	r3, #11
 80006b8:	fbb2 f2f3 	udiv	r2, r2, r3
        {
            yr = 0;
        }
        else if (yr > TsYBoundary)
 80006bc:	4b25      	ldr	r3, [pc, #148]	@ (8000754 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xdc>)
 80006be:	881b      	ldrh	r3, [r3, #0]
 80006c0:	429a      	cmp	r2, r3
 80006c2:	d901      	bls.n	80006c8 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x50>
        {
            yr = TsYBoundary - 1;
 80006c4:	3b01      	subs	r3, #1
 80006c6:	b29a      	uxth	r2, r3
        {
        }
        y = yr;

        /* X value first correction */
        if (x <= 3000)
 80006c8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80006cc:	4822      	ldr	r0, [pc, #136]	@ (8000758 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xe0>)
 80006ce:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 80006d2:	428b      	cmp	r3, r1
 80006d4:	d830      	bhi.n	8000738 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xc0>
        {
            x = 3870 - x;
 80006d6:	f5c3 6371 	rsb	r3, r3, #3856	@ 0xf10
 80006da:	330e      	adds	r3, #14
        else
        {
        }

        x = xr;
        xDiff = x > _x ? (x - _x) : (_x - x);
 80006dc:	6801      	ldr	r1, [r0, #0]
            x = 3870 - x;
 80006de:	b29b      	uxth	r3, r3
        xr = x / 15;
 80006e0:	250f      	movs	r5, #15
 80006e2:	fbb3 f3f5 	udiv	r3, r3, r5
        else if (xr > TsXBoundary)
 80006e6:	4d1d      	ldr	r5, [pc, #116]	@ (800075c <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xe4>)
 80006e8:	882d      	ldrh	r5, [r5, #0]
 80006ea:	42ab      	cmp	r3, r5
            xr = TsXBoundary - 1;
 80006ec:	bf84      	itt	hi
 80006ee:	f105 35ff 	addhi.w	r5, r5, #4294967295
 80006f2:	b2ab      	uxthhi	r3, r5
        xDiff = x > _x ? (x - _x) : (_x - x);
 80006f4:	428b      	cmp	r3, r1
 80006f6:	461d      	mov	r5, r3
 80006f8:	b28e      	uxth	r6, r1
 80006fa:	d926      	bls.n	800074a <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xd2>
 80006fc:	1b9b      	subs	r3, r3, r6
 80006fe:	b299      	uxth	r1, r3
        yDiff = y > _y ? (y - _y) : (_y - y);
 8000700:	4e17      	ldr	r6, [pc, #92]	@ (8000760 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xe8>)
 8000702:	6837      	ldr	r7, [r6, #0]
 8000704:	b2bb      	uxth	r3, r7
 8000706:	42ba      	cmp	r2, r7
 8000708:	bf8c      	ite	hi
 800070a:	1ad3      	subhi	r3, r2, r3
 800070c:	1a9b      	subls	r3, r3, r2
 800070e:	b29b      	uxth	r3, r3

        if (xDiff + yDiff > 5)
 8000710:	4419      	add	r1, r3
 8000712:	2905      	cmp	r1, #5
        {
            _x = x;
 8000714:	bfc8      	it	gt
 8000716:	6005      	strgt	r5, [r0, #0]
            _y = y;
        }

        /* Update the X position */
        TsState->X = _x;
 8000718:	6803      	ldr	r3, [r0, #0]
            _y = y;
 800071a:	bfc8      	it	gt
 800071c:	6032      	strgt	r2, [r6, #0]
        TsState->X = _x;
 800071e:	8063      	strh	r3, [r4, #2]

        /* Update the Y position */
        TsState->Y = _y;
 8000720:	6833      	ldr	r3, [r6, #0]
 8000722:	80a3      	strh	r3, [r4, #4]
    }
}
 8000724:	b003      	add	sp, #12
 8000726:	bdf0      	pop	{r4, r5, r6, r7, pc}
        else if (y < 180)
 8000728:	2bb3      	cmp	r3, #179	@ 0xb3
            y = 180;
 800072a:	bf9c      	itt	ls
 800072c:	23b4      	movls	r3, #180	@ 0xb4
 800072e:	f8ad 3006 	strhls.w	r3, [sp, #6]
 8000732:	e7ba      	b.n	80006aa <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x32>
            yr = 0;
 8000734:	2200      	movs	r2, #0
 8000736:	e7c7      	b.n	80006c8 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x50>
            x = 3800 - x;
 8000738:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 800073c:	3308      	adds	r3, #8
 800073e:	b29b      	uxth	r3, r3
        if (xr <= 0)
 8000740:	2b0e      	cmp	r3, #14
        xDiff = x > _x ? (x - _x) : (_x - x);
 8000742:	6801      	ldr	r1, [r0, #0]
        if (xr <= 0)
 8000744:	d8cc      	bhi.n	80006e0 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x68>
        xDiff = x > _x ? (x - _x) : (_x - x);
 8000746:	2500      	movs	r5, #0
            xr = 0;
 8000748:	462b      	mov	r3, r5
        xDiff = x > _x ? (x - _x) : (_x - x);
 800074a:	1ac9      	subs	r1, r1, r3
 800074c:	b289      	uxth	r1, r1
 800074e:	e7d7      	b.n	8000700 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x88>
 8000750:	20000118 	.word	0x20000118
 8000754:	20000114 	.word	0x20000114
 8000758:	20000110 	.word	0x20000110
 800075c:	20000116 	.word	0x20000116
 8000760:	2000010c 	.word	0x2000010c

08000764 <_ZN20STM32TouchController11sampleTouchERlS0_>:
{
 8000764:	b537      	push	{r0, r1, r2, r4, r5, lr}
    BSP_TS_GetState(&state);
 8000766:	4668      	mov	r0, sp
{
 8000768:	460d      	mov	r5, r1
 800076a:	4614      	mov	r4, r2
    BSP_TS_GetState(&state);
 800076c:	f7ff ff84 	bl	8000678 <_Z15BSP_TS_GetStateP15TS_StateTypeDef>
    if (state.TouchDetected)
 8000770:	f8bd 0000 	ldrh.w	r0, [sp]
 8000774:	b130      	cbz	r0, 8000784 <_ZN20STM32TouchController11sampleTouchERlS0_+0x20>
        x = state.X;
 8000776:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800077a:	602b      	str	r3, [r5, #0]
        y = state.Y;
 800077c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8000780:	6023      	str	r3, [r4, #0]
        return true;
 8000782:	2001      	movs	r0, #1
}
 8000784:	b003      	add	sp, #12
 8000786:	bd30      	pop	{r4, r5, pc}

08000788 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
    switch (id)
 8000788:	2803      	cmp	r0, #3
 800078a:	d821      	bhi.n	80007d0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x48>
 800078c:	e8df f000 	tbb	[pc, r0]
 8000790:	19120b02 	.word	0x19120b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 8000794:	4b0f      	ldr	r3, [pc, #60]	@ (80007d4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x4c>)
 8000796:	681a      	ldr	r2, [r3, #0]
 8000798:	fab2 f282 	clz	r2, r2
 800079c:	0952      	lsrs	r2, r2, #5
 800079e:	2104      	movs	r1, #4
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 80007a0:	480d      	ldr	r0, [pc, #52]	@ (80007d8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>)
 80007a2:	f003 be31 	b.w	8004408 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 80007a6:	4b0b      	ldr	r3, [pc, #44]	@ (80007d4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x4c>)
 80007a8:	685a      	ldr	r2, [r3, #4]
 80007aa:	fab2 f282 	clz	r2, r2
 80007ae:	0952      	lsrs	r2, r2, #5
 80007b0:	2108      	movs	r1, #8
 80007b2:	e7f5      	b.n	80007a0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
 80007b4:	4b07      	ldr	r3, [pc, #28]	@ (80007d4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x4c>)
 80007b6:	689a      	ldr	r2, [r3, #8]
 80007b8:	fab2 f282 	clz	r2, r2
 80007bc:	0952      	lsrs	r2, r2, #5
 80007be:	2110      	movs	r1, #16
 80007c0:	e7ee      	b.n	80007a0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 80007c2:	4b04      	ldr	r3, [pc, #16]	@ (80007d4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x4c>)
 80007c4:	68da      	ldr	r2, [r3, #12]
 80007c6:	fab2 f282 	clz	r2, r2
 80007ca:	0952      	lsrs	r2, r2, #5
 80007cc:	2120      	movs	r1, #32
 80007ce:	e7e7      	b.n	80007a0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
#endif
        break;
    }
}
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	2000011c 	.word	0x2000011c
 80007d8:	40021000 	.word	0x40021000

080007dc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
    switch (id)
 80007dc:	2803      	cmp	r0, #3
 80007de:	d821      	bhi.n	8000824 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x48>
 80007e0:	e8df f000 	tbb	[pc, r0]
 80007e4:	19120b02 	.word	0x19120b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 80007e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000828 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x4c>)
 80007ea:	681a      	ldr	r2, [r3, #0]
 80007ec:	3a00      	subs	r2, #0
 80007ee:	bf18      	it	ne
 80007f0:	2201      	movne	r2, #1
 80007f2:	2104      	movs	r1, #4
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 80007f4:	480d      	ldr	r0, [pc, #52]	@ (800082c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>)
 80007f6:	f003 be07 	b.w	8004408 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 80007fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000828 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x4c>)
 80007fc:	685a      	ldr	r2, [r3, #4]
 80007fe:	3a00      	subs	r2, #0
 8000800:	bf18      	it	ne
 8000802:	2201      	movne	r2, #1
 8000804:	2108      	movs	r1, #8
 8000806:	e7f5      	b.n	80007f4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 8000808:	4b07      	ldr	r3, [pc, #28]	@ (8000828 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x4c>)
 800080a:	689a      	ldr	r2, [r3, #8]
 800080c:	3a00      	subs	r2, #0
 800080e:	bf18      	it	ne
 8000810:	2201      	movne	r2, #1
 8000812:	2110      	movs	r1, #16
 8000814:	e7ee      	b.n	80007f4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 8000816:	4b04      	ldr	r3, [pc, #16]	@ (8000828 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x4c>)
 8000818:	68da      	ldr	r2, [r3, #12]
 800081a:	3a00      	subs	r2, #0
 800081c:	bf18      	it	ne
 800081e:	2201      	movne	r2, #1
 8000820:	2120      	movs	r1, #32
 8000822:	e7e7      	b.n	80007f4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
#endif
        break;
    }
}
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop
 8000828:	2000011c 	.word	0x2000011c
 800082c:	40021000 	.word	0x40021000

08000830 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
    switch (id)
 8000830:	2803      	cmp	r0, #3
 8000832:	d80d      	bhi.n	8000850 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x20>
 8000834:	e8df f000 	tbb	[pc, r0]
 8000838:	0a080602 	.word	0x0a080602
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 800083c:	2104      	movs	r1, #4
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 800083e:	4805      	ldr	r0, [pc, #20]	@ (8000854 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x24>)
 8000840:	f003 bde7 	b.w	8004412 <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8000844:	2108      	movs	r1, #8
 8000846:	e7fa      	b.n	800083e <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8000848:	2110      	movs	r1, #16
 800084a:	e7f8      	b.n	800083e <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 800084c:	2120      	movs	r1, #32
 800084e:	e7f6      	b.n	800083e <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
#endif
        break;
    }
}
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	40021000 	.word	0x40021000

08000858 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>:

/*
 * Gets the state of a pin.
 */
bool GPIO::get(GPIO_ID id)
{
 8000858:	b508      	push	{r3, lr}
    GPIO_PinState bitstatus = GPIO_PIN_RESET;
    switch (id)
 800085a:	2803      	cmp	r0, #3
 800085c:	d811      	bhi.n	8000882 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x2a>
 800085e:	e8df f000 	tbb	[pc, r0]
 8000862:	0a02      	.short	0x0a02
 8000864:	0e0c      	.short	0x0e0c
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8000866:	2104      	movs	r1, #4
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8000868:	4807      	ldr	r0, [pc, #28]	@ (8000888 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x30>)
 800086a:	f003 fdc7 	bl	80043fc <HAL_GPIO_ReadPin>
#endif
        break;
    }
    return (bitstatus == GPIO_PIN_SET);
}
 800086e:	1e43      	subs	r3, r0, #1
 8000870:	4258      	negs	r0, r3
 8000872:	4158      	adcs	r0, r3
 8000874:	bd08      	pop	{r3, pc}
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8000876:	2108      	movs	r1, #8
 8000878:	e7f6      	b.n	8000868 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 800087a:	2110      	movs	r1, #16
 800087c:	e7f4      	b.n	8000868 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 800087e:	2120      	movs	r1, #32
 8000880:	e7f2      	b.n	8000868 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
    switch (id)
 8000882:	2000      	movs	r0, #0
 8000884:	e7f3      	b.n	800086e <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x16>
 8000886:	bf00      	nop
 8000888:	40021000 	.word	0x40021000

0800088c <_ZN8touchgfx4GPIO4initEv>:
{
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	4d08      	ldr	r5, [pc, #32]	@ (80008b0 <_ZN8touchgfx4GPIO4initEv+0x24>)
    for (int id = 0; id <= 4; id++)
 8000890:	2400      	movs	r4, #0
                GPIO_InvertedLevels[id] = 1;
 8000892:	2601      	movs	r6, #1
        if (GPIO::get(static_cast<GPIO_ID>(id)))
 8000894:	b2e0      	uxtb	r0, r4
 8000896:	f7ff ffdf 	bl	8000858 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>
 800089a:	b118      	cbz	r0, 80008a4 <_ZN8touchgfx4GPIO4initEv+0x18>
            if (GPIO_InvertedLevels[id] != 1)
 800089c:	682b      	ldr	r3, [r5, #0]
 800089e:	2b01      	cmp	r3, #1
                GPIO_InvertedLevels[id] = 1;
 80008a0:	bf18      	it	ne
 80008a2:	602e      	strne	r6, [r5, #0]
    for (int id = 0; id <= 4; id++)
 80008a4:	3401      	adds	r4, #1
 80008a6:	2c05      	cmp	r4, #5
 80008a8:	f105 0504 	add.w	r5, r5, #4
 80008ac:	d1f2      	bne.n	8000894 <_ZN8touchgfx4GPIO4initEv+0x8>
}
 80008ae:	bd70      	pop	{r4, r5, r6, pc}
 80008b0:	2000011c 	.word	0x2000011c

080008b4 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
 80008b4:	2301      	movs	r3, #1
        requestedOrientation = orientation;
 80008b6:	f880 1078 	strb.w	r1, [r0, #120]	@ 0x78
        displayOrientationChangeRequested = true;
 80008ba:	f880 3079 	strb.w	r3, [r0, #121]	@ 0x79
    }
 80008be:	4770      	bx	lr

080008c0 <_ZN8touchgfx3HAL11submitGPU2DEv>:
     *
     * Only implemented on systems with the GPU2D IP.
     */
    virtual void submitGPU2D()
    {
    }
 80008c0:	4770      	bx	lr

080008c2 <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
 80008c2:	2000      	movs	r0, #0
 80008c4:	4770      	bx	lr
	...

080008c8 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
        USE_ANIMATION_STORAGE = animationStorage != 0;
 80008c8:	4b03      	ldr	r3, [pc, #12]	@ (80008d8 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 80008ca:	6441      	str	r1, [r0, #68]	@ 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 80008cc:	3900      	subs	r1, #0
 80008ce:	bf18      	it	ne
 80008d0:	2101      	movne	r1, #1
 80008d2:	7019      	strb	r1, [r3, #0]
    }
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	20012637 	.word	0x20012637

080008dc <_ZN8touchgfx3HAL16waitForLTDCLinesEt>:
     *
     * @param numberOfLines Number of lines to wait.
     */
    virtual void waitForLTDCLines(uint16_t numberOfLines)
    {
    }
 80008dc:	4770      	bx	lr

080008de <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 80008de:	2000      	movs	r0, #0
 80008e0:	4770      	bx	lr

080008e2 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
 80008e2:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80008e4:	b10b      	cbz	r3, 80008ea <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
 80008e6:	4608      	mov	r0, r1
 80008e8:	4718      	bx	r3
        }
    }
 80008ea:	4770      	bx	lr

080008ec <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 80008ec:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80008f0:	4770      	bx	lr

080008f2 <_ZN8touchgfx3HAL10getDMATypeEv>:
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
    {
        return dma.getDMAType();
 80008f2:	6840      	ldr	r0, [r0, #4]
 80008f4:	6803      	ldr	r3, [r0, #0]
 80008f6:	699b      	ldr	r3, [r3, #24]
 80008f8:	4718      	bx	r3

080008fa <_ZN8touchgfx3HAL25partialLTDCDeadlineMissedEv>:
     * This empty function can be overridden to e.g. output this error condition
     * on a pin.
     */
    virtual void partialLTDCDeadlineMissed()
    {
    }
 80008fa:	4770      	bx	lr

080008fc <_ZN8touchgfx3HAL15InvalidateCacheEv>:
     * Called by setRenderingMethod when changing rendering method
     * from Hardware to Software indicating the cache should be invalidated.
     */
    virtual void InvalidateCache()
    {
    }
 80008fc:	4770      	bx	lr

080008fe <_ZN8touchgfx3HAL10FlushCacheEv>:
     * Called by setRenderingMethod when changing rendering method
     * from Software to Hardware indicating the cache should be invalidated.
     */
    virtual void FlushCache()
    {
    }
 80008fe:	4770      	bx	lr

08000900 <_ZN8touchgfx3HAL22InvalidateTextureCacheEv>:
     * Called on every tick before drawing into the framebuffer to enable
     * invalidation of any caches that may be incoherent with main memory.
     */
    virtual void InvalidateTextureCache()
    {
    }
 8000900:	4770      	bx	lr

08000902 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8000902:	4770      	bx	lr

08000904 <_ZN11TouchGFXHAL10initializeEv>:

LOCATION_PRAGMA("TouchGFX_Framebuffer")
uint32_t animationStorage[(240 * 320 * 2 + 3) / 4] LOCATION_ATTRIBUTE("TouchGFX_Framebuffer");

void TouchGFXHAL::initialize()
{
 8000904:	b570      	push	{r4, r5, r6, lr}
 8000906:	4604      	mov	r4, r0
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8000908:	f000 fc5e 	bl	80011c8 <_ZN20TouchGFXGeneratedHAL10initializeEv>

    // existing frame buffers are re-used. just add animation storage
    setFrameBufferStartAddresses((void*)frameBuffer0, (void*)frameBuffer1, (void*)animationStorage);
 800090c:	6823      	ldr	r3, [r4, #0]
 800090e:	f8d3 508c 	ldr.w	r5, [r3, #140]	@ 0x8c
 8000912:	4b04      	ldr	r3, [pc, #16]	@ (8000924 <_ZN11TouchGFXHAL10initializeEv+0x20>)
 8000914:	e9d4 120f 	ldrd	r1, r2, [r4, #60]	@ 0x3c
 8000918:	4620      	mov	r0, r4
 800091a:	46ac      	mov	ip, r5
}
 800091c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    setFrameBufferStartAddresses((void*)frameBuffer0, (void*)frameBuffer1, (void*)animationStorage);
 8000920:	4760      	bx	ip
 8000922:	bf00      	nop
 8000924:	d0000000 	.word	0xd0000000

08000928 <_ZN11TouchGFXHAL9taskEntryEv>:

void TouchGFXHAL::taskEntry()
{
 8000928:	b508      	push	{r3, lr}
    enableLCDControllerInterrupt();
 800092a:	6803      	ldr	r3, [r0, #0]
{
 800092c:	4604      	mov	r4, r0
    enableLCDControllerInterrupt();
 800092e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8000932:	4798      	blx	r3
    enableInterrupts();
 8000934:	6823      	ldr	r3, [r4, #0]
 8000936:	4620      	mov	r0, r4
 8000938:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800093a:	4798      	blx	r3

    OSWrappers::waitForVSync();
 800093c:	f000 f8ec 	bl	8000b18 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 8000940:	6823      	ldr	r3, [r4, #0]
 8000942:	4620      	mov	r0, r4
 8000944:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000946:	4798      	blx	r3

    LCD_IO_WriteReg(0x29);
 8000948:	2029      	movs	r0, #41	@ 0x29
 800094a:	f000 ffaf 	bl	80018ac <LCD_IO_WriteReg>

    for (;;)
    {
        OSWrappers::waitForVSync();
 800094e:	f000 f8e3 	bl	8000b18 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 8000952:	6823      	ldr	r3, [r4, #0]
 8000954:	4620      	mov	r0, r4
 8000956:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000958:	4798      	blx	r3
    for (;;)
 800095a:	e7f8      	b.n	800094e <_ZN11TouchGFXHAL9taskEntryEv+0x26>

0800095c <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 800095c:	b510      	push	{r4, lr}
 800095e:	4604      	mov	r4, r0
        swapFrameBuffers();
 8000960:	f008 fe60 	bl	8009624 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8000964:	6823      	ldr	r3, [r4, #0]
 8000966:	4620      	mov	r0, r4
 8000968:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
    }
 800096c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
 8000970:	4718      	bx	r3

08000972 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8000972:	f000 bc1b 	b.w	80011ac <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>

08000976 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8000976:	f000 bc1f 	b.w	80011b8 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>

0800097a <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 800097a:	f000 bc4b 	b.w	8001214 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>

0800097e <_ZN11TouchGFXHAL19configureInterruptsEv>:
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 800097e:	f000 bbf1 	b.w	8001164 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>

08000982 <_ZN11TouchGFXHAL16enableInterruptsEv>:
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8000982:	f000 bc4b 	b.w	800121c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>

08000986 <_ZN11TouchGFXHAL17disableInterruptsEv>:
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8000986:	f000 bc53 	b.w	8001230 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>

0800098a <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 800098a:	f000 bbf5 	b.w	8001178 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>

0800098e <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
    {
        HAL::flushFrameBuffer();
 800098e:	f008 b86b 	b.w	8008a68 <_ZN8touchgfx3HAL16flushFrameBufferEv>

08000992 <_ZN11TouchGFXHALD0Ev>:
 8000992:	b510      	push	{r4, lr}
 8000994:	2184      	movs	r1, #132	@ 0x84
 8000996:	4604      	mov	r4, r0
 8000998:	f011 fb02 	bl	8011fa0 <_ZdlPvj>
 800099c:	4620      	mov	r0, r4
 800099e:	bd10      	pop	{r4, pc}

080009a0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void performDisplayOrientationChange()
 80009a0:	b510      	push	{r4, lr}
        if (requestedOrientation != nativeDisplayOrientation)
 80009a2:	f890 1034 	ldrb.w	r1, [r0, #52]	@ 0x34
 80009a6:	f890 4078 	ldrb.w	r4, [r0, #120]	@ 0x78
            if (DISPLAY_ROTATION == rotate0)
 80009aa:	4b0c      	ldr	r3, [pc, #48]	@ (80009dc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
        if (requestedOrientation != nativeDisplayOrientation)
 80009ac:	428c      	cmp	r4, r1
            if (DISPLAY_ROTATION == rotate0)
 80009ae:	781a      	ldrb	r2, [r3, #0]
        if (requestedOrientation != nativeDisplayOrientation)
 80009b0:	d009      	beq.n	80009c6 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            if (DISPLAY_ROTATION == rotate0)
 80009b2:	b93a      	cbnz	r2, 80009c4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80009b4:	4a0a      	ldr	r2, [pc, #40]	@ (80009e0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
                const uint16_t tmp = DISPLAY_HEIGHT;
 80009b6:	490b      	ldr	r1, [pc, #44]	@ (80009e4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80009b8:	8814      	ldrh	r4, [r2, #0]
                const uint16_t tmp = DISPLAY_HEIGHT;
 80009ba:	8808      	ldrh	r0, [r1, #0]
                DISPLAY_WIDTH = tmp;
 80009bc:	8010      	strh	r0, [r2, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80009be:	800c      	strh	r4, [r1, #0]
                DISPLAY_ROTATION = rotate90;
 80009c0:	2201      	movs	r2, #1
            DISPLAY_ROTATION = rotate0;
 80009c2:	701a      	strb	r2, [r3, #0]
    }
 80009c4:	bd10      	pop	{r4, pc}
        else if (DISPLAY_ROTATION != rotate0)
 80009c6:	2a00      	cmp	r2, #0
 80009c8:	d0fc      	beq.n	80009c4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80009ca:	4a05      	ldr	r2, [pc, #20]	@ (80009e0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            const uint16_t tmp = DISPLAY_HEIGHT;
 80009cc:	4905      	ldr	r1, [pc, #20]	@ (80009e4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80009ce:	8814      	ldrh	r4, [r2, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
 80009d0:	8808      	ldrh	r0, [r1, #0]
            DISPLAY_WIDTH = tmp;
 80009d2:	8010      	strh	r0, [r2, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80009d4:	800c      	strh	r4, [r1, #0]
            DISPLAY_ROTATION = rotate0;
 80009d6:	2200      	movs	r2, #0
 80009d8:	e7f3      	b.n	80009c2 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x22>
 80009da:	bf00      	nop
 80009dc:	20012630 	.word	0x20012630
 80009e0:	2001262c 	.word	0x2001262c
 80009e4:	2001262e 	.word	0x2001262e

080009e8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 80009e8:	b570      	push	{r4, r5, r6, lr}
 80009ea:	460d      	mov	r5, r1
 80009ec:	4619      	mov	r1, r3
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 80009ee:	b935      	cbnz	r5, 80009fe <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x16>
 80009f0:	4b09      	ldr	r3, [pc, #36]	@ (8000a18 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x30>)
 80009f2:	4a0a      	ldr	r2, [pc, #40]	@ (8000a1c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x34>)
 80009f4:	480a      	ldr	r0, [pc, #40]	@ (8000a20 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x38>)
 80009f6:	f240 21ff 	movw	r1, #767	@ 0x2ff
 80009fa:	f011 faff 	bl	8011ffc <__assert_func>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 80009fe:	e9c0 520f 	strd	r5, r2, [r0, #60]	@ 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8000a02:	4b08      	ldr	r3, [pc, #32]	@ (8000a24 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x3c>)
 8000a04:	3a00      	subs	r2, #0
 8000a06:	bf18      	it	ne
 8000a08:	2201      	movne	r2, #1
 8000a0a:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 8000a0c:	6803      	ldr	r3, [r0, #0]
    }
 8000a0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setAnimationStorage(animationStorage);
 8000a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000a16:	4718      	bx	r3
 8000a18:	080130a8 	.word	0x080130a8
 8000a1c:	080130e0 	.word	0x080130e0
 8000a20:	0801312e 	.word	0x0801312e
 8000a24:	20012636 	.word	0x20012636

08000a28 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8000a28:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8000a2a:	4b09      	ldr	r3, [pc, #36]	@ (8000a50 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 8000a2c:	881b      	ldrh	r3, [r3, #0]
 8000a2e:	428b      	cmp	r3, r1
 8000a30:	d803      	bhi.n	8000a3a <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x12>
 8000a32:	4b08      	ldr	r3, [pc, #32]	@ (8000a54 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 8000a34:	881b      	ldrh	r3, [r3, #0]
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d905      	bls.n	8000a46 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1e>
 8000a3a:	4b07      	ldr	r3, [pc, #28]	@ (8000a58 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 8000a3c:	4a07      	ldr	r2, [pc, #28]	@ (8000a5c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 8000a3e:	4808      	ldr	r0, [pc, #32]	@ (8000a60 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 8000a40:	21a3      	movs	r1, #163	@ 0xa3
 8000a42:	f011 fadb 	bl	8011ffc <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8000a46:	4b07      	ldr	r3, [pc, #28]	@ (8000a64 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 8000a48:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 8000a4a:	4b07      	ldr	r3, [pc, #28]	@ (8000a68 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 8000a4c:	801a      	strh	r2, [r3, #0]
    }
 8000a4e:	bd08      	pop	{r3, pc}
 8000a50:	2001262c 	.word	0x2001262c
 8000a54:	2001262e 	.word	0x2001262e
 8000a58:	08013173 	.word	0x08013173
 8000a5c:	080131d6 	.word	0x080131d6
 8000a60:	0801312e 	.word	0x0801312e
 8000a64:	20012632 	.word	0x20012632
 8000a68:	20012634 	.word	0x20012634

08000a6c <_ZN8touchgfx3HAL11getBlitCapsEv>:
    virtual BlitOperations getBlitCaps()
 8000a6c:	4603      	mov	r3, r0
        if (useDMAAcceleration)
 8000a6e:	f890 007a 	ldrb.w	r0, [r0, #122]	@ 0x7a
 8000a72:	b118      	cbz	r0, 8000a7c <_ZN8touchgfx3HAL11getBlitCapsEv+0x10>
 8000a74:	6858      	ldr	r0, [r3, #4]
            return dma.getBlitCaps();
 8000a76:	6803      	ldr	r3, [r0, #0]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4718      	bx	r3
    }
 8000a7c:	4770      	bx	lr
	...

08000a80 <_ZN8touchgfx10OSWrappers10initializeEv>:
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8000a80:	2101      	movs	r1, #1
{
 8000a82:	b508      	push	{r3, lr}
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8000a84:	2200      	movs	r2, #0
 8000a86:	4608      	mov	r0, r1
 8000a88:	f005 fcba 	bl	8006400 <osSemaphoreNew>
 8000a8c:	4b0a      	ldr	r3, [pc, #40]	@ (8000ab8 <_ZN8touchgfx10OSWrappers10initializeEv+0x38>)
 8000a8e:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8000a90:	b928      	cbnz	r0, 8000a9e <_ZN8touchgfx10OSWrappers10initializeEv+0x1e>
 8000a92:	4b0a      	ldr	r3, [pc, #40]	@ (8000abc <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 8000a94:	4a0a      	ldr	r2, [pc, #40]	@ (8000ac0 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8000a96:	2128      	movs	r1, #40	@ 0x28

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8000a98:	480a      	ldr	r0, [pc, #40]	@ (8000ac4 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 8000a9a:	f011 faaf 	bl	8011ffc <__assert_func>
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	2104      	movs	r1, #4
 8000aa2:	2001      	movs	r0, #1
 8000aa4:	f005 fd54 	bl	8006550 <osMessageQueueNew>
 8000aa8:	4b07      	ldr	r3, [pc, #28]	@ (8000ac8 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 8000aaa:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8000aac:	b918      	cbnz	r0, 8000ab6 <_ZN8touchgfx10OSWrappers10initializeEv+0x36>
 8000aae:	4b07      	ldr	r3, [pc, #28]	@ (8000acc <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 8000ab0:	4a03      	ldr	r2, [pc, #12]	@ (8000ac0 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8000ab2:	212c      	movs	r1, #44	@ 0x2c
 8000ab4:	e7f0      	b.n	8000a98 <_ZN8touchgfx10OSWrappers10initializeEv+0x18>
}
 8000ab6:	bd08      	pop	{r3, pc}
 8000ab8:	20000130 	.word	0x20000130
 8000abc:	08013219 	.word	0x08013219
 8000ac0:	08013262 	.word	0x08013262
 8000ac4:	08013291 	.word	0x08013291
 8000ac8:	2000012c 	.word	0x2000012c
 8000acc:	080132f6 	.word	0x080132f6

08000ad0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8000ad0:	4b02      	ldr	r3, [pc, #8]	@ (8000adc <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
 8000ad2:	f04f 31ff 	mov.w	r1, #4294967295
 8000ad6:	6818      	ldr	r0, [r3, #0]
 8000ad8:	f005 bcdc 	b.w	8006494 <osSemaphoreAcquire>
 8000adc:	20000130 	.word	0x20000130

08000ae0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    osSemaphoreRelease(frame_buffer_sem);
 8000ae0:	4b01      	ldr	r3, [pc, #4]	@ (8000ae8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
 8000ae2:	6818      	ldr	r0, [r3, #0]
 8000ae4:	f005 bd02 	b.w	80064ec <osSemaphoreRelease>
 8000ae8:	20000130 	.word	0x20000130

08000aec <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8000aec:	4b02      	ldr	r3, [pc, #8]	@ (8000af8 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
 8000aee:	2100      	movs	r1, #0
 8000af0:	6818      	ldr	r0, [r3, #0]
 8000af2:	f005 bccf 	b.w	8006494 <osSemaphoreAcquire>
 8000af6:	bf00      	nop
 8000af8:	20000130 	.word	0x20000130

08000afc <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 * from ISR.
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
 8000afc:	f7ff bff0 	b.w	8000ae0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08000b00 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8000b00:	4803      	ldr	r0, [pc, #12]	@ (8000b10 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x10>)
 8000b02:	4904      	ldr	r1, [pc, #16]	@ (8000b14 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 8000b04:	6800      	ldr	r0, [r0, #0]
 8000b06:	2300      	movs	r3, #0
 8000b08:	461a      	mov	r2, r3
 8000b0a:	f005 bd5c 	b.w	80065c6 <osMessageQueuePut>
 8000b0e:	bf00      	nop
 8000b10:	2000012c 	.word	0x2000012c
 8000b14:	20000004 	.word	0x20000004

08000b18 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8000b18:	b513      	push	{r0, r1, r4, lr}
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8000b1a:	4c08      	ldr	r4, [pc, #32]	@ (8000b3c <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	461a      	mov	r2, r3
 8000b20:	a901      	add	r1, sp, #4
 8000b22:	6820      	ldr	r0, [r4, #0]
 8000b24:	f005 fd80 	bl	8006628 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8000b28:	6820      	ldr	r0, [r4, #0]
 8000b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b2e:	2200      	movs	r2, #0
 8000b30:	a901      	add	r1, sp, #4
 8000b32:	f005 fd79 	bl	8006628 <osMessageQueueGet>
}
 8000b36:	b002      	add	sp, #8
 8000b38:	bd10      	pop	{r4, pc}
 8000b3a:	bf00      	nop
 8000b3c:	2000012c 	.word	0x2000012c

08000b40 <_ZN8touchgfx13DMA_Interface5flushEv>:
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
    {
        waitForFrameBufferSemaphore();
 8000b40:	6803      	ldr	r3, [r0, #0]
 8000b42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b44:	4718      	bx	r3

08000b46 <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 8000b46:	2001      	movs	r0, #1
 8000b48:	4770      	bx	lr

08000b4a <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
    {
        executeCompleted();
 8000b4a:	6803      	ldr	r3, [r0, #0]
 8000b4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b4e:	4718      	bx	r3

08000b50 <_ZN8STM32DMA10initializeEv>:
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
}

void STM32DMA::initialize()
{
 8000b50:	b082      	sub	sp, #8
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	9301      	str	r3, [sp, #4]
 8000b56:	4b0d      	ldr	r3, [pc, #52]	@ (8000b8c <_ZN8STM32DMA10initializeEv+0x3c>)
 8000b58:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000b5a:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8000b5e:	631a      	str	r2, [r3, #48]	@ 0x30
 8000b60:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000b62:	f402 0200 	and.w	r2, r2, #8388608	@ 0x800000
 8000b66:	9201      	str	r2, [sp, #4]
 8000b68:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8000b6a:	691a      	ldr	r2, [r3, #16]
 8000b6c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8000b70:	611a      	str	r2, [r3, #16]
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8000b72:	691a      	ldr	r2, [r3, #16]
 8000b74:	f422 0200 	bic.w	r2, r2, #8388608	@ 0x800000
 8000b78:	611a      	str	r2, [r3, #16]

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8000b7a:	4b05      	ldr	r3, [pc, #20]	@ (8000b90 <_ZN8STM32DMA10initializeEv+0x40>)
 8000b7c:	4a05      	ldr	r2, [pc, #20]	@ (8000b94 <_ZN8STM32DMA10initializeEv+0x44>)
 8000b7e:	611a      	str	r2, [r3, #16]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b80:	4b05      	ldr	r3, [pc, #20]	@ (8000b98 <_ZN8STM32DMA10initializeEv+0x48>)
 8000b82:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000b86:	609a      	str	r2, [r3, #8]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
}
 8000b88:	b002      	add	sp, #8
 8000b8a:	4770      	bx	lr
 8000b8c:	40023800 	.word	0x40023800
 8000b90:	20001788 	.word	0x20001788
 8000b94:	08000e29 	.word	0x08000e29
 8000b98:	e000e100 	.word	0xe000e100

08000b9c <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 8000b9c:	f240 30ef 	movw	r0, #1007	@ 0x3ef
 8000ba0:	4770      	bx	lr
	...

08000ba4 <_ZN8STM32DMAD1Ev>:
STM32DMA::~STM32DMA()
 8000ba4:	4b05      	ldr	r3, [pc, #20]	@ (8000bbc <_ZN8STM32DMAD1Ev+0x18>)
 8000ba6:	6003      	str	r3, [r0, #0]
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ba8:	4b05      	ldr	r3, [pc, #20]	@ (8000bc0 <_ZN8STM32DMAD1Ev+0x1c>)
 8000baa:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000bae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000bb2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000bb6:	f3bf 8f6f 	isb	sy
}
 8000bba:	4770      	bx	lr
 8000bbc:	08013e1c 	.word	0x08013e1c
 8000bc0:	e000e100 	.word	0xe000e100

08000bc4 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8000bc4:	b510      	push	{r4, lr}
 8000bc6:	4604      	mov	r4, r0
}
 8000bc8:	f44f 615a 	mov.w	r1, #3488	@ 0xda0
 8000bcc:	f7ff ffea 	bl	8000ba4 <_ZN8STM32DMAD1Ev>
 8000bd0:	4620      	mov	r0, r4
 8000bd2:	f011 f9e5 	bl	8011fa0 <_ZdlPvj>
 8000bd6:	4620      	mov	r0, r4
 8000bd8:	bd10      	pop	{r4, pc}
	...

08000bdc <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
 8000bdc:	b508      	push	{r3, lr}
    switch (format)
 8000bde:	280a      	cmp	r0, #10
 8000be0:	d809      	bhi.n	8000bf6 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1a>
 8000be2:	e8df f000 	tbb	[pc, r0]
 8000be6:	1006      	.short	0x1006
 8000be8:	0808080e 	.word	0x0808080e
 8000bec:	10101008 	.word	0x10101008
 8000bf0:	10          	.byte	0x10
 8000bf1:	00          	.byte	0x00
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8000bf2:	2002      	movs	r0, #2
}
 8000bf4:	bd08      	pop	{r3, pc}
        assert(0 && "Unsupported Format!");
 8000bf6:	4b05      	ldr	r3, [pc, #20]	@ (8000c0c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x30>)
 8000bf8:	4a05      	ldr	r2, [pc, #20]	@ (8000c10 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 8000bfa:	4806      	ldr	r0, [pc, #24]	@ (8000c14 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 8000bfc:	2187      	movs	r1, #135	@ 0x87
 8000bfe:	f011 f9fd 	bl	8011ffc <__assert_func>
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8000c02:	2000      	movs	r0, #0
 8000c04:	e7f6      	b.n	8000bf4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
    switch (format)
 8000c06:	2001      	movs	r0, #1
    return dma2dColorMode;
 8000c08:	e7f4      	b.n	8000bf4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 8000c0a:	bf00      	nop
 8000c0c:	08013338 	.word	0x08013338
 8000c10:	08013353 	.word	0x08013353
 8000c14:	0801339e 	.word	0x0801339e

08000c18 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8000c18:	b538      	push	{r3, r4, r5, lr}
 8000c1a:	460c      	mov	r4, r1
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8000c1c:	7f88      	ldrb	r0, [r1, #30]
 8000c1e:	f7ff ffdd 	bl	8000bdc <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8000c22:	8aa5      	ldrh	r5, [r4, #20]
 8000c24:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8000c26:	4b16      	ldr	r3, [pc, #88]	@ (8000c80 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x68>)

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000c28:	6921      	ldr	r1, [r4, #16]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8000c2a:	6358      	str	r0, [r3, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8000c2c:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 8000c30:	645a      	str	r2, [r3, #68]	@ 0x44

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8000c32:	8b62      	ldrh	r2, [r4, #26]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000c34:	63d9      	str	r1, [r3, #60]	@ 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8000c36:	1b52      	subs	r2, r2, r5
 8000c38:	641a      	str	r2, [r3, #64]	@ 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8000c3a:	6825      	ldr	r5, [r4, #0]
 8000c3c:	2d08      	cmp	r5, #8
 8000c3e:	d10e      	bne.n	8000c5e <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x46>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8000c40:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8000c42:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8000c44:	6258      	str	r0, [r3, #36]	@ 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8000c46:	7f20      	ldrb	r0, [r4, #28]
 8000c48:	4a0e      	ldr	r2, [pc, #56]	@ (8000c84 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x6c>)
 8000c4a:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8000c4e:	61da      	str	r2, [r3, #28]
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
    {
        return color;
 8000c50:	68e2      	ldr	r2, [r4, #12]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8000c52:	621a      	str	r2, [r3, #32]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8000c54:	4a0c      	ldr	r2, [pc, #48]	@ (8000c88 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x70>)
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000c56:	6159      	str	r1, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000c58:	60d9      	str	r1, [r3, #12]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8000c5a:	601a      	str	r2, [r3, #0]
    }
}
 8000c5c:	bd38      	pop	{r3, r4, r5, pc}
        WRITE_REG(DMA2D->FGOR, 0);
 8000c5e:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8000c60:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8000c62:	611a      	str	r2, [r3, #16]
 8000c64:	68e1      	ldr	r1, [r4, #12]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
 8000c66:	0a0a      	lsrs	r2, r1, #8
 8000c68:	0948      	lsrs	r0, r1, #5
 8000c6a:	f402 4278 	and.w	r2, r2, #63488	@ 0xf800
 8000c6e:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8000c72:	4302      	orrs	r2, r0
 8000c74:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8000c78:	430a      	orrs	r2, r1
 8000c7a:	639a      	str	r2, [r3, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8000c7c:	4a03      	ldr	r2, [pc, #12]	@ (8000c8c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x74>)
 8000c7e:	e7ec      	b.n	8000c5a <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x42>
 8000c80:	4002b000 	.word	0x4002b000
 8000c84:	00010009 	.word	0x00010009
 8000c88:	00020201 	.word	0x00020201
 8000c8c:	00030201 	.word	0x00030201

08000c90 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
 8000c90:	b508      	push	{r3, lr}
    switch (format)
 8000c92:	280b      	cmp	r0, #11
 8000c94:	d80b      	bhi.n	8000cae <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1e>
 8000c96:	e8df f000 	tbb	[pc, r0]
 8000c9a:	1206      	.short	0x1206
 8000c9c:	0a0a0a10 	.word	0x0a0a0a10
 8000ca0:	0808080a 	.word	0x0808080a
 8000ca4:	0808      	.short	0x0808
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8000ca6:	2002      	movs	r0, #2
}
 8000ca8:	bd08      	pop	{r3, pc}
        dma2dColorMode = DMA2D_INPUT_L8;
 8000caa:	2005      	movs	r0, #5
        break;
 8000cac:	e7fc      	b.n	8000ca8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
        assert(0 && "Unsupported Format!");
 8000cae:	4b05      	ldr	r3, [pc, #20]	@ (8000cc4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 8000cb0:	4a05      	ldr	r2, [pc, #20]	@ (8000cc8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 8000cb2:	4806      	ldr	r0, [pc, #24]	@ (8000ccc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x3c>)
 8000cb4:	2166      	movs	r1, #102	@ 0x66
 8000cb6:	f011 f9a1 	bl	8011ffc <__assert_func>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8000cba:	2000      	movs	r0, #0
 8000cbc:	e7f4      	b.n	8000ca8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
    switch (format)
 8000cbe:	2001      	movs	r0, #1
    return dma2dColorMode;
 8000cc0:	e7f2      	b.n	8000ca8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 8000cc2:	bf00      	nop
 8000cc4:	08013338 	.word	0x08013338
 8000cc8:	08013401 	.word	0x08013401
 8000ccc:	0801339e 	.word	0x0801339e

08000cd0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
{
 8000cd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8000cd4:	f891 801d 	ldrb.w	r8, [r1, #29]
{
 8000cd8:	460c      	mov	r4, r1
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8000cda:	4640      	mov	r0, r8
 8000cdc:	f7ff ffd8 	bl	8000c90 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8000ce0:	7fa7      	ldrb	r7, [r4, #30]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8000ce2:	4605      	mov	r5, r0
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8000ce4:	4638      	mov	r0, r7
 8000ce6:	f7ff ffd3 	bl	8000c90 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
 8000cea:	4606      	mov	r6, r0
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8000cec:	4638      	mov	r0, r7
 8000cee:	f7ff ff75 	bl	8000bdc <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8000cf2:	8aa1      	ldrh	r1, [r4, #20]
 8000cf4:	8b62      	ldrh	r2, [r4, #26]
 8000cf6:	4b44      	ldr	r3, [pc, #272]	@ (8000e08 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 8000cf8:	1a52      	subs	r2, r2, r1
 8000cfa:	641a      	str	r2, [r3, #64]	@ 0x40
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8000cfc:	619a      	str	r2, [r3, #24]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8000cfe:	8b22      	ldrh	r2, [r4, #24]
 8000d00:	1a52      	subs	r2, r2, r1
 8000d02:	611a      	str	r2, [r3, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8000d04:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8000d06:	6358      	str	r0, [r3, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8000d08:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d0c:	645a      	str	r2, [r3, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000d0e:	6921      	ldr	r1, [r4, #16]
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8000d10:	6862      	ldr	r2, [r4, #4]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000d12:	63d9      	str	r1, [r3, #60]	@ 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8000d14:	60da      	str	r2, [r3, #12]
    switch (blitOp.operation)
 8000d16:	6820      	ldr	r0, [r4, #0]
 8000d18:	2880      	cmp	r0, #128	@ 0x80
 8000d1a:	d028      	beq.n	8000d6e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9e>
 8000d1c:	7f22      	ldrb	r2, [r4, #28]
 8000d1e:	d80f      	bhi.n	8000d40 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x70>
 8000d20:	2820      	cmp	r0, #32
 8000d22:	d067      	beq.n	8000df4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x124>
 8000d24:	2840      	cmp	r0, #64	@ 0x40
 8000d26:	d065      	beq.n	8000df4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x124>
 8000d28:	2804      	cmp	r0, #4
 8000d2a:	d01a      	beq.n	8000d62 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x92>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000d2c:	4b36      	ldr	r3, [pc, #216]	@ (8000e08 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 8000d2e:	ea45 6502 	orr.w	r5, r5, r2, lsl #24
 8000d32:	f445 3500 	orr.w	r5, r5, #131072	@ 0x20000
        if (blitOp.srcFormat != blitOp.dstFormat)
 8000d36:	45b8      	cmp	r8, r7
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000d38:	61dd      	str	r5, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 8000d3a:	d061      	beq.n	8000e00 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x130>
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8000d3c:	4a33      	ldr	r2, [pc, #204]	@ (8000e0c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13c>)
 8000d3e:	e044      	b.n	8000dca <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfa>
    switch (blitOp.operation)
 8000d40:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8000d44:	d004      	beq.n	8000d50 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x80>
 8000d46:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8000d4a:	d1ef      	bne.n	8000d2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x5c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000d4c:	4830      	ldr	r0, [pc, #192]	@ (8000e10 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x140>)
 8000d4e:	e000      	b.n	8000d52 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x82>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000d50:	4830      	ldr	r0, [pc, #192]	@ (8000e14 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000d52:	ea40 6202 	orr.w	r2, r0, r2, lsl #24
 8000d56:	61da      	str	r2, [r3, #28]
 8000d58:	68e2      	ldr	r2, [r4, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8000d5a:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8000d5c:	625e      	str	r6, [r3, #36]	@ 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000d5e:	6159      	str	r1, [r3, #20]
 8000d60:	e032      	b.n	8000dc8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf8>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000d62:	ea45 6202 	orr.w	r2, r5, r2, lsl #24
 8000d66:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000d6a:	61da      	str	r2, [r3, #28]
 8000d6c:	e7f6      	b.n	8000d5c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8c>
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8000d6e:	68a0      	ldr	r0, [r4, #8]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8000d70:	1d02      	adds	r2, r0, #4
 8000d72:	62da      	str	r2, [r3, #44]	@ 0x2c
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000d74:	7f22      	ldrb	r2, [r4, #28]
 8000d76:	ea45 6502 	orr.w	r5, r5, r2, lsl #24
 8000d7a:	f445 3500 	orr.w	r5, r5, #131072	@ 0x20000
 8000d7e:	61dd      	str	r5, [r3, #28]
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8000d80:	625e      	str	r6, [r3, #36]	@ 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000d82:	6159      	str	r1, [r3, #20]
            switch ((Bitmap::ClutFormat)palette->format)
 8000d84:	7801      	ldrb	r1, [r0, #0]
 8000d86:	b141      	cbz	r1, 8000d9a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xca>
 8000d88:	2901      	cmp	r1, #1
 8000d8a:	d021      	beq.n	8000dd0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
                assert(0 && "Unsupported format");
 8000d8c:	4b22      	ldr	r3, [pc, #136]	@ (8000e18 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>)
 8000d8e:	4a23      	ldr	r2, [pc, #140]	@ (8000e1c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14c>)
 8000d90:	4823      	ldr	r0, [pc, #140]	@ (8000e20 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x150>)
 8000d92:	f240 1111 	movw	r1, #273	@ 0x111
 8000d96:	f011 f931 	bl	8011ffc <__assert_func>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8000d9a:	69da      	ldr	r2, [r3, #28]
 8000d9c:	8841      	ldrh	r1, [r0, #2]
 8000d9e:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8000da2:	3901      	subs	r1, #1
 8000da4:	f022 0210 	bic.w	r2, r2, #16
 8000da8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000dac:	61da      	str	r2, [r3, #28]
            bool blend = true;
 8000dae:	2101      	movs	r1, #1
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8000db0:	4b15      	ldr	r3, [pc, #84]	@ (8000e08 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 8000db2:	69da      	ldr	r2, [r3, #28]
 8000db4:	f042 0220 	orr.w	r2, r2, #32
 8000db8:	61da      	str	r2, [r3, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8000dba:	69da      	ldr	r2, [r3, #28]
 8000dbc:	0692      	lsls	r2, r2, #26
 8000dbe:	d4fc      	bmi.n	8000dba <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xea>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8000dc0:	2210      	movs	r2, #16
 8000dc2:	609a      	str	r2, [r3, #8]
            if (blend)
 8000dc4:	2900      	cmp	r1, #0
 8000dc6:	d0b9      	beq.n	8000d3c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x6c>
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8000dc8:	4a16      	ldr	r2, [pc, #88]	@ (8000e24 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x154>)
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8000dca:	601a      	str	r2, [r3, #0]
}
 8000dcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                if (blitOp.alpha == 255)
 8000dd0:	f1b2 01ff 	subs.w	r1, r2, #255	@ 0xff
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8000dd4:	69da      	ldr	r2, [r3, #28]
 8000dd6:	8840      	ldrh	r0, [r0, #2]
 8000dd8:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8000ddc:	f100 30ff 	add.w	r0, r0, #4294967295
 8000de0:	f022 0210 	bic.w	r2, r2, #16
 8000de4:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8000de8:	f042 0210 	orr.w	r2, r2, #16
                if (blitOp.alpha == 255)
 8000dec:	bf18      	it	ne
 8000dee:	2101      	movne	r1, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8000df0:	61da      	str	r2, [r3, #28]
                break;
 8000df2:	e7dd      	b.n	8000db0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe0>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000df4:	ea45 6202 	orr.w	r2, r5, r2, lsl #24
 8000df8:	4b03      	ldr	r3, [pc, #12]	@ (8000e08 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 8000dfa:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8000dfe:	e7b4      	b.n	8000d6a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9a>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8000e00:	f240 2201 	movw	r2, #513	@ 0x201
 8000e04:	e7e1      	b.n	8000dca <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfa>
 8000e06:	bf00      	nop
 8000e08:	4002b000 	.word	0x4002b000
 8000e0c:	00010201 	.word	0x00010201
 8000e10:	00020009 	.word	0x00020009
 8000e14:	0002000a 	.word	0x0002000a
 8000e18:	0801344b 	.word	0x0801344b
 8000e1c:	08013465 	.word	0x08013465
 8000e20:	0801339e 	.word	0x0801339e
 8000e24:	00020201 	.word	0x00020201

08000e28 <DMA2D_XferCpltCallback>:
        return instance;
 8000e28:	4b02      	ldr	r3, [pc, #8]	@ (8000e34 <DMA2D_XferCpltCallback+0xc>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	6858      	ldr	r0, [r3, #4]
        dma.signalDMAInterrupt();
 8000e2e:	6803      	ldr	r3, [r0, #0]
 8000e30:	695b      	ldr	r3, [r3, #20]
 8000e32:	4718      	bx	r3
 8000e34:	20012638 	.word	0x20012638

08000e38 <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 8000e38:	b570      	push	{r4, r5, r6, lr}
 8000e3a:	4604      	mov	r4, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8000e3c:	4625      	mov	r5, r4
 8000e3e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e68 <_ZN8STM32DMAC1Ev+0x30>)
 8000e40:	300c      	adds	r0, #12
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8000e42:	2600      	movs	r6, #0
 8000e44:	6060      	str	r0, [r4, #4]
 8000e46:	7226      	strb	r6, [r4, #8]
 8000e48:	7266      	strb	r6, [r4, #9]
 8000e4a:	f845 3b20 	str.w	r3, [r5], #32
 8000e4e:	2260      	movs	r2, #96	@ 0x60
 8000e50:	4629      	mov	r1, r5
 8000e52:	f008 fd23 	bl	800989c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8000e56:	f504 635a 	add.w	r3, r4, #3488	@ 0xda0
        : color(0)
 8000e5a:	60ee      	str	r6, [r5, #12]
 8000e5c:	3524      	adds	r5, #36	@ 0x24
 8000e5e:	429d      	cmp	r5, r3
 8000e60:	d1fb      	bne.n	8000e5a <_ZN8STM32DMAC1Ev+0x22>
}
 8000e62:	4620      	mov	r0, r4
 8000e64:	bd70      	pop	{r4, r5, r6, pc}
 8000e66:	bf00      	nop
 8000e68:	08013e1c 	.word	0x08013e1c

08000e6c <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 8000e6c:	2001      	movs	r0, #1
 8000e6e:	4770      	bx	lr

08000e70 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 8000e70:	2014      	movs	r0, #20
 8000e72:	4770      	bx	lr

08000e74 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 8000e74:	2314      	movs	r3, #20
 8000e76:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8000e7a:	3008      	adds	r0, #8
 8000e7c:	4770      	bx	lr

08000e7e <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 8000e7e:	2314      	movs	r3, #20
 8000e80:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8000e84:	3008      	adds	r0, #8
 8000e86:	4770      	bx	lr

08000e88 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8000e88:	2001      	movs	r0, #1
 8000e8a:	4770      	bx	lr

08000e8c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8000e8c:	f44f 6088 	mov.w	r0, #1088	@ 0x440
 8000e90:	4770      	bx	lr

08000e92 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8000e92:	f44f 6388 	mov.w	r3, #1088	@ 0x440
 8000e96:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8000e9a:	3008      	adds	r0, #8
 8000e9c:	4770      	bx	lr

08000e9e <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8000e9e:	f44f 6388 	mov.w	r3, #1088	@ 0x440
 8000ea2:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8000ea6:	3008      	adds	r0, #8
 8000ea8:	4770      	bx	lr

08000eaa <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8000eaa:	2001      	movs	r0, #1
 8000eac:	4770      	bx	lr

08000eae <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8000eae:	2010      	movs	r0, #16
 8000eb0:	4770      	bx	lr

08000eb2 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8000eb2:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8000eb6:	3008      	adds	r0, #8
 8000eb8:	4770      	bx	lr

08000eba <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8000eba:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8000ebe:	3008      	adds	r0, #8
 8000ec0:	4770      	bx	lr

08000ec2 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoScreen1ScreenNoTransition();
 8000ec2:	4608      	mov	r0, r1
 8000ec4:	f001 bc1a 	b.w	80026fc <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>

08000ec8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 8000ec8:	b510      	push	{r4, lr}
 8000eca:	4b03      	ldr	r3, [pc, #12]	@ (8000ed8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev+0x10>)
 8000ecc:	6003      	str	r3, [r0, #0]
 8000ece:	4604      	mov	r4, r0
 8000ed0:	f007 fb21 	bl	8008516 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8000ed4:	4620      	mov	r0, r4
 8000ed6:	bd10      	pop	{r4, pc}
 8000ed8:	08013ed4 	.word	0x08013ed4

08000edc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED0Ev>:
 8000edc:	b510      	push	{r4, lr}
 8000ede:	4604      	mov	r4, r0
 8000ee0:	f7ff fff2 	bl	8000ec8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 8000ee4:	4620      	mov	r0, r4
 8000ee6:	211c      	movs	r1, #28
 8000ee8:	f011 f85a 	bl	8011fa0 <_ZdlPvj>
 8000eec:	4620      	mov	r0, r4
 8000eee:	bd10      	pop	{r4, pc}

08000ef0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8000ef0:	b510      	push	{r4, lr}
 8000ef2:	4b03      	ldr	r3, [pc, #12]	@ (8000f00 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8000ef4:	6003      	str	r3, [r0, #0]
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	f007 fb0d 	bl	8008516 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8000efc:	4620      	mov	r0, r4
 8000efe:	bd10      	pop	{r4, pc}
 8000f00:	08013ea0 	.word	0x08013ea0

08000f04 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8000f04:	b510      	push	{r4, lr}
 8000f06:	4604      	mov	r4, r0
 8000f08:	f7ff fff2 	bl	8000ef0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8000f0c:	4620      	mov	r0, r4
 8000f0e:	f44f 6189 	mov.w	r1, #1096	@ 0x448
 8000f12:	f011 f845 	bl	8011fa0 <_ZdlPvj>
 8000f16:	4620      	mov	r0, r4
 8000f18:	bd10      	pop	{r4, pc}
	...

08000f1c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8000f1c:	b510      	push	{r4, lr}
 8000f1e:	4b03      	ldr	r3, [pc, #12]	@ (8000f2c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8000f20:	6003      	str	r3, [r0, #0]
 8000f22:	4604      	mov	r4, r0
 8000f24:	f007 faf7 	bl	8008516 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8000f28:	4620      	mov	r0, r4
 8000f2a:	bd10      	pop	{r4, pc}
 8000f2c:	08013e6c 	.word	0x08013e6c

08000f30 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8000f30:	b510      	push	{r4, lr}
 8000f32:	4604      	mov	r4, r0
 8000f34:	f7ff fff2 	bl	8000f1c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8000f38:	4620      	mov	r0, r4
 8000f3a:	2118      	movs	r1, #24
 8000f3c:	f011 f830 	bl	8011fa0 <_ZdlPvj>
 8000f40:	4620      	mov	r0, r4
 8000f42:	bd10      	pop	{r4, pc}

08000f44 <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 8000f44:	b510      	push	{r4, lr}
 8000f46:	4b08      	ldr	r3, [pc, #32]	@ (8000f68 <_ZN12FrontendHeapD1Ev+0x24>)
 8000f48:	6003      	str	r3, [r0, #0]
 8000f4a:	4604      	mov	r4, r0
 8000f4c:	f200 4074 	addw	r0, r0, #1140	@ 0x474
 8000f50:	f7ff ffba 	bl	8000ec8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 8000f54:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 8000f58:	f7ff ffca 	bl	8000ef0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8000f5c:	f104 0014 	add.w	r0, r4, #20
 8000f60:	f7ff ffdc 	bl	8000f1c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8000f64:	4620      	mov	r0, r4
 8000f66:	bd10      	pop	{r4, pc}
 8000f68:	08013f08 	.word	0x08013f08

08000f6c <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8000f6c:	b508      	push	{r3, lr}
 8000f6e:	4802      	ldr	r0, [pc, #8]	@ (8000f78 <__tcf_0+0xc>)
 8000f70:	f7ff ffe8 	bl	8000f44 <_ZN12FrontendHeapD1Ev>
 8000f74:	bd08      	pop	{r3, pc}
 8000f76:	bf00      	nop
 8000f78:	20000ff0 	.word	0x20000ff0

08000f7c <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 8000f7c:	b510      	push	{r4, lr}
 8000f7e:	4604      	mov	r4, r0
 8000f80:	f7ff ffe0 	bl	8000f44 <_ZN12FrontendHeapD1Ev>
 8000f84:	4620      	mov	r0, r4
 8000f86:	f44f 61bf 	mov.w	r1, #1528	@ 0x5f8
 8000f8a:	f011 f809 	bl	8011fa0 <_ZdlPvj>
 8000f8e:	4620      	mov	r0, r4
 8000f90:	bd10      	pop	{r4, pc}
	...

08000f94 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 240, 320);

void touchgfx_init()
{
 8000f94:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8000f98:	f000 fff8 	bl	8001f8c <_ZN14BitmapDatabase11getInstanceEv>
 8000f9c:	4605      	mov	r5, r0
 8000f9e:	f000 fff9 	bl	8001f94 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8000fa2:	2400      	movs	r4, #0
 8000fa4:	4601      	mov	r1, r0
 8000fa6:	4623      	mov	r3, r4
 8000fa8:	4628      	mov	r0, r5
 8000faa:	4622      	mov	r2, r4
 8000fac:	9400      	str	r4, [sp, #0]
 8000fae:	f00e f90f 	bl	800f1d0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 8000fb2:	4b25      	ldr	r3, [pc, #148]	@ (8001048 <touchgfx_init+0xb4>)
 8000fb4:	4a25      	ldr	r2, [pc, #148]	@ (800104c <touchgfx_init+0xb8>)
        static FrontendHeap instance;
 8000fb6:	4d26      	ldr	r5, [pc, #152]	@ (8001050 <touchgfx_init+0xbc>)
 8000fb8:	601a      	str	r2, [r3, #0]
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 8000fba:	4620      	mov	r0, r4
 8000fbc:	f002 fa6e 	bl	800349c <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 8000fc0:	4824      	ldr	r0, [pc, #144]	@ (8001054 <touchgfx_init+0xc0>)
 8000fc2:	f00e f86d 	bl	800f0a0 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
 8000fc6:	682b      	ldr	r3, [r5, #0]
 8000fc8:	f3bf 8f5b 	dmb	ish
 8000fcc:	07db      	lsls	r3, r3, #31
 8000fce:	d435      	bmi.n	800103c <touchgfx_init+0xa8>
 8000fd0:	4628      	mov	r0, r5
 8000fd2:	f010 ffe7 	bl	8011fa4 <__cxa_guard_acquire>
 8000fd6:	b388      	cbz	r0, 800103c <touchgfx_init+0xa8>
     */
    MVPHeap(AbstractPartition& pres,
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
 8000fd8:	4c1f      	ldr	r4, [pc, #124]	@ (8001058 <touchgfx_init+0xc4>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 8000fda:	4b20      	ldr	r3, [pc, #128]	@ (800105c <touchgfx_init+0xc8>)
 8000fdc:	6023      	str	r3, [r4, #0]
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8000fde:	f204 469c 	addw	r6, r4, #1180	@ 0x49c
        : presenterStorage(pres),
 8000fe2:	f104 0014 	add.w	r0, r4, #20
          screenStorage(scr),
 8000fe6:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
          transitionStorage(tra),
 8000fea:	f204 4774 	addw	r7, r4, #1140	@ 0x474
        : presenterStorage(pres),
 8000fee:	6060      	str	r0, [r4, #4]
          screenStorage(scr),
 8000ff0:	f8c4 8008 	str.w	r8, [r4, #8]
          transitionStorage(tra),
 8000ff4:	60e7      	str	r7, [r4, #12]
          frontendApplication(app)
 8000ff6:	6126      	str	r6, [r4, #16]
 8000ff8:	f007 fa8e 	bl	8008518 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8000ffc:	4b18      	ldr	r3, [pc, #96]	@ (8001060 <touchgfx_init+0xcc>)
 8000ffe:	6163      	str	r3, [r4, #20]
 8001000:	4640      	mov	r0, r8
 8001002:	f007 fa89 	bl	8008518 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8001006:	4b17      	ldr	r3, [pc, #92]	@ (8001064 <touchgfx_init+0xd0>)
 8001008:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800100a:	4638      	mov	r0, r7
 800100c:	f007 fa84 	bl	8008518 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8001010:	4b15      	ldr	r3, [pc, #84]	@ (8001068 <touchgfx_init+0xd4>)
 8001012:	f8c4 3474 	str.w	r3, [r4, #1140]	@ 0x474
 8001016:	f504 6092 	add.w	r0, r4, #1168	@ 0x490
 800101a:	f002 fabb 	bl	8003594 <_ZN5ModelC1Ev>
 800101e:	4622      	mov	r2, r4
 8001020:	f504 6192 	add.w	r1, r4, #1168	@ 0x490
 8001024:	4630      	mov	r0, r6
 8001026:	f002 faab 	bl	8003580 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 800102a:	4630      	mov	r0, r6
 800102c:	f001 fb66 	bl	80026fc <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
        static FrontendHeap instance;
 8001030:	480e      	ldr	r0, [pc, #56]	@ (800106c <touchgfx_init+0xd8>)
 8001032:	f011 f801 	bl	8012038 <atexit>
 8001036:	4628      	mov	r0, r5
 8001038:	f010 ffc0 	bl	8011fbc <__cxa_guard_release>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 800103c:	480c      	ldr	r0, [pc, #48]	@ (8001070 <touchgfx_init+0xdc>)
}
 800103e:	b002      	add	sp, #8
 8001040:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
 8001044:	f7ff bc5e 	b.w	8000904 <_ZN11TouchGFXHAL10initializeEv>
 8001048:	20012694 	.word	0x20012694
 800104c:	200001b8 	.word	0x200001b8
 8001050:	20000fec 	.word	0x20000fec
 8001054:	20000008 	.word	0x20000008
 8001058:	20000ff0 	.word	0x20000ff0
 800105c:	08013f08 	.word	0x08013f08
 8001060:	08013e6c 	.word	0x08013e6c
 8001064:	08013ea0 	.word	0x08013ea0
 8001068:	08013ed4 	.word	0x08013ed4
 800106c:	08000f6d 	.word	0x08000f6d
 8001070:	20000134 	.word	0x20000134

08001074 <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 8001074:	4801      	ldr	r0, [pc, #4]	@ (800107c <touchgfx_taskEntry+0x8>)
 8001076:	f7ff bc57 	b.w	8000928 <_ZN11TouchGFXHAL9taskEntryEv>
 800107a:	bf00      	nop
 800107c:	20000134 	.word	0x20000134

08001080 <_GLOBAL__sub_I_touchgfx_init>:
}
 8001080:	b570      	push	{r4, r5, r6, lr}
static STM32DMA dma;
 8001082:	4e25      	ldr	r6, [pc, #148]	@ (8001118 <_GLOBAL__sub_I_touchgfx_init+0x98>)
{
public:

    STM32TouchController() {}
 8001084:	4c25      	ldr	r4, [pc, #148]	@ (800111c <_GLOBAL__sub_I_touchgfx_init+0x9c>)
static LCD16bpp display;
 8001086:	4d26      	ldr	r5, [pc, #152]	@ (8001120 <_GLOBAL__sub_I_touchgfx_init+0xa0>)
 8001088:	4b26      	ldr	r3, [pc, #152]	@ (8001124 <_GLOBAL__sub_I_touchgfx_init+0xa4>)
 800108a:	6023      	str	r3, [r4, #0]
static STM32DMA dma;
 800108c:	4630      	mov	r0, r6
 800108e:	f7ff fed3 	bl	8000e38 <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
 8001092:	4628      	mov	r0, r5
 8001094:	f00e fefc 	bl	800fe90 <_ZN8touchgfx8LCD16bppC1Ev>
        : dma(dmaInterface),
 8001098:	4b23      	ldr	r3, [pc, #140]	@ (8001128 <_GLOBAL__sub_I_touchgfx_init+0xa8>)
          isFrontPorchEntered(false),
 800109a:	4824      	ldr	r0, [pc, #144]	@ (800112c <_GLOBAL__sub_I_touchgfx_init+0xac>)
          touchController(touchCtrl),
 800109c:	60dc      	str	r4, [r3, #12]
          mcuInstrumentation(0),
 800109e:	2200      	movs	r2, #0
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
 80010a0:	f44f 7180 	mov.w	r1, #256	@ 0x100
          auxiliaryLCD(0),
 80010a4:	e9c3 1212 	strd	r1, r2, [r3, #72]	@ 0x48
          touchSampleRate(1),
 80010a8:	4921      	ldr	r1, [pc, #132]	@ (8001130 <_GLOBAL__sub_I_touchgfx_init+0xb0>)
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
 80010aa:	861a      	strh	r2, [r3, #48]	@ 0x30
          vSyncCompensationEnabled(false),
 80010ac:	e9c3 121a 	strd	r1, r2, [r3, #104]	@ 0x68
          isFrontPorchEntered(false),
 80010b0:	4920      	ldr	r1, [pc, #128]	@ (8001134 <_GLOBAL__sub_I_touchgfx_init+0xb4>)
          useAuxiliaryLCD(false),
 80010b2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
          isFrontPorchEntered(false),
 80010b6:	e9c3 011e 	strd	r0, r1, [r3, #120]	@ 0x78
          minDrawingHeight(maxDrawingHeight / 3),    // Best guess based on testing (but not ideal in all cases)
 80010ba:	491f      	ldr	r1, [pc, #124]	@ (8001138 <_GLOBAL__sub_I_touchgfx_init+0xb8>)
 80010bc:	f8c3 1080 	str.w	r1, [r3, #128]	@ 0x80
        instance = this;
 80010c0:	491e      	ldr	r1, [pc, #120]	@ (800113c <_GLOBAL__sub_I_touchgfx_init+0xbc>)
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 80010c2:	481f      	ldr	r0, [pc, #124]	@ (8001140 <_GLOBAL__sub_I_touchgfx_init+0xc0>)
        instance = this;
 80010c4:	600b      	str	r3, [r1, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 80010c6:	21f0      	movs	r1, #240	@ 0xf0
          buttonController(0),
 80010c8:	e9c3 2204 	strd	r2, r2, [r3, #16]
 80010cc:	e9c3 2206 	strd	r2, r2, [r3, #24]
 80010d0:	e9c3 2208 	strd	r2, r2, [r3, #32]
 80010d4:	e9c3 220a 	strd	r2, r2, [r3, #40]	@ 0x28
          frameBuffer0(0),
 80010d8:	e9c3 220e 	strd	r2, r2, [r3, #56]	@ 0x38
          frameBuffer2(0),
 80010dc:	e9c3 2210 	strd	r2, r2, [r3, #64]	@ 0x40
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
        : x(0), y(0), width(0), height(0)
 80010e0:	e9c3 2214 	strd	r2, r2, [r3, #80]	@ 0x50
          lastX(0),
 80010e4:	e9c3 2217 	strd	r2, r2, [r3, #92]	@ 0x5c
          lastY(0),
 80010e8:	665a      	str	r2, [r3, #100]	@ 0x64
          updateMCULoad(0),
 80010ea:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
          cc_begin(0),
 80010ee:	675a      	str	r2, [r3, #116]	@ 0x74
          lcdRef(display),
 80010f0:	e9c3 6501 	strd	r6, r5, [r3, #4]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 80010f4:	8001      	strh	r1, [r0, #0]
 80010f6:	4813      	ldr	r0, [pc, #76]	@ (8001144 <_GLOBAL__sub_I_touchgfx_init+0xc4>)
 80010f8:	8001      	strh	r1, [r0, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 80010fa:	4813      	ldr	r0, [pc, #76]	@ (8001148 <_GLOBAL__sub_I_touchgfx_init+0xc8>)
 80010fc:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8001100:	8001      	strh	r1, [r0, #0]
 8001102:	4812      	ldr	r0, [pc, #72]	@ (800114c <_GLOBAL__sub_I_touchgfx_init+0xcc>)
 8001104:	8001      	strh	r1, [r0, #0]
        DISPLAY_ROTATION = rotate0;
 8001106:	4912      	ldr	r1, [pc, #72]	@ (8001150 <_GLOBAL__sub_I_touchgfx_init+0xd0>)
 8001108:	700a      	strb	r2, [r1, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 800110a:	2201      	movs	r2, #1
 800110c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
     * @param [in,out] display Reference to LCD interface.
     * @param [in,out] tc      Reference to Touch Controller driver.
     * @param width            Width of the display.
     * @param height           Height of the display.
     */
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8001110:	4a10      	ldr	r2, [pc, #64]	@ (8001154 <_GLOBAL__sub_I_touchgfx_init+0xd4>)
 8001112:	601a      	str	r2, [r3, #0]
}
 8001114:	bd70      	pop	{r4, r5, r6, pc}
 8001116:	bf00      	nop
 8001118:	20000248 	.word	0x20000248
 800111c:	20000fe8 	.word	0x20000fe8
 8001120:	200001bc 	.word	0x200001bc
 8001124:	08013098 	.word	0x08013098
 8001128:	20000134 	.word	0x20000134
 800112c:	01010000 	.word	0x01010000
 8001130:	01000001 	.word	0x01000001
 8001134:	00500400 	.word	0x00500400
 8001138:	0014001a 	.word	0x0014001a
 800113c:	20012638 	.word	0x20012638
 8001140:	2001262c 	.word	0x2001262c
 8001144:	20012632 	.word	0x20012632
 8001148:	2001262e 	.word	0x2001262e
 800114c:	20012634 	.word	0x20012634
 8001150:	20012630 	.word	0x20012630
 8001154:	08013d30 	.word	0x08013d30

08001158 <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
 8001158:	4801      	ldr	r0, [pc, #4]	@ (8001160 <_GLOBAL__sub_D_touchgfx_init+0x8>)
 800115a:	f7ff bd23 	b.w	8000ba4 <_ZN8STM32DMAD1Ev>
 800115e:	bf00      	nop
 8001160:	20000248 	.word	0x20000248

08001164 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001164:	4b03      	ldr	r3, [pc, #12]	@ (8001174 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0x10>)
 8001166:	2290      	movs	r2, #144	@ 0x90
 8001168:	f883 235a 	strb.w	r2, [r3, #858]	@ 0x35a
 800116c:	f883 2358 	strb.w	r2, [r3, #856]	@ 0x358

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
    NVIC_SetPriority(LTDC_IRQn, 9);
}
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	e000e100 	.word	0xe000e100

08001178 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:
    NVIC_DisableIRQ(LTDC_IRQn);
}

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8001178:	4a09      	ldr	r2, [pc, #36]	@ (80011a0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x28>)
 800117a:	490a      	ldr	r1, [pc, #40]	@ (80011a4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x2c>)
 800117c:	68d3      	ldr	r3, [r2, #12]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 800117e:	480a      	ldr	r0, [pc, #40]	@ (80011a8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x30>)
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8001180:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001184:	3b01      	subs	r3, #1
 8001186:	b29b      	uxth	r3, r3
 8001188:	800b      	strh	r3, [r1, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 800118a:	6911      	ldr	r1, [r2, #16]
 800118c:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8001190:	3901      	subs	r1, #1
 8001192:	8001      	strh	r1, [r0, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8001194:	6413      	str	r3, [r2, #64]	@ 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8001196:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8001198:	f043 0301 	orr.w	r3, r3, #1
 800119c:	6353      	str	r3, [r2, #52]	@ 0x34
}
 800119e:	4770      	bx	lr
 80011a0:	40016800 	.word	0x40016800
 80011a4:	200015ea 	.word	0x200015ea
 80011a8:	200015e8 	.word	0x200015e8

080011ac <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:
    HAL::endFrame();
}

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
    return (uint16_t*)LTDC_Layer1->CFBAR;
 80011ac:	4b01      	ldr	r3, [pc, #4]	@ (80011b4 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x8>)
 80011ae:	f8d3 00ac 	ldr.w	r0, [r3, #172]	@ 0xac
}
 80011b2:	4770      	bx	lr
 80011b4:	40016800 	.word	0x40016800

080011b8 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 80011b8:	4b02      	ldr	r3, [pc, #8]	@ (80011c4 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0xc>)

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 80011ba:	2201      	movs	r2, #1
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 80011bc:	f8c3 10ac 	str.w	r1, [r3, #172]	@ 0xac
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 80011c0:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80011c2:	4770      	bx	lr
 80011c4:	40016800 	.word	0x40016800

080011c8 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 80011c8:	b570      	push	{r4, r5, r6, lr}
 80011ca:	4604      	mov	r4, r0
    HAL::initialize();
 80011cc:	f007 fca1 	bl	8008b12 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 80011d0:	6823      	ldr	r3, [r4, #0]
 80011d2:	6e9d      	ldr	r5, [r3, #104]	@ 0x68
 80011d4:	f00a fdf4 	bl	800bdc0 <_ZN8touchgfx11Application11getInstanceEv>
 80011d8:	4601      	mov	r1, r0
 80011da:	4620      	mov	r0, r4
 80011dc:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
 80011de:	6823      	ldr	r3, [r4, #0]
 80011e0:	4a05      	ldr	r2, [pc, #20]	@ (80011f8 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x30>)
 80011e2:	f8d3 508c 	ldr.w	r5, [r3, #140]	@ 0x8c
 80011e6:	4620      	mov	r0, r4
 80011e8:	46ac      	mov	ip, r5
 80011ea:	2300      	movs	r3, #0
}
 80011ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
 80011f0:	f5a2 3116 	sub.w	r1, r2, #153600	@ 0x25800
 80011f4:	4760      	bx	ip
 80011f6:	bf00      	nop
 80011f8:	d004b000 	.word	0xd004b000

080011fc <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:
    return HAL::beginFrame();
 80011fc:	f007 bc70 	b.w	8008ae0 <_ZN8touchgfx3HAL10beginFrameEv>

08001200 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
    if (frameBufferUpdatedThisFrame)
 8001200:	f890 304b 	ldrb.w	r3, [r0, #75]	@ 0x4b
 8001204:	b113      	cbz	r3, 800120c <_ZN20TouchGFXGeneratedHAL8endFrameEv+0xc>
        refreshRequested = true;
 8001206:	4b02      	ldr	r3, [pc, #8]	@ (8001210 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x10>)
 8001208:	2201      	movs	r2, #1
 800120a:	701a      	strb	r2, [r3, #0]
    HAL::endFrame();
 800120c:	f007 bc74 	b.w	8008af8 <_ZN8touchgfx3HAL8endFrameEv>
 8001210:	200015ec 	.word	0x200015ec

08001214 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
    HAL::flushFrameBuffer(rect);
 8001214:	f007 bc2e 	b.w	8008a74 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>

08001218 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
}

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return HAL::blockCopy(dest, src, numBytes);
 8001218:	f007 bd9d 	b.w	8008d56 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

0800121c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800121c:	4b03      	ldr	r3, [pc, #12]	@ (800122c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0x10>)
 800121e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001222:	609a      	str	r2, [r3, #8]
 8001224:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001228:	609a      	str	r2, [r3, #8]
}
 800122a:	4770      	bx	lr
 800122c:	e000e100 	.word	0xe000e100

08001230 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001230:	4b08      	ldr	r3, [pc, #32]	@ (8001254 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x24>)
 8001232:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001236:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 800123a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800123e:	f3bf 8f6f 	isb	sy
 8001242:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001246:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 800124a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800124e:	f3bf 8f6f 	isb	sy
}
 8001252:	4770      	bx	lr
 8001254:	e000e100 	.word	0xe000e100

08001258 <HAL_LTDC_LineEventCallback>:
}

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 8001258:	b538      	push	{r3, r4, r5, lr}
        return instance;
 800125a:	4c18      	ldr	r4, [pc, #96]	@ (80012bc <HAL_LTDC_LineEventCallback+0x64>)
        if (!HAL::getInstance())
 800125c:	6823      	ldr	r3, [r4, #0]
 800125e:	b35b      	cbz	r3, 80012b8 <HAL_LTDC_LineEventCallback+0x60>
        {
            return;
        }

        if (LTDC->LIPCR == lcd_int_active_line)
 8001260:	4b17      	ldr	r3, [pc, #92]	@ (80012c0 <HAL_LTDC_LineEventCallback+0x68>)
 8001262:	4a18      	ldr	r2, [pc, #96]	@ (80012c4 <HAL_LTDC_LineEventCallback+0x6c>)
 8001264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001266:	8811      	ldrh	r1, [r2, #0]
 8001268:	428b      	cmp	r3, r1
 800126a:	d116      	bne.n	800129a <HAL_LTDC_LineEventCallback+0x42>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 800126c:	4b16      	ldr	r3, [pc, #88]	@ (80012c8 <HAL_LTDC_LineEventCallback+0x70>)
 800126e:	8819      	ldrh	r1, [r3, #0]
 8001270:	f003 febc 	bl	8004fec <HAL_LTDC_ProgramLineEvent>
 8001274:	6823      	ldr	r3, [r4, #0]
        vSyncCnt++;
 8001276:	f893 206a 	ldrb.w	r2, [r3, #106]	@ 0x6a
        isFrontPorchEntered = false;
 800127a:	2500      	movs	r5, #0
        vSyncCnt++;
 800127c:	3201      	adds	r2, #1
 800127e:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
        isFrontPorchEntered = false;
 8001282:	f883 507c 	strb.w	r5, [r3, #124]	@ 0x7c
            HAL::getInstance()->vSync();
            OSWrappers::signalVSync();
 8001286:	f7ff fc3b 	bl	8000b00 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 800128a:	6820      	ldr	r0, [r4, #0]
 800128c:	f008 f9ca 	bl	8009624 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 8001290:	4628      	mov	r0, r5

            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
            GPIO::clear(GPIO::VSYNC_FREQ);
        }
    }
 8001292:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            GPIO::set(GPIO::VSYNC_FREQ);
 8001296:	f7ff ba77 	b.w	8000788 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 800129a:	f003 fea7 	bl	8004fec <HAL_LTDC_ProgramLineEvent>
        return instance;
 800129e:	6824      	ldr	r4, [r4, #0]
        allowDMATransfers();
 80012a0:	6823      	ldr	r3, [r4, #0]
 80012a2:	4620      	mov	r0, r4
 80012a4:	6a1b      	ldr	r3, [r3, #32]
 80012a6:	4798      	blx	r3
        isFrontPorchEntered = true;
 80012a8:	2301      	movs	r3, #1
 80012aa:	f884 307c 	strb.w	r3, [r4, #124]	@ 0x7c
            GPIO::clear(GPIO::VSYNC_FREQ);
 80012ae:	2000      	movs	r0, #0
    }
 80012b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            GPIO::clear(GPIO::VSYNC_FREQ);
 80012b4:	f7ff ba92 	b.w	80007dc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
    }
 80012b8:	bd38      	pop	{r3, r4, r5, pc}
 80012ba:	bf00      	nop
 80012bc:	20012638 	.word	0x20012638
 80012c0:	40016800 	.word	0x40016800
 80012c4:	200015ea 	.word	0x200015ea
 80012c8:	200015e8 	.word	0x200015e8

080012cc <SPI5_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI5_Write(uint16_t Value)
{
 80012cc:	b507      	push	{r0, r1, r2, lr}
  HAL_StatusTypeDef status = HAL_OK;

  status = HAL_SPI_Transmit(&hspi5, (uint8_t*) &Value, 1, Spi5Timeout);
 80012ce:	4b06      	ldr	r3, [pc, #24]	@ (80012e8 <SPI5_Write+0x1c>)
{
 80012d0:	f8ad 0006 	strh.w	r0, [sp, #6]
  status = HAL_SPI_Transmit(&hspi5, (uint8_t*) &Value, 1, Spi5Timeout);
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4805      	ldr	r0, [pc, #20]	@ (80012ec <SPI5_Write+0x20>)
 80012d8:	2201      	movs	r2, #1
 80012da:	f10d 0106 	add.w	r1, sp, #6
 80012de:	f004 fbd3 	bl	8005a88 <HAL_SPI_Transmit>
  if(status != HAL_OK)
  {
    /* Re-Initialize the BUS */
    SPI5_Error();
  }
}
 80012e2:	b003      	add	sp, #12
 80012e4:	f85d fb04 	ldr.w	pc, [sp], #4
 80012e8:	2000000c 	.word	0x2000000c
 80012ec:	20001634 	.word	0x20001634

080012f0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80012f0:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  if (HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_2) == GPIO_PIN_RESET) {
 80012f2:	4d1a      	ldr	r5, [pc, #104]	@ (800135c <StartDefaultTask+0x6c>)
	      uint8_t msg = 'L';  // Left
	      osMessageQueuePut(Queue1Handle, &msg, 0, 0);
 80012f4:	4c1a      	ldr	r4, [pc, #104]	@ (8001360 <StartDefaultTask+0x70>)
	  if (HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_2) == GPIO_PIN_RESET) {
 80012f6:	2104      	movs	r1, #4
 80012f8:	4628      	mov	r0, r5
 80012fa:	f003 f87f 	bl	80043fc <HAL_GPIO_ReadPin>
 80012fe:	4603      	mov	r3, r0
 8001300:	b940      	cbnz	r0, 8001314 <StartDefaultTask+0x24>
	      uint8_t msg = 'L';  // Left
 8001302:	224c      	movs	r2, #76	@ 0x4c
 8001304:	f88d 2007 	strb.w	r2, [sp, #7]
	      osMessageQueuePut(Queue1Handle, &msg, 0, 0);
 8001308:	f10d 0107 	add.w	r1, sp, #7
 800130c:	4602      	mov	r2, r0
 800130e:	6820      	ldr	r0, [r4, #0]
 8001310:	f005 f959 	bl	80065c6 <osMessageQueuePut>
	  }
	  if (HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_3) == GPIO_PIN_RESET) {
 8001314:	2108      	movs	r1, #8
 8001316:	4628      	mov	r0, r5
 8001318:	f003 f870 	bl	80043fc <HAL_GPIO_ReadPin>
 800131c:	4603      	mov	r3, r0
 800131e:	b940      	cbnz	r0, 8001332 <StartDefaultTask+0x42>
	      uint8_t msg = 'R';  // Right
 8001320:	2252      	movs	r2, #82	@ 0x52
 8001322:	f88d 2007 	strb.w	r2, [sp, #7]
	      osMessageQueuePut(Queue1Handle, &msg, 0, 0);
 8001326:	f10d 0107 	add.w	r1, sp, #7
 800132a:	4602      	mov	r2, r0
 800132c:	6820      	ldr	r0, [r4, #0]
 800132e:	f005 f94a 	bl	80065c6 <osMessageQueuePut>
	  }
	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET) {
 8001332:	480c      	ldr	r0, [pc, #48]	@ (8001364 <StartDefaultTask+0x74>)
 8001334:	2101      	movs	r1, #1
 8001336:	f003 f861 	bl	80043fc <HAL_GPIO_ReadPin>
 800133a:	2801      	cmp	r0, #1
 800133c:	d109      	bne.n	8001352 <StartDefaultTask+0x62>
	  	      uint8_t msg = 'A';  // Reset
 800133e:	2341      	movs	r3, #65	@ 0x41
 8001340:	f88d 3007 	strb.w	r3, [sp, #7]
	  	      osMessageQueuePut(Queue1Handle, &msg, 0, 0);
 8001344:	2300      	movs	r3, #0
 8001346:	6820      	ldr	r0, [r4, #0]
 8001348:	461a      	mov	r2, r3
 800134a:	f10d 0107 	add.w	r1, sp, #7
 800134e:	f005 f93a 	bl	80065c6 <osMessageQueuePut>
	  	  }
	osDelay(1);
 8001352:	2001      	movs	r0, #1
 8001354:	f005 f848 	bl	80063e8 <osDelay>
	  if (HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_2) == GPIO_PIN_RESET) {
 8001358:	e7cd      	b.n	80012f6 <StartDefaultTask+0x6>
 800135a:	bf00      	nop
 800135c:	40021800 	.word	0x40021800
 8001360:	200015f4 	.word	0x200015f4
 8001364:	40020000 	.word	0x40020000

08001368 <SystemClock_Config>:
{
 8001368:	b530      	push	{r4, r5, lr}
 800136a:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800136c:	2210      	movs	r2, #16
 800136e:	2100      	movs	r1, #0
 8001370:	a80a      	add	r0, sp, #40	@ 0x28
 8001372:	f011 f84a 	bl	801240a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001376:	2214      	movs	r2, #20
 8001378:	2100      	movs	r1, #0
 800137a:	a803      	add	r0, sp, #12
 800137c:	f011 f845 	bl	801240a <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 8001380:	2400      	movs	r4, #0
 8001382:	4b1d      	ldr	r3, [pc, #116]	@ (80013f8 <SystemClock_Config+0x90>)
 8001384:	9401      	str	r4, [sp, #4]
 8001386:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001388:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800138c:	641a      	str	r2, [r3, #64]	@ 0x40
 800138e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001390:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001394:	9301      	str	r3, [sp, #4]
 8001396:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001398:	4b18      	ldr	r3, [pc, #96]	@ (80013fc <SystemClock_Config+0x94>)
 800139a:	9402      	str	r4, [sp, #8]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80013aa:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013ac:	2201      	movs	r2, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013ae:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013b0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013b4:	e9cd 2308 	strd	r2, r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013b8:	2502      	movs	r5, #2
 80013ba:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80013be:	e9cd 530e 	strd	r5, r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLN = 336;
 80013c2:	2108      	movs	r1, #8
 80013c4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80013c8:	e9cd 1310 	strd	r1, r3, [sp, #64]	@ 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013cc:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80013ce:	2304      	movs	r3, #4
 80013d0:	9313      	str	r3, [sp, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013d2:	9512      	str	r5, [sp, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013d4:	f003 fe28 	bl	8005028 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013d8:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013da:	e9cd 3503 	strd	r3, r5, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80013de:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 80013e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013e6:	e9cd 0306 	strd	r0, r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80013ea:	2105      	movs	r1, #5
 80013ec:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013ee:	9405      	str	r4, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80013f0:	f003 fff6 	bl	80053e0 <HAL_RCC_ClockConfig>
}
 80013f4:	b015      	add	sp, #84	@ 0x54
 80013f6:	bd30      	pop	{r4, r5, pc}
 80013f8:	40023800 	.word	0x40023800
 80013fc:	40007000 	.word	0x40007000

08001400 <main>:
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b09a      	sub	sp, #104	@ 0x68
  HAL_Init();
 8001404:	f002 fd7a 	bl	8003efc <HAL_Init>
  SystemClock_Config();
 8001408:	f7ff ffae 	bl	8001368 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800140c:	2214      	movs	r2, #20
 800140e:	2100      	movs	r1, #0
 8001410:	a80d      	add	r0, sp, #52	@ 0x34
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001412:	2400      	movs	r4, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001414:	f010 fff9 	bl	801240a <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001418:	4bc3      	ldr	r3, [pc, #780]	@ (8001728 <main+0x328>)
 800141a:	9400      	str	r4, [sp, #0]
 800141c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
  HAL_GPIO_WritePin(GPIOE, VSYNC_FREQ_Pin|RENDER_TIME_Pin|FRAME_RATE_Pin|MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 800141e:	48c3      	ldr	r0, [pc, #780]	@ (800172c <main+0x32c>)
  hi2c3.Instance = I2C3;
 8001420:	4dc3      	ldr	r5, [pc, #780]	@ (8001730 <main+0x330>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001422:	f042 0210 	orr.w	r2, r2, #16
 8001426:	631a      	str	r2, [r3, #48]	@ 0x30
 8001428:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800142a:	f002 0210 	and.w	r2, r2, #16
 800142e:	9200      	str	r2, [sp, #0]
 8001430:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001432:	9401      	str	r4, [sp, #4]
 8001434:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001436:	f042 0220 	orr.w	r2, r2, #32
 800143a:	631a      	str	r2, [r3, #48]	@ 0x30
 800143c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800143e:	f002 0220 	and.w	r2, r2, #32
 8001442:	9201      	str	r2, [sp, #4]
 8001444:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001446:	9402      	str	r4, [sp, #8]
 8001448:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800144a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800144e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001450:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001452:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8001456:	9202      	str	r2, [sp, #8]
 8001458:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800145a:	9403      	str	r4, [sp, #12]
 800145c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800145e:	f042 0204 	orr.w	r2, r2, #4
 8001462:	631a      	str	r2, [r3, #48]	@ 0x30
 8001464:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001466:	f002 0204 	and.w	r2, r2, #4
 800146a:	9203      	str	r2, [sp, #12]
 800146c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800146e:	9404      	str	r4, [sp, #16]
 8001470:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001472:	f042 0201 	orr.w	r2, r2, #1
 8001476:	631a      	str	r2, [r3, #48]	@ 0x30
 8001478:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800147a:	f002 0201 	and.w	r2, r2, #1
 800147e:	9204      	str	r2, [sp, #16]
 8001480:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001482:	9405      	str	r4, [sp, #20]
 8001484:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001486:	f042 0202 	orr.w	r2, r2, #2
 800148a:	631a      	str	r2, [r3, #48]	@ 0x30
 800148c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800148e:	f002 0202 	and.w	r2, r2, #2
 8001492:	9205      	str	r2, [sp, #20]
 8001494:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001496:	9406      	str	r4, [sp, #24]
 8001498:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800149a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800149e:	631a      	str	r2, [r3, #48]	@ 0x30
 80014a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80014a2:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 80014a6:	9206      	str	r2, [sp, #24]
 80014a8:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014aa:	9407      	str	r4, [sp, #28]
 80014ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80014ae:	f042 0208 	orr.w	r2, r2, #8
 80014b2:	631a      	str	r2, [r3, #48]	@ 0x30
 80014b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b6:	f003 0308 	and.w	r3, r3, #8
 80014ba:	9307      	str	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOE, VSYNC_FREQ_Pin|RENDER_TIME_Pin|FRAME_RATE_Pin|MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 80014bc:	4622      	mov	r2, r4
 80014be:	213c      	movs	r1, #60	@ 0x3c
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014c0:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOE, VSYNC_FREQ_Pin|RENDER_TIME_Pin|FRAME_RATE_Pin|MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 80014c2:	f002 ffa1 	bl	8004408 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 80014c6:	489b      	ldr	r0, [pc, #620]	@ (8001734 <main+0x334>)
 80014c8:	4622      	mov	r2, r4
 80014ca:	2104      	movs	r1, #4
 80014cc:	f002 ff9c 	bl	8004408 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 80014d0:	4622      	mov	r2, r4
 80014d2:	4899      	ldr	r0, [pc, #612]	@ (8001738 <main+0x338>)
 80014d4:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 80014d8:	f002 ff96 	bl	8004408 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014dc:	2601      	movs	r6, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014de:	f04f 0803 	mov.w	r8, #3
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e2:	233c      	movs	r3, #60	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014e4:	4891      	ldr	r0, [pc, #580]	@ (800172c <main+0x32c>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e6:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014ea:	a90d      	add	r1, sp, #52	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014ec:	2702      	movs	r7, #2
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80014ee:	f04f 0a04 	mov.w	sl, #4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f2:	e9cd 360d 	strd	r3, r6, [sp, #52]	@ 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f6:	940f      	str	r4, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014f8:	f002 fe9c 	bl	8004234 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014fc:	488d      	ldr	r0, [pc, #564]	@ (8001734 <main+0x334>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fe:	940f      	str	r4, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001500:	a90d      	add	r1, sp, #52	@ 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001502:	e9cd a60d 	strd	sl, r6, [sp, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001506:	9710      	str	r7, [sp, #64]	@ 0x40
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001508:	f002 fe94 	bl	8004234 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800150c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001510:	4889      	ldr	r0, [pc, #548]	@ (8001738 <main+0x338>)
 8001512:	a90d      	add	r1, sp, #52	@ 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001514:	e9cd 360d 	strd	r3, r6, [sp, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001518:	e9cd 470f 	strd	r4, r7, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800151c:	f002 fe8a 	bl	8004234 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001520:	4886      	ldr	r0, [pc, #536]	@ (800173c <main+0x33c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001522:	940f      	str	r4, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001524:	a90d      	add	r1, sp, #52	@ 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001526:	e9cd 640d 	strd	r6, r4, [sp, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800152a:	f002 fe83 	bl	8004234 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800152e:	a90d      	add	r1, sp, #52	@ 0x34
  GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 8001530:	230c      	movs	r3, #12
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001532:	4883      	ldr	r0, [pc, #524]	@ (8001740 <main+0x340>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001534:	960f      	str	r6, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001536:	e9cd 340d 	strd	r3, r4, [sp, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800153a:	f002 fe7b 	bl	8004234 <HAL_GPIO_Init>
  hcrc.Instance = CRC;
 800153e:	4881      	ldr	r0, [pc, #516]	@ (8001744 <main+0x344>)
 8001540:	4b81      	ldr	r3, [pc, #516]	@ (8001748 <main+0x348>)
 8001542:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001544:	f002 fd6c 	bl	8004020 <HAL_CRC_Init>
  hi2c3.Init.ClockSpeed = 100000;
 8001548:	4a80      	ldr	r2, [pc, #512]	@ (800174c <main+0x34c>)
 800154a:	4b81      	ldr	r3, [pc, #516]	@ (8001750 <main+0x350>)
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800154c:	622c      	str	r4, [r5, #32]
  hi2c3.Init.ClockSpeed = 100000;
 800154e:	e9c5 2300 	strd	r2, r3, [r5]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001552:	4628      	mov	r0, r5
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001554:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001558:	e9c5 3404 	strd	r3, r4, [r5, #16]
  hi2c3.Init.OwnAddress1 = 0;
 800155c:	e9c5 4402 	strd	r4, r4, [r5, #8]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001560:	e9c5 4406 	strd	r4, r4, [r5, #24]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001564:	f003 f950 	bl	8004808 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 8001568:	2110      	movs	r1, #16
 800156a:	4628      	mov	r0, r5
 800156c:	f003 fb8c 	bl	8004c88 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001570:	4621      	mov	r1, r4
 8001572:	4628      	mov	r0, r5
 8001574:	f003 fba7 	bl	8004cc6 <HAL_I2CEx_ConfigDigitalFilter>
  hspi5.Instance = SPI5;
 8001578:	4876      	ldr	r0, [pc, #472]	@ (8001754 <main+0x354>)
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800157a:	4977      	ldr	r1, [pc, #476]	@ (8001758 <main+0x358>)
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800157c:	6284      	str	r4, [r0, #40]	@ 0x28
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800157e:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8001582:	e9c0 1300 	strd	r1, r3, [r0]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001586:	f44f 7500 	mov.w	r5, #512	@ 0x200
 800158a:	2318      	movs	r3, #24
 800158c:	e9c0 5306 	strd	r5, r3, [r0, #24]
  hspi5.Init.CRCPolynomial = 10;
 8001590:	230a      	movs	r3, #10
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001592:	4d72      	ldr	r5, [pc, #456]	@ (800175c <main+0x35c>)
  hspi5.Init.CRCPolynomial = 10;
 8001594:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001596:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800159a:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800159e:	e9c0 4408 	strd	r4, r4, [r0, #32]
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80015a2:	f004 fa15 	bl	80059d0 <HAL_SPI_Init>
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80015a6:	4b6e      	ldr	r3, [pc, #440]	@ (8001760 <main+0x360>)
  SdramTiming.LoadToActiveDelay = 2;
 80015a8:	970d      	str	r7, [sp, #52]	@ 0x34
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80015aa:	f04f 0c10 	mov.w	ip, #16
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80015ae:	e9c5 3600 	strd	r3, r6, [r5]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80015b2:	2340      	movs	r3, #64	@ 0x40
 80015b4:	e9c5 c304 	strd	ip, r3, [r5, #16]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80015b8:	f44f 73c0 	mov.w	r3, #384	@ 0x180
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80015bc:	e9c5 3406 	strd	r3, r4, [r5, #24]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80015c0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80015c4:	e9c5 3408 	strd	r3, r4, [r5, #32]
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 80015c8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015cc:	62ab      	str	r3, [r5, #40]	@ 0x28
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80015ce:	a90d      	add	r1, sp, #52	@ 0x34
  SdramTiming.ExitSelfRefreshDelay = 7;
 80015d0:	2307      	movs	r3, #7
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80015d2:	4628      	mov	r0, r5
  SdramTiming.SelfRefreshTime = 4;
 80015d4:	e9cd 3a0e 	strd	r3, sl, [sp, #56]	@ 0x38
  SdramTiming.WriteRecoveryTime = 3;
 80015d8:	e9cd 3810 	strd	r3, r8, [sp, #64]	@ 0x40
  Command->CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80015dc:	f04f 0908 	mov.w	r9, #8
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80015e0:	e9c5 4a02 	strd	r4, sl, [r5, #8]
  SdramTiming.RCDDelay = 2;
 80015e4:	e9cd 7712 	strd	r7, r7, [sp, #72]	@ 0x48
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80015e8:	f004 f8ee 	bl	80057c8 <HAL_SDRAM_Init>
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80015ec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015f0:	a909      	add	r1, sp, #36	@ 0x24
 80015f2:	4628      	mov	r0, r5
  Command->AutoRefreshNumber       = 1;
 80015f4:	e9cd 960a 	strd	r9, r6, [sp, #40]	@ 0x28
 __IO uint32_t tmpmrd =0;
 80015f8:	9408      	str	r4, [sp, #32]
  Command->CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 80015fa:	9609      	str	r6, [sp, #36]	@ 0x24
  Command->ModeRegisterDefinition  = 0;
 80015fc:	940c      	str	r4, [sp, #48]	@ 0x30
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80015fe:	f004 f903 	bl	8005808 <HAL_SDRAM_SendCommand>
  HAL_Delay(1);
 8001602:	4630      	mov	r0, r6
 8001604:	f002 fca6 	bl	8003f54 <HAL_Delay>
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8001608:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800160c:	a909      	add	r1, sp, #36	@ 0x24
 800160e:	4628      	mov	r0, r5
  Command->CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8001610:	e9cd 7909 	strd	r7, r9, [sp, #36]	@ 0x24
  Command->ModeRegisterDefinition  = 0;
 8001614:	e9cd 640b 	strd	r6, r4, [sp, #44]	@ 0x2c
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8001618:	f004 f8f6 	bl	8005808 <HAL_SDRAM_SendCommand>
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 800161c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001620:	a909      	add	r1, sp, #36	@ 0x24
 8001622:	4628      	mov	r0, r5
  Command->CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8001624:	e9cd 8909 	strd	r8, r9, [sp, #36]	@ 0x24
  Command->ModeRegisterDefinition  = 0;
 8001628:	e9cd a40b 	strd	sl, r4, [sp, #44]	@ 0x2c
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 800162c:	f004 f8ec 	bl	8005808 <HAL_SDRAM_SendCommand>
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8001630:	f44f 730c 	mov.w	r3, #560	@ 0x230
 8001634:	9308      	str	r3, [sp, #32]
  Command->ModeRegisterDefinition  = tmpmrd;
 8001636:	9b08      	ldr	r3, [sp, #32]
 8001638:	930c      	str	r3, [sp, #48]	@ 0x30
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 800163a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800163e:	a909      	add	r1, sp, #36	@ 0x24
 8001640:	4628      	mov	r0, r5
  Command->CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8001642:	e9cd a909 	strd	sl, r9, [sp, #36]	@ 0x24
  Command->AutoRefreshNumber       = 1;
 8001646:	960b      	str	r6, [sp, #44]	@ 0x2c
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8001648:	f004 f8de 	bl	8005808 <HAL_SDRAM_SendCommand>
  HAL_SDRAM_ProgramRefreshRate(hsdram, REFRESH_COUNT);
 800164c:	f240 516a 	movw	r1, #1386	@ 0x56a
 8001650:	4628      	mov	r0, r5
 8001652:	f004 f8f7 	bl	8005844 <HAL_SDRAM_ProgramRefreshRate>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001656:	2234      	movs	r2, #52	@ 0x34
 8001658:	4621      	mov	r1, r4
 800165a:	eb0d 0002 	add.w	r0, sp, r2
 800165e:	f010 fed4 	bl	801240a <memset>
  hltdc.Instance = LTDC;
 8001662:	4d40      	ldr	r5, [pc, #256]	@ (8001764 <main+0x364>)
 8001664:	4b40      	ldr	r3, [pc, #256]	@ (8001768 <main+0x368>)
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001666:	612c      	str	r4, [r5, #16]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001668:	e9c5 3400 	strd	r3, r4, [r5]
  hltdc.Init.HorizontalSync = 9;
 800166c:	2309      	movs	r3, #9
  hltdc.Init.VerticalSync = 1;
 800166e:	e9c5 3605 	strd	r3, r6, [r5, #20]
  hltdc.Init.AccumulatedHBP = 29;
 8001672:	231d      	movs	r3, #29
  hltdc.Init.AccumulatedActiveH = 323;
 8001674:	f240 1e0d 	movw	lr, #269	@ 0x10d
  hltdc.Init.AccumulatedVBP = 3;
 8001678:	e9c5 3807 	strd	r3, r8, [r5, #28]
  hltdc.Init.AccumulatedActiveH = 323;
 800167c:	f240 1343 	movw	r3, #323	@ 0x143
 8001680:	e9c5 e309 	strd	lr, r3, [r5, #36]	@ 0x24
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001684:	4628      	mov	r0, r5
  hltdc.Init.TotalHeigh = 327;
 8001686:	f240 1347 	movw	r3, #327	@ 0x147
 800168a:	f240 1817 	movw	r8, #279	@ 0x117
 800168e:	e9c5 830b 	strd	r8, r3, [r5, #44]	@ 0x2c
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001692:	e9c5 4402 	strd	r4, r4, [r5, #8]
  hltdc.Init.Backcolor.Blue = 0;
 8001696:	86ac      	strh	r4, [r5, #52]	@ 0x34
  hltdc.Init.Backcolor.Red = 0;
 8001698:	f885 4036 	strb.w	r4, [r5, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800169c:	f003 fbae 	bl	8004dfc <HAL_LTDC_Init>
  pLayerCfg.Alpha = 255;
 80016a0:	21ff      	movs	r1, #255	@ 0xff
  pLayerCfg.WindowX1 = 240;
 80016a2:	22f0      	movs	r2, #240	@ 0xf0
  pLayerCfg.Alpha0 = 0;
 80016a4:	e9cd 1412 	strd	r1, r4, [sp, #72]	@ 0x48
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80016a8:	f44f 6a80 	mov.w	sl, #1024	@ 0x400
 80016ac:	2105      	movs	r1, #5
  pLayerCfg.WindowY1 = 320;
 80016ae:	f44f 73a0 	mov.w	r3, #320	@ 0x140
  pLayerCfg.WindowY0 = 0;
 80016b2:	e9cd 240e 	strd	r2, r4, [sp, #56]	@ 0x38
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80016b6:	e9cd a114 	strd	sl, r1, [sp, #80]	@ 0x50
  pLayerCfg.ImageWidth = 240;
 80016ba:	e9cd 4216 	strd	r4, r2, [sp, #88]	@ 0x58
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80016be:	a90d      	add	r1, sp, #52	@ 0x34
 80016c0:	4622      	mov	r2, r4
 80016c2:	4628      	mov	r0, r5
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80016c4:	e9cd 3710 	strd	r3, r7, [sp, #64]	@ 0x40
  LcdDrv = &ili9341_drv;
 80016c8:	4d28      	ldr	r5, [pc, #160]	@ (800176c <main+0x36c>)
  pLayerCfg.ImageHeight = 320;
 80016ca:	9318      	str	r3, [sp, #96]	@ 0x60
  pLayerCfg.WindowX0 = 0;
 80016cc:	940d      	str	r4, [sp, #52]	@ 0x34
  pLayerCfg.Backcolor.Blue = 0;
 80016ce:	f8ad 4064 	strh.w	r4, [sp, #100]	@ 0x64
  pLayerCfg.Backcolor.Red = 0;
 80016d2:	f88d 4066 	strb.w	r4, [sp, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80016d6:	f003 fc5c 	bl	8004f92 <HAL_LTDC_ConfigLayer>
  LcdDrv = &ili9341_drv;
 80016da:	4b25      	ldr	r3, [pc, #148]	@ (8001770 <main+0x370>)
 80016dc:	602b      	str	r3, [r5, #0]
  LcdDrv->Init();
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4798      	blx	r3
  LcdDrv->DisplayOff();
 80016e2:	682b      	ldr	r3, [r5, #0]
  hdma2d.Instance = DMA2D;
 80016e4:	4d23      	ldr	r5, [pc, #140]	@ (8001774 <main+0x374>)
  LcdDrv->DisplayOff();
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	4798      	blx	r3
  hdma2d.Instance = DMA2D;
 80016ea:	4b23      	ldr	r3, [pc, #140]	@ (8001778 <main+0x378>)
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80016ec:	4628      	mov	r0, r5
  hdma2d.Init.Mode = DMA2D_M2M;
 80016ee:	e9c5 3400 	strd	r3, r4, [r5]
  hdma2d.Init.OutputOffset = 0;
 80016f2:	e9c5 7402 	strd	r7, r4, [r5, #8]
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 80016f6:	e9c5 470a 	strd	r4, r7, [r5, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80016fa:	e9c5 440c 	strd	r4, r4, [r5, #48]	@ 0x30
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80016fe:	f002 fc9f 	bl	8004040 <HAL_DMA2D_Init>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001702:	4631      	mov	r1, r6
 8001704:	4628      	mov	r0, r5
 8001706:	f002 fd51 	bl	80041ac <HAL_DMA2D_ConfigLayer>
  MX_TouchGFX_Init();
 800170a:	f7fe ff80 	bl	800060e <MX_TouchGFX_Init>
  osKernelInitialize();
 800170e:	f004 fdfb 	bl	8006308 <osKernelInitialize>
  Queue1Handle = osMessageQueueNew (8, sizeof(uint8_t), &Queue1_attributes);
 8001712:	4a1a      	ldr	r2, [pc, #104]	@ (800177c <main+0x37c>)
 8001714:	4631      	mov	r1, r6
 8001716:	4648      	mov	r0, r9
 8001718:	f004 ff1a 	bl	8006550 <osMessageQueueNew>
 800171c:	4b18      	ldr	r3, [pc, #96]	@ (8001780 <main+0x380>)
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800171e:	4a19      	ldr	r2, [pc, #100]	@ (8001784 <main+0x384>)
  Queue1Handle = osMessageQueueNew (8, sizeof(uint8_t), &Queue1_attributes);
 8001720:	6018      	str	r0, [r3, #0]
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001722:	4621      	mov	r1, r4
 8001724:	e030      	b.n	8001788 <main+0x388>
 8001726:	bf00      	nop
 8001728:	40023800 	.word	0x40023800
 800172c:	40021000 	.word	0x40021000
 8001730:	20001734 	.word	0x20001734
 8001734:	40020800 	.word	0x40020800
 8001738:	40020c00 	.word	0x40020c00
 800173c:	40020000 	.word	0x40020000
 8001740:	40021800 	.word	0x40021800
 8001744:	200017c8 	.word	0x200017c8
 8001748:	40023000 	.word	0x40023000
 800174c:	40005c00 	.word	0x40005c00
 8001750:	000186a0 	.word	0x000186a0
 8001754:	20001634 	.word	0x20001634
 8001758:	40015000 	.word	0x40015000
 800175c:	20001600 	.word	0x20001600
 8001760:	a0000140 	.word	0xa0000140
 8001764:	2000168c 	.word	0x2000168c
 8001768:	40016800 	.word	0x40016800
 800176c:	200015f0 	.word	0x200015f0
 8001770:	20000014 	.word	0x20000014
 8001774:	20001788 	.word	0x20001788
 8001778:	4002b000 	.word	0x4002b000
 800177c:	08013f14 	.word	0x08013f14
 8001780:	200015f4 	.word	0x200015f4
 8001784:	08013f50 	.word	0x08013f50
 8001788:	4807      	ldr	r0, [pc, #28]	@ (80017a8 <main+0x3a8>)
 800178a:	f004 fde9 	bl	8006360 <osThreadNew>
 800178e:	4b07      	ldr	r3, [pc, #28]	@ (80017ac <main+0x3ac>)
  GUI_TaskHandle = osThreadNew(TouchGFX_Task, NULL, &GUI_Task_attributes);
 8001790:	4a07      	ldr	r2, [pc, #28]	@ (80017b0 <main+0x3b0>)
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001792:	6018      	str	r0, [r3, #0]
  GUI_TaskHandle = osThreadNew(TouchGFX_Task, NULL, &GUI_Task_attributes);
 8001794:	4621      	mov	r1, r4
 8001796:	4807      	ldr	r0, [pc, #28]	@ (80017b4 <main+0x3b4>)
 8001798:	f004 fde2 	bl	8006360 <osThreadNew>
 800179c:	4b06      	ldr	r3, [pc, #24]	@ (80017b8 <main+0x3b8>)
 800179e:	6018      	str	r0, [r3, #0]
  osKernelStart();
 80017a0:	f004 fdc4 	bl	800632c <osKernelStart>
  while (1)
 80017a4:	e7fe      	b.n	80017a4 <main+0x3a4>
 80017a6:	bf00      	nop
 80017a8:	080012f1 	.word	0x080012f1
 80017ac:	200015fc 	.word	0x200015fc
 80017b0:	08013f2c 	.word	0x08013f2c
 80017b4:	08000613 	.word	0x08000613
 80017b8:	200015f8 	.word	0x200015f8

080017bc <IOE_Init>:
void IOE_Init(void)
 80017bc:	4770      	bx	lr

080017be <IOE_ITConfig>:
void IOE_ITConfig(void)
 80017be:	4770      	bx	lr

080017c0 <IOE_Write>:
{
 80017c0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  status = HAL_I2C_Mem_Write(&hi2c3, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2c3Timeout);
 80017c2:	4b09      	ldr	r3, [pc, #36]	@ (80017e8 <IOE_Write+0x28>)
 80017c4:	f88d 2017 	strb.w	r2, [sp, #23]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	9302      	str	r3, [sp, #8]
 80017cc:	f10d 0217 	add.w	r2, sp, #23
 80017d0:	2301      	movs	r3, #1
 80017d2:	9200      	str	r2, [sp, #0]
 80017d4:	9301      	str	r3, [sp, #4]
 80017d6:	460a      	mov	r2, r1
 80017d8:	4601      	mov	r1, r0
 80017da:	4804      	ldr	r0, [pc, #16]	@ (80017ec <IOE_Write+0x2c>)
 80017dc:	f003 f8bc 	bl	8004958 <HAL_I2C_Mem_Write>
}
 80017e0:	b007      	add	sp, #28
 80017e2:	f85d fb04 	ldr.w	pc, [sp], #4
 80017e6:	bf00      	nop
 80017e8:	20000010 	.word	0x20000010
 80017ec:	20001734 	.word	0x20001734

080017f0 <IOE_Read>:
{
 80017f0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t value = 0;
 80017f2:	2300      	movs	r3, #0
 80017f4:	f88d 3017 	strb.w	r3, [sp, #23]
  status = HAL_I2C_Mem_Read(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2c3Timeout);
 80017f8:	4b08      	ldr	r3, [pc, #32]	@ (800181c <IOE_Read+0x2c>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	9302      	str	r3, [sp, #8]
{
 80017fe:	460a      	mov	r2, r1
  status = HAL_I2C_Mem_Read(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2c3Timeout);
 8001800:	2301      	movs	r3, #1
 8001802:	f10d 0117 	add.w	r1, sp, #23
 8001806:	9100      	str	r1, [sp, #0]
 8001808:	9301      	str	r3, [sp, #4]
 800180a:	4601      	mov	r1, r0
 800180c:	4804      	ldr	r0, [pc, #16]	@ (8001820 <IOE_Read+0x30>)
 800180e:	f003 f933 	bl	8004a78 <HAL_I2C_Mem_Read>
}
 8001812:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8001816:	b007      	add	sp, #28
 8001818:	f85d fb04 	ldr.w	pc, [sp], #4
 800181c:	20000010 	.word	0x20000010
 8001820:	20001734 	.word	0x20001734

08001824 <IOE_ReadMultiple>:
{
 8001824:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  status = HAL_I2C_Mem_Read(&hi2c3, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2c3Timeout);
 8001826:	4c08      	ldr	r4, [pc, #32]	@ (8001848 <IOE_ReadMultiple+0x24>)
 8001828:	6824      	ldr	r4, [r4, #0]
 800182a:	9200      	str	r2, [sp, #0]
 800182c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8001830:	460a      	mov	r2, r1
 8001832:	2301      	movs	r3, #1
 8001834:	4601      	mov	r1, r0
 8001836:	4805      	ldr	r0, [pc, #20]	@ (800184c <IOE_ReadMultiple+0x28>)
 8001838:	f003 f91e 	bl	8004a78 <HAL_I2C_Mem_Read>
}
 800183c:	3800      	subs	r0, #0
 800183e:	bf18      	it	ne
 8001840:	2001      	movne	r0, #1
 8001842:	b004      	add	sp, #16
 8001844:	bd10      	pop	{r4, pc}
 8001846:	bf00      	nop
 8001848:	20000010 	.word	0x20000010
 800184c:	20001734 	.word	0x20001734

08001850 <IOE_Delay>:
void IOE_Delay(uint32_t Delay)
 8001850:	f002 bb80 	b.w	8003f54 <HAL_Delay>

08001854 <LCD_IO_Init>:
{
 8001854:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8001856:	4c06      	ldr	r4, [pc, #24]	@ (8001870 <LCD_IO_Init+0x1c>)
 8001858:	2200      	movs	r2, #0
 800185a:	4620      	mov	r0, r4
 800185c:	2104      	movs	r1, #4
 800185e:	f002 fdd3 	bl	8004408 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8001862:	4620      	mov	r0, r4
 8001864:	2201      	movs	r2, #1
}
 8001866:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 800186a:	2104      	movs	r1, #4
 800186c:	f002 bdcc 	b.w	8004408 <HAL_GPIO_WritePin>
 8001870:	40020800 	.word	0x40020800

08001874 <LCD_IO_WriteData>:
{
 8001874:	b538      	push	{r3, r4, r5, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8001876:	4d0b      	ldr	r5, [pc, #44]	@ (80018a4 <LCD_IO_WriteData+0x30>)
{
 8001878:	4604      	mov	r4, r0
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 800187a:	2201      	movs	r2, #1
 800187c:	480a      	ldr	r0, [pc, #40]	@ (80018a8 <LCD_IO_WriteData+0x34>)
 800187e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001882:	f002 fdc1 	bl	8004408 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8001886:	2200      	movs	r2, #0
 8001888:	2104      	movs	r1, #4
 800188a:	4628      	mov	r0, r5
 800188c:	f002 fdbc 	bl	8004408 <HAL_GPIO_WritePin>
  SPI5_Write(RegValue);
 8001890:	4620      	mov	r0, r4
 8001892:	f7ff fd1b 	bl	80012cc <SPI5_Write>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8001896:	4628      	mov	r0, r5
 8001898:	2201      	movs	r2, #1
}
 800189a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 800189e:	2104      	movs	r1, #4
 80018a0:	f002 bdb2 	b.w	8004408 <HAL_GPIO_WritePin>
 80018a4:	40020800 	.word	0x40020800
 80018a8:	40020c00 	.word	0x40020c00

080018ac <LCD_IO_WriteReg>:
{
 80018ac:	b538      	push	{r3, r4, r5, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 80018ae:	4d0b      	ldr	r5, [pc, #44]	@ (80018dc <LCD_IO_WriteReg+0x30>)
{
 80018b0:	4604      	mov	r4, r0
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 80018b2:	2200      	movs	r2, #0
 80018b4:	480a      	ldr	r0, [pc, #40]	@ (80018e0 <LCD_IO_WriteReg+0x34>)
 80018b6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80018ba:	f002 fda5 	bl	8004408 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 80018be:	2200      	movs	r2, #0
 80018c0:	2104      	movs	r1, #4
 80018c2:	4628      	mov	r0, r5
 80018c4:	f002 fda0 	bl	8004408 <HAL_GPIO_WritePin>
  SPI5_Write(Reg);
 80018c8:	4620      	mov	r0, r4
 80018ca:	f7ff fcff 	bl	80012cc <SPI5_Write>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 80018ce:	4628      	mov	r0, r5
 80018d0:	2201      	movs	r2, #1
}
 80018d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 80018d6:	2104      	movs	r1, #4
 80018d8:	f002 bd96 	b.w	8004408 <HAL_GPIO_WritePin>
 80018dc:	40020800 	.word	0x40020800
 80018e0:	40020c00 	.word	0x40020c00

080018e4 <LCD_IO_ReadData>:
{
 80018e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 80018e6:	4e14      	ldr	r6, [pc, #80]	@ (8001938 <LCD_IO_ReadData+0x54>)
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 80018e8:	4f14      	ldr	r7, [pc, #80]	@ (800193c <LCD_IO_ReadData+0x58>)
{
 80018ea:	4605      	mov	r5, r0
 80018ec:	460c      	mov	r4, r1
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 80018ee:	4630      	mov	r0, r6
 80018f0:	2200      	movs	r2, #0
 80018f2:	2104      	movs	r1, #4
 80018f4:	f002 fd88 	bl	8004408 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 80018f8:	2200      	movs	r2, #0
 80018fa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80018fe:	4638      	mov	r0, r7
 8001900:	f002 fd82 	bl	8004408 <HAL_GPIO_WritePin>
  SPI5_Write(RegValue);
 8001904:	4628      	mov	r0, r5
 8001906:	f7ff fce1 	bl	80012cc <SPI5_Write>
  status = HAL_SPI_Receive(&hspi5, (uint8_t*) &readvalue, ReadSize, Spi5Timeout);
 800190a:	4b0d      	ldr	r3, [pc, #52]	@ (8001940 <LCD_IO_ReadData+0x5c>)
 800190c:	480d      	ldr	r0, [pc, #52]	@ (8001944 <LCD_IO_ReadData+0x60>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4622      	mov	r2, r4
 8001912:	a901      	add	r1, sp, #4
 8001914:	f004 fa55 	bl	8005dc2 <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8001918:	4638      	mov	r0, r7
 800191a:	2201      	movs	r2, #1
 800191c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
  return readvalue;
 8001920:	9c01      	ldr	r4, [sp, #4]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8001922:	f002 fd71 	bl	8004408 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8001926:	4630      	mov	r0, r6
 8001928:	2201      	movs	r2, #1
 800192a:	2104      	movs	r1, #4
 800192c:	f002 fd6c 	bl	8004408 <HAL_GPIO_WritePin>
}
 8001930:	4620      	mov	r0, r4
 8001932:	b003      	add	sp, #12
 8001934:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001936:	bf00      	nop
 8001938:	40020800 	.word	0x40020800
 800193c:	40020c00 	.word	0x40020c00
 8001940:	2000000c 	.word	0x2000000c
 8001944:	20001634 	.word	0x20001634

08001948 <LCD_Delay>:
  HAL_Delay(Delay);
 8001948:	f002 bb04 	b.w	8003f54 <HAL_Delay>

0800194c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800194c:	6802      	ldr	r2, [r0, #0]
 800194e:	4b03      	ldr	r3, [pc, #12]	@ (800195c <HAL_TIM_PeriodElapsedCallback+0x10>)
 8001950:	429a      	cmp	r2, r3
 8001952:	d101      	bne.n	8001958 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8001954:	f002 baec 	b.w	8003f30 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	40001000 	.word	0x40001000

08001960 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001960:	4770      	bx	lr
	...

08001964 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001964:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001966:	4b0e      	ldr	r3, [pc, #56]	@ (80019a0 <HAL_MspInit+0x3c>)
 8001968:	2200      	movs	r2, #0
 800196a:	9200      	str	r2, [sp, #0]
 800196c:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800196e:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 8001972:	6459      	str	r1, [r3, #68]	@ 0x44
 8001974:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8001976:	f401 4180 	and.w	r1, r1, #16384	@ 0x4000
 800197a:	9100      	str	r1, [sp, #0]
 800197c:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800197e:	9201      	str	r2, [sp, #4]
 8001980:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8001982:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8001986:	6419      	str	r1, [r3, #64]	@ 0x40
 8001988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800198a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800198e:	9301      	str	r3, [sp, #4]
 8001990:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001992:	210f      	movs	r1, #15
 8001994:	f06f 0001 	mvn.w	r0, #1

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001998:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800199a:	f002 bb01 	b.w	8003fa0 <HAL_NVIC_SetPriority>
 800199e:	bf00      	nop
 80019a0:	40023800 	.word	0x40023800

080019a4 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 80019a4:	6802      	ldr	r2, [r0, #0]
 80019a6:	4b09      	ldr	r3, [pc, #36]	@ (80019cc <HAL_CRC_MspInit+0x28>)
 80019a8:	429a      	cmp	r2, r3
{
 80019aa:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 80019ac:	d10b      	bne.n	80019c6 <HAL_CRC_MspInit+0x22>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80019ae:	2300      	movs	r3, #0
 80019b0:	9301      	str	r3, [sp, #4]
 80019b2:	4b07      	ldr	r3, [pc, #28]	@ (80019d0 <HAL_CRC_MspInit+0x2c>)
 80019b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80019b6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80019ba:	631a      	str	r2, [r3, #48]	@ 0x30
 80019bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019be:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019c2:	9301      	str	r3, [sp, #4]
 80019c4:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80019c6:	b002      	add	sp, #8
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	40023000 	.word	0x40023000
 80019d0:	40023800 	.word	0x40023800

080019d4 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80019d4:	b507      	push	{r0, r1, r2, lr}
  if(hdma2d->Instance==DMA2D)
 80019d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001a14 <HAL_DMA2D_MspInit+0x40>)
 80019d8:	6802      	ldr	r2, [r0, #0]
 80019da:	429a      	cmp	r2, r3
 80019dc:	d116      	bne.n	8001a0c <HAL_DMA2D_MspInit+0x38>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80019de:	2200      	movs	r2, #0
 80019e0:	f5a3 43f0 	sub.w	r3, r3, #30720	@ 0x7800
 80019e4:	9201      	str	r2, [sp, #4]
 80019e6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80019e8:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80019ec:	6319      	str	r1, [r3, #48]	@ 0x30
 80019ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80019f4:	9301      	str	r3, [sp, #4]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80019f6:	2105      	movs	r1, #5
 80019f8:	205a      	movs	r0, #90	@ 0x5a
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80019fa:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80019fc:	f002 fad0 	bl	8003fa0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001a00:	205a      	movs	r0, #90	@ 0x5a
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001a02:	b003      	add	sp, #12
 8001a04:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001a08:	f002 bafc 	b.w	8004004 <HAL_NVIC_EnableIRQ>
}
 8001a0c:	b003      	add	sp, #12
 8001a0e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001a12:	bf00      	nop
 8001a14:	4002b000 	.word	0x4002b000

08001a18 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001a1c:	4604      	mov	r4, r0
 8001a1e:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a20:	2214      	movs	r2, #20
 8001a22:	2100      	movs	r1, #0
 8001a24:	a803      	add	r0, sp, #12
 8001a26:	f010 fcf0 	bl	801240a <memset>
  if(hi2c->Instance==I2C3)
 8001a2a:	6822      	ldr	r2, [r4, #0]
 8001a2c:	4b24      	ldr	r3, [pc, #144]	@ (8001ac0 <HAL_I2C_MspInit+0xa8>)
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d143      	bne.n	8001aba <HAL_I2C_MspInit+0xa2>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a32:	4c24      	ldr	r4, [pc, #144]	@ (8001ac4 <HAL_I2C_MspInit+0xac>)
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a34:	4824      	ldr	r0, [pc, #144]	@ (8001ac8 <HAL_I2C_MspInit+0xb0>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a36:	2500      	movs	r5, #0
 8001a38:	9500      	str	r5, [sp, #0]
 8001a3a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001a3c:	f043 0304 	orr.w	r3, r3, #4
 8001a40:	6323      	str	r3, [r4, #48]	@ 0x30
 8001a42:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001a44:	f003 0304 	and.w	r3, r3, #4
 8001a48:	9300      	str	r3, [sp, #0]
 8001a4a:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a4c:	9501      	str	r5, [sp, #4]
 8001a4e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001a50:	f043 0301 	orr.w	r3, r3, #1
 8001a54:	6323      	str	r3, [r4, #48]	@ 0x30
 8001a56:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001a58:	f003 0301 	and.w	r3, r3, #1
 8001a5c:	9301      	str	r3, [sp, #4]
 8001a5e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a60:	f04f 0912 	mov.w	r9, #18
 8001a64:	f44f 7300 	mov.w	r3, #512	@ 0x200
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a68:	f04f 0801 	mov.w	r8, #1
 8001a6c:	2703      	movs	r7, #3
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001a6e:	2604      	movs	r6, #4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a70:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a72:	e9cd 3903 	strd	r3, r9, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a76:	e9cd 8705 	strd	r8, r7, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001a7a:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a7c:	f002 fbda 	bl	8004234 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001a80:	f44f 7380 	mov.w	r3, #256	@ 0x100
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a84:	4811      	ldr	r0, [pc, #68]	@ (8001acc <HAL_I2C_MspInit+0xb4>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001a86:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a88:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a8a:	e9cd 3903 	strd	r3, r9, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a8e:	e9cd 8705 	strd	r8, r7, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a92:	f002 fbcf 	bl	8004234 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001a96:	9502      	str	r5, [sp, #8]
 8001a98:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001a9a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001a9e:	6423      	str	r3, [r4, #64]	@ 0x40
 8001aa0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001aa2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001aa6:	9302      	str	r3, [sp, #8]
 8001aa8:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */
  /* Force the I2C Peripheral Clock Reset */  
    __HAL_RCC_I2C3_FORCE_RESET();
 8001aaa:	6a23      	ldr	r3, [r4, #32]
 8001aac:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001ab0:	6223      	str	r3, [r4, #32]
      
    /* Release the I2C Peripheral Clock Reset */  
    __HAL_RCC_I2C3_RELEASE_RESET(); 
 8001ab2:	6a23      	ldr	r3, [r4, #32]
 8001ab4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001ab8:	6223      	str	r3, [r4, #32]
  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001aba:	b009      	add	sp, #36	@ 0x24
 8001abc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001ac0:	40005c00 	.word	0x40005c00
 8001ac4:	40023800 	.word	0x40023800
 8001ac8:	40020800 	.word	0x40020800
 8001acc:	40020000 	.word	0x40020000

08001ad0 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ad2:	b099      	sub	sp, #100	@ 0x64
 8001ad4:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad6:	2214      	movs	r2, #20
 8001ad8:	2100      	movs	r1, #0
 8001ada:	a807      	add	r0, sp, #28
 8001adc:	f010 fc95 	bl	801240a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ae0:	2230      	movs	r2, #48	@ 0x30
 8001ae2:	eb0d 0002 	add.w	r0, sp, r2
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	f010 fc8f 	bl	801240a <memset>
  if(hltdc->Instance==LTDC)
 8001aec:	6822      	ldr	r2, [r4, #0]
 8001aee:	4b5e      	ldr	r3, [pc, #376]	@ (8001c68 <HAL_LTDC_MspInit+0x198>)
 8001af0:	429a      	cmp	r2, r3
 8001af2:	f040 80b7 	bne.w	8001c64 <HAL_LTDC_MspInit+0x194>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001af6:	2308      	movs	r3, #8
 8001af8:	930c      	str	r3, [sp, #48]	@ 0x30
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001afa:	23c0      	movs	r3, #192	@ 0xc0
 8001afc:	9310      	str	r3, [sp, #64]	@ 0x40
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8001afe:	2304      	movs	r3, #4
 8001b00:	9312      	str	r3, [sp, #72]	@ 0x48
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b02:	a80c      	add	r0, sp, #48	@ 0x30
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001b04:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b08:	9315      	str	r3, [sp, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b0a:	f003 fd31 	bl	8005570 <HAL_RCCEx_PeriphCLKConfig>
 8001b0e:	b108      	cbz	r0, 8001b14 <HAL_LTDC_MspInit+0x44>
    {
      Error_Handler();
 8001b10:	f7ff ff26 	bl	8001960 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001b14:	4b55      	ldr	r3, [pc, #340]	@ (8001c6c <HAL_LTDC_MspInit+0x19c>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b16:	4856      	ldr	r0, [pc, #344]	@ (8001c70 <HAL_LTDC_MspInit+0x1a0>)
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001b18:	2400      	movs	r4, #0
 8001b1a:	9400      	str	r4, [sp, #0]
 8001b1c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001b1e:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001b22:	645a      	str	r2, [r3, #68]	@ 0x44
 8001b24:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001b26:	f002 6280 	and.w	r2, r2, #67108864	@ 0x4000000
 8001b2a:	9200      	str	r2, [sp, #0]
 8001b2c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b2e:	9401      	str	r4, [sp, #4]
 8001b30:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b32:	f042 0220 	orr.w	r2, r2, #32
 8001b36:	631a      	str	r2, [r3, #48]	@ 0x30
 8001b38:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b3a:	f002 0220 	and.w	r2, r2, #32
 8001b3e:	9201      	str	r2, [sp, #4]
 8001b40:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b42:	9402      	str	r4, [sp, #8]
 8001b44:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b46:	f042 0201 	orr.w	r2, r2, #1
 8001b4a:	631a      	str	r2, [r3, #48]	@ 0x30
 8001b4c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b4e:	f002 0201 	and.w	r2, r2, #1
 8001b52:	9202      	str	r2, [sp, #8]
 8001b54:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b56:	9403      	str	r4, [sp, #12]
 8001b58:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b5a:	f042 0202 	orr.w	r2, r2, #2
 8001b5e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001b60:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b62:	f002 0202 	and.w	r2, r2, #2
 8001b66:	9203      	str	r2, [sp, #12]
 8001b68:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b6a:	9404      	str	r4, [sp, #16]
 8001b6c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b6e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001b72:	631a      	str	r2, [r3, #48]	@ 0x30
 8001b74:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b76:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8001b7a:	9204      	str	r2, [sp, #16]
 8001b7c:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b7e:	9405      	str	r4, [sp, #20]
 8001b80:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b82:	f042 0204 	orr.w	r2, r2, #4
 8001b86:	631a      	str	r2, [r3, #48]	@ 0x30
 8001b88:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b8a:	f002 0204 	and.w	r2, r2, #4
 8001b8e:	9205      	str	r2, [sp, #20]
 8001b90:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b92:	9406      	str	r4, [sp, #24]
 8001b94:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b96:	f042 0208 	orr.w	r2, r2, #8
 8001b9a:	631a      	str	r2, [r3, #48]	@ 0x30
 8001b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b9e:	f003 0308 	and.w	r3, r3, #8
 8001ba2:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba4:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001ba6:	260e      	movs	r6, #14
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ba8:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001baa:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001bb0:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb2:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bb6:	e9cd 4509 	strd	r4, r5, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001bba:	f002 fb3b 	bl	8004234 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_11
 8001bbe:	f641 0358 	movw	r3, #6232	@ 0x1858
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc2:	482c      	ldr	r0, [pc, #176]	@ (8001c74 <HAL_LTDC_MspInit+0x1a4>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001bc4:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc6:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc8:	e9cd 3507 	strd	r3, r5, [sp, #28]

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001bcc:	2709      	movs	r7, #9
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bce:	e9cd 4509 	strd	r4, r5, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd2:	f002 fb2f 	bl	8004234 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001bd6:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bd8:	4827      	ldr	r0, [pc, #156]	@ (8001c78 <HAL_LTDC_MspInit+0x1a8>)
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001bda:	970b      	str	r7, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bdc:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bde:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001be2:	e9cd 4509 	strd	r4, r5, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001be6:	f002 fb25 	bl	8004234 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 8001bea:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bee:	4822      	ldr	r0, [pc, #136]	@ (8001c78 <HAL_LTDC_MspInit+0x1a8>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001bf0:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bf2:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf4:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bf8:	e9cd 4509 	strd	r4, r5, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bfc:	f002 fb1a 	bl	8004234 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11;
 8001c00:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c04:	481d      	ldr	r0, [pc, #116]	@ (8001c7c <HAL_LTDC_MspInit+0x1ac>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001c06:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c08:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c0a:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c0e:	e9cd 4509 	strd	r4, r5, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c12:	f002 fb0f 	bl	8004234 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c16:	23c0      	movs	r3, #192	@ 0xc0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c18:	4819      	ldr	r0, [pc, #100]	@ (8001c80 <HAL_LTDC_MspInit+0x1b0>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001c1a:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c1c:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c1e:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c22:	e9cd 4509 	strd	r4, r5, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c26:	f002 fb05 	bl	8004234 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001c2a:	2308      	movs	r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c2c:	4815      	ldr	r0, [pc, #84]	@ (8001c84 <HAL_LTDC_MspInit+0x1b4>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001c2e:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c30:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c32:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c36:	e9cd 4509 	strd	r4, r5, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c3a:	f002 fafb 	bl	8004234 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001c3e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c42:	480e      	ldr	r0, [pc, #56]	@ (8001c7c <HAL_LTDC_MspInit+0x1ac>)
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001c44:	970b      	str	r7, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c46:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c48:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c4c:	e9cd 4509 	strd	r4, r5, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c50:	f002 faf0 	bl	8004234 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001c54:	2058      	movs	r0, #88	@ 0x58
 8001c56:	4622      	mov	r2, r4
 8001c58:	2105      	movs	r1, #5
 8001c5a:	f002 f9a1 	bl	8003fa0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001c5e:	2058      	movs	r0, #88	@ 0x58
 8001c60:	f002 f9d0 	bl	8004004 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001c64:	b019      	add	sp, #100	@ 0x64
 8001c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c68:	40016800 	.word	0x40016800
 8001c6c:	40023800 	.word	0x40023800
 8001c70:	40021400 	.word	0x40021400
 8001c74:	40020000 	.word	0x40020000
 8001c78:	40020400 	.word	0x40020400
 8001c7c:	40021800 	.word	0x40021800
 8001c80:	40020800 	.word	0x40020800
 8001c84:	40020c00 	.word	0x40020c00

08001c88 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c88:	b510      	push	{r4, lr}
 8001c8a:	4604      	mov	r4, r0
 8001c8c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c8e:	2214      	movs	r2, #20
 8001c90:	2100      	movs	r1, #0
 8001c92:	a803      	add	r0, sp, #12
 8001c94:	f010 fbb9 	bl	801240a <memset>
  if(hspi->Instance==SPI5)
 8001c98:	6822      	ldr	r2, [r4, #0]
 8001c9a:	4b14      	ldr	r3, [pc, #80]	@ (8001cec <HAL_SPI_MspInit+0x64>)
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d123      	bne.n	8001ce8 <HAL_SPI_MspInit+0x60>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001ca0:	f503 4368 	add.w	r3, r3, #59392	@ 0xe800
 8001ca4:	2100      	movs	r1, #0
 8001ca6:	9101      	str	r1, [sp, #4]
 8001ca8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001caa:	4811      	ldr	r0, [pc, #68]	@ (8001cf0 <HAL_SPI_MspInit+0x68>)
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001cac:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001cb0:	645a      	str	r2, [r3, #68]	@ 0x44
 8001cb2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001cb4:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001cb8:	9201      	str	r2, [sp, #4]
 8001cba:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001cbc:	9102      	str	r1, [sp, #8]
 8001cbe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001cc0:	f042 0220 	orr.w	r2, r2, #32
 8001cc4:	631a      	str	r2, [r3, #48]	@ 0x30
 8001cc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cc8:	f003 0320 	and.w	r3, r3, #32
 8001ccc:	9302      	str	r3, [sp, #8]
 8001cce:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd0:	f44f 7260 	mov.w	r2, #896	@ 0x380
 8001cd4:	2302      	movs	r3, #2
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001cd6:	2103      	movs	r1, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd8:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001cdc:	2305      	movs	r3, #5
 8001cde:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ce2:	a903      	add	r1, sp, #12
 8001ce4:	f002 faa6 	bl	8004234 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001ce8:	b008      	add	sp, #32
 8001cea:	bd10      	pop	{r4, pc}
 8001cec:	40015000 	.word	0x40015000
 8001cf0:	40021400 	.word	0x40021400

08001cf4 <HAL_SDRAM_MspInit>:
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001cf8:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	9303      	str	r3, [sp, #12]
  if (FMC_Initialized) {
 8001cfe:	4b2b      	ldr	r3, [pc, #172]	@ (8001dac <HAL_SDRAM_MspInit+0xb8>)
 8001d00:	681c      	ldr	r4, [r3, #0]
 8001d02:	2c00      	cmp	r4, #0
 8001d04:	d14f      	bne.n	8001da6 <HAL_SDRAM_MspInit+0xb2>
  FMC_Initialized = 1;
 8001d06:	f04f 0801 	mov.w	r8, #1
 8001d0a:	f8c3 8000 	str.w	r8, [r3]
  __HAL_RCC_FMC_CLK_ENABLE();
 8001d0e:	4b28      	ldr	r3, [pc, #160]	@ (8001db0 <HAL_SDRAM_MspInit+0xbc>)
 8001d10:	9400      	str	r4, [sp, #0]
 8001d12:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d14:	4827      	ldr	r0, [pc, #156]	@ (8001db4 <HAL_SDRAM_MspInit+0xc0>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8001d16:	ea42 0208 	orr.w	r2, r2, r8
 8001d1a:	639a      	str	r2, [r3, #56]	@ 0x38
 8001d1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d1e:	ea03 0308 	and.w	r3, r3, r8
 8001d22:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d24:	2702      	movs	r7, #2
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001d26:	2603      	movs	r6, #3
 8001d28:	250c      	movs	r5, #12
  __HAL_RCC_FMC_CLK_ENABLE();
 8001d2a:	9b00      	ldr	r3, [sp, #0]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d2c:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d2e:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8001d32:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001d36:	e9cd 6504 	strd	r6, r5, [sp, #16]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d3a:	f002 fa7b 	bl	8004234 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d3e:	481e      	ldr	r0, [pc, #120]	@ (8001db8 <HAL_SDRAM_MspInit+0xc4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001d40:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d42:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d44:	e9cd 8701 	strd	r8, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d48:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d4c:	f002 fa72 	bl	8004234 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8001d50:	f248 1333 	movw	r3, #33075	@ 0x8133
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d54:	4819      	ldr	r0, [pc, #100]	@ (8001dbc <HAL_SDRAM_MspInit+0xc8>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001d56:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d58:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d5a:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d5e:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d62:	f002 fa67 	bl	8004234 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001d66:	f64f 7383 	movw	r3, #65411	@ 0xff83
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d6a:	4815      	ldr	r0, [pc, #84]	@ (8001dc0 <HAL_SDRAM_MspInit+0xcc>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001d6c:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d6e:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d70:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d74:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d78:	f002 fa5c 	bl	8004234 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001d7c:	f24c 7303 	movw	r3, #50947	@ 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d80:	4810      	ldr	r0, [pc, #64]	@ (8001dc4 <HAL_SDRAM_MspInit+0xd0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001d82:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d84:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d86:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d8a:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d8e:	f002 fa51 	bl	8004234 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001d92:	2360      	movs	r3, #96	@ 0x60
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d94:	480c      	ldr	r0, [pc, #48]	@ (8001dc8 <HAL_SDRAM_MspInit+0xd4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001d96:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d98:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d9a:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d9e:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001da2:	f002 fa47 	bl	8004234 <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001da6:	b006      	add	sp, #24
 8001da8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001dac:	200017d0 	.word	0x200017d0
 8001db0:	40023800 	.word	0x40023800
 8001db4:	40021400 	.word	0x40021400
 8001db8:	40020800 	.word	0x40020800
 8001dbc:	40021800 	.word	0x40021800
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	40020c00 	.word	0x40020c00
 8001dc8:	40020400 	.word	0x40020400

08001dcc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dcc:	b530      	push	{r4, r5, lr}
 8001dce:	4601      	mov	r1, r0
 8001dd0:	b089      	sub	sp, #36	@ 0x24
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	2036      	movs	r0, #54	@ 0x36
 8001dd6:	f002 f8e3 	bl	8003fa0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001dda:	2036      	movs	r0, #54	@ 0x36
 8001ddc:	f002 f912 	bl	8004004 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001de0:	2500      	movs	r5, #0
 8001de2:	4b15      	ldr	r3, [pc, #84]	@ (8001e38 <HAL_InitTick+0x6c>)
 8001de4:	9502      	str	r5, [sp, #8]
 8001de6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001de8:	4c14      	ldr	r4, [pc, #80]	@ (8001e3c <HAL_InitTick+0x70>)
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001dea:	f042 0210 	orr.w	r2, r2, #16
 8001dee:	641a      	str	r2, [r3, #64]	@ 0x40
 8001df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df2:	f003 0310 	and.w	r3, r3, #16
 8001df6:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001df8:	a901      	add	r1, sp, #4
 8001dfa:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001dfc:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001dfe:	f003 fb99 	bl	8005534 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001e02:	f003 fb87 	bl	8005514 <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 8001e06:	4b0e      	ldr	r3, [pc, #56]	@ (8001e40 <HAL_InitTick+0x74>)
 8001e08:	6023      	str	r3, [r4, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001e0a:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8001e0e:	60e3      	str	r3, [r4, #12]
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001e10:	0040      	lsls	r0, r0, #1
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001e12:	4b0c      	ldr	r3, [pc, #48]	@ (8001e44 <HAL_InitTick+0x78>)
 8001e14:	fbb0 f0f3 	udiv	r0, r0, r3
 8001e18:	3801      	subs	r0, #1
  htim6.Init.Prescaler = uwPrescalerValue;
 8001e1a:	6060      	str	r0, [r4, #4]
  htim6.Init.ClockDivision = 0;
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001e1c:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 8001e1e:	6125      	str	r5, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e20:	60a5      	str	r5, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001e22:	f004 f99d 	bl	8006160 <HAL_TIM_Base_Init>
 8001e26:	b920      	cbnz	r0, 8001e32 <HAL_InitTick+0x66>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001e28:	4620      	mov	r0, r4
 8001e2a:	f004 f869 	bl	8005f00 <HAL_TIM_Base_Start_IT>
  }

  /* Return function status */
  return HAL_ERROR;
}
 8001e2e:	b009      	add	sp, #36	@ 0x24
 8001e30:	bd30      	pop	{r4, r5, pc}
  return HAL_ERROR;
 8001e32:	2001      	movs	r0, #1
 8001e34:	e7fb      	b.n	8001e2e <HAL_InitTick+0x62>
 8001e36:	bf00      	nop
 8001e38:	40023800 	.word	0x40023800
 8001e3c:	200017d4 	.word	0x200017d4
 8001e40:	40001000 	.word	0x40001000
 8001e44:	000f4240 	.word	0x000f4240

08001e48 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001e48:	4770      	bx	lr

08001e4a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e4a:	e7fe      	b.n	8001e4a <HardFault_Handler>

08001e4c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e4c:	e7fe      	b.n	8001e4c <MemManage_Handler>

08001e4e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e4e:	e7fe      	b.n	8001e4e <BusFault_Handler>

08001e50 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e50:	e7fe      	b.n	8001e50 <UsageFault_Handler>

08001e52 <DebugMon_Handler>:
}

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8001e52:	4770      	bx	lr

08001e54 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001e54:	4801      	ldr	r0, [pc, #4]	@ (8001e5c <TIM6_DAC_IRQHandler+0x8>)
 8001e56:	f004 b891 	b.w	8005f7c <HAL_TIM_IRQHandler>
 8001e5a:	bf00      	nop
 8001e5c:	200017d4 	.word	0x200017d4

08001e60 <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001e60:	4801      	ldr	r0, [pc, #4]	@ (8001e68 <LTDC_IRQHandler+0x8>)
 8001e62:	f003 b839 	b.w	8004ed8 <HAL_LTDC_IRQHandler>
 8001e66:	bf00      	nop
 8001e68:	2000168c 	.word	0x2000168c

08001e6c <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001e6c:	4801      	ldr	r0, [pc, #4]	@ (8001e74 <DMA2D_IRQHandler+0x8>)
 8001e6e:	f002 b913 	b.w	8004098 <HAL_DMA2D_IRQHandler>
 8001e72:	bf00      	nop
 8001e74:	20001788 	.word	0x20001788

08001e78 <EXTI0_IRQHandler>:
  /* USER CODE END DMA2D_IRQn 1 */
}

/* USER CODE BEGIN 1 */
void EXTI0_IRQHandler(void)
{
 8001e78:	b513      	push	{r0, r1, r4, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	uint32_t count = osMessageQueueGetCount(Queue1Handle);
 8001e7a:	4c0b      	ldr	r4, [pc, #44]	@ (8001ea8 <EXTI0_IRQHandler+0x30>)
 8001e7c:	6820      	ldr	r0, [r4, #0]
 8001e7e:	f004 fc03 	bl	8006688 <osMessageQueueGetCount>
	if (count < 2)
 8001e82:	2801      	cmp	r0, #1
 8001e84:	d809      	bhi.n	8001e9a <EXTI0_IRQHandler+0x22>
	{
		uint8_t x = 'A';
 8001e86:	2341      	movs	r3, #65	@ 0x41
 8001e88:	f88d 3007 	strb.w	r3, [sp, #7]
		osMessageQueuePut(Queue1Handle, &x, 0, 200);
 8001e8c:	6820      	ldr	r0, [r4, #0]
 8001e8e:	23c8      	movs	r3, #200	@ 0xc8
 8001e90:	2200      	movs	r2, #0
 8001e92:	f10d 0107 	add.w	r1, sp, #7
 8001e96:	f004 fb96 	bl	80065c6 <osMessageQueuePut>
	}
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001e9a:	2001      	movs	r0, #1
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  /* USER CODE END EXTI0_IRQn 1 */
}
 8001e9c:	b002      	add	sp, #8
 8001e9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001ea2:	f002 bac1 	b.w	8004428 <HAL_GPIO_EXTI_IRQHandler>
 8001ea6:	bf00      	nop
 8001ea8:	200015f4 	.word	0x200015f4

08001eac <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001eac:	2001      	movs	r0, #1
 8001eae:	4770      	bx	lr

08001eb0 <_kill>:

int _kill(int pid, int sig)
{
 8001eb0:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001eb2:	f010 fb4d 	bl	8012550 <__errno>
 8001eb6:	2316      	movs	r3, #22
 8001eb8:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001eba:	f04f 30ff 	mov.w	r0, #4294967295
 8001ebe:	bd08      	pop	{r3, pc}

08001ec0 <_exit>:

void _exit (int status)
{
 8001ec0:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001ec2:	f010 fb45 	bl	8012550 <__errno>
 8001ec6:	2316      	movs	r3, #22
 8001ec8:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8001eca:	e7fe      	b.n	8001eca <_exit+0xa>

08001ecc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ecc:	b570      	push	{r4, r5, r6, lr}
 8001ece:	460d      	mov	r5, r1
 8001ed0:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ed2:	460e      	mov	r6, r1
 8001ed4:	1b73      	subs	r3, r6, r5
 8001ed6:	429c      	cmp	r4, r3
 8001ed8:	dc01      	bgt.n	8001ede <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8001eda:	4620      	mov	r0, r4
 8001edc:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8001ede:	f3af 8000 	nop.w
 8001ee2:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ee6:	e7f5      	b.n	8001ed4 <_read+0x8>

08001ee8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ee8:	b570      	push	{r4, r5, r6, lr}
 8001eea:	460d      	mov	r5, r1
 8001eec:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eee:	460e      	mov	r6, r1
 8001ef0:	1b73      	subs	r3, r6, r5
 8001ef2:	429c      	cmp	r4, r3
 8001ef4:	dc01      	bgt.n	8001efa <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8001ef6:	4620      	mov	r0, r4
 8001ef8:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8001efa:	f816 0b01 	ldrb.w	r0, [r6], #1
 8001efe:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f02:	e7f5      	b.n	8001ef0 <_write+0x8>

08001f04 <_close>:

int _close(int file)
{
	return -1;
}
 8001f04:	f04f 30ff 	mov.w	r0, #4294967295
 8001f08:	4770      	bx	lr

08001f0a <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001f0a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f0e:	604b      	str	r3, [r1, #4]
	return 0;
}
 8001f10:	2000      	movs	r0, #0
 8001f12:	4770      	bx	lr

08001f14 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001f14:	2001      	movs	r0, #1
 8001f16:	4770      	bx	lr

08001f18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001f18:	2000      	movs	r0, #0
 8001f1a:	4770      	bx	lr

08001f1c <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001f1c:	4a0a      	ldr	r2, [pc, #40]	@ (8001f48 <_sbrk+0x2c>)
 8001f1e:	6811      	ldr	r1, [r2, #0]
{
 8001f20:	b508      	push	{r3, lr}
 8001f22:	4603      	mov	r3, r0
	if (heap_end == 0)
 8001f24:	b909      	cbnz	r1, 8001f2a <_sbrk+0xe>
		heap_end = &end;
 8001f26:	4909      	ldr	r1, [pc, #36]	@ (8001f4c <_sbrk+0x30>)
 8001f28:	6011      	str	r1, [r2, #0]

	prev_heap_end = heap_end;
 8001f2a:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8001f2c:	4669      	mov	r1, sp
 8001f2e:	4403      	add	r3, r0
 8001f30:	428b      	cmp	r3, r1
 8001f32:	d906      	bls.n	8001f42 <_sbrk+0x26>
	{
		errno = ENOMEM;
 8001f34:	f010 fb0c 	bl	8012550 <__errno>
 8001f38:	230c      	movs	r3, #12
 8001f3a:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8001f3c:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8001f40:	bd08      	pop	{r3, pc}
	heap_end += incr;
 8001f42:	6013      	str	r3, [r2, #0]
	return (caddr_t) prev_heap_end;
 8001f44:	e7fc      	b.n	8001f40 <_sbrk+0x24>
 8001f46:	bf00      	nop
 8001f48:	2000181c 	.word	0x2000181c
 8001f4c:	200129b0 	.word	0x200129b0

08001f50 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId SMALL = 2;         // verdana_15_4bpp
    static const touchgfx::FontId TYPOGRAPHY_00 = 0; // verdana_20_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8001f50:	4770      	bx	lr

08001f52 <_ZN23ApplicationFontProviderD0Ev>:
 8001f52:	b510      	push	{r4, lr}
 8001f54:	2104      	movs	r1, #4
 8001f56:	4604      	mov	r4, r0
 8001f58:	f010 f822 	bl	8011fa0 <_ZdlPvj>
 8001f5c:	4620      	mov	r0, r4
 8001f5e:	bd10      	pop	{r4, pc}

08001f60 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 8001f60:	b508      	push	{r3, lr}
    switch (typography)
 8001f62:	2903      	cmp	r1, #3
 8001f64:	d80f      	bhi.n	8001f86 <_ZN23ApplicationFontProvider7getFontEt+0x26>
 8001f66:	e8df f001 	tbb	[pc, r1]
 8001f6a:	020a      	.short	0x020a
 8001f6c:	0a06      	.short	0x0a06
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8001f6e:	f001 fae1 	bl	8003534 <_ZN17TypedTextDatabase8getFontsEv>
 8001f72:	6840      	ldr	r0, [r0, #4]
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
    default:
        return 0;
    }
}
 8001f74:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8001f76:	f001 fadd 	bl	8003534 <_ZN17TypedTextDatabase8getFontsEv>
 8001f7a:	6880      	ldr	r0, [r0, #8]
 8001f7c:	e7fa      	b.n	8001f74 <_ZN23ApplicationFontProvider7getFontEt+0x14>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8001f7e:	f001 fad9 	bl	8003534 <_ZN17TypedTextDatabase8getFontsEv>
 8001f82:	6800      	ldr	r0, [r0, #0]
 8001f84:	e7f6      	b.n	8001f74 <_ZN23ApplicationFontProvider7getFontEt+0x14>
    switch (typography)
 8001f86:	2000      	movs	r0, #0
 8001f88:	e7f4      	b.n	8001f74 <_ZN23ApplicationFontProvider7getFontEt+0x14>
	...

08001f8c <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 8001f8c:	4800      	ldr	r0, [pc, #0]	@ (8001f90 <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 8001f8e:	4770      	bx	lr
 8001f90:	08013f88 	.word	0x08013f88

08001f94 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 8001f94:	2009      	movs	r0, #9
 8001f96:	4770      	bx	lr

08001f98 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8001f98:	b513      	push	{r0, r1, r4, lr}
 8001f9a:	2400      	movs	r4, #0
    {
        if (unicode == 0)
 8001f9c:	b151      	cbz	r1, 8001fb4 <_ZNK8touchgfx4Font8getGlyphEt+0x1c>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8001f9e:	6803      	ldr	r3, [r0, #0]
        const uint8_t* dummyPixelDataPointer = 0;
 8001fa0:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 8001fa2:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8001fa6:	aa01      	add	r2, sp, #4
 8001fa8:	689c      	ldr	r4, [r3, #8]
 8001faa:	f10d 0303 	add.w	r3, sp, #3
 8001fae:	47a0      	blx	r4
        return glyph;
    }
 8001fb0:	b002      	add	sp, #8
 8001fb2:	bd10      	pop	{r4, pc}
            return 0;
 8001fb4:	4608      	mov	r0, r1
 8001fb6:	e7fb      	b.n	8001fb0 <_ZNK8touchgfx4Font8getGlyphEt+0x18>

08001fb8 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 8001fb8:	89c0      	ldrh	r0, [r0, #14]
 8001fba:	4770      	bx	lr

08001fbc <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 8001fbc:	8a00      	ldrh	r0, [r0, #16]
 8001fbe:	4770      	bx	lr

08001fc0 <_ZNK8touchgfx4Font11getBaselineEv>:
     *       getHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
    {
        return baselineHeight;
    }
 8001fc0:	88c0      	ldrh	r0, [r0, #6]
 8001fc2:	4770      	bx	lr

08001fc4 <_ZNK8touchgfx4Font9getHeightEv>:
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
    {
        return fontHeight;
    }
 8001fc4:	8880      	ldrh	r0, [r0, #4]
 8001fc6:	4770      	bx	lr

08001fc8 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 8001fc8:	7a80      	ldrb	r0, [r0, #10]
    }
 8001fca:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8001fce:	4770      	bx	lr

08001fd0 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 8001fd0:	7a80      	ldrb	r0, [r0, #10]
    }
 8001fd2:	09c0      	lsrs	r0, r0, #7
 8001fd4:	4770      	bx	lr

08001fd6 <_ZNK8touchgfx4Font17isVectorBasedFontEv>:
     * @return True if this Font is vector based.
     */
    virtual bool isVectorBasedFont() const
    {
        return false;
    }
 8001fd6:	2000      	movs	r0, #0
 8001fd8:	4770      	bx	lr
	...

08001fdc <_ZNK8touchgfx4Font14getScaleFactorEv>:
     * @return The scale factor
     */
    virtual float getScaleFactor() const
    {
        return 0;
    }
 8001fdc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8001fe4 <_ZNK8touchgfx4Font14getScaleFactorEv+0x8>
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	00000000 	.word	0x00000000

08001fe8 <_ZN8touchgfx9TypedTextD1Ev>:
    }
 8001fe8:	4770      	bx	lr

08001fea <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 8001fea:	b510      	push	{r4, lr}
    }
 8001fec:	2108      	movs	r1, #8
    virtual ~TypedText()
 8001fee:	4604      	mov	r4, r0
    }
 8001ff0:	f00f ffd6 	bl	8011fa0 <_ZdlPvj>
 8001ff4:	4620      	mov	r0, r4
 8001ff6:	bd10      	pop	{r4, pc}

08001ff8 <_ZN8touchgfx11Application19changeToStartScreenEv>:
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
    {
    }
 8001ff8:	4770      	bx	lr

08001ffa <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
        (void)screenId; // Unused variable
    }
 8001ffa:	4770      	bx	lr

08001ffc <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 8001ffc:	f500 7398 	add.w	r3, r0, #304	@ 0x130
 8002000:	6808      	ldr	r0, [r1, #0]
 8002002:	6849      	ldr	r1, [r1, #4]
 8002004:	c303      	stmia	r3!, {r0, r1}
    }
 8002006:	4770      	bx	lr

08002008 <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 8002008:	4770      	bx	lr

0800200a <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 800200a:	4770      	bx	lr

0800200c <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 800200c:	6041      	str	r1, [r0, #4]
    }
 800200e:	4770      	bx	lr

08002010 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8002010:	4770      	bx	lr

08002012 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8002012:	4770      	bx	lr

08002014 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:
 8002014:	4b06      	ldr	r3, [pc, #24]	@ (8002030 <_ZN23FrontendApplicationBase19changeToStartScreenEv+0x1c>)
 8002016:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 800201a:	2300      	movs	r3, #0
 800201c:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 8002020:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 8002024:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 8002028:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140

    virtual void changeToStartScreen()
    {
        gotoScreen1ScreenNoTransition();
    }
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	08002555 	.word	0x08002555

08002034 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 8002034:	2301      	movs	r3, #1
 8002036:	7203      	strb	r3, [r0, #8]
    }
 8002038:	4770      	bx	lr

0800203a <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EED1Ev>:
 * the given direction.  This transition only draws the pixels in the
 * framebuffer once, and never moves any pixels. It is therefore very
 * useful on MCUs with limited performance.
 */
template <Direction templateDirection>
class WipeTransition : public Transition
 800203a:	4770      	bx	lr

0800203c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EED1Ev>:
{
/**
 * A Transition that slides the new screen over the previous \e from the given direction.
 */
template <Direction templateDirection>
class CoverTransition : public Transition
 800203c:	4770      	bx	lr

0800203e <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 800203e:	4770      	bx	lr

08002040 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE4initEv>:
    }

    virtual void init()
    {
        Transition::init();
    }
 8002040:	4770      	bx	lr

08002042 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE4initEv>:

            d = d->getNextSibling();
        }
    }

    virtual void init()
 8002042:	b538      	push	{r3, r4, r5, lr}
 8002044:	4605      	mov	r5, r0
    {
        Transition::init();

        // Move snapshot and its children with delta value for X or Y
        Drawable* d = screenContainer->getFirstChild();
 8002046:	6840      	ldr	r0, [r0, #4]
 8002048:	6803      	ldr	r3, [r0, #0]
 800204a:	69db      	ldr	r3, [r3, #28]
 800204c:	4798      	blx	r3
 800204e:	4604      	mov	r4, r0
        while (d)
 8002050:	b904      	cbnz	r4, 8002054 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE4initEv+0x12>
                break;
            }

            d = d->getNextSibling();
        }
    }
 8002052:	bd38      	pop	{r3, r4, r5, pc}
                d->setX(d->getX() - targetValue);
 8002054:	88a1      	ldrh	r1, [r4, #4]
 8002056:	89ab      	ldrh	r3, [r5, #12]
 8002058:	1ac9      	subs	r1, r1, r3
 800205a:	6823      	ldr	r3, [r4, #0]
 800205c:	4620      	mov	r0, r4
 800205e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002060:	b209      	sxth	r1, r1
 8002062:	4798      	blx	r3
     *
     * @return The next sibling. If there are no more siblings, the return value is 0.
     */
    Drawable* getNextSibling()
    {
        return nextSibling;
 8002064:	69a4      	ldr	r4, [r4, #24]
 8002066:	e7f3      	b.n	8002050 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE4initEv+0xe>

08002068 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8002068:	b410      	push	{r4}
    {
        (pobject->*pmemfun)();
 800206a:	68c2      	ldr	r2, [r0, #12]
 800206c:	6841      	ldr	r1, [r0, #4]
 800206e:	1054      	asrs	r4, r2, #1
    virtual void execute()
 8002070:	4603      	mov	r3, r0
        (pobject->*pmemfun)();
 8002072:	eb01 0062 	add.w	r0, r1, r2, asr #1
 8002076:	07d2      	lsls	r2, r2, #31
 8002078:	bf48      	it	mi
 800207a:	590a      	ldrmi	r2, [r1, r4]
 800207c:	689b      	ldr	r3, [r3, #8]
    }
 800207e:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun)();
 8002082:	bf48      	it	mi
 8002084:	58d3      	ldrmi	r3, [r2, r3]
 8002086:	4718      	bx	r3

08002088 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 8002088:	4603      	mov	r3, r0
    {
        return (pobject != 0) && (pmemfun != 0);
 800208a:	6840      	ldr	r0, [r0, #4]
 800208c:	b130      	cbz	r0, 800209c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
 800208e:	689a      	ldr	r2, [r3, #8]
 8002090:	b91a      	cbnz	r2, 800209a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x12>
 8002092:	68d8      	ldr	r0, [r3, #12]
 8002094:	f000 0001 	and.w	r0, r0, #1
 8002098:	4770      	bx	lr
 800209a:	2001      	movs	r0, #1
    }
 800209c:	4770      	bx	lr

0800209e <_ZN8touchgfx12NoTransitionD0Ev>:
 800209e:	b510      	push	{r4, lr}
 80020a0:	210c      	movs	r1, #12
 80020a2:	4604      	mov	r4, r0
 80020a4:	f00f ff7c 	bl	8011fa0 <_ZdlPvj>
 80020a8:	4620      	mov	r0, r4
 80020aa:	bd10      	pop	{r4, pc}

080020ac <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EED0Ev>:
class WipeTransition : public Transition
 80020ac:	b510      	push	{r4, lr}
 80020ae:	2114      	movs	r1, #20
 80020b0:	4604      	mov	r4, r0
 80020b2:	f00f ff75 	bl	8011fa0 <_ZdlPvj>
 80020b6:	4620      	mov	r0, r4
 80020b8:	bd10      	pop	{r4, pc}

080020ba <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EED0Ev>:
class CoverTransition : public Transition
 80020ba:	b510      	push	{r4, lr}
 80020bc:	2110      	movs	r1, #16
 80020be:	4604      	mov	r4, r0
 80020c0:	f00f ff6e 	bl	8011fa0 <_ZdlPvj>
 80020c4:	4620      	mov	r0, r4
 80020c6:	bd10      	pop	{r4, pc}

080020c8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80020c8:	b510      	push	{r4, lr}
 80020ca:	2110      	movs	r1, #16
 80020cc:	4604      	mov	r4, r0
 80020ce:	f00f ff67 	bl	8011fa0 <_ZdlPvj>
 80020d2:	4620      	mov	r0, r4
 80020d4:	bd10      	pop	{r4, pc}

080020d6 <_ZN23FrontendApplicationBaseD0Ev>:
    virtual ~FrontendApplicationBase() { }
 80020d6:	b510      	push	{r4, lr}
 80020d8:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 80020dc:	4604      	mov	r4, r0
 80020de:	f00f ff5f 	bl	8011fa0 <_ZdlPvj>
 80020e2:	4620      	mov	r0, r4
 80020e4:	bd10      	pop	{r4, pc}

080020e6 <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 80020e6:	b510      	push	{r4, lr}
        Application::getInstance()->invalidate();
 80020e8:	f009 fe6a 	bl	800bdc0 <_ZN8touchgfx11Application11getInstanceEv>
 80020ec:	6803      	ldr	r3, [r0, #0]
    }
 80020ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Application::getInstance()->invalidate();
 80020f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020f4:	4718      	bx	r3

080020f6 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE10invalidateEv>:

    virtual void invalidate()
 80020f6:	b510      	push	{r4, lr}
    {
        // The last step when finalizing a transition (see MVPApplication::finalizeTransition)
        // is to call invalidate on the transition. For the WipeTransition we want to erase any
        // invalidated areas that might have been added when setting up the new screen, which
        // is the first step of finalizing a transition (see MVPApplication::finalizeTransition).
        Application::getInstance()->clearCachedAreas();
 80020f8:	f009 fe62 	bl	800bdc0 <_ZN8touchgfx11Application11getInstanceEv>
 80020fc:	6803      	ldr	r3, [r0, #0]
    }
 80020fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Application::getInstance()->clearCachedAreas();
 8002102:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002104:	4718      	bx	r3

08002106 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE10invalidateEv>:

    virtual void invalidate()
 8002106:	b510      	push	{r4, lr}
    {
        // The last step when finalizing a transition (see MVPApplication::finalizeTransition)
        // is to call invalidate on the transition. For the CoverTransition we want to erase any
        // invalidated areas that might have been added when setting up the new screen, which
        // is the first step of finalizing a transition (see MVPApplication::finalizeTransition).
        Application::getInstance()->clearCachedAreas();
 8002108:	f009 fe5a 	bl	800bdc0 <_ZN8touchgfx11Application11getInstanceEv>
 800210c:	6803      	ldr	r3, [r0, #0]
    }
 800210e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Application::getInstance()->clearCachedAreas();
 8002112:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002114:	4718      	bx	r3
	...

08002118 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv>:
    virtual void handleTickEvent()
 8002118:	b513      	push	{r0, r1, r4, lr}
 800211a:	4604      	mov	r4, r0
        animationCounter++;
 800211c:	7a80      	ldrb	r0, [r0, #10]
        if (animationCounter > animationSteps)
 800211e:	7a63      	ldrb	r3, [r4, #9]
        animationCounter++;
 8002120:	3001      	adds	r0, #1
 8002122:	b2c0      	uxtb	r0, r0
        if (animationCounter > animationSteps)
 8002124:	4298      	cmp	r0, r3
        animationCounter++;
 8002126:	72a0      	strb	r0, [r4, #10]
        if (animationCounter > animationSteps)
 8002128:	d905      	bls.n	8002136 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1e>
            done = true;
 800212a:	2301      	movs	r3, #1
 800212c:	7223      	strb	r3, [r4, #8]
            animationCounter = 0;
 800212e:	2300      	movs	r3, #0
 8002130:	72a3      	strb	r3, [r4, #10]
    }
 8002132:	b002      	add	sp, #8
 8002134:	bd10      	pop	{r4, pc}
        calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 8002136:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800213a:	2100      	movs	r1, #0
 800213c:	f00b fc74 	bl	800da28 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
        if ((calculatedValue % 2) != 0)
 8002140:	07c3      	lsls	r3, r0, #31
 8002142:	d507      	bpl.n	8002154 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x3c>
            calculatedValue += (calculatedValue > 0 ? 1 : -1);
 8002144:	2800      	cmp	r0, #0
 8002146:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800214a:	bfc8      	it	gt
 800214c:	2301      	movgt	r3, #1
 800214e:	fa13 f080 	uxtah	r0, r3, r0
 8002152:	b200      	sxth	r0, r0
                rect.x = HAL::DISPLAY_WIDTH - calculatedValue;
 8002154:	4a14      	ldr	r2, [pc, #80]	@ (80021a8 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x90>)
        calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 8002156:	81e0      	strh	r0, [r4, #14]
                rect.x = HAL::DISPLAY_WIDTH - calculatedValue;
 8002158:	8812      	ldrh	r2, [r2, #0]
 800215a:	2300      	movs	r3, #0
 800215c:	f8ad 3002 	strh.w	r3, [sp, #2]
 8002160:	b283      	uxth	r3, r0
 8002162:	1ad2      	subs	r2, r2, r3
 8002164:	f8ad 2000 	strh.w	r2, [sp]
                rect.width = calculatedValue - prevCalculatedValue;
 8002168:	8a22      	ldrh	r2, [r4, #16]
        prevCalculatedValue = calculatedValue;
 800216a:	8220      	strh	r0, [r4, #16]
                rect.width = calculatedValue - prevCalculatedValue;
 800216c:	1a9b      	subs	r3, r3, r2
 800216e:	f8ad 3004 	strh.w	r3, [sp, #4]
                rect.height = HAL::DISPLAY_HEIGHT;
 8002172:	4b0e      	ldr	r3, [pc, #56]	@ (80021ac <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x94>)
 8002174:	881b      	ldrh	r3, [r3, #0]
 8002176:	f8ad 3006 	strh.w	r3, [sp, #6]
        Application::getInstance()->invalidateArea(rect);
 800217a:	f009 fe21 	bl	800bdc0 <_ZN8touchgfx11Application11getInstanceEv>
 800217e:	6803      	ldr	r3, [r0, #0]
 8002180:	aa02      	add	r2, sp, #8
 8002182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002184:	e912 0006 	ldmdb	r2, {r1, r2}
 8002188:	4798      	blx	r3
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 800218a:	7aa3      	ldrb	r3, [r4, #10]
 800218c:	2b01      	cmp	r3, #1
 800218e:	d1d0      	bne.n	8002132 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1a>
 8002190:	4b07      	ldr	r3, [pc, #28]	@ (80021b0 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x98>)
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d0cc      	beq.n	8002132 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1a>
            Application::getInstance()->copyInvalidatedAreasFromTFTToClientBuffer();
 8002198:	f009 fe12 	bl	800bdc0 <_ZN8touchgfx11Application11getInstanceEv>
    }
 800219c:	b002      	add	sp, #8
 800219e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            Application::getInstance()->copyInvalidatedAreasFromTFTToClientBuffer();
 80021a2:	f009 be13 	b.w	800bdcc <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv>
 80021a6:	bf00      	nop
 80021a8:	2001262c 	.word	0x2001262c
 80021ac:	2001262e 	.word	0x2001262e
 80021b0:	20012636 	.word	0x20012636

080021b4 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv>:
    virtual void handleTickEvent()
 80021b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80021b6:	4605      	mov	r5, r0
        animationCounter++;
 80021b8:	7a80      	ldrb	r0, [r0, #10]
        if (animationCounter > animationSteps)
 80021ba:	7a6b      	ldrb	r3, [r5, #9]
        animationCounter++;
 80021bc:	3001      	adds	r0, #1
 80021be:	b2c0      	uxtb	r0, r0
        if (animationCounter > animationSteps)
 80021c0:	4298      	cmp	r0, r3
        animationCounter++;
 80021c2:	72a8      	strb	r0, [r5, #10]
        if (animationCounter > animationSteps)
 80021c4:	d905      	bls.n	80021d2 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1e>
            done = true;
 80021c6:	2301      	movs	r3, #1
 80021c8:	722b      	strb	r3, [r5, #8]
            animationCounter = 0;
 80021ca:	2300      	movs	r3, #0
 80021cc:	72ab      	strb	r3, [r5, #10]
    }
 80021ce:	b003      	add	sp, #12
 80021d0:	bd30      	pop	{r4, r5, pc}
        calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 80021d2:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
        const int16_t oldValue = calculatedValue;
 80021d6:	f9b5 400e 	ldrsh.w	r4, [r5, #14]
        calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 80021da:	2100      	movs	r1, #0
 80021dc:	f00b fc24 	bl	800da28 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
        if ((calculatedValue % 2) != 0)
 80021e0:	07c3      	lsls	r3, r0, #31
 80021e2:	d507      	bpl.n	80021f4 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x40>
            calculatedValue += (calculatedValue > 0 ? 1 : -1);
 80021e4:	2800      	cmp	r0, #0
 80021e6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80021ea:	bfc8      	it	gt
 80021ec:	2301      	movgt	r3, #1
 80021ee:	fa13 f080 	uxtah	r0, r3, r0
 80021f2:	b200      	sxth	r0, r0
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 80021f4:	7aab      	ldrb	r3, [r5, #10]
        calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 80021f6:	81e8      	strh	r0, [r5, #14]
        const int16_t relativeValue = calculatedValue - oldValue;
 80021f8:	1b04      	subs	r4, r0, r4
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 80021fa:	2b01      	cmp	r3, #1
        const int16_t relativeValue = calculatedValue - oldValue;
 80021fc:	b2a4      	uxth	r4, r4
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 80021fe:	d106      	bne.n	800220e <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x5a>
 8002200:	4b17      	ldr	r3, [pc, #92]	@ (8002260 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0xac>)
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	b11b      	cbz	r3, 800220e <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x5a>
            Application::getInstance()->copyInvalidatedAreasFromTFTToClientBuffer();
 8002206:	f009 fddb 	bl	800bdc0 <_ZN8touchgfx11Application11getInstanceEv>
 800220a:	f009 fddf 	bl	800bdcc <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv>
            rect.x = HAL::DISPLAY_WIDTH + calculatedValue;
 800220e:	4a15      	ldr	r2, [pc, #84]	@ (8002264 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0xb0>)
 8002210:	2300      	movs	r3, #0
 8002212:	8812      	ldrh	r2, [r2, #0]
 8002214:	f8ad 3002 	strh.w	r3, [sp, #2]
 8002218:	89eb      	ldrh	r3, [r5, #14]
 800221a:	441a      	add	r2, r3
            rect.width = -calculatedValue;
 800221c:	425b      	negs	r3, r3
 800221e:	f8ad 3004 	strh.w	r3, [sp, #4]
            rect.height = HAL::DISPLAY_HEIGHT;
 8002222:	4b11      	ldr	r3, [pc, #68]	@ (8002268 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0xb4>)
            rect.x = HAL::DISPLAY_WIDTH + calculatedValue;
 8002224:	f8ad 2000 	strh.w	r2, [sp]
            rect.height = HAL::DISPLAY_HEIGHT;
 8002228:	881b      	ldrh	r3, [r3, #0]
 800222a:	f8ad 3006 	strh.w	r3, [sp, #6]
        Application::getInstance()->invalidateArea(rect);
 800222e:	f009 fdc7 	bl	800bdc0 <_ZN8touchgfx11Application11getInstanceEv>
 8002232:	6803      	ldr	r3, [r0, #0]
 8002234:	aa02      	add	r2, sp, #8
 8002236:	e912 0006 	ldmdb	r2, {r1, r2}
 800223a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800223c:	4798      	blx	r3
        Drawable* d = screenContainer->getFirstChild();
 800223e:	6868      	ldr	r0, [r5, #4]
 8002240:	6803      	ldr	r3, [r0, #0]
 8002242:	69db      	ldr	r3, [r3, #28]
 8002244:	4798      	blx	r3
 8002246:	4605      	mov	r5, r0
        while (d)
 8002248:	2d00      	cmp	r5, #0
 800224a:	d0c0      	beq.n	80021ce <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1a>
                d->setX(d->getX() + relativeValue);
 800224c:	88a9      	ldrh	r1, [r5, #4]
 800224e:	682b      	ldr	r3, [r5, #0]
 8002250:	4421      	add	r1, r4
 8002252:	4628      	mov	r0, r5
 8002254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002256:	b209      	sxth	r1, r1
 8002258:	4798      	blx	r3
 800225a:	69ad      	ldr	r5, [r5, #24]
 800225c:	e7f4      	b.n	8002248 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x94>
 800225e:	bf00      	nop
 8002260:	20012636 	.word	0x20012636
 8002264:	2001262c 	.word	0x2001262c
 8002268:	2001262e 	.word	0x2001262e

0800226c <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 800226c:	b510      	push	{r4, lr}
 800226e:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8002270:	f8d0 0140 	ldr.w	r0, [r0, #320]	@ 0x140
 8002274:	b158      	cbz	r0, 800228e <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 8002276:	6803      	ldr	r3, [r0, #0]
 8002278:	68db      	ldr	r3, [r3, #12]
 800227a:	4798      	blx	r3
 800227c:	b138      	cbz	r0, 800228e <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 800227e:	f8d4 0140 	ldr.w	r0, [r4, #320]	@ 0x140
 8002282:	6803      	ldr	r3, [r0, #0]
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8002288:	2300      	movs	r3, #0
 800228a:	f8c4 3140 	str.w	r3, [r4, #320]	@ 0x140
    }
 800228e:	bd10      	pop	{r4, pc}

08002290 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv>:
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoScreen2ScreenCoverTransitionEastImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoScreen2ScreenCoverTransitionEastImpl()
{
 8002290:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen2View, Screen2Presenter, touchgfx::CoverTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8002294:	e9d0 6a55 	ldrd	r6, sl, [r0, #340]	@ 0x154
{
 8002298:	4607      	mov	r7, r0
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800229a:	68b0      	ldr	r0, [r6, #8]
 800229c:	6803      	ldr	r3, [r0, #0]
 800229e:	6a1b      	ldr	r3, [r3, #32]
 80022a0:	4798      	blx	r3
 80022a2:	f5b0 6f88 	cmp.w	r0, #1088	@ 0x440
 80022a6:	d205      	bcs.n	80022b4 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x24>
 80022a8:	4b48      	ldr	r3, [pc, #288]	@ (80023cc <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x13c>)
 80022aa:	4a49      	ldr	r2, [pc, #292]	@ (80023d0 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x140>)
 80022ac:	21a3      	movs	r1, #163	@ 0xa3
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80022ae:	4849      	ldr	r0, [pc, #292]	@ (80023d4 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x144>)
 80022b0:	f00f fea4 	bl	8011ffc <__assert_func>
 80022b4:	6870      	ldr	r0, [r6, #4]
 80022b6:	6803      	ldr	r3, [r0, #0]
 80022b8:	6a1b      	ldr	r3, [r3, #32]
 80022ba:	4798      	blx	r3
 80022bc:	280f      	cmp	r0, #15
 80022be:	d803      	bhi.n	80022c8 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x38>
 80022c0:	4b45      	ldr	r3, [pc, #276]	@ (80023d8 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x148>)
 80022c2:	4a43      	ldr	r2, [pc, #268]	@ (80023d0 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x140>)
 80022c4:	21a4      	movs	r1, #164	@ 0xa4
 80022c6:	e7f2      	b.n	80022ae <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x1e>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 80022c8:	68f0      	ldr	r0, [r6, #12]
 80022ca:	6803      	ldr	r3, [r0, #0]
 80022cc:	6a1b      	ldr	r3, [r3, #32]
 80022ce:	4798      	blx	r3
 80022d0:	280f      	cmp	r0, #15
 80022d2:	d803      	bhi.n	80022dc <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x4c>
 80022d4:	4b41      	ldr	r3, [pc, #260]	@ (80023dc <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x14c>)
 80022d6:	4a3e      	ldr	r2, [pc, #248]	@ (80023d0 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x140>)
 80022d8:	21a5      	movs	r1, #165	@ 0xa5
 80022da:	e7e8      	b.n	80022ae <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x1e>
    Application::getInstance()->clearAllTimerWidgets();
 80022dc:	f009 fd70 	bl	800bdc0 <_ZN8touchgfx11Application11getInstanceEv>
    if (*currentTrans)
 80022e0:	f8df 9104 	ldr.w	r9, [pc, #260]	@ 80023e8 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x158>

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
    {
        timerWidgets.clear();
 80022e4:	3004      	adds	r0, #4
 80022e6:	f009 fdb8 	bl	800be5a <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 80022ea:	f8d9 0000 	ldr.w	r0, [r9]
 80022ee:	b110      	cbz	r0, 80022f6 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x66>
        (*currentTrans)->tearDown();
 80022f0:	6803      	ldr	r3, [r0, #0]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	4798      	blx	r3
    if (*currentTrans)
 80022f6:	f8d9 0000 	ldr.w	r0, [r9]
 80022fa:	b110      	cbz	r0, 8002302 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x72>
        (*currentTrans)->~Transition();
 80022fc:	6803      	ldr	r3, [r0, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4798      	blx	r3
    if (*currentScreen)
 8002302:	f8df 80e8 	ldr.w	r8, [pc, #232]	@ 80023ec <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x15c>
 8002306:	f8d8 0000 	ldr.w	r0, [r8]
 800230a:	b110      	cbz	r0, 8002312 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x82>
        (*currentScreen)->tearDownScreen();
 800230c:	6803      	ldr	r3, [r0, #0]
 800230e:	695b      	ldr	r3, [r3, #20]
 8002310:	4798      	blx	r3
    if (*currentPresenter)
 8002312:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8002316:	b110      	cbz	r0, 800231e <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x8e>
        (*currentPresenter)->deactivate();
 8002318:	6803      	ldr	r3, [r0, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	4798      	blx	r3
    if (*currentScreen)
 800231e:	f8d8 0000 	ldr.w	r0, [r8]
 8002322:	b110      	cbz	r0, 800232a <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x9a>
        (*currentScreen)->~Screen();
 8002324:	6803      	ldr	r3, [r0, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4798      	blx	r3
    if (*currentPresenter)
 800232a:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 800232e:	b110      	cbz	r0, 8002336 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0xa6>
        (*currentPresenter)->~Presenter();
 8002330:	6803      	ldr	r3, [r0, #0]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8002336:	68f0      	ldr	r0, [r6, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 8002338:	6803      	ldr	r3, [r0, #0]
 800233a:	2100      	movs	r1, #0
 800233c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800233e:	4798      	blx	r3
          calculatedValue(0)
 8002340:	4b27      	ldr	r3, [pc, #156]	@ (80023e0 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x150>)
 8002342:	6003      	str	r3, [r0, #0]
        : screenContainer(0), done(false)
 8002344:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002348:	8103      	strh	r3, [r0, #8]
            targetValue = -HAL::DISPLAY_WIDTH;
 800234a:	4b26      	ldr	r3, [pc, #152]	@ (80023e4 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x154>)
 800234c:	881b      	ldrh	r3, [r3, #0]
 800234e:	f04f 0b00 	mov.w	fp, #0
          animationCounter(0),
 8002352:	f880 b00a 	strb.w	fp, [r0, #10]
            targetValue = -HAL::DISPLAY_WIDTH;
 8002356:	425b      	negs	r3, r3
 8002358:	4604      	mov	r4, r0
 800235a:	f8c0 b004 	str.w	fp, [r0, #4]
          calculatedValue(0)
 800235e:	f8a0 b00e 	strh.w	fp, [r0, #14]
            targetValue = -HAL::DISPLAY_WIDTH;
 8002362:	8183      	strh	r3, [r0, #12]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8002364:	68b0      	ldr	r0, [r6, #8]
 8002366:	6803      	ldr	r3, [r0, #0]
 8002368:	4659      	mov	r1, fp
 800236a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800236c:	4798      	blx	r3
 800236e:	4605      	mov	r5, r0
 8002370:	f001 f9d0 	bl	8003714 <_ZN11Screen2ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8002374:	6870      	ldr	r0, [r6, #4]
 8002376:	6803      	ldr	r3, [r0, #0]
 8002378:	4659      	mov	r1, fp
 800237a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800237c:	4798      	blx	r3
 800237e:	4629      	mov	r1, r5
 8002380:	4606      	mov	r6, r0
 8002382:	f001 f969 	bl	8003658 <_ZN16Screen2PresenterC1ER11Screen2View>
    *currentTrans = newTransition;
    *currentPresenter = newPresenter;
    *currentScreen = newScreen;
    model->bind(newPresenter);
 8002386:	1d33      	adds	r3, r6, #4
    *currentPresenter = newPresenter;
 8002388:	f8c7 613c 	str.w	r6, [r7, #316]	@ 0x13c
public:
    Model();
    long modelTickCount = 0;
    void bind(ModelListener* listener)
    {
        modelListener = listener;
 800238c:	f8ca 3008 	str.w	r3, [sl, #8]
    newScreen->setupScreen();
 8002390:	682b      	ldr	r3, [r5, #0]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
 8002392:	f8c6 a008 	str.w	sl, [r6, #8]
 8002396:	4628      	mov	r0, r5
 8002398:	68db      	ldr	r3, [r3, #12]
    *currentTrans = newTransition;
 800239a:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
 800239e:	f8c8 5000 	str.w	r5, [r8]
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
    {
        presenter = &newPresenter;
 80023a2:	63ee      	str	r6, [r5, #60]	@ 0x3c
    newScreen->setupScreen();
 80023a4:	4798      	blx	r3
    newPresenter->activate();
 80023a6:	6833      	ldr	r3, [r6, #0]
 80023a8:	4630      	mov	r0, r6
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 80023ae:	4621      	mov	r1, r4
 80023b0:	4628      	mov	r0, r5
 80023b2:	f00b fb33 	bl	800da1c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 80023b6:	6823      	ldr	r3, [r4, #0]
 80023b8:	4620      	mov	r0, r4
 80023ba:	691b      	ldr	r3, [r3, #16]
 80023bc:	4798      	blx	r3
    newTransition->invalidate();
 80023be:	6823      	ldr	r3, [r4, #0]
 80023c0:	695b      	ldr	r3, [r3, #20]
 80023c2:	4620      	mov	r0, r4
}
 80023c4:	b001      	add	sp, #4
 80023c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023ca:	4718      	bx	r3
 80023cc:	080134bf 	.word	0x080134bf
 80023d0:	0801354d 	.word	0x0801354d
 80023d4:	08013632 	.word	0x08013632
 80023d8:	08013679 	.word	0x08013679
 80023dc:	0801371c 	.word	0x0801371c
 80023e0:	080140e4 	.word	0x080140e4
 80023e4:	2001262c 	.word	0x2001262c
 80023e8:	20012678 	.word	0x20012678
 80023ec:	20012674 	.word	0x20012674

080023f0 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv>:
{
 80023f0:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::WipeTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 80023f4:	e9d0 ba55 	ldrd	fp, sl, [r0, #340]	@ 0x154
{
 80023f8:	4607      	mov	r7, r0
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80023fa:	f8db 0008 	ldr.w	r0, [fp, #8]
 80023fe:	6803      	ldr	r3, [r0, #0]
 8002400:	6a1b      	ldr	r3, [r3, #32]
 8002402:	4798      	blx	r3
 8002404:	28b3      	cmp	r0, #179	@ 0xb3
 8002406:	d805      	bhi.n	8002414 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x24>
 8002408:	4b49      	ldr	r3, [pc, #292]	@ (8002530 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x140>)
 800240a:	4a4a      	ldr	r2, [pc, #296]	@ (8002534 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x144>)
 800240c:	21a3      	movs	r1, #163	@ 0xa3
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800240e:	484a      	ldr	r0, [pc, #296]	@ (8002538 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x148>)
 8002410:	f00f fdf4 	bl	8011ffc <__assert_func>
 8002414:	f8db 0004 	ldr.w	r0, [fp, #4]
 8002418:	6803      	ldr	r3, [r0, #0]
 800241a:	6a1b      	ldr	r3, [r3, #32]
 800241c:	4798      	blx	r3
 800241e:	280f      	cmp	r0, #15
 8002420:	d803      	bhi.n	800242a <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x3a>
 8002422:	4b46      	ldr	r3, [pc, #280]	@ (800253c <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x14c>)
 8002424:	4a43      	ldr	r2, [pc, #268]	@ (8002534 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x144>)
 8002426:	21a4      	movs	r1, #164	@ 0xa4
 8002428:	e7f1      	b.n	800240e <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x1e>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800242a:	f8db 000c 	ldr.w	r0, [fp, #12]
 800242e:	6803      	ldr	r3, [r0, #0]
 8002430:	6a1b      	ldr	r3, [r3, #32]
 8002432:	4798      	blx	r3
 8002434:	2813      	cmp	r0, #19
 8002436:	d803      	bhi.n	8002440 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x50>
 8002438:	4b41      	ldr	r3, [pc, #260]	@ (8002540 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x150>)
 800243a:	4a3e      	ldr	r2, [pc, #248]	@ (8002534 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x144>)
 800243c:	21a5      	movs	r1, #165	@ 0xa5
 800243e:	e7e6      	b.n	800240e <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x1e>
    Application::getInstance()->clearAllTimerWidgets();
 8002440:	f009 fcbe 	bl	800bdc0 <_ZN8touchgfx11Application11getInstanceEv>
    if (*currentTrans)
 8002444:	f8df 9104 	ldr.w	r9, [pc, #260]	@ 800254c <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x15c>
 8002448:	3004      	adds	r0, #4
 800244a:	f009 fd06 	bl	800be5a <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 800244e:	f8d9 0000 	ldr.w	r0, [r9]
 8002452:	b110      	cbz	r0, 800245a <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x6a>
        (*currentTrans)->tearDown();
 8002454:	6803      	ldr	r3, [r0, #0]
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	4798      	blx	r3
    if (*currentTrans)
 800245a:	f8d9 0000 	ldr.w	r0, [r9]
 800245e:	b110      	cbz	r0, 8002466 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x76>
        (*currentTrans)->~Transition();
 8002460:	6803      	ldr	r3, [r0, #0]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4798      	blx	r3
    if (*currentScreen)
 8002466:	f8df 80e8 	ldr.w	r8, [pc, #232]	@ 8002550 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x160>
 800246a:	f8d8 0000 	ldr.w	r0, [r8]
 800246e:	b110      	cbz	r0, 8002476 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x86>
        (*currentScreen)->tearDownScreen();
 8002470:	6803      	ldr	r3, [r0, #0]
 8002472:	695b      	ldr	r3, [r3, #20]
 8002474:	4798      	blx	r3
    if (*currentPresenter)
 8002476:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 800247a:	b110      	cbz	r0, 8002482 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x92>
        (*currentPresenter)->deactivate();
 800247c:	6803      	ldr	r3, [r0, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	4798      	blx	r3
    if (*currentScreen)
 8002482:	f8d8 0000 	ldr.w	r0, [r8]
 8002486:	b110      	cbz	r0, 800248e <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x9e>
        (*currentScreen)->~Screen();
 8002488:	6803      	ldr	r3, [r0, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4798      	blx	r3
    if (*currentPresenter)
 800248e:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8002492:	b110      	cbz	r0, 800249a <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0xaa>
        (*currentPresenter)->~Presenter();
 8002494:	6803      	ldr	r3, [r0, #0]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800249a:	f8db 000c 	ldr.w	r0, [fp, #12]
 800249e:	6803      	ldr	r3, [r0, #0]
 80024a0:	2100      	movs	r1, #0
 80024a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024a4:	4798      	blx	r3
          prevCalculatedValue(0)
 80024a6:	4b27      	ldr	r3, [pc, #156]	@ (8002544 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x154>)
 80024a8:	6003      	str	r3, [r0, #0]
 80024aa:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80024ae:	8103      	strh	r3, [r0, #8]
            targetValue = HAL::DISPLAY_WIDTH;
 80024b0:	4b25      	ldr	r3, [pc, #148]	@ (8002548 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x158>)
 80024b2:	2600      	movs	r6, #0
          animationCounter(0),
 80024b4:	7286      	strb	r6, [r0, #10]
            targetValue = HAL::DISPLAY_WIDTH;
 80024b6:	881b      	ldrh	r3, [r3, #0]
 80024b8:	6046      	str	r6, [r0, #4]
 80024ba:	4604      	mov	r4, r0
          calculatedValue(0),
 80024bc:	81c6      	strh	r6, [r0, #14]
          prevCalculatedValue(0)
 80024be:	8206      	strh	r6, [r0, #16]
            targetValue = HAL::DISPLAY_WIDTH;
 80024c0:	8183      	strh	r3, [r0, #12]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 80024c2:	f8db 0008 	ldr.w	r0, [fp, #8]
 80024c6:	6803      	ldr	r3, [r0, #0]
 80024c8:	4631      	mov	r1, r6
 80024ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024cc:	4798      	blx	r3
 80024ce:	4605      	mov	r5, r0
 80024d0:	f001 f8a4 	bl	800361c <_ZN11Screen1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 80024d4:	f8db 0004 	ldr.w	r0, [fp, #4]
 80024d8:	6803      	ldr	r3, [r0, #0]
 80024da:	4631      	mov	r1, r6
 80024dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024de:	4798      	blx	r3
 80024e0:	4629      	mov	r1, r5
 80024e2:	4606      	mov	r6, r0
 80024e4:	f001 f874 	bl	80035d0 <_ZN16Screen1PresenterC1ER11Screen1View>
    model->bind(newPresenter);
 80024e8:	1d33      	adds	r3, r6, #4
    *currentPresenter = newPresenter;
 80024ea:	f8c7 613c 	str.w	r6, [r7, #316]	@ 0x13c
 80024ee:	f8ca 3008 	str.w	r3, [sl, #8]
    newScreen->setupScreen();
 80024f2:	682b      	ldr	r3, [r5, #0]
 80024f4:	f8c6 a008 	str.w	sl, [r6, #8]
 80024f8:	4628      	mov	r0, r5
 80024fa:	68db      	ldr	r3, [r3, #12]
    *currentTrans = newTransition;
 80024fc:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
 8002500:	f8c8 5000 	str.w	r5, [r8]
 8002504:	63ee      	str	r6, [r5, #60]	@ 0x3c
    newScreen->setupScreen();
 8002506:	4798      	blx	r3
    newPresenter->activate();
 8002508:	6833      	ldr	r3, [r6, #0]
 800250a:	4630      	mov	r0, r6
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8002510:	4621      	mov	r1, r4
 8002512:	4628      	mov	r0, r5
 8002514:	f00b fa82 	bl	800da1c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8002518:	6823      	ldr	r3, [r4, #0]
 800251a:	4620      	mov	r0, r4
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	4798      	blx	r3
    newTransition->invalidate();
 8002520:	6823      	ldr	r3, [r4, #0]
 8002522:	695b      	ldr	r3, [r3, #20]
 8002524:	4620      	mov	r0, r4
}
 8002526:	b001      	add	sp, #4
 8002528:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800252c:	4718      	bx	r3
 800252e:	bf00      	nop
 8002530:	080134bf 	.word	0x080134bf
 8002534:	080137bf 	.word	0x080137bf
 8002538:	08013632 	.word	0x08013632
 800253c:	08013679 	.word	0x08013679
 8002540:	0801371c 	.word	0x0801371c
 8002544:	08014108 	.word	0x08014108
 8002548:	2001262c 	.word	0x2001262c
 800254c:	20012678 	.word	0x20012678
 8002550:	20012674 	.word	0x20012674

08002554 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:
{
 8002554:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8002558:	e9d0 6a55 	ldrd	r6, sl, [r0, #340]	@ 0x154
{
 800255c:	4607      	mov	r7, r0
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800255e:	68b0      	ldr	r0, [r6, #8]
 8002560:	6803      	ldr	r3, [r0, #0]
 8002562:	6a1b      	ldr	r3, [r3, #32]
 8002564:	4798      	blx	r3
 8002566:	28b3      	cmp	r0, #179	@ 0xb3
 8002568:	d805      	bhi.n	8002576 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x22>
 800256a:	4b44      	ldr	r3, [pc, #272]	@ (800267c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x128>)
 800256c:	4a44      	ldr	r2, [pc, #272]	@ (8002680 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x12c>)
 800256e:	21a3      	movs	r1, #163	@ 0xa3
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8002570:	4844      	ldr	r0, [pc, #272]	@ (8002684 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x130>)
 8002572:	f00f fd43 	bl	8011ffc <__assert_func>
 8002576:	6870      	ldr	r0, [r6, #4]
 8002578:	6803      	ldr	r3, [r0, #0]
 800257a:	6a1b      	ldr	r3, [r3, #32]
 800257c:	4798      	blx	r3
 800257e:	280f      	cmp	r0, #15
 8002580:	d803      	bhi.n	800258a <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x36>
 8002582:	4b41      	ldr	r3, [pc, #260]	@ (8002688 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x134>)
 8002584:	4a3e      	ldr	r2, [pc, #248]	@ (8002680 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x12c>)
 8002586:	21a4      	movs	r1, #164	@ 0xa4
 8002588:	e7f2      	b.n	8002570 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1c>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800258a:	68f0      	ldr	r0, [r6, #12]
 800258c:	6803      	ldr	r3, [r0, #0]
 800258e:	6a1b      	ldr	r3, [r3, #32]
 8002590:	4798      	blx	r3
 8002592:	280b      	cmp	r0, #11
 8002594:	d803      	bhi.n	800259e <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x4a>
 8002596:	4b3d      	ldr	r3, [pc, #244]	@ (800268c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x138>)
 8002598:	4a39      	ldr	r2, [pc, #228]	@ (8002680 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x12c>)
 800259a:	21a5      	movs	r1, #165	@ 0xa5
 800259c:	e7e8      	b.n	8002570 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1c>
    Application::getInstance()->clearAllTimerWidgets();
 800259e:	f009 fc0f 	bl	800bdc0 <_ZN8touchgfx11Application11getInstanceEv>
    if (*currentTrans)
 80025a2:	f8df 90f0 	ldr.w	r9, [pc, #240]	@ 8002694 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x140>
 80025a6:	3004      	adds	r0, #4
 80025a8:	f009 fc57 	bl	800be5a <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 80025ac:	f8d9 0000 	ldr.w	r0, [r9]
 80025b0:	b110      	cbz	r0, 80025b8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x64>
        (*currentTrans)->tearDown();
 80025b2:	6803      	ldr	r3, [r0, #0]
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	4798      	blx	r3
    if (*currentTrans)
 80025b8:	f8d9 0000 	ldr.w	r0, [r9]
 80025bc:	b110      	cbz	r0, 80025c4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x70>
        (*currentTrans)->~Transition();
 80025be:	6803      	ldr	r3, [r0, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4798      	blx	r3
    if (*currentScreen)
 80025c4:	f8df 80d0 	ldr.w	r8, [pc, #208]	@ 8002698 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x144>
 80025c8:	f8d8 0000 	ldr.w	r0, [r8]
 80025cc:	b110      	cbz	r0, 80025d4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x80>
        (*currentScreen)->tearDownScreen();
 80025ce:	6803      	ldr	r3, [r0, #0]
 80025d0:	695b      	ldr	r3, [r3, #20]
 80025d2:	4798      	blx	r3
    if (*currentPresenter)
 80025d4:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 80025d8:	b110      	cbz	r0, 80025e0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x8c>
        (*currentPresenter)->deactivate();
 80025da:	6803      	ldr	r3, [r0, #0]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	4798      	blx	r3
    if (*currentScreen)
 80025e0:	f8d8 0000 	ldr.w	r0, [r8]
 80025e4:	b110      	cbz	r0, 80025ec <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x98>
        (*currentScreen)->~Screen();
 80025e6:	6803      	ldr	r3, [r0, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4798      	blx	r3
    if (*currentPresenter)
 80025ec:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 80025f0:	b110      	cbz	r0, 80025f8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0xa4>
        (*currentPresenter)->~Presenter();
 80025f2:	6803      	ldr	r3, [r0, #0]
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 80025f8:	68f0      	ldr	r0, [r6, #12]
 80025fa:	6803      	ldr	r3, [r0, #0]
 80025fc:	2100      	movs	r1, #0
 80025fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002600:	4798      	blx	r3
 8002602:	f04f 0b00 	mov.w	fp, #0
 8002606:	4b22      	ldr	r3, [pc, #136]	@ (8002690 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x13c>)
 8002608:	f8c0 b004 	str.w	fp, [r0, #4]
 800260c:	4604      	mov	r4, r0
 800260e:	f880 b008 	strb.w	fp, [r0, #8]
 8002612:	6003      	str	r3, [r0, #0]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8002614:	68b0      	ldr	r0, [r6, #8]
 8002616:	6803      	ldr	r3, [r0, #0]
 8002618:	4659      	mov	r1, fp
 800261a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800261c:	4798      	blx	r3
 800261e:	4605      	mov	r5, r0
 8002620:	f000 fffc 	bl	800361c <_ZN11Screen1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8002624:	6870      	ldr	r0, [r6, #4]
 8002626:	6803      	ldr	r3, [r0, #0]
 8002628:	4659      	mov	r1, fp
 800262a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800262c:	4798      	blx	r3
 800262e:	4629      	mov	r1, r5
 8002630:	4606      	mov	r6, r0
 8002632:	f000 ffcd 	bl	80035d0 <_ZN16Screen1PresenterC1ER11Screen1View>
    model->bind(newPresenter);
 8002636:	1d33      	adds	r3, r6, #4
    *currentPresenter = newPresenter;
 8002638:	f8c7 613c 	str.w	r6, [r7, #316]	@ 0x13c
 800263c:	f8ca 3008 	str.w	r3, [sl, #8]
    newScreen->setupScreen();
 8002640:	682b      	ldr	r3, [r5, #0]
 8002642:	f8c6 a008 	str.w	sl, [r6, #8]
 8002646:	4628      	mov	r0, r5
 8002648:	68db      	ldr	r3, [r3, #12]
    *currentTrans = newTransition;
 800264a:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
 800264e:	f8c8 5000 	str.w	r5, [r8]
 8002652:	63ee      	str	r6, [r5, #60]	@ 0x3c
    newScreen->setupScreen();
 8002654:	4798      	blx	r3
    newPresenter->activate();
 8002656:	6833      	ldr	r3, [r6, #0]
 8002658:	4630      	mov	r0, r6
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800265e:	4621      	mov	r1, r4
 8002660:	4628      	mov	r0, r5
 8002662:	f00b f9db 	bl	800da1c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8002666:	6823      	ldr	r3, [r4, #0]
 8002668:	4620      	mov	r0, r4
 800266a:	691b      	ldr	r3, [r3, #16]
 800266c:	4798      	blx	r3
    newTransition->invalidate();
 800266e:	6823      	ldr	r3, [r4, #0]
 8002670:	695b      	ldr	r3, [r3, #20]
 8002672:	4620      	mov	r0, r4
}
 8002674:	b001      	add	sp, #4
 8002676:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800267a:	4718      	bx	r3
 800267c:	080134bf 	.word	0x080134bf
 8002680:	080138a3 	.word	0x080138a3
 8002684:	08013632 	.word	0x08013632
 8002688:	08013679 	.word	0x08013679
 800268c:	0801371c 	.word	0x0801371c
 8002690:	080140c0 	.word	0x080140c0
 8002694:	20012678 	.word	0x20012678
 8002698:	20012674 	.word	0x20012674

0800269c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 800269c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800269e:	4604      	mov	r4, r0
 80026a0:	4617      	mov	r7, r2
 80026a2:	460e      	mov	r6, r1
          pendingScreenTransitionCallback(0)
 80026a4:	f009 fc76 	bl	800bf94 <_ZN8touchgfx11ApplicationC1Ev>
        instance = this;
 80026a8:	4b10      	ldr	r3, [pc, #64]	@ (80026ec <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x50>)
        : currentPresenter(0),
 80026aa:	2500      	movs	r5, #0
      model(m)
 80026ac:	e9c4 7655 	strd	r7, r6, [r4, #340]	@ 0x154
        return instance;
 80026b0:	4e0f      	ldr	r6, [pc, #60]	@ (80026f0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x54>)
        instance = this;
 80026b2:	601c      	str	r4, [r3, #0]
        : pobject(0), pmemfun(0)
 80026b4:	e9c4 5553 	strd	r5, r5, [r4, #332]	@ 0x14c
 80026b8:	4b0e      	ldr	r3, [pc, #56]	@ (80026f4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x58>)
 80026ba:	6830      	ldr	r0, [r6, #0]
 80026bc:	6023      	str	r3, [r4, #0]
 80026be:	4b0e      	ldr	r3, [pc, #56]	@ (80026f8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x5c>)
 80026c0:	e9c4 3551 	strd	r3, r5, [r4, #324]	@ 0x144
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_PORTRAIT);
 80026c4:	6803      	ldr	r3, [r0, #0]
 80026c6:	2101      	movs	r1, #1
 80026c8:	689b      	ldr	r3, [r3, #8]
          pendingScreenTransitionCallback(0)
 80026ca:	e9c4 554f 	strd	r5, r5, [r4, #316]	@ 0x13c
 80026ce:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 80026d0:	4628      	mov	r0, r5
 80026d2:	f000 fee3 	bl	800349c <_ZN8touchgfx5Texts11setLanguageEt>
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 80026d6:	6833      	ldr	r3, [r6, #0]
 80026d8:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 80026dc:	b10a      	cbz	r2, 80026e2 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x46>
 80026de:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80026e0:	b900      	cbnz	r0, 80026e4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x48>
        return instance->lcdRef;
 80026e2:	6898      	ldr	r0, [r3, #8]
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableDecompressorL8_L4();
 80026e4:	f00e ff10 	bl	8011508 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev>
}
 80026e8:	4620      	mov	r0, r4
 80026ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80026ec:	20012684 	.word	0x20012684
 80026f0:	20012638 	.word	0x20012638
 80026f4:	0801406c 	.word	0x0801406c
 80026f8:	08014054 	.word	0x08014054

080026fc <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80026fc:	4b06      	ldr	r3, [pc, #24]	@ (8002718 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x1c>)
 80026fe:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 8002702:	2300      	movs	r3, #0
 8002704:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 8002708:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 800270c:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 8002710:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	08002555 	.word	0x08002555

0800271c <_ZN23FrontendApplicationBase35gotoScreen1ScreenWipeTransitionEastEv>:
 800271c:	4b06      	ldr	r3, [pc, #24]	@ (8002738 <_ZN23FrontendApplicationBase35gotoScreen1ScreenWipeTransitionEastEv+0x1c>)
 800271e:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 8002722:	2300      	movs	r3, #0
 8002724:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 8002728:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 800272c:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 8002730:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	080023f1 	.word	0x080023f1

0800273c <_ZN23FrontendApplicationBase36gotoScreen2ScreenCoverTransitionEastEv>:
 800273c:	4b06      	ldr	r3, [pc, #24]	@ (8002758 <_ZN23FrontendApplicationBase36gotoScreen2ScreenCoverTransitionEastEv+0x1c>)
 800273e:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 8002742:	2300      	movs	r3, #0
 8002744:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 8002748:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 800274c:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 8002750:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	08002291 	.word	0x08002291

0800275c <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 800275c:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 800275e:	4770      	bx	lr

08002760 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 8002760:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8002762:	4770      	bx	lr

08002764 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 8002764:	4770      	bx	lr

08002766 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
    volatile const uint16_t* dataOffset = (const uint16_t*)((const uint8_t*)glyph + offsetof(GlyphNode, dataOffset));
    uint32_t offset = dataOffset[0];
    offset |= dataOffset[1] << 16;

    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    const uint8_t* pixels = table[glyph->unicode / 2048];
 8002766:	888a      	ldrh	r2, [r1, #4]
    uint32_t offset = dataOffset[0];
 8002768:	880b      	ldrh	r3, [r1, #0]
{
 800276a:	b510      	push	{r4, lr}
    const uint8_t* pixels = table[glyph->unicode / 2048];
 800276c:	0ad2      	lsrs	r2, r2, #11
    offset |= dataOffset[1] << 16;
 800276e:	884c      	ldrh	r4, [r1, #2]
    const uint8_t* pixels = table[glyph->unicode / 2048];
 8002770:	69c1      	ldr	r1, [r0, #28]
    uint32_t offset = dataOffset[0];
 8002772:	b29b      	uxth	r3, r3
    return pixels + offset;
 8002774:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    offset |= dataOffset[1] << 16;
 8002778:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
}
 800277c:	4418      	add	r0, r3
 800277e:	bd10      	pop	{r4, pc}

08002780 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8002780:	b510      	push	{r4, lr}
 8002782:	4604      	mov	r4, r0
    if (!glyph || glyph->kerningTableSize == 0)
 8002784:	b1ba      	cbz	r2, 80027b6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
 8002786:	7b10      	ldrb	r0, [r2, #12]
 8002788:	b168      	cbz	r0, 80027a6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800278a:	7b53      	ldrb	r3, [r2, #13]
 800278c:	7ad2      	ldrb	r2, [r2, #11]
 800278e:	021b      	lsls	r3, r3, #8
 8002790:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8002794:	431a      	orrs	r2, r3
 8002796:	6a23      	ldr	r3, [r4, #32]
 8002798:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
    {
        if (prevChar == kerndata->unicodePrevChar)
 800279c:	881a      	ldrh	r2, [r3, #0]
 800279e:	428a      	cmp	r2, r1
 80027a0:	d102      	bne.n	80027a8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x28>
        {
            return kerndata->distance;
 80027a2:	f993 0002 	ldrsb.w	r0, [r3, #2]
        {
            break;
        }
    }
    return 0;
}
 80027a6:	bd10      	pop	{r4, pc}
        if (prevChar < kerndata->unicodePrevChar)
 80027a8:	d805      	bhi.n	80027b6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 80027aa:	3801      	subs	r0, #1
 80027ac:	b280      	uxth	r0, r0
 80027ae:	3304      	adds	r3, #4
 80027b0:	2800      	cmp	r0, #0
 80027b2:	d1f3      	bne.n	800279c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 80027b4:	e7f7      	b.n	80027a6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
 80027b6:	2000      	movs	r0, #0
 80027b8:	e7f5      	b.n	80027a6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>

080027ba <_ZN8touchgfx13GeneratedFontD0Ev>:
 80027ba:	b510      	push	{r4, lr}
 80027bc:	212c      	movs	r1, #44	@ 0x2c
 80027be:	4604      	mov	r4, r0
 80027c0:	f00f fbee 	bl	8011fa0 <_ZdlPvj>
 80027c4:	4620      	mov	r0, r4
 80027c6:	bd10      	pop	{r4, pc}

080027c8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 80027c8:	b530      	push	{r4, r5, lr}
 80027ca:	b08b      	sub	sp, #44	@ 0x2c
 80027cc:	4604      	mov	r4, r0
      arabicTable(formsTable)
 80027ce:	f8bd 5060 	ldrh.w	r5, [sp, #96]	@ 0x60
 80027d2:	9508      	str	r5, [sp, #32]
 80027d4:	f8bd 505c 	ldrh.w	r5, [sp, #92]	@ 0x5c
 80027d8:	9507      	str	r5, [sp, #28]
 80027da:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 80027de:	9506      	str	r5, [sp, #24]
 80027e0:	f89d 504c 	ldrb.w	r5, [sp, #76]	@ 0x4c
 80027e4:	9505      	str	r5, [sp, #20]
 80027e6:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 80027ea:	9504      	str	r5, [sp, #16]
 80027ec:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 80027f0:	9503      	str	r5, [sp, #12]
 80027f2:	f89d 5040 	ldrb.w	r5, [sp, #64]	@ 0x40
 80027f6:	9502      	str	r5, [sp, #8]
 80027f8:	f89d 503c 	ldrb.w	r5, [sp, #60]	@ 0x3c
 80027fc:	9501      	str	r5, [sp, #4]
 80027fe:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 8002802:	9500      	str	r5, [sp, #0]
 8002804:	f00a fd64 	bl	800d2d0 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 8002808:	4b06      	ldr	r3, [pc, #24]	@ (8002824 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x5c>)
 800280a:	6023      	str	r3, [r4, #0]
      glyphData(glyphDataInternalFlash),
 800280c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800280e:	61e3      	str	r3, [r4, #28]
      kerningData(kerningList),
 8002810:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8002812:	6223      	str	r3, [r4, #32]
      gsubTable(gsubData),
 8002814:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8002816:	6263      	str	r3, [r4, #36]	@ 0x24
      arabicTable(formsTable)
 8002818:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800281a:	62a3      	str	r3, [r4, #40]	@ 0x28
}
 800281c:	4620      	mov	r0, r4
 800281e:	b00b      	add	sp, #44	@ 0x2c
 8002820:	bd30      	pop	{r4, r5, pc}
 8002822:	bf00      	nop
 8002824:	0801412c 	.word	0x0801412c

08002828 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
 8002828:	2000      	movs	r0, #0
 800282a:	4770      	bx	lr

0800282c <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 800282c:	8081      	strh	r1, [r0, #4]
    }
 800282e:	4770      	bx	lr

08002830 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 8002830:	80c1      	strh	r1, [r0, #6]
    }
 8002832:	4770      	bx	lr

08002834 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 8002834:	8101      	strh	r1, [r0, #8]
    }
 8002836:	4770      	bx	lr

08002838 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 8002838:	8141      	strh	r1, [r0, #10]
    }
 800283a:	4770      	bx	lr

0800283c <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 800283c:	4770      	bx	lr

0800283e <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
 800283e:	4770      	bx	lr

08002840 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
 8002840:	4770      	bx	lr

08002842 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
 8002842:	4770      	bx	lr

08002844 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 8002844:	4770      	bx	lr

08002846 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8002846:	b410      	push	{r4}
    {
        moveRelative(x - rect.x, y - rect.y);
 8002848:	88c4      	ldrh	r4, [r0, #6]
 800284a:	6803      	ldr	r3, [r0, #0]
 800284c:	1b12      	subs	r2, r2, r4
 800284e:	8884      	ldrh	r4, [r0, #4]
 8002850:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002852:	1b09      	subs	r1, r1, r4
 8002854:	b212      	sxth	r2, r2
    }
 8002856:	f85d 4b04 	ldr.w	r4, [sp], #4
        moveRelative(x - rect.x, y - rect.y);
 800285a:	b209      	sxth	r1, r1
 800285c:	4718      	bx	r3

0800285e <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800285e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002862:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8002864:	f04f 33ff 	mov.w	r3, #4294967295
 8002868:	6203      	str	r3, [r0, #32]
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 800286a:	6813      	ldr	r3, [r2, #0]
 800286c:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 800286e:	6010      	str	r0, [r2, #0]
    }
 8002870:	4770      	bx	lr

08002872 <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
 8002872:	4770      	bx	lr

08002874 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 8002874:	4770      	bx	lr

08002876 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 8002876:	4770      	bx	lr

08002878 <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 8002878:	4770      	bx	lr

0800287a <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
        (void)key; // Unused variable
    }
 800287a:	4770      	bx	lr

0800287c <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800287c:	4770      	bx	lr

0800287e <_ZN15Screen1ViewBaseD1Ev>:
}

Screen1ViewBase::~Screen1ViewBase()
{

}
 800287e:	4770      	bx	lr

08002880 <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{

}
 8002880:	4770      	bx	lr

08002882 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8002882:	b430      	push	{r4, r5}
        (pobject->*pmemfun)(t1);
 8002884:	68c2      	ldr	r2, [r0, #12]
 8002886:	6844      	ldr	r4, [r0, #4]
 8002888:	1055      	asrs	r5, r2, #1
    virtual void execute(T1 t1)
 800288a:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 800288c:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8002890:	07d2      	lsls	r2, r2, #31
 8002892:	bf48      	it	mi
 8002894:	5962      	ldrmi	r2, [r4, r5]
 8002896:	689b      	ldr	r3, [r3, #8]
    }
 8002898:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun)(t1);
 800289a:	bf48      	it	mi
 800289c:	58d3      	ldrmi	r3, [r2, r3]
 800289e:	4718      	bx	r3

080028a0 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 80028a0:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun != 0);
 80028a2:	6840      	ldr	r0, [r0, #4]
 80028a4:	b130      	cbz	r0, 80028b4 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x14>
 80028a6:	689a      	ldr	r2, [r3, #8]
 80028a8:	b91a      	cbnz	r2, 80028b2 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x12>
 80028aa:	68d8      	ldr	r0, [r3, #12]
 80028ac:	f000 0001 	and.w	r0, r0, #1
 80028b0:	4770      	bx	lr
 80028b2:	2001      	movs	r0, #1
    }
 80028b4:	4770      	bx	lr

080028b6 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80028b6:	b510      	push	{r4, lr}
 80028b8:	2110      	movs	r1, #16
 80028ba:	4604      	mov	r4, r0
 80028bc:	f00f fb70 	bl	8011fa0 <_ZdlPvj>
 80028c0:	4620      	mov	r0, r4
 80028c2:	bd10      	pop	{r4, pc}

080028c4 <_ZN15Screen1ViewBaseD0Ev>:
Screen1ViewBase::~Screen1ViewBase()
 80028c4:	b510      	push	{r4, lr}
}
 80028c6:	21b0      	movs	r1, #176	@ 0xb0
Screen1ViewBase::~Screen1ViewBase()
 80028c8:	4604      	mov	r4, r0
}
 80028ca:	f00f fb69 	bl	8011fa0 <_ZdlPvj>
 80028ce:	4620      	mov	r0, r4
 80028d0:	bd10      	pop	{r4, pc}

080028d2 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
        if (visible)
 80028d2:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 80028d6:	b112      	cbz	r2, 80028de <_ZNK8touchgfx8Drawable17invalidateContentEv+0xc>
            invalidate();
 80028d8:	6803      	ldr	r3, [r0, #0]
 80028da:	695b      	ldr	r3, [r3, #20]
 80028dc:	4718      	bx	r3
    }
 80028de:	4770      	bx	lr

080028e0 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
    {
        if (isVisible() && isTouchable())
 80028e0:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 80028e4:	b11a      	cbz	r2, 80028ee <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
 80028e6:	f890 2024 	ldrb.w	r2, [r0, #36]	@ 0x24
 80028ea:	b102      	cbz	r2, 80028ee <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 80028ec:	6018      	str	r0, [r3, #0]
        }
    }
 80028ee:	4770      	bx	lr

080028f0 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen1ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &button1)
 80028f0:	306c      	adds	r0, #108	@ 0x6c
 80028f2:	4288      	cmp	r0, r1
{
 80028f4:	b508      	push	{r3, lr}
    if (&src == &button1)
 80028f6:	d105      	bne.n	8002904 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x14>
    virtual ~Screen1ViewBase();
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 80028f8:	f009 fa62 	bl	800bdc0 <_ZN8touchgfx11Application11getInstanceEv>
        //Interaction2
        //When button1 clicked change screen to Screen2
        //Go to Screen2 with screen transition towards East
        application().gotoScreen2ScreenCoverTransitionEast();
    }
}
 80028fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        application().gotoScreen2ScreenCoverTransitionEast();
 8002900:	f7ff bf1c 	b.w	800273c <_ZN23FrontendApplicationBase36gotoScreen2ScreenCoverTransitionEastEv>
}
 8002904:	bd08      	pop	{r3, pc}

08002906 <_ZN8touchgfx8Drawable5setXYEss>:
    void setXY(int16_t x, int16_t y)
 8002906:	b570      	push	{r4, r5, r6, lr}
        setX(x);
 8002908:	6803      	ldr	r3, [r0, #0]
    void setXY(int16_t x, int16_t y)
 800290a:	4604      	mov	r4, r0
        setX(x);
 800290c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    void setXY(int16_t x, int16_t y)
 800290e:	4615      	mov	r5, r2
        setX(x);
 8002910:	4798      	blx	r3
        setY(y);
 8002912:	6823      	ldr	r3, [r4, #0]
 8002914:	4629      	mov	r1, r5
 8002916:	4620      	mov	r0, r4
 8002918:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    }
 800291a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(y);
 800291e:	4718      	bx	r3

08002920 <_ZN15Screen1ViewBaseC1Ev>:
Screen1ViewBase::Screen1ViewBase() :
 8002920:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002922:	4604      	mov	r4, r0
        : presenter(0)
 8002924:	f00a fece 	bl	800d6c4 <_ZN8touchgfx6ScreenC1Ev>
    buttonCallback(this, &Screen1ViewBase::buttonCallbackHandler)
 8002928:	4b34      	ldr	r3, [pc, #208]	@ (80029fc <_ZN15Screen1ViewBaseC1Ev+0xdc>)
 800292a:	6023      	str	r3, [r4, #0]
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
        : Widget(), alpha(255), color(0)
 800292c:	4b34      	ldr	r3, [pc, #208]	@ (8002a00 <_ZN15Screen1ViewBaseC1Ev+0xe0>)
 800292e:	2200      	movs	r2, #0
 8002930:	e9c4 3210 	strd	r3, r2, [r4, #64]	@ 0x40
          touchable(false),
 8002934:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002938:	f8a4 3064 	strh.w	r3, [r4, #100]	@ 0x64
 800293c:	23ff      	movs	r3, #255	@ 0xff
 800293e:	f884 3066 	strb.w	r3, [r4, #102]	@ 0x66
        touchable = touch;
 8002942:	f240 1301 	movw	r3, #257	@ 0x101
 8002946:	f8a4 3090 	strh.w	r3, [r4, #144]	@ 0x90
 */
class Button : public AbstractButton
{
public:
    Button()
        : AbstractButton(), up(), down(), alpha(255)
 800294a:	4b2e      	ldr	r3, [pc, #184]	@ (8002a04 <_ZN15Screen1ViewBaseC1Ev+0xe4>)
 800294c:	66e3      	str	r3, [r4, #108]	@ 0x6c
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
        : bitmapId(id)
 800294e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002952:	f8a4 309a 	strh.w	r3, [r4, #154]	@ 0x9a
 8002956:	f8a4 309c 	strh.w	r3, [r4, #156]	@ 0x9c
 800295a:	f884 309e 	strb.w	r3, [r4, #158]	@ 0x9e
        : pobject(pObject), pmemfun(pmemfun_1)
 800295e:	4b2a      	ldr	r3, [pc, #168]	@ (8002a08 <_ZN15Screen1ViewBaseC1Ev+0xe8>)
 8002960:	63e2      	str	r2, [r4, #60]	@ 0x3c
    __background.setPosition(0, 0, 240, 320);
 8002962:	f104 0540 	add.w	r5, r4, #64	@ 0x40
 8002966:	e9c4 3428 	strd	r3, r4, [r4, #160]	@ 0xa0
 800296a:	4b28      	ldr	r3, [pc, #160]	@ (8002a0c <_ZN15Screen1ViewBaseC1Ev+0xec>)
          cachedAbsX(0),
 800296c:	6622      	str	r2, [r4, #96]	@ 0x60
        setXY(x, y);
 800296e:	4611      	mov	r1, r2
 8002970:	4628      	mov	r0, r5
 8002972:	e9c4 2212 	strd	r2, r2, [r4, #72]	@ 0x48
          parent(0),
 8002976:	e9c4 2214 	strd	r2, r2, [r4, #80]	@ 0x50
          nextDrawChainElement(0),
 800297a:	e9c4 2216 	strd	r2, r2, [r4, #88]	@ 0x58
 800297e:	e9c4 221c 	strd	r2, r2, [r4, #112]	@ 0x70
 8002982:	e9c4 221e 	strd	r2, r2, [r4, #120]	@ 0x78
          nextSibling(0),
 8002986:	e9c4 2220 	strd	r2, r2, [r4, #128]	@ 0x80
          cachedAbsX(0),
 800298a:	e9c4 2222 	strd	r2, r2, [r4, #136]	@ 0x88
        : color(col)
 800298e:	66a2      	str	r2, [r4, #104]	@ 0x68
class AbstractButton : public Widget
{
public:
    /** Sets this Widget touchable so the user can interact with buttons. */
    AbstractButton()
        : Widget(), action(), pressed(false)
 8002990:	f8c4 2094 	str.w	r2, [r4, #148]	@ 0x94
 8002994:	f884 2098 	strb.w	r2, [r4, #152]	@ 0x98
 8002998:	e9c4 322a 	strd	r3, r2, [r4, #168]	@ 0xa8
        setXY(x, y);
 800299c:	f7ff ffb3 	bl	8002906 <_ZN8touchgfx8Drawable5setXYEss>
        setWidth(width);
 80029a0:	4628      	mov	r0, r5
 80029a2:	21f0      	movs	r1, #240	@ 0xf0
 80029a4:	f7ff ff46 	bl	8002834 <_ZN8touchgfx8Drawable8setWidthEs>
        setHeight(height);
 80029a8:	4628      	mov	r0, r5
 80029aa:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 80029ae:	f7ff ff43 	bl	8002838 <_ZN8touchgfx8Drawable9setHeightEs>
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 80029b2:	1d27      	adds	r7, r4, #4
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
    {
        color = newColor;
 80029b4:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
    buttonCallback(this, &Screen1ViewBase::buttonCallbackHandler)
 80029b8:	f104 066c 	add.w	r6, r4, #108	@ 0x6c
 80029bc:	66a3      	str	r3, [r4, #104]	@ 0x68
 80029be:	4629      	mov	r1, r5
 80029c0:	4638      	mov	r0, r7
 80029c2:	f005 fdbb 	bl	800853c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    button1.setXY(20, 199);
 80029c6:	4630      	mov	r0, r6
 80029c8:	22c7      	movs	r2, #199	@ 0xc7
 80029ca:	2114      	movs	r1, #20
 80029cc:	f7ff ff9b 	bl	8002906 <_ZN8touchgfx8Drawable5setXYEss>
 80029d0:	2303      	movs	r3, #3
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_START_BUTTON_VECTOR_ID), touchgfx::Bitmap(BITMAP_START_BUTTON_VECTOR_ID));
 80029d2:	aa01      	add	r2, sp, #4
 80029d4:	4669      	mov	r1, sp
 80029d6:	4630      	mov	r0, r6
 80029d8:	f8ad 3000 	strh.w	r3, [sp]
 80029dc:	f8ad 3004 	strh.w	r3, [sp, #4]
 80029e0:	f007 fb54 	bl	800a08c <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    button1.setAction(buttonCallback);
 80029e4:	f104 03a0 	add.w	r3, r4, #160	@ 0xa0
 80029e8:	4638      	mov	r0, r7
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
    {
        action = &callback;
 80029ea:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
 80029ee:	4631      	mov	r1, r6
 80029f0:	f005 fda4 	bl	800853c <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 80029f4:	4620      	mov	r0, r4
 80029f6:	b003      	add	sp, #12
 80029f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029fa:	bf00      	nop
 80029fc:	080141ac 	.word	0x080141ac
 8002a00:	08014680 	.word	0x08014680
 8002a04:	080146e8 	.word	0x080146e8
 8002a08:	08014194 	.word	0x08014194
 8002a0c:	080028f1 	.word	0x080028f1

08002a10 <_ZN8touchgfx9Container13getFirstChildEv>:
     * @see getNextSibling
     */
    virtual Drawable* getFirstChild()
    {
        return firstChild;
    }
 8002a10:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8002a12:	4770      	bx	lr

08002a14 <_ZN8touchgfx8TextArea8setWidthEs>:
    TextArea()
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
    {
    }

    virtual void setWidth(int16_t width)
 8002a14:	b530      	push	{r4, r5, lr}
    {
        Widget::setWidth(width);
        boundingArea = calculateBoundingArea();
 8002a16:	6803      	ldr	r3, [r0, #0]
    virtual void setWidth(int16_t width)
 8002a18:	b085      	sub	sp, #20
        boundingArea = calculateBoundingArea();
 8002a1a:	466d      	mov	r5, sp
        rect.width = width;
 8002a1c:	8101      	strh	r1, [r0, #8]
 8002a1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a22:	4601      	mov	r1, r0
    virtual void setWidth(int16_t width)
 8002a24:	4604      	mov	r4, r0
        boundingArea = calculateBoundingArea();
 8002a26:	4628      	mov	r0, r5
 8002a28:	4798      	blx	r3
 8002a2a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002a2e:	343c      	adds	r4, #60	@ 0x3c
 8002a30:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 8002a34:	b005      	add	sp, #20
 8002a36:	bd30      	pop	{r4, r5, pc}

08002a38 <_ZN8touchgfx8TextArea9setHeightEs>:

    virtual void setHeight(int16_t height)
 8002a38:	b530      	push	{r4, r5, lr}
    {
        Widget::setHeight(height);
        boundingArea = calculateBoundingArea();
 8002a3a:	6803      	ldr	r3, [r0, #0]
    virtual void setHeight(int16_t height)
 8002a3c:	b085      	sub	sp, #20
        boundingArea = calculateBoundingArea();
 8002a3e:	466d      	mov	r5, sp
        rect.height = height;
 8002a40:	8141      	strh	r1, [r0, #10]
 8002a42:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a46:	4601      	mov	r1, r0
    virtual void setHeight(int16_t height)
 8002a48:	4604      	mov	r4, r0
        boundingArea = calculateBoundingArea();
 8002a4a:	4628      	mov	r0, r5
 8002a4c:	4798      	blx	r3
 8002a4e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002a52:	343c      	adds	r4, #60	@ 0x3c
 8002a54:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 8002a58:	b005      	add	sp, #20
 8002a5a:	bd30      	pop	{r4, r5, pc}

08002a5c <_ZNK8touchgfx8TextArea12getSolidRectEv>:
        : x(0), y(0), width(0), height(0)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	8002      	strh	r2, [r0, #0]
 8002a60:	8042      	strh	r2, [r0, #2]
 8002a62:	8082      	strh	r2, [r0, #4]
 8002a64:	80c2      	strh	r2, [r0, #6]

    virtual Rect getSolidRect() const
    {
        return Rect();
    }
 8002a66:	4770      	bx	lr

08002a68 <_ZN8touchgfx8TextArea8setAlphaEh>:
    /**
     * @copydoc Image::setAlpha
     */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 8002a68:	f880 1036 	strb.w	r1, [r0, #54]	@ 0x36
    }
 8002a6c:	4770      	bx	lr

08002a6e <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     * @param  x         The x coordinate of the TextArea.
     * @param  baselineY The y coordinate of the baseline of the text.
     *
     * @note setTypedText() must be called prior to setting the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 8002a6e:	b570      	push	{r4, r5, r6, lr}
    {
        setX(x);
 8002a70:	6803      	ldr	r3, [r0, #0]
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 8002a72:	4604      	mov	r4, r0
        setX(x);
 8002a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 8002a76:	4615      	mov	r5, r2
        setX(x);
 8002a78:	4798      	blx	r3
        setBaselineY(baselineY);
 8002a7a:	6823      	ldr	r3, [r4, #0]
 8002a7c:	4629      	mov	r1, r5
 8002a7e:	4620      	mov	r0, r4
 8002a80:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
    }
 8002a82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setBaselineY(baselineY);
 8002a86:	4718      	bx	r3

08002a88 <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
     * @see TextAreaWithOneWildcard, TextAreaWithTwoWildcards
     */
    virtual const Unicode::UnicodeChar* getWildcard2() const
    {
        return 0;
    }
 8002a88:	2000      	movs	r0, #0
 8002a8a:	4770      	bx	lr

08002a8c <_ZNK8touchgfx23TextAreaWithOneWildcard12getWildcard1Ev>:
    }

    virtual const Unicode::UnicodeChar* getWildcard1() const
    {
        return wc1;
    }
 8002a8c:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 8002a8e:	4770      	bx	lr

08002a90 <_ZN15Screen2ViewBase15ExitFromScreen2Ev>:
     * Virtual Action Handlers
     */
    virtual void ExitFromScreen2()
    {
        // Override and implement this function in Screen2
    }
 8002a90:	4770      	bx	lr

08002a92 <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEED1Ev>:
 * The position of the icon can be adjusted with setIconXY.
 *
 * @see AbstractButtonContainer
 */
template <class T>
class IconButtonStyle : public T
 8002a92:	4770      	bx	lr

08002a94 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 8002a94:	4770      	bx	lr

08002a96 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8002a96:	4770      	bx	lr

08002a98 <_ZN15Screen2ViewBaseD1Ev>:
}

Screen2ViewBase::~Screen2ViewBase()
{

}
 8002a98:	4770      	bx	lr

08002a9a <_ZN15Screen2ViewBase11setupScreenEv>:

void Screen2ViewBase::setupScreen()
{

}
 8002a9a:	4770      	bx	lr

08002a9c <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8002a9c:	b430      	push	{r4, r5}
        (pobject->*pmemfun)(t1);
 8002a9e:	68c2      	ldr	r2, [r0, #12]
 8002aa0:	6844      	ldr	r4, [r0, #4]
 8002aa2:	1055      	asrs	r5, r2, #1
    virtual void execute(T1 t1)
 8002aa4:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 8002aa6:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8002aaa:	07d2      	lsls	r2, r2, #31
 8002aac:	bf48      	it	mi
 8002aae:	5962      	ldrmi	r2, [r4, r5]
 8002ab0:	689b      	ldr	r3, [r3, #8]
    }
 8002ab2:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun)(t1);
 8002ab4:	bf48      	it	mi
 8002ab6:	58d3      	ldrmi	r3, [r2, r3]
 8002ab8:	4718      	bx	r3

08002aba <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv>:
    virtual bool isValid() const
 8002aba:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun != 0);
 8002abc:	6840      	ldr	r0, [r0, #4]
 8002abe:	b130      	cbz	r0, 8002ace <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x14>
 8002ac0:	689a      	ldr	r2, [r3, #8]
 8002ac2:	b91a      	cbnz	r2, 8002acc <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x12>
 8002ac4:	68d8      	ldr	r0, [r3, #12]
 8002ac6:	f000 0001 	and.w	r0, r0, #1
 8002aca:	4770      	bx	lr
 8002acc:	2001      	movs	r0, #1
    }
 8002ace:	4770      	bx	lr

08002ad0 <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEE18handleAlphaUpdatedEv>:
     *
     * @note The user code must call invalidate() in order to update the display.
     */
    void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 8002ad0:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 8002ad4:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
    /** @copydoc AbstractButtonContainer::handleAlphaUpdated() */
    virtual void handleAlphaUpdated()
    {
        iconImage.setAlpha(T::getAlpha());
        T::handleAlphaUpdated();
    }
 8002ad8:	4770      	bx	lr

08002ada <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv>:
    virtual void handlePressedUpdated()
 8002ada:	4601      	mov	r1, r0
        iconImage.setBitmap(T::getPressed() ? iconPressed : iconReleased);
 8002adc:	3038      	adds	r0, #56	@ 0x38
 8002ade:	f891 302c 	ldrb.w	r3, [r1, #44]	@ 0x2c
 8002ae2:	b113      	cbz	r3, 8002aea <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x10>
 8002ae4:	3136      	adds	r1, #54	@ 0x36
 8002ae6:	f007 bc0a 	b.w	800a2fe <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8002aea:	3134      	adds	r1, #52	@ 0x34
 8002aec:	e7fb      	b.n	8002ae6 <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0xc>

08002aee <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEED0Ev>:
class IconButtonStyle : public T
 8002aee:	b510      	push	{r4, lr}
 8002af0:	2164      	movs	r1, #100	@ 0x64
 8002af2:	4604      	mov	r4, r0
 8002af4:	f00f fa54 	bl	8011fa0 <_ZdlPvj>
 8002af8:	4620      	mov	r0, r4
 8002afa:	bd10      	pop	{r4, pc}

08002afc <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 8002afc:	b510      	push	{r4, lr}
 8002afe:	214c      	movs	r1, #76	@ 0x4c
 8002b00:	4604      	mov	r4, r0
 8002b02:	f00f fa4d 	bl	8011fa0 <_ZdlPvj>
 8002b06:	4620      	mov	r0, r4
 8002b08:	bd10      	pop	{r4, pc}

08002b0a <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8002b0a:	b510      	push	{r4, lr}
 8002b0c:	2110      	movs	r1, #16
 8002b0e:	4604      	mov	r4, r0
 8002b10:	f00f fa46 	bl	8011fa0 <_ZdlPvj>
 8002b14:	4620      	mov	r0, r4
 8002b16:	bd10      	pop	{r4, pc}

08002b18 <_ZN15Screen2ViewBaseD0Ev>:
Screen2ViewBase::~Screen2ViewBase()
 8002b18:	b510      	push	{r4, lr}
}
 8002b1a:	f44f 7175 	mov.w	r1, #980	@ 0x3d4
Screen2ViewBase::~Screen2ViewBase()
 8002b1e:	4604      	mov	r4, r0
}
 8002b20:	f00f fa3e 	bl	8011fa0 <_ZdlPvj>
 8002b24:	4620      	mov	r0, r4
 8002b26:	bd10      	pop	{r4, pc}

08002b28 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>:
    virtual void invalidateContent() const
 8002b28:	b508      	push	{r3, lr}
        Widget::invalidateContent();
 8002b2a:	f7ff fed2 	bl	80028d2 <_ZNK8touchgfx8Drawable17invalidateContentEv>
    }
 8002b2e:	bd08      	pop	{r3, pc}

08002b30 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv>:
    /**
     * Executes the previously set action.
     *
     * @see setAction
     */
    virtual void executeAction()
 8002b30:	b510      	push	{r4, lr}
 8002b32:	4604      	mov	r4, r0
    {
        if (action && action->isValid())
 8002b34:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8002b36:	b150      	cbz	r0, 8002b4e <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x1e>
 8002b38:	6803      	ldr	r3, [r0, #0]
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	4798      	blx	r3
 8002b3e:	b130      	cbz	r0, 8002b4e <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x1e>
        {
            action->execute(*this);
 8002b40:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8002b42:	6803      	ldr	r3, [r0, #0]
 8002b44:	4621      	mov	r1, r4
 8002b46:	689b      	ldr	r3, [r3, #8]
        }
    }
 8002b48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            action->execute(*this);
 8002b4c:	4718      	bx	r3
    }
 8002b4e:	bd10      	pop	{r4, pc}

08002b50 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE>:
     *
     * @return The click type of this event.
     */
    ClickEventType getType() const
    {
        return clickEventType;
 8002b50:	790b      	ldrb	r3, [r1, #4]
     *
     * @param  event The click event.
     *
     * @see setAction, setPressed, getPressed
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8002b52:	b570      	push	{r4, r5, r6, lr}
        return pressed;
 8002b54:	f890 602c 	ldrb.w	r6, [r0, #44]	@ 0x2c
 8002b58:	4604      	mov	r4, r0
 8002b5a:	460d      	mov	r5, r1
    {
        bool wasPressed = getPressed();
        bool newPressedValue = (event.getType() == ClickEvent::PRESSED);
        if ((newPressedValue && !wasPressed) || (!newPressedValue && wasPressed))
 8002b5c:	b90b      	cbnz	r3, 8002b62 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x12>
 8002b5e:	b116      	cbz	r6, 8002b66 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x16>
        }
        if (wasPressed && (event.getType() == ClickEvent::RELEASED))
        {
            executeAction();
        }
    }
 8002b60:	bd70      	pop	{r4, r5, r6, pc}
        if ((newPressedValue && !wasPressed) || (!newPressedValue && wasPressed))
 8002b62:	2e00      	cmp	r6, #0
 8002b64:	d0fc      	beq.n	8002b60 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x10>
        bool newPressedValue = (event.getType() == ClickEvent::PRESSED);
 8002b66:	fab3 f383 	clz	r3, r3
 8002b6a:	095b      	lsrs	r3, r3, #5
 8002b6c:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
        handlePressedUpdated();
 8002b70:	6823      	ldr	r3, [r4, #0]
 8002b72:	4620      	mov	r0, r4
 8002b74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b78:	4798      	blx	r3
            invalidate();
 8002b7a:	6823      	ldr	r3, [r4, #0]
 8002b7c:	4620      	mov	r0, r4
 8002b7e:	695b      	ldr	r3, [r3, #20]
 8002b80:	4798      	blx	r3
        if (wasPressed && (event.getType() == ClickEvent::RELEASED))
 8002b82:	2e00      	cmp	r6, #0
 8002b84:	d0ec      	beq.n	8002b60 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x10>
 8002b86:	792b      	ldrb	r3, [r5, #4]
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d1e9      	bne.n	8002b60 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x10>
            executeAction();
 8002b8c:	6823      	ldr	r3, [r4, #0]
 8002b8e:	4620      	mov	r0, r4
 8002b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
    }
 8002b94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            executeAction();
 8002b98:	4718      	bx	r3
	...

08002b9c <_ZN8touchgfx8TextArea12setBaselineYEs>:
        setY(baselineY - getTypedText().getFont()->getBaseline());
 8002b9c:	6803      	ldr	r3, [r0, #0]
    virtual void setBaselineY(int16_t baselineY)
 8002b9e:	b570      	push	{r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
 8002ba0:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8002ba2:	4b12      	ldr	r3, [pc, #72]	@ (8002bec <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
    virtual void setBaselineY(int16_t baselineY)
 8002ba6:	4604      	mov	r4, r0
        setY(baselineY - getTypedText().getFont()->getBaseline());
 8002ba8:	b28d      	uxth	r5, r1
 8002baa:	b92b      	cbnz	r3, 8002bb8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x1c>
 8002bac:	4b10      	ldr	r3, [pc, #64]	@ (8002bf0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 8002bae:	4a11      	ldr	r2, [pc, #68]	@ (8002bf4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 8002bb0:	216c      	movs	r1, #108	@ 0x6c
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8002bb2:	4811      	ldr	r0, [pc, #68]	@ (8002bf8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 8002bb4:	f00f fa22 	bl	8011ffc <__assert_func>
        return typedTextId < numberOfTypedTexts;
 8002bb8:	4910      	ldr	r1, [pc, #64]	@ (8002bfc <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 8002bba:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8002bbc:	8809      	ldrh	r1, [r1, #0]
 8002bbe:	4291      	cmp	r1, r2
 8002bc0:	d803      	bhi.n	8002bca <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 8002bc2:	4b0f      	ldr	r3, [pc, #60]	@ (8002c00 <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 8002bc4:	4a0b      	ldr	r2, [pc, #44]	@ (8002bf4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 8002bc6:	216d      	movs	r1, #109	@ 0x6d
 8002bc8:	e7f3      	b.n	8002bb2 <_ZN8touchgfx8TextArea12setBaselineYEs+0x16>
        return fonts[typedTexts[typedTextId].fontIdx];
 8002bca:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8002bce:	4b0d      	ldr	r3, [pc, #52]	@ (8002c04 <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8002bd6:	6803      	ldr	r3, [r0, #0]
 8002bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bda:	4798      	blx	r3
 8002bdc:	1a29      	subs	r1, r5, r0
 8002bde:	4633      	mov	r3, r6
 8002be0:	4620      	mov	r0, r4
 8002be2:	b209      	sxth	r1, r1
    }
 8002be4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
 8002be8:	4718      	bx	r3
 8002bea:	bf00      	nop
 8002bec:	20012688 	.word	0x20012688
 8002bf0:	08013975 	.word	0x08013975
 8002bf4:	080139b7 	.word	0x080139b7
 8002bf8:	080139f2 	.word	0x080139f2
 8002bfc:	2001268c 	.word	0x2001268c
 8002c00:	08013a39 	.word	0x08013a39
 8002c04:	20012690 	.word	0x20012690

08002c08 <_ZN15Screen2ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE>:

void Screen2ViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
    if (&src == &flexButton1)
 8002c08:	f500 73ba 	add.w	r3, r0, #372	@ 0x174
 8002c0c:	428b      	cmp	r3, r1
{
 8002c0e:	b510      	push	{r4, lr}
 8002c10:	4604      	mov	r4, r0
    if (&src == &flexButton1)
 8002c12:	d109      	bne.n	8002c28 <_ZN15Screen2ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x20>

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8002c14:	f009 f8d4 	bl	800bdc0 <_ZN8touchgfx11Application11getInstanceEv>
    {
        //Interaction1
        //When flexButton1 clicked change screen to Screen1
        //Go to Screen1 with screen transition towards East
        application().gotoScreen1ScreenWipeTransitionEast();
 8002c18:	f7ff fd80 	bl	800271c <_ZN23FrontendApplicationBase35gotoScreen1ScreenWipeTransitionEastEv>
    
        //Interaction2
        //When Interaction1 completed call virtual function
        //Call ExitFromScreen2
        ExitFromScreen2();
 8002c1c:	6823      	ldr	r3, [r4, #0]
 8002c1e:	4620      	mov	r0, r4
 8002c20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
    }
}
 8002c22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        ExitFromScreen2();
 8002c26:	4718      	bx	r3
}
 8002c28:	bd10      	pop	{r4, pc}

08002c2a <_ZNK8touchgfx24TextAreaWithWildcardBase21calculateBoundingAreaEv>:

        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f04f 31ff 	mov.w	r1, #4294967295
 8002c30:	e9c0 2100 	strd	r2, r1, [r0]
              text(0)
 8002c34:	6082      	str	r2, [r0, #8]
    }
 8002c36:	4770      	bx	lr

08002c38 <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEE14setIconBitmapsERKNS_6BitmapES5_>:
        iconReleased = newIconReleased;
 8002c38:	880b      	ldrh	r3, [r1, #0]
    virtual void setIconBitmaps(const Bitmap& newIconReleased, const Bitmap& newIconPressed)
 8002c3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        iconReleased = newIconReleased;
 8002c3e:	8683      	strh	r3, [r0, #52]	@ 0x34
        iconPressed = newIconPressed;
 8002c40:	8813      	ldrh	r3, [r2, #0]
        iconImage.setXY((T::getWidth() / 2) - (newIconPressed.getWidth() / 2), (T::getHeight() / 2) - (newIconPressed.getHeight() / 2));
 8002c42:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
        iconPressed = newIconPressed;
 8002c46:	86c3      	strh	r3, [r0, #54]	@ 0x36
    virtual void setIconBitmaps(const Bitmap& newIconReleased, const Bitmap& newIconPressed)
 8002c48:	4604      	mov	r4, r0
        iconImage.setXY((T::getWidth() / 2) - (newIconPressed.getWidth() / 2), (T::getHeight() / 2) - (newIconPressed.getHeight() / 2));
 8002c4a:	4610      	mov	r0, r2
    virtual void setIconBitmaps(const Bitmap& newIconReleased, const Bitmap& newIconPressed)
 8002c4c:	4690      	mov	r8, r2
        iconImage.setXY((T::getWidth() / 2) - (newIconPressed.getWidth() / 2), (T::getHeight() / 2) - (newIconPressed.getHeight() / 2));
 8002c4e:	f00c fad3 	bl	800f1f8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8002c52:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8002c56:	4607      	mov	r7, r0
 8002c58:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8002c5c:	4640      	mov	r0, r8
 8002c5e:	f3c3 064f 	ubfx	r6, r3, #1, #16
 8002c62:	f00c fafd 	bl	800f260 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8002c66:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002c6a:	f3c5 054f 	ubfx	r5, r5, #1, #16
 8002c6e:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8002c72:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 8002c76:	eba6 0260 	sub.w	r2, r6, r0, asr #1
 8002c7a:	eba5 0167 	sub.w	r1, r5, r7, asr #1
 8002c7e:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8002c82:	b212      	sxth	r2, r2
 8002c84:	b209      	sxth	r1, r1
 8002c86:	f7ff fe3e 	bl	8002906 <_ZN8touchgfx8Drawable5setXYEss>
        handlePressedUpdated();
 8002c8a:	6823      	ldr	r3, [r4, #0]
 8002c8c:	4620      	mov	r0, r4
 8002c8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
    }
 8002c92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        handlePressedUpdated();
 8002c96:	4718      	bx	r3

08002c98 <_ZN8touchgfx8Drawable11setPositionEssss>:
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8002c98:	b570      	push	{r4, r5, r6, lr}
 8002c9a:	4604      	mov	r4, r0
 8002c9c:	461d      	mov	r5, r3
 8002c9e:	f9bd 6010 	ldrsh.w	r6, [sp, #16]
        setXY(x, y);
 8002ca2:	f7ff fe30 	bl	8002906 <_ZN8touchgfx8Drawable5setXYEss>
        setWidth(width);
 8002ca6:	6823      	ldr	r3, [r4, #0]
 8002ca8:	4629      	mov	r1, r5
 8002caa:	4620      	mov	r0, r4
 8002cac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cae:	4798      	blx	r3
        setHeight(height);
 8002cb0:	6823      	ldr	r3, [r4, #0]
 8002cb2:	4631      	mov	r1, r6
 8002cb4:	4620      	mov	r0, r4
 8002cb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    }
 8002cb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setHeight(height);
 8002cbc:	4718      	bx	r3
	...

08002cc0 <_ZN8touchgfx6WidgetC1Ev>:
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8002cc6:	e9c0 2203 	strd	r2, r2, [r0, #12]
          nextSibling(0),
 8002cca:	e9c0 2205 	strd	r2, r2, [r0, #20]
          cachedAbsX(0),
 8002cce:	e9c0 2207 	strd	r2, r2, [r0, #28]
          touchable(false),
 8002cd2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002cd6:	8482      	strh	r2, [r0, #36]	@ 0x24
class Widget : public Drawable
 8002cd8:	4a01      	ldr	r2, [pc, #4]	@ (8002ce0 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 8002cda:	6002      	str	r2, [r0, #0]
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop
 8002ce0:	080141e0 	.word	0x080141e0

08002ce4 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
    Image(const Bitmap& bmp = Bitmap())
 8002ce4:	b538      	push	{r3, r4, r5, lr}
        : Widget(), bitmap(bmp), alpha(255)
 8002ce6:	2226      	movs	r2, #38	@ 0x26
    Image(const Bitmap& bmp = Bitmap())
 8002ce8:	4604      	mov	r4, r0
 8002cea:	460d      	mov	r5, r1
        : Widget(), bitmap(bmp), alpha(255)
 8002cec:	2100      	movs	r1, #0
 8002cee:	f00f fb8c 	bl	801240a <memset>
 8002cf2:	4620      	mov	r0, r4
 8002cf4:	f7ff ffe4 	bl	8002cc0 <_ZN8touchgfx6WidgetC1Ev>
 8002cf8:	4b06      	ldr	r3, [pc, #24]	@ (8002d14 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x30>)
 8002cfa:	6023      	str	r3, [r4, #0]
 8002cfc:	882b      	ldrh	r3, [r5, #0]
 8002cfe:	84e3      	strh	r3, [r4, #38]	@ 0x26
 8002d00:	23ff      	movs	r3, #255	@ 0xff
        Image::setBitmap(bmp);
 8002d02:	4620      	mov	r0, r4
        : Widget(), bitmap(bmp), alpha(255)
 8002d04:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
        Image::setBitmap(bmp);
 8002d08:	4629      	mov	r1, r5
 8002d0a:	f007 faf8 	bl	800a2fe <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 8002d0e:	4620      	mov	r0, r4
 8002d10:	bd38      	pop	{r3, r4, r5, pc}
 8002d12:	bf00      	nop
 8002d14:	0801475c 	.word	0x0801475c

08002d18 <_ZN8touchgfx8TextAreaC1Ev>:
    TextArea()
 8002d18:	b510      	push	{r4, lr}
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8002d1a:	2226      	movs	r2, #38	@ 0x26
    TextArea()
 8002d1c:	4604      	mov	r4, r0
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8002d1e:	2100      	movs	r1, #0
 8002d20:	f00f fb73 	bl	801240a <memset>
 8002d24:	4620      	mov	r0, r4
 8002d26:	f7ff ffcb 	bl	8002cc0 <_ZN8touchgfx6WidgetC1Ev>
 8002d2a:	4b0a      	ldr	r3, [pc, #40]	@ (8002d54 <_ZN8touchgfx8TextAreaC1Ev+0x3c>)
 8002d2c:	6023      	str	r3, [r4, #0]
        : typedTextId(id)
 8002d2e:	4b0a      	ldr	r3, [pc, #40]	@ (8002d58 <_ZN8touchgfx8TextAreaC1Ev+0x40>)
 8002d30:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002d32:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002d36:	85a3      	strh	r3, [r4, #44]	@ 0x2c
 8002d38:	f44f 027f 	mov.w	r2, #16711680	@ 0xff0000
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	e9c4 320c 	strd	r3, r2, [r4, #48]	@ 0x30
 8002d42:	8723      	strh	r3, [r4, #56]	@ 0x38
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8002d44:	f04f 32ff 	mov.w	r2, #4294967295
              text(0)
 8002d48:	e9c4 2310 	strd	r2, r3, [r4, #64]	@ 0x40
 8002d4c:	63e3      	str	r3, [r4, #60]	@ 0x3c
    }
 8002d4e:	4620      	mov	r0, r4
 8002d50:	bd10      	pop	{r4, pc}
 8002d52:	bf00      	nop
 8002d54:	080145f0 	.word	0x080145f0
 8002d58:	08014044 	.word	0x08014044

08002d5c <_ZN15Screen2ViewBaseC1Ev>:
Screen2ViewBase::Screen2ViewBase() :
 8002d5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d60:	4604      	mov	r4, r0
 8002d62:	b095      	sub	sp, #84	@ 0x54
    flexButtonCallback(this, &Screen2ViewBase::flexButtonCallbackHandler)
 8002d64:	4626      	mov	r6, r4
 8002d66:	2500      	movs	r5, #0
 8002d68:	f00a fcac 	bl	800d6c4 <_ZN8touchgfx6ScreenC1Ev>
 8002d6c:	4bd1      	ldr	r3, [pc, #836]	@ (80030b4 <_ZN15Screen2ViewBaseC1Ev+0x358>)
 8002d6e:	63e5      	str	r5, [r4, #60]	@ 0x3c
 8002d70:	f846 3b40 	str.w	r3, [r6], #64
        : Widget(), alpha(255), color(0)
 8002d74:	2226      	movs	r2, #38	@ 0x26
 8002d76:	4629      	mov	r1, r5
 8002d78:	4630      	mov	r0, r6
 8002d7a:	f00f fb46 	bl	801240a <memset>
 8002d7e:	4630      	mov	r0, r6
 8002d80:	f7ff ff9e 	bl	8002cc0 <_ZN8touchgfx6WidgetC1Ev>
 8002d84:	4bcc      	ldr	r3, [pc, #816]	@ (80030b8 <_ZN15Screen2ViewBaseC1Ev+0x35c>)
 8002d86:	6423      	str	r3, [r4, #64]	@ 0x40
 8002d88:	23ff      	movs	r3, #255	@ 0xff
 8002d8a:	f884 3066 	strb.w	r3, [r4, #102]	@ 0x66
 8002d8e:	f104 036c 	add.w	r3, r4, #108	@ 0x6c
 8002d92:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 8002d96:	4618      	mov	r0, r3
 8002d98:	f104 0a98 	add.w	sl, r4, #152	@ 0x98
 8002d9c:	a912      	add	r1, sp, #72	@ 0x48
        : color(col)
 8002d9e:	66a5      	str	r5, [r4, #104]	@ 0x68
 8002da0:	9307      	str	r3, [sp, #28]
 8002da2:	f104 09c4 	add.w	r9, r4, #196	@ 0xc4
 8002da6:	f8ad 7048 	strh.w	r7, [sp, #72]	@ 0x48
 8002daa:	f7ff ff9b 	bl	8002ce4 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8002dae:	a912      	add	r1, sp, #72	@ 0x48
 8002db0:	4650      	mov	r0, sl
 8002db2:	f104 08f0 	add.w	r8, r4, #240	@ 0xf0
 8002db6:	f8ad 7048 	strh.w	r7, [sp, #72]	@ 0x48
 8002dba:	f7ff ff93 	bl	8002ce4 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8002dbe:	a912      	add	r1, sp, #72	@ 0x48
 8002dc0:	4648      	mov	r0, r9
 8002dc2:	f8ad 7048 	strh.w	r7, [sp, #72]	@ 0x48
 8002dc6:	f7ff ff8d 	bl	8002ce4 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8002dca:	a912      	add	r1, sp, #72	@ 0x48
 8002dcc:	4640      	mov	r0, r8
 8002dce:	f8ad 7048 	strh.w	r7, [sp, #72]	@ 0x48
 8002dd2:	f7ff ff87 	bl	8002ce4 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8002dd6:	f504 738e 	add.w	r3, r4, #284	@ 0x11c
 8002dda:	a912      	add	r1, sp, #72	@ 0x48
 8002ddc:	4618      	mov	r0, r3
 8002dde:	9308      	str	r3, [sp, #32]
 8002de0:	f8ad 7048 	strh.w	r7, [sp, #72]	@ 0x48
 8002de4:	f7ff ff7e 	bl	8002ce4 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8002de8:	f504 73a4 	add.w	r3, r4, #328	@ 0x148
 8002dec:	a912      	add	r1, sp, #72	@ 0x48
 8002dee:	4618      	mov	r0, r3
 8002df0:	9309      	str	r3, [sp, #36]	@ 0x24
 8002df2:	f8ad 7048 	strh.w	r7, [sp, #72]	@ 0x48
 8002df6:	f7ff ff75 	bl	8002ce4 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8002dfa:	f504 73ba 	add.w	r3, r4, #372	@ 0x174
 8002dfe:	930a      	str	r3, [sp, #40]	@ 0x28
        : pressed(false), alpha(255), action(0)
 8002e00:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 8002e04:	f8a4 31a0 	strh.w	r3, [r4, #416]	@ 0x1a0
        touchable = touch;
 8002e08:	f240 1301 	movw	r3, #257	@ 0x101
 8002e0c:	f04f 32ff 	mov.w	r2, #4294967295
        : T()
 8002e10:	f504 7bd6 	add.w	fp, r4, #428	@ 0x1ac
 8002e14:	f8a4 3198 	strh.w	r3, [r4, #408]	@ 0x198
 8002e18:	4ba8      	ldr	r3, [pc, #672]	@ (80030bc <_ZN15Screen2ViewBaseC1Ev+0x360>)
 8002e1a:	f8c4 21a8 	str.w	r2, [r4, #424]	@ 0x1a8
 8002e1e:	f8c4 3174 	str.w	r3, [r4, #372]	@ 0x174
 8002e22:	a912      	add	r1, sp, #72	@ 0x48
 8002e24:	4658      	mov	r0, fp
        : x(0), y(0), width(0), height(0)
 8002e26:	e9c4 555e 	strd	r5, r5, [r4, #376]	@ 0x178
 8002e2a:	e9c4 5560 	strd	r5, r5, [r4, #384]	@ 0x180
          nextSibling(0),
 8002e2e:	e9c4 5562 	strd	r5, r5, [r4, #392]	@ 0x188
          cachedAbsX(0),
 8002e32:	e9c4 5564 	strd	r5, r5, [r4, #400]	@ 0x190
          firstChild(0)
 8002e36:	f8c4 519c 	str.w	r5, [r4, #412]	@ 0x19c
 8002e3a:	f8c4 51a4 	str.w	r5, [r4, #420]	@ 0x1a4
 8002e3e:	f8ad 2048 	strh.w	r2, [sp, #72]	@ 0x48
 8002e42:	f7ff ff4f 	bl	8002ce4 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
        T::add(iconImage);
 8002e46:	4659      	mov	r1, fp
 8002e48:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8002e4a:	f005 fb77 	bl	800853c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8002e4e:	f504 73ec 	add.w	r3, r4, #472	@ 0x1d8
 8002e52:	a912      	add	r1, sp, #72	@ 0x48
 8002e54:	f504 7b01 	add.w	fp, r4, #516	@ 0x204
 8002e58:	4618      	mov	r0, r3
 8002e5a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002e5c:	f8ad 7048 	strh.w	r7, [sp, #72]	@ 0x48
 8002e60:	f7ff ff40 	bl	8002ce4 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8002e64:	4658      	mov	r0, fp
 8002e66:	f7ff ff57 	bl	8002d18 <_ZN8touchgfx8TextAreaC1Ev>
        : TextArea()
 8002e6a:	f504 7313 	add.w	r3, r4, #588	@ 0x24c
 8002e6e:	4618      	mov	r0, r3
        : TextAreaWithWildcardBase(), wc1(0)
 8002e70:	4f93      	ldr	r7, [pc, #588]	@ (80030c0 <_ZN15Screen2ViewBaseC1Ev+0x364>)
        : TextArea()
 8002e72:	9303      	str	r3, [sp, #12]
 8002e74:	f7ff ff50 	bl	8002d18 <_ZN8touchgfx8TextAreaC1Ev>
 8002e78:	f504 7326 	add.w	r3, r4, #664	@ 0x298
        : TextAreaWithWildcardBase(), wc1(0)
 8002e7c:	f8c4 724c 	str.w	r7, [r4, #588]	@ 0x24c
        : TextArea()
 8002e80:	4618      	mov	r0, r3
        : TextAreaWithWildcardBase(), wc1(0)
 8002e82:	f8c4 5294 	str.w	r5, [r4, #660]	@ 0x294
        : TextArea()
 8002e86:	9304      	str	r3, [sp, #16]
 8002e88:	f7ff ff46 	bl	8002d18 <_ZN8touchgfx8TextAreaC1Ev>
 8002e8c:	f504 7339 	add.w	r3, r4, #740	@ 0x2e4
        : TextAreaWithWildcardBase(), wc1(0)
 8002e90:	f8c4 7298 	str.w	r7, [r4, #664]	@ 0x298
 8002e94:	4618      	mov	r0, r3
 8002e96:	f8c4 52e0 	str.w	r5, [r4, #736]	@ 0x2e0
 8002e9a:	9305      	str	r3, [sp, #20]
 8002e9c:	f7ff ff3c 	bl	8002d18 <_ZN8touchgfx8TextAreaC1Ev>
 8002ea0:	f504 734b 	add.w	r3, r4, #812	@ 0x32c
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	9306      	str	r3, [sp, #24]
 8002ea8:	f7ff ff36 	bl	8002d18 <_ZN8touchgfx8TextAreaC1Ev>
        : pobject(pObject), pmemfun(pmemfun_1)
 8002eac:	4b85      	ldr	r3, [pc, #532]	@ (80030c4 <_ZN15Screen2ViewBaseC1Ev+0x368>)
 8002eae:	e9c4 34f1 	strd	r3, r4, [r4, #964]	@ 0x3c4
 8002eb2:	4b85      	ldr	r3, [pc, #532]	@ (80030c8 <_ZN15Screen2ViewBaseC1Ev+0x36c>)
 8002eb4:	e9c4 35f3 	strd	r3, r5, [r4, #972]	@ 0x3cc
    __background.setPosition(0, 0, 240, 320);
 8002eb8:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8002ebc:	462a      	mov	r2, r5
 8002ebe:	4630      	mov	r0, r6
 8002ec0:	9300      	str	r3, [sp, #0]
 8002ec2:	4629      	mov	r1, r5
 8002ec4:	23f0      	movs	r3, #240	@ 0xf0
 8002ec6:	1d27      	adds	r7, r4, #4
 8002ec8:	f7ff fee6 	bl	8002c98 <_ZN8touchgfx8Drawable11setPositionEssss>
        color = newColor;
 8002ecc:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 8002ed0:	66a3      	str	r3, [r4, #104]	@ 0x68
 8002ed2:	4631      	mov	r1, r6
 8002ed4:	4638      	mov	r0, r7
 8002ed6:	f005 fb31 	bl	800853c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    track4.setXY(0, 0);
 8002eda:	462a      	mov	r2, r5
 8002edc:	9807      	ldr	r0, [sp, #28]
 8002ede:	4629      	mov	r1, r5
 8002ee0:	f7ff fd11 	bl	8002906 <_ZN8touchgfx8Drawable5setXYEss>
 8002ee4:	2308      	movs	r3, #8
    track4.setBitmap(touchgfx::Bitmap(BITMAP_TRACK4_ID));
 8002ee6:	9807      	ldr	r0, [sp, #28]
 8002ee8:	f8ad 3048 	strh.w	r3, [sp, #72]	@ 0x48
 8002eec:	a912      	add	r1, sp, #72	@ 0x48
 8002eee:	f007 fa06 	bl	800a2fe <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8002ef2:	9907      	ldr	r1, [sp, #28]
        visible = vis;
 8002ef4:	f884 5091 	strb.w	r5, [r4, #145]	@ 0x91
 8002ef8:	4638      	mov	r0, r7
 8002efa:	f005 fb1f 	bl	800853c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    track3.setXY(0, 0);
 8002efe:	462a      	mov	r2, r5
 8002f00:	4650      	mov	r0, sl
 8002f02:	4629      	mov	r1, r5
 8002f04:	f7ff fcff 	bl	8002906 <_ZN8touchgfx8Drawable5setXYEss>
 8002f08:	2307      	movs	r3, #7
    track3.setBitmap(touchgfx::Bitmap(BITMAP_TRACK3_ID));
 8002f0a:	4650      	mov	r0, sl
 8002f0c:	a912      	add	r1, sp, #72	@ 0x48
 8002f0e:	f8ad 3048 	strh.w	r3, [sp, #72]	@ 0x48
 8002f12:	f007 f9f4 	bl	800a2fe <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8002f16:	4651      	mov	r1, sl
 8002f18:	4638      	mov	r0, r7
 8002f1a:	f884 50bd 	strb.w	r5, [r4, #189]	@ 0xbd
 8002f1e:	f005 fb0d 	bl	800853c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    track2.setXY(0, 0);
 8002f22:	462a      	mov	r2, r5
 8002f24:	4648      	mov	r0, r9
 8002f26:	4629      	mov	r1, r5
 8002f28:	f7ff fced 	bl	8002906 <_ZN8touchgfx8Drawable5setXYEss>
 8002f2c:	2306      	movs	r3, #6
    track2.setBitmap(touchgfx::Bitmap(BITMAP_TRACK2_ID));
 8002f2e:	4648      	mov	r0, r9
 8002f30:	a912      	add	r1, sp, #72	@ 0x48
 8002f32:	f8ad 3048 	strh.w	r3, [sp, #72]	@ 0x48
 8002f36:	f007 f9e2 	bl	800a2fe <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8002f3a:	4649      	mov	r1, r9
 8002f3c:	4638      	mov	r0, r7
 8002f3e:	f884 50e9 	strb.w	r5, [r4, #233]	@ 0xe9
 8002f42:	f005 fafb 	bl	800853c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    track1.setXY(0, 0);
 8002f46:	462a      	mov	r2, r5
 8002f48:	4640      	mov	r0, r8
 8002f4a:	4629      	mov	r1, r5
 8002f4c:	f7ff fcdb 	bl	8002906 <_ZN8touchgfx8Drawable5setXYEss>
 8002f50:	f04f 0905 	mov.w	r9, #5
    track1.setBitmap(touchgfx::Bitmap(BITMAP_TRACK1_ID));
 8002f54:	4640      	mov	r0, r8
 8002f56:	a912      	add	r1, sp, #72	@ 0x48
 8002f58:	f8ad 9048 	strh.w	r9, [sp, #72]	@ 0x48
 8002f5c:	f007 f9cf 	bl	800a2fe <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8002f60:	4641      	mov	r1, r8
 8002f62:	4638      	mov	r0, r7
 8002f64:	f884 5115 	strb.w	r5, [r4, #277]	@ 0x115
 8002f68:	f005 fae8 	bl	800853c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    track0.setXY(0, 0);
 8002f6c:	462a      	mov	r2, r5
 8002f6e:	9808      	ldr	r0, [sp, #32]
 8002f70:	f8df 8170 	ldr.w	r8, [pc, #368]	@ 80030e4 <_ZN15Screen2ViewBaseC1Ev+0x388>
 8002f74:	4629      	mov	r1, r5
 8002f76:	f7ff fcc6 	bl	8002906 <_ZN8touchgfx8Drawable5setXYEss>
 8002f7a:	f04f 0304 	mov.w	r3, #4
    track0.setBitmap(touchgfx::Bitmap(BITMAP_TRACK0_ID));
 8002f7e:	9808      	ldr	r0, [sp, #32]
 8002f80:	f8ad 3048 	strh.w	r3, [sp, #72]	@ 0x48
 8002f84:	a912      	add	r1, sp, #72	@ 0x48
 8002f86:	f007 f9ba 	bl	800a2fe <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8002f8a:	9908      	ldr	r1, [sp, #32]
 8002f8c:	4638      	mov	r0, r7
 8002f8e:	f005 fad5 	bl	800853c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    image1.setXY(95, 160);
 8002f92:	22a0      	movs	r2, #160	@ 0xa0
 8002f94:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002f96:	215f      	movs	r1, #95	@ 0x5f
 8002f98:	f7ff fcb5 	bl	8002906 <_ZN8touchgfx8Drawable5setXYEss>
 8002f9c:	f04f 0302 	mov.w	r3, #2
    image1.setBitmap(touchgfx::Bitmap(BITMAP_REDCAR_ID));
 8002fa0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002fa2:	f8ad 3048 	strh.w	r3, [sp, #72]	@ 0x48
 8002fa6:	a912      	add	r1, sp, #72	@ 0x48
 8002fa8:	f007 f9a9 	bl	800a2fe <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8002fac:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8002fae:	4638      	mov	r0, r7
 8002fb0:	f005 fac4 	bl	800853c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    flexButton1.setIconBitmaps(Bitmap(BITMAP_BLUE_ICONS_HOME_32_ID), Bitmap(BITMAP_BLUE_ICONS_HOME_32_ID));
 8002fb4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8002fb6:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 8002fba:	aa12      	add	r2, sp, #72	@ 0x48
 8002fbc:	a911      	add	r1, sp, #68	@ 0x44
 8002fbe:	f8ad 5048 	strh.w	r5, [sp, #72]	@ 0x48
 8002fc2:	f7ff fe39 	bl	8002c38 <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEE14setIconBitmapsERKNS_6BitmapES5_>
    flexButton1.setAction(flexButtonCallback);
 8002fc6:	f504 7371 	add.w	r3, r4, #964	@ 0x3c4
        action = &callback;
 8002fca:	f8c4 31a4 	str.w	r3, [r4, #420]	@ 0x1a4
    flexButton1.setPosition(204, 282, 32, 32);
 8002fce:	2320      	movs	r3, #32
 8002fd0:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 8002fd4:	980a      	ldr	r0, [sp, #40]	@ 0x28
        rect.x = x;
 8002fd6:	f8c4 51b0 	str.w	r5, [r4, #432]	@ 0x1b0
 8002fda:	21cc      	movs	r1, #204	@ 0xcc
 8002fdc:	9300      	str	r3, [sp, #0]
 8002fde:	f7ff fe5b 	bl	8002c98 <_ZN8touchgfx8Drawable11setPositionEssss>
 8002fe2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8002fe4:	4638      	mov	r0, r7
 8002fe6:	f005 faa9 	bl	800853c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    lamb.setXY(63, 20);
 8002fea:	2214      	movs	r2, #20
 8002fec:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8002fee:	213f      	movs	r1, #63	@ 0x3f
 8002ff0:	f7ff fc89 	bl	8002906 <_ZN8touchgfx8Drawable5setXYEss>
 8002ff4:	f04f 0a01 	mov.w	sl, #1
    lamb.setBitmap(touchgfx::Bitmap(BITMAP_LAMB_ID));
 8002ff8:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8002ffa:	f8ad a048 	strh.w	sl, [sp, #72]	@ 0x48
 8002ffe:	a912      	add	r1, sp, #72	@ 0x48
 8003000:	f007 f97d 	bl	800a2fe <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8003004:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8003006:	4638      	mov	r0, r7
 8003008:	f005 fa98 	bl	800853c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textGameOver.setXY(54, 132);
 800300c:	2284      	movs	r2, #132	@ 0x84
 800300e:	4658      	mov	r0, fp
 8003010:	2136      	movs	r1, #54	@ 0x36
 8003012:	f7ff fc78 	bl	8002906 <_ZN8touchgfx8Drawable5setXYEss>
        boundingArea = calculateBoundingArea();
 8003016:	ae0c      	add	r6, sp, #48	@ 0x30
        color = newColor;
 8003018:	4b2c      	ldr	r3, [pc, #176]	@ (80030cc <_ZN15Screen2ViewBaseC1Ev+0x370>)
 800301a:	f8c4 3234 	str.w	r3, [r4, #564]	@ 0x234
        boundingArea = calculateBoundingArea();
 800301e:	4659      	mov	r1, fp
 8003020:	4630      	mov	r0, r6
        linespace = space;
 8003022:	f8a4 5238 	strh.w	r5, [r4, #568]	@ 0x238
        boundingArea = calculateBoundingArea();
 8003026:	f006 fd2b 	bl	8009a80 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 800302a:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800302e:	f504 7310 	add.w	r3, r4, #576	@ 0x240
 8003032:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003036:	2309      	movs	r3, #9
    textGameOver.setTypedText(touchgfx::TypedText(T___SINGLEUSE_Z9QT));
 8003038:	4658      	mov	r0, fp
 800303a:	a912      	add	r1, sp, #72	@ 0x48
 800303c:	f8ad 304c 	strh.w	r3, [sp, #76]	@ 0x4c
 8003040:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8003044:	f006 ffc4 	bl	8009fd0 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8003048:	4659      	mov	r1, fp
 800304a:	4638      	mov	r0, r7
        visible = vis;
 800304c:	f884 5229 	strb.w	r5, [r4, #553]	@ 0x229
 8003050:	f005 fa74 	bl	800853c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textHighScore.setXY(86, 296);
 8003054:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8003058:	9803      	ldr	r0, [sp, #12]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800305a:	f8df b08c 	ldr.w	fp, [pc, #140]	@ 80030e8 <_ZN15Screen2ViewBaseC1Ev+0x38c>
 800305e:	2156      	movs	r1, #86	@ 0x56
 8003060:	f7ff fc51 	bl	8002906 <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8003064:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 8003068:	f8c4 327c 	str.w	r3, [r4, #636]	@ 0x27c
        boundingArea = calculateBoundingArea();
 800306c:	f8d4 324c 	ldr.w	r3, [r4, #588]	@ 0x24c
 8003070:	9903      	ldr	r1, [sp, #12]
 8003072:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
        linespace = space;
 8003076:	f8a4 5280 	strh.w	r5, [r4, #640]	@ 0x280
        boundingArea = calculateBoundingArea();
 800307a:	4630      	mov	r0, r6
 800307c:	4798      	blx	r3
 800307e:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8003082:	f504 7322 	add.w	r3, r4, #648	@ 0x288
 8003086:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    Unicode::snprintf(textHighScoreBuffer, TEXTHIGHSCORE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_XBPY).getText());
 800308a:	f504 735d 	add.w	r3, r4, #884	@ 0x374
 800308e:	9307      	str	r3, [sp, #28]
 8003090:	f8db 3000 	ldr.w	r3, [fp]
 8003094:	b92b      	cbnz	r3, 80030a2 <_ZN15Screen2ViewBaseC1Ev+0x346>
 8003096:	4b0e      	ldr	r3, [pc, #56]	@ (80030d0 <_ZN15Screen2ViewBaseC1Ev+0x374>)
 8003098:	4a0e      	ldr	r2, [pc, #56]	@ (80030d4 <_ZN15Screen2ViewBaseC1Ev+0x378>)
 800309a:	2160      	movs	r1, #96	@ 0x60
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 800309c:	480e      	ldr	r0, [pc, #56]	@ (80030d8 <_ZN15Screen2ViewBaseC1Ev+0x37c>)
 800309e:	f00e ffad 	bl	8011ffc <__assert_func>
 80030a2:	4b0e      	ldr	r3, [pc, #56]	@ (80030dc <_ZN15Screen2ViewBaseC1Ev+0x380>)
 80030a4:	881b      	ldrh	r3, [r3, #0]
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d820      	bhi.n	80030ec <_ZN15Screen2ViewBaseC1Ev+0x390>
 80030aa:	4b0d      	ldr	r3, [pc, #52]	@ (80030e0 <_ZN15Screen2ViewBaseC1Ev+0x384>)
 80030ac:	4a09      	ldr	r2, [pc, #36]	@ (80030d4 <_ZN15Screen2ViewBaseC1Ev+0x378>)
 80030ae:	2161      	movs	r1, #97	@ 0x61
 80030b0:	e7f4      	b.n	800309c <_ZN15Screen2ViewBaseC1Ev+0x340>
 80030b2:	bf00      	nop
 80030b4:	08014390 	.word	0x08014390
 80030b8:	08014680 	.word	0x08014680
 80030bc:	080142d8 	.word	0x080142d8
 80030c0:	08014248 	.word	0x08014248
 80030c4:	08014378 	.word	0x08014378
 80030c8:	08002c09 	.word	0x08002c09
 80030cc:	ffff0015 	.word	0xffff0015
 80030d0:	08013975 	.word	0x08013975
 80030d4:	08013a77 	.word	0x08013a77
 80030d8:	080139f2 	.word	0x080139f2
 80030dc:	2001268c 	.word	0x2001268c
 80030e0:	08013a39 	.word	0x08013a39
 80030e4:	08014044 	.word	0x08014044
 80030e8:	20012688 	.word	0x20012688
        return texts->getText(typedTextId);
 80030ec:	4b52      	ldr	r3, [pc, #328]	@ (8003238 <_ZN15Screen2ViewBaseC1Ev+0x4dc>)
 80030ee:	2102      	movs	r1, #2
 80030f0:	6818      	ldr	r0, [r3, #0]
 80030f2:	f000 fa0f 	bl	8003514 <_ZNK8touchgfx5Texts7getTextEt>
 80030f6:	2114      	movs	r1, #20
 80030f8:	4603      	mov	r3, r0
 80030fa:	4a50      	ldr	r2, [pc, #320]	@ (800323c <_ZN15Screen2ViewBaseC1Ev+0x4e0>)
 80030fc:	9807      	ldr	r0, [sp, #28]
 80030fe:	f00b ffc1 	bl	800f084 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        wc1 = value;
 8003102:	9a07      	ldr	r2, [sp, #28]
 8003104:	f8c4 2294 	str.w	r2, [r4, #660]	@ 0x294
    textHighScore.resizeToCurrentText();
 8003108:	9803      	ldr	r0, [sp, #12]
 800310a:	f006 ff41 	bl	8009f90 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    textHighScore.setTypedText(touchgfx::TypedText(T___SINGLEUSE_4FKX));
 800310e:	9803      	ldr	r0, [sp, #12]
        : typedTextId(id)
 8003110:	f8ad 904c 	strh.w	r9, [sp, #76]	@ 0x4c
 8003114:	a912      	add	r1, sp, #72	@ 0x48
 8003116:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800311a:	f006 ff59 	bl	8009fd0 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800311e:	9903      	ldr	r1, [sp, #12]
 8003120:	4638      	mov	r0, r7
 8003122:	f005 fa0b 	bl	800853c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textScore.setXY(53, 273);
 8003126:	9804      	ldr	r0, [sp, #16]
 8003128:	f240 1211 	movw	r2, #273	@ 0x111
 800312c:	2135      	movs	r1, #53	@ 0x35
 800312e:	f7ff fbea 	bl	8002906 <_ZN8touchgfx8Drawable5setXYEss>
 8003132:	f8d4 3298 	ldr.w	r3, [r4, #664]	@ 0x298
 8003136:	9904      	ldr	r1, [sp, #16]
 8003138:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
        linespace = space;
 800313c:	f8a4 52cc 	strh.w	r5, [r4, #716]	@ 0x2cc
        color = newColor;
 8003140:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 8003144:	f8c4 22c8 	str.w	r2, [r4, #712]	@ 0x2c8
        boundingArea = calculateBoundingArea();
 8003148:	4630      	mov	r0, r6
 800314a:	4798      	blx	r3
 800314c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8003150:	f504 7335 	add.w	r3, r4, #724	@ 0x2d4
 8003154:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8003158:	f8db 3000 	ldr.w	r3, [fp]
    Unicode::snprintf(textScoreBuffer, TEXTSCORE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_A6ZX).getText());
 800315c:	f504 7967 	add.w	r9, r4, #924	@ 0x39c
 8003160:	2b00      	cmp	r3, #0
 8003162:	d098      	beq.n	8003096 <_ZN15Screen2ViewBaseC1Ev+0x33a>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8003164:	4a36      	ldr	r2, [pc, #216]	@ (8003240 <_ZN15Screen2ViewBaseC1Ev+0x4e4>)
 8003166:	8813      	ldrh	r3, [r2, #0]
 8003168:	2b03      	cmp	r3, #3
 800316a:	d99e      	bls.n	80030aa <_ZN15Screen2ViewBaseC1Ev+0x34e>
        return texts->getText(typedTextId);
 800316c:	4b32      	ldr	r3, [pc, #200]	@ (8003238 <_ZN15Screen2ViewBaseC1Ev+0x4dc>)
 800316e:	2103      	movs	r1, #3
 8003170:	6818      	ldr	r0, [r3, #0]
 8003172:	f000 f9cf 	bl	8003514 <_ZNK8touchgfx5Texts7getTextEt>
 8003176:	4a31      	ldr	r2, [pc, #196]	@ (800323c <_ZN15Screen2ViewBaseC1Ev+0x4e0>)
 8003178:	4603      	mov	r3, r0
 800317a:	2114      	movs	r1, #20
 800317c:	4648      	mov	r0, r9
 800317e:	f00b ff81 	bl	800f084 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    textScore.resizeToCurrentText();
 8003182:	9804      	ldr	r0, [sp, #16]
 8003184:	f8c4 92e0 	str.w	r9, [r4, #736]	@ 0x2e0
 8003188:	f006 ff02 	bl	8009f90 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
        : typedTextId(id)
 800318c:	f04f 0304 	mov.w	r3, #4
    textScore.setTypedText(touchgfx::TypedText(T___SINGLEUSE_MBKF));
 8003190:	9804      	ldr	r0, [sp, #16]
 8003192:	f8ad 304c 	strh.w	r3, [sp, #76]	@ 0x4c
 8003196:	a912      	add	r1, sp, #72	@ 0x48
 8003198:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800319c:	f006 ff18 	bl	8009fd0 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80031a0:	9904      	ldr	r1, [sp, #16]
 80031a2:	4638      	mov	r0, r7
 80031a4:	f005 f9ca 	bl	800853c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea1.setXY(0, 273);
 80031a8:	9805      	ldr	r0, [sp, #20]
 80031aa:	f240 1211 	movw	r2, #273	@ 0x111
 80031ae:	4629      	mov	r1, r5
 80031b0:	f7ff fba9 	bl	8002906 <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 80031b4:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
        boundingArea = calculateBoundingArea();
 80031b8:	9905      	ldr	r1, [sp, #20]
        color = newColor;
 80031ba:	f8c4 3314 	str.w	r3, [r4, #788]	@ 0x314
        boundingArea = calculateBoundingArea();
 80031be:	4630      	mov	r0, r6
        linespace = space;
 80031c0:	f8a4 5318 	strh.w	r5, [r4, #792]	@ 0x318
        boundingArea = calculateBoundingArea();
 80031c4:	f006 fc5c 	bl	8009a80 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 80031c8:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80031cc:	f504 7348 	add.w	r3, r4, #800	@ 0x320
 80031d0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_3K2G));
 80031d4:	9805      	ldr	r0, [sp, #20]
 80031d6:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80031da:	a912      	add	r1, sp, #72	@ 0x48
 80031dc:	f8ad a04c 	strh.w	sl, [sp, #76]	@ 0x4c
 80031e0:	f006 fef6 	bl	8009fd0 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80031e4:	9905      	ldr	r1, [sp, #20]
 80031e6:	4638      	mov	r0, r7
 80031e8:	f005 f9a8 	bl	800853c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea2.setXY(0, 296);
 80031ec:	9806      	ldr	r0, [sp, #24]
 80031ee:	f44f 7294 	mov.w	r2, #296	@ 0x128
 80031f2:	4629      	mov	r1, r5
 80031f4:	f7ff fb87 	bl	8002906 <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 80031f8:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
        boundingArea = calculateBoundingArea();
 80031fc:	9906      	ldr	r1, [sp, #24]
        color = newColor;
 80031fe:	f8c4 335c 	str.w	r3, [r4, #860]	@ 0x35c
        boundingArea = calculateBoundingArea();
 8003202:	4630      	mov	r0, r6
        linespace = space;
 8003204:	f8a4 5360 	strh.w	r5, [r4, #864]	@ 0x360
        boundingArea = calculateBoundingArea();
 8003208:	f006 fc3a 	bl	8009a80 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 800320c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8003210:	f504 735a 	add.w	r3, r4, #872	@ 0x368
 8003214:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    textArea2.setTypedText(touchgfx::TypedText(T___SINGLEUSE_D86P));
 8003218:	9806      	ldr	r0, [sp, #24]
 800321a:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800321e:	a912      	add	r1, sp, #72	@ 0x48
 8003220:	f8ad 504c 	strh.w	r5, [sp, #76]	@ 0x4c
 8003224:	f006 fed4 	bl	8009fd0 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8003228:	4638      	mov	r0, r7
 800322a:	9906      	ldr	r1, [sp, #24]
 800322c:	f005 f986 	bl	800853c <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8003230:	4620      	mov	r0, r4
 8003232:	b015      	add	sp, #84	@ 0x54
 8003234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003238:	20012694 	.word	0x20012694
 800323c:	08013ac2 	.word	0x08013ac2
 8003240:	2001268c 	.word	0x2001268c

08003244 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_15_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_15_4bpp();

touchgfx::GeneratedFont& getFont_verdana_15_4bpp()
{
    static touchgfx::GeneratedFont verdana_15_4bpp(glyphs_verdana_15_4bpp, 25, 18, 15, 0, 0, 4, 1, 0, 1, unicodes_verdana_15_4bpp, kerning_verdana_15_4bpp, 63, 0, 0, 0);
 8003244:	4770      	bx	lr
	...

08003248 <_Z23getFont_verdana_15_4bppv>:
{
 8003248:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_15_4bpp(glyphs_verdana_15_4bpp, 25, 18, 15, 0, 0, 4, 1, 0, 1, unicodes_verdana_15_4bpp, kerning_verdana_15_4bpp, 63, 0, 0, 0);
 800324a:	4d17      	ldr	r5, [pc, #92]	@ (80032a8 <_Z23getFont_verdana_15_4bppv+0x60>)
 800324c:	682c      	ldr	r4, [r5, #0]
 800324e:	f014 0401 	ands.w	r4, r4, #1
{
 8003252:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_15_4bpp(glyphs_verdana_15_4bpp, 25, 18, 15, 0, 0, 4, 1, 0, 1, unicodes_verdana_15_4bpp, kerning_verdana_15_4bpp, 63, 0, 0, 0);
 8003254:	f3bf 8f5b 	dmb	ish
 8003258:	d122      	bne.n	80032a0 <_Z23getFont_verdana_15_4bppv+0x58>
 800325a:	4628      	mov	r0, r5
 800325c:	f00e fea2 	bl	8011fa4 <__cxa_guard_acquire>
 8003260:	b1f0      	cbz	r0, 80032a0 <_Z23getFont_verdana_15_4bppv+0x58>
 8003262:	233f      	movs	r3, #63	@ 0x3f
 8003264:	9309      	str	r3, [sp, #36]	@ 0x24
 8003266:	4b11      	ldr	r3, [pc, #68]	@ (80032ac <_Z23getFont_verdana_15_4bppv+0x64>)
 8003268:	9308      	str	r3, [sp, #32]
 800326a:	4b11      	ldr	r3, [pc, #68]	@ (80032b0 <_Z23getFont_verdana_15_4bppv+0x68>)
 800326c:	9307      	str	r3, [sp, #28]
 800326e:	2301      	movs	r3, #1
 8003270:	e9cd 4305 	strd	r4, r3, [sp, #20]
 8003274:	9304      	str	r3, [sp, #16]
 8003276:	2304      	movs	r3, #4
 8003278:	e9cd 4302 	strd	r4, r3, [sp, #8]
 800327c:	230f      	movs	r3, #15
 800327e:	490d      	ldr	r1, [pc, #52]	@ (80032b4 <_Z23getFont_verdana_15_4bppv+0x6c>)
 8003280:	9300      	str	r3, [sp, #0]
 8003282:	2219      	movs	r2, #25
 8003284:	2312      	movs	r3, #18
 8003286:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 800328a:	480b      	ldr	r0, [pc, #44]	@ (80032b8 <_Z23getFont_verdana_15_4bppv+0x70>)
 800328c:	940a      	str	r4, [sp, #40]	@ 0x28
 800328e:	9401      	str	r4, [sp, #4]
 8003290:	f7ff fa9a 	bl	80027c8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8003294:	4809      	ldr	r0, [pc, #36]	@ (80032bc <_Z23getFont_verdana_15_4bppv+0x74>)
 8003296:	f00e fecf 	bl	8012038 <atexit>
 800329a:	4628      	mov	r0, r5
 800329c:	f00e fe8e 	bl	8011fbc <__cxa_guard_release>
    return verdana_15_4bpp;
}
 80032a0:	4805      	ldr	r0, [pc, #20]	@ (80032b8 <_Z23getFont_verdana_15_4bppv+0x70>)
 80032a2:	b00f      	add	sp, #60	@ 0x3c
 80032a4:	bd30      	pop	{r4, r5, pc}
 80032a6:	bf00      	nop
 80032a8:	20001820 	.word	0x20001820
 80032ac:	080155e8 	.word	0x080155e8
 80032b0:	0801560c 	.word	0x0801560c
 80032b4:	08015398 	.word	0x08015398
 80032b8:	20001824 	.word	0x20001824
 80032bc:	08003245 	.word	0x08003245

080032c0 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 16, 20, 20, 0, 0, 4, 1, 0, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80032c0:	4770      	bx	lr
	...

080032c4 <_Z23getFont_verdana_20_4bppv>:
{
 80032c4:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 16, 20, 20, 0, 0, 4, 1, 0, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80032c6:	4d16      	ldr	r5, [pc, #88]	@ (8003320 <_Z23getFont_verdana_20_4bppv+0x5c>)
 80032c8:	682c      	ldr	r4, [r5, #0]
 80032ca:	f014 0401 	ands.w	r4, r4, #1
{
 80032ce:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 16, 20, 20, 0, 0, 4, 1, 0, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80032d0:	f3bf 8f5b 	dmb	ish
 80032d4:	d121      	bne.n	800331a <_Z23getFont_verdana_20_4bppv+0x56>
 80032d6:	4628      	mov	r0, r5
 80032d8:	f00e fe64 	bl	8011fa4 <__cxa_guard_acquire>
 80032dc:	b1e8      	cbz	r0, 800331a <_Z23getFont_verdana_20_4bppv+0x56>
 80032de:	233f      	movs	r3, #63	@ 0x3f
 80032e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80032e2:	4b10      	ldr	r3, [pc, #64]	@ (8003324 <_Z23getFont_verdana_20_4bppv+0x60>)
 80032e4:	9308      	str	r3, [sp, #32]
 80032e6:	4b10      	ldr	r3, [pc, #64]	@ (8003328 <_Z23getFont_verdana_20_4bppv+0x64>)
 80032e8:	9307      	str	r3, [sp, #28]
 80032ea:	2301      	movs	r3, #1
 80032ec:	e9cd 4305 	strd	r4, r3, [sp, #20]
 80032f0:	9304      	str	r3, [sp, #16]
 80032f2:	2304      	movs	r3, #4
 80032f4:	e9cd 4302 	strd	r4, r3, [sp, #8]
 80032f8:	2314      	movs	r3, #20
 80032fa:	490c      	ldr	r1, [pc, #48]	@ (800332c <_Z23getFont_verdana_20_4bppv+0x68>)
 80032fc:	9300      	str	r3, [sp, #0]
 80032fe:	2210      	movs	r2, #16
 8003300:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 8003304:	480a      	ldr	r0, [pc, #40]	@ (8003330 <_Z23getFont_verdana_20_4bppv+0x6c>)
 8003306:	940a      	str	r4, [sp, #40]	@ 0x28
 8003308:	9401      	str	r4, [sp, #4]
 800330a:	f7ff fa5d 	bl	80027c8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800330e:	4809      	ldr	r0, [pc, #36]	@ (8003334 <_Z23getFont_verdana_20_4bppv+0x70>)
 8003310:	f00e fe92 	bl	8012038 <atexit>
 8003314:	4628      	mov	r0, r5
 8003316:	f00e fe51 	bl	8011fbc <__cxa_guard_release>
    return verdana_20_4bpp;
}
 800331a:	4805      	ldr	r0, [pc, #20]	@ (8003330 <_Z23getFont_verdana_20_4bppv+0x6c>)
 800331c:	b00f      	add	sp, #60	@ 0x3c
 800331e:	bd30      	pop	{r4, r5, pc}
 8003320:	20001850 	.word	0x20001850
 8003324:	080155ec 	.word	0x080155ec
 8003328:	08015610 	.word	0x08015610
 800332c:	080154f8 	.word	0x080154f8
 8003330:	20001854 	.word	0x20001854
 8003334:	080032c1 	.word	0x080032c1

08003338 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8003338:	4770      	bx	lr
	...

0800333c <_Z23getFont_verdana_40_4bppv>:
{
 800333c:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800333e:	4d16      	ldr	r5, [pc, #88]	@ (8003398 <_Z23getFont_verdana_40_4bppv+0x5c>)
 8003340:	682c      	ldr	r4, [r5, #0]
 8003342:	f014 0401 	ands.w	r4, r4, #1
{
 8003346:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8003348:	f3bf 8f5b 	dmb	ish
 800334c:	d120      	bne.n	8003390 <_Z23getFont_verdana_40_4bppv+0x54>
 800334e:	4628      	mov	r0, r5
 8003350:	f00e fe28 	bl	8011fa4 <__cxa_guard_acquire>
 8003354:	b1e0      	cbz	r0, 8003390 <_Z23getFont_verdana_40_4bppv+0x54>
 8003356:	233f      	movs	r3, #63	@ 0x3f
 8003358:	9309      	str	r3, [sp, #36]	@ 0x24
 800335a:	4b10      	ldr	r3, [pc, #64]	@ (800339c <_Z23getFont_verdana_40_4bppv+0x60>)
 800335c:	9308      	str	r3, [sp, #32]
 800335e:	4b10      	ldr	r3, [pc, #64]	@ (80033a0 <_Z23getFont_verdana_40_4bppv+0x64>)
 8003360:	4910      	ldr	r1, [pc, #64]	@ (80033a4 <_Z23getFont_verdana_40_4bppv+0x68>)
 8003362:	4811      	ldr	r0, [pc, #68]	@ (80033a8 <_Z23getFont_verdana_40_4bppv+0x6c>)
 8003364:	940a      	str	r4, [sp, #40]	@ 0x28
 8003366:	2201      	movs	r2, #1
 8003368:	e9cd 4306 	strd	r4, r3, [sp, #24]
 800336c:	2304      	movs	r3, #4
 800336e:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8003372:	2328      	movs	r3, #40	@ 0x28
 8003374:	9300      	str	r3, [sp, #0]
 8003376:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 800337a:	e9cd 4401 	strd	r4, r4, [sp, #4]
 800337e:	9405      	str	r4, [sp, #20]
 8003380:	f7ff fa22 	bl	80027c8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8003384:	4809      	ldr	r0, [pc, #36]	@ (80033ac <_Z23getFont_verdana_40_4bppv+0x70>)
 8003386:	f00e fe57 	bl	8012038 <atexit>
 800338a:	4628      	mov	r0, r5
 800338c:	f00e fe16 	bl	8011fbc <__cxa_guard_release>
    return verdana_40_4bpp;
}
 8003390:	4805      	ldr	r0, [pc, #20]	@ (80033a8 <_Z23getFont_verdana_40_4bppv+0x6c>)
 8003392:	b00f      	add	sp, #60	@ 0x3c
 8003394:	bd30      	pop	{r4, r5, pc}
 8003396:	bf00      	nop
 8003398:	20001880 	.word	0x20001880
 800339c:	08015608 	.word	0x08015608
 80033a0:	08015614 	.word	0x08015614
 80033a4:	080155d8 	.word	0x080155d8
 80033a8:	20001884 	.word	0x20001884
 80033ac:	08003339 	.word	0x08003339

080033b0 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    }
 80033b0:	2000      	movs	r0, #0
 80033b2:	4770      	bx	lr

080033b4 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    }
 80033b4:	2000      	movs	r0, #0
 80033b6:	4770      	bx	lr

080033b8 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80033b8:	b40e      	push	{r1, r2, r3}
 80033ba:	b503      	push	{r0, r1, lr}
 80033bc:	ab03      	add	r3, sp, #12
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 80033be:	2100      	movs	r1, #0
{
 80033c0:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(pArg, text);
 80033c4:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 80033c6:	f009 fdab 	bl	800cf20 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 80033ca:	b002      	add	sp, #8
 80033cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80033d0:	b003      	add	sp, #12
 80033d2:	4770      	bx	lr

080033d4 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80033d4:	b40c      	push	{r2, r3}
 80033d6:	b507      	push	{r0, r1, r2, lr}
 80033d8:	ab04      	add	r3, sp, #16
 80033da:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 80033de:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 80033e0:	f009 fd9e 	bl	800cf20 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 80033e4:	b003      	add	sp, #12
 80033e6:	f85d eb04 	ldr.w	lr, [sp], #4
 80033ea:	b002      	add	sp, #8
 80033ec:	4770      	bx	lr
	...

080033f0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
 80033f0:	6c43      	ldr	r3, [r0, #68]	@ 0x44
{
 80033f2:	b510      	push	{r4, lr}
 80033f4:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 80033f6:	b373      	cbz	r3, 8003456 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 80033f8:	8f03      	ldrh	r3, [r0, #56]	@ 0x38
 80033fa:	b92b      	cbnz	r3, 8003408 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x18>
 80033fc:	4b18      	ldr	r3, [pc, #96]	@ (8003460 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x70>)
 80033fe:	4a19      	ldr	r2, [pc, #100]	@ (8003464 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>)
 8003400:	21c5      	movs	r1, #197	@ 0xc5
            return buffer[pos];
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8003402:	4819      	ldr	r0, [pc, #100]	@ (8003468 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x78>)
 8003404:	f00e fdfa 	bl	8011ffc <__assert_func>
            return buffer[pos];
 8003408:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 800340a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800340e:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8003410:	b30b      	cbz	r3, 8003456 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
    {
        substituteGlyphs();
 8003412:	f00b f88e 	bl	800e532 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
            assert(offset < used);
 8003416:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8003418:	2b01      	cmp	r3, #1
 800341a:	d803      	bhi.n	8003424 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x34>
 800341c:	4b13      	ldr	r3, [pc, #76]	@ (800346c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 800341e:	4a14      	ldr	r2, [pc, #80]	@ (8003470 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>)
 8003420:	21cb      	movs	r1, #203	@ 0xcb
 8003422:	e7ee      	b.n	8003402 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
            const uint16_t index = pos + offset;
 8003424:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8003426:	1c53      	adds	r3, r2, #1
 8003428:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 800342a:	2b09      	cmp	r3, #9
 800342c:	4619      	mov	r1, r3
 800342e:	bf88      	it	hi
 8003430:	f1a3 010a 	subhi.w	r1, r3, #10
 8003434:	eb04 0141 	add.w	r1, r4, r1, lsl #1
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8003438:	f640 103f 	movw	r0, #2367	@ 0x93f
 800343c:	8c49      	ldrh	r1, [r1, #34]	@ 0x22
 800343e:	4281      	cmp	r1, r0
 8003440:	d109      	bne.n	8003456 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 8003442:	2b0a      	cmp	r3, #10
 8003444:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8003448:	bf28      	it	cs
 800344a:	2300      	movcs	r3, #0
 800344c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
            return buffer[pos];
 8003450:	8c50      	ldrh	r0, [r2, #34]	@ 0x22
            buffer[index < size ? index : 0] = newChar;
 8003452:	8458      	strh	r0, [r3, #34]	@ 0x22
            buffer[pos] = newChar;
 8003454:	8451      	strh	r1, [r2, #34]	@ 0x22
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 8003456:	4620      	mov	r0, r4
}
 8003458:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
 800345c:	f00a bf6c 	b.w	800e338 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8003460:	08013ac5 	.word	0x08013ac5
 8003464:	08013ace 	.word	0x08013ace
 8003468:	08013b79 	.word	0x08013b79
 800346c:	08013bc3 	.word	0x08013bc3
 8003470:	08013bd1 	.word	0x08013bd1

08003474 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
 8003474:	f00a bf27 	b.w	800e2c6 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08003478 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 8003478:	b510      	push	{r4, lr}
 800347a:	b086      	sub	sp, #24
 800347c:	ac02      	add	r4, sp, #8
 800347e:	e884 0006 	stmia.w	r4, {r1, r2}
 8003482:	461a      	mov	r2, r3
    va_list pArg;
    va_start(pArg, format);
 8003484:	ab0a      	add	r3, sp, #40	@ 0x28
 8003486:	9305      	str	r3, [sp, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8003488:	9301      	str	r3, [sp, #4]
 800348a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800348c:	9300      	str	r3, [sp, #0]
 800348e:	4621      	mov	r1, r4
 8003490:	9b08      	ldr	r3, [sp, #32]
 8003492:	f008 f833 	bl	800b4fc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 8003496:	b006      	add	sp, #24
 8003498:	bd10      	pop	{r4, pc}
	...

0800349c <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 800349c:	b538      	push	{r3, r4, r5, lr}
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 800349e:	bb18      	cbnz	r0, 80034e8 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
    {
        if (languagesArray[id] != 0)
 80034a0:	4b12      	ldr	r3, [pc, #72]	@ (80034ec <_ZN8touchgfx5Texts11setLanguageEt+0x50>)
 80034a2:	4813      	ldr	r0, [pc, #76]	@ (80034f0 <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
 80034a4:	681c      	ldr	r4, [r3, #0]
 80034a6:	4913      	ldr	r1, [pc, #76]	@ (80034f4 <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 80034a8:	b1b4      	cbz	r4, 80034d8 <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 80034aa:	6822      	ldr	r2, [r4, #0]
 80034ac:	4422      	add	r2, r4
 80034ae:	6002      	str	r2, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 80034b0:	6862      	ldr	r2, [r4, #4]
 80034b2:	4422      	add	r2, r4
 80034b4:	600a      	str	r2, [r1, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 80034b6:	68a2      	ldr	r2, [r4, #8]
 80034b8:	4414      	add	r4, r2
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
 80034ba:	4b0f      	ldr	r3, [pc, #60]	@ (80034f8 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 80034bc:	2200      	movs	r2, #0
 80034be:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 80034c0:	f000 f838 	bl	8003534 <_ZN17TypedTextDatabase8getFontsEv>
 80034c4:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 80034c6:	f000 f833 	bl	8003530 <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 80034ca:	4b0c      	ldr	r3, [pc, #48]	@ (80034fc <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 80034cc:	601c      	str	r4, [r3, #0]
        fonts = f;
 80034ce:	4b0c      	ldr	r3, [pc, #48]	@ (8003500 <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 80034d0:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 80034d2:	4b0c      	ldr	r3, [pc, #48]	@ (8003504 <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
 80034d4:	8018      	strh	r0, [r3, #0]
    }
}
 80034d6:	e007      	b.n	80034e8 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
            currentLanguagePtr = texts_all_languages;
 80034d8:	4b0b      	ldr	r3, [pc, #44]	@ (8003508 <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
 80034da:	6003      	str	r3, [r0, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 80034dc:	4b0b      	ldr	r3, [pc, #44]	@ (800350c <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
 80034de:	600b      	str	r3, [r1, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 80034e0:	4b0b      	ldr	r3, [pc, #44]	@ (8003510 <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
 80034e2:	681c      	ldr	r4, [r3, #0]
    if (currentLanguageTypedText)
 80034e4:	2c00      	cmp	r4, #0
 80034e6:	d1e8      	bne.n	80034ba <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
 80034e8:	bd38      	pop	{r3, r4, r5, pc}
 80034ea:	bf00      	nop
 80034ec:	200018bc 	.word	0x200018bc
 80034f0:	200018b4 	.word	0x200018b4
 80034f4:	200018b0 	.word	0x200018b0
 80034f8:	200018b8 	.word	0x200018b8
 80034fc:	20012688 	.word	0x20012688
 8003500:	20012690 	.word	0x20012690
 8003504:	2001268c 	.word	0x2001268c
 8003508:	08015640 	.word	0x08015640
 800350c:	08015618 	.word	0x08015618
 8003510:	080156c8 	.word	0x080156c8

08003514 <_ZNK8touchgfx5Texts7getTextEt>:
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8003514:	4b04      	ldr	r3, [pc, #16]	@ (8003528 <_ZNK8touchgfx5Texts7getTextEt+0x14>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 800351c:	4b03      	ldr	r3, [pc, #12]	@ (800352c <_ZNK8touchgfx5Texts7getTextEt+0x18>)
 800351e:	681b      	ldr	r3, [r3, #0]
}
 8003520:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8003524:	4770      	bx	lr
 8003526:	bf00      	nop
 8003528:	200018b0 	.word	0x200018b0
 800352c:	200018b4 	.word	0x200018b4

08003530 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
}
 8003530:	200a      	movs	r0, #10
 8003532:	4770      	bx	lr

08003534 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
 8003534:	4800      	ldr	r0, [pc, #0]	@ (8003538 <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 8003536:	4770      	bx	lr
 8003538:	200018c0 	.word	0x200018c0

0800353c <_GLOBAL__sub_I_touchgfx_fonts>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_15_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 800353c:	b510      	push	{r4, lr}
    &(getFont_verdana_20_4bpp()),
 800353e:	f7ff fec1 	bl	80032c4 <_Z23getFont_verdana_20_4bppv>
};
 8003542:	4c04      	ldr	r4, [pc, #16]	@ (8003554 <_GLOBAL__sub_I_touchgfx_fonts+0x18>)
 8003544:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
 8003546:	f7ff fef9 	bl	800333c <_Z23getFont_verdana_40_4bppv>
};
 800354a:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_15_4bpp())
 800354c:	f7ff fe7c 	bl	8003248 <_Z23getFont_verdana_15_4bppv>
};
 8003550:	60a0      	str	r0, [r4, #8]
} // namespace TypedTextDatabase
 8003552:	bd10      	pop	{r4, pc}
 8003554:	200018c0 	.word	0x200018c0

08003558 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8003558:	4770      	bx	lr

0800355a <_ZN19FrontendApplicationD0Ev>:
 800355a:	b510      	push	{r4, lr}
 800355c:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 8003560:	4604      	mov	r4, r0
 8003562:	f00e fd1d 	bl	8011fa0 <_ZdlPvj>
 8003566:	4620      	mov	r0, r4
 8003568:	bd10      	pop	{r4, pc}

0800356a <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 800356a:	b510      	push	{r4, lr}
 800356c:	4604      	mov	r4, r0
    {
        model.tick();
 800356e:	f8d0 0158 	ldr.w	r0, [r0, #344]	@ 0x158
 8003572:	f000 f815 	bl	80035a0 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8003576:	4620      	mov	r0, r4
    }
 8003578:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
 800357c:	f008 bcca 	b.w	800bf14 <_ZN8touchgfx11Application15handleTickEventEv>

08003580 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8003580:	b510      	push	{r4, lr}
 8003582:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 8003584:	f7ff f88a 	bl	800269c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8003588:	4b01      	ldr	r3, [pc, #4]	@ (8003590 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
 800358a:	6023      	str	r3, [r4, #0]
{

}
 800358c:	4620      	mov	r0, r4
 800358e:	bd10      	pop	{r4, pc}
 8003590:	080143c8 	.word	0x080143c8

08003594 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : ImageX(95), modelListener(0)
 8003594:	2200      	movs	r2, #0
 8003596:	215f      	movs	r1, #95	@ 0x5f
 8003598:	6002      	str	r2, [r0, #0]
 800359a:	8081      	strh	r1, [r0, #4]
 800359c:	6082      	str	r2, [r0, #8]
{
	modelTickCount = 0;
}
 800359e:	4770      	bx	lr

080035a0 <_ZN5Model4tickEv>:

void Model::tick()
{
	modelTickCount++;
 80035a0:	6803      	ldr	r3, [r0, #0]
 80035a2:	3301      	adds	r3, #1
 80035a4:	6003      	str	r3, [r0, #0]
}
 80035a6:	4770      	bx	lr

080035a8 <_ZN5Model6updateEs>:

void Model::update(int16_t x)
{
	ImageX = x;
 80035a8:	8081      	strh	r1, [r0, #4]
}
 80035aa:	4770      	bx	lr

080035ac <_ZN5Model9GetImageXEv>:

int16_t Model::GetImageX()
{
	return ImageX;
}
 80035ac:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 80035b0:	4770      	bx	lr

080035b2 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 80035b2:	4770      	bx	lr

080035b4 <_ZThn4_N16Screen1PresenterD1Ev>:
 80035b4:	3804      	subs	r0, #4
 80035b6:	4770      	bx	lr

080035b8 <_ZN16Screen1Presenter10deactivateEv>:
}

void Screen1Presenter::activate()
{

}
 80035b8:	4770      	bx	lr

080035ba <_ZN16Screen1PresenterD0Ev>:
 80035ba:	b510      	push	{r4, lr}
 80035bc:	2110      	movs	r1, #16
 80035be:	4604      	mov	r4, r0
 80035c0:	f00e fcee 	bl	8011fa0 <_ZdlPvj>
 80035c4:	4620      	mov	r0, r4
 80035c6:	bd10      	pop	{r4, pc}

080035c8 <_ZThn4_N16Screen1PresenterD0Ev>:
 80035c8:	f1a0 0004 	sub.w	r0, r0, #4
 80035cc:	e7f5      	b.n	80035ba <_ZN16Screen1PresenterD0Ev>
	...

080035d0 <_ZN16Screen1PresenterC1ER11Screen1View>:
    ModelListener() : model(0) {}
 80035d0:	2200      	movs	r2, #0
 80035d2:	6082      	str	r2, [r0, #8]
    : view(v)
 80035d4:	4a02      	ldr	r2, [pc, #8]	@ (80035e0 <_ZN16Screen1PresenterC1ER11Screen1View+0x10>)
 80035d6:	6002      	str	r2, [r0, #0]
 80035d8:	3218      	adds	r2, #24
 80035da:	6042      	str	r2, [r0, #4]
 80035dc:	60c1      	str	r1, [r0, #12]
}
 80035de:	4770      	bx	lr
 80035e0:	0801441c 	.word	0x0801441c

080035e4 <_ZN11Screen1View14tearDownScreenEv>:
}

void Screen1View::tearDownScreen()
{
    Screen1ViewBase::tearDownScreen();
}
 80035e4:	4770      	bx	lr

080035e6 <_ZN11Screen1View15handleTickEventEv>:

void Screen1View::handleTickEvent()
{
	tickCounter += 1;
 80035e6:	f8d0 30b0 	ldr.w	r3, [r0, #176]	@ 0xb0
 80035ea:	3301      	adds	r3, #1
 80035ec:	f8c0 30b0 	str.w	r3, [r0, #176]	@ 0xb0

}
 80035f0:	4770      	bx	lr
	...

080035f4 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 80035f4:	b510      	push	{r4, lr}
 80035f6:	4b03      	ldr	r3, [pc, #12]	@ (8003604 <_ZN11Screen1ViewD1Ev+0x10>)
 80035f8:	6003      	str	r3, [r0, #0]
 80035fa:	4604      	mov	r4, r0
 80035fc:	f7ff f93f 	bl	800287e <_ZN15Screen1ViewBaseD1Ev>
 8003600:	4620      	mov	r0, r4
 8003602:	bd10      	pop	{r4, pc}
 8003604:	08014444 	.word	0x08014444

08003608 <_ZN11Screen1ViewD0Ev>:
 8003608:	b510      	push	{r4, lr}
 800360a:	4604      	mov	r4, r0
 800360c:	f7ff fff2 	bl	80035f4 <_ZN11Screen1ViewD1Ev>
 8003610:	4620      	mov	r0, r4
 8003612:	21b4      	movs	r1, #180	@ 0xb4
 8003614:	f00e fcc4 	bl	8011fa0 <_ZdlPvj>
 8003618:	4620      	mov	r0, r4
 800361a:	bd10      	pop	{r4, pc}

0800361c <_ZN11Screen1ViewC1Ev>:
Screen1View::Screen1View()
 800361c:	b510      	push	{r4, lr}
 800361e:	4604      	mov	r4, r0
 8003620:	f7ff f97e 	bl	8002920 <_ZN15Screen1ViewBaseC1Ev>
 8003624:	4b03      	ldr	r3, [pc, #12]	@ (8003634 <_ZN11Screen1ViewC1Ev+0x18>)
 8003626:	6023      	str	r3, [r4, #0]
 8003628:	2300      	movs	r3, #0
 800362a:	f8c4 30b0 	str.w	r3, [r4, #176]	@ 0xb0
}
 800362e:	4620      	mov	r0, r4
 8003630:	bd10      	pop	{r4, pc}
 8003632:	bf00      	nop
 8003634:	08014444 	.word	0x08014444

08003638 <_ZN11Screen1View11setupScreenEv>:
    Screen1ViewBase::setupScreen();
 8003638:	f7ff b922 	b.w	8002880 <_ZN15Screen1ViewBase11setupScreenEv>

0800363c <_ZN16Screen2PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen2Presenter() {};
 800363c:	4770      	bx	lr

0800363e <_ZThn4_N16Screen2PresenterD1Ev>:
 800363e:	3804      	subs	r0, #4
 8003640:	4770      	bx	lr

08003642 <_ZN16Screen2Presenter10deactivateEv>:
}

void Screen2Presenter::activate()
{

}
 8003642:	4770      	bx	lr

08003644 <_ZN16Screen2PresenterD0Ev>:
 8003644:	b510      	push	{r4, lr}
 8003646:	2110      	movs	r1, #16
 8003648:	4604      	mov	r4, r0
 800364a:	f00e fca9 	bl	8011fa0 <_ZdlPvj>
 800364e:	4620      	mov	r0, r4
 8003650:	bd10      	pop	{r4, pc}

08003652 <_ZThn4_N16Screen2PresenterD0Ev>:
 8003652:	f1a0 0004 	sub.w	r0, r0, #4
 8003656:	e7f5      	b.n	8003644 <_ZN16Screen2PresenterD0Ev>

08003658 <_ZN16Screen2PresenterC1ER11Screen2View>:
 8003658:	2200      	movs	r2, #0
 800365a:	6082      	str	r2, [r0, #8]
    : view(v)
 800365c:	4a02      	ldr	r2, [pc, #8]	@ (8003668 <_ZN16Screen2PresenterC1ER11Screen2View+0x10>)
 800365e:	6002      	str	r2, [r0, #0]
 8003660:	3218      	adds	r2, #24
 8003662:	6042      	str	r2, [r0, #4]
 8003664:	60c1      	str	r1, [r0, #12]
}
 8003666:	4770      	bx	lr
 8003668:	08014478 	.word	0x08014478

0800366c <_ZN16Screen2Presenter12UpdateImageXEs>:

}

void Screen2Presenter::UpdateImageX(int16_t x)
{
	model->update(x);
 800366c:	6880      	ldr	r0, [r0, #8]
 800366e:	f7ff bf9b 	b.w	80035a8 <_ZN5Model6updateEs>

08003672 <_ZN16Screen2Presenter9GetImageXEv>:
}

int16_t Screen2Presenter::GetImageX()
{
	return model->GetImageX();
 8003672:	6880      	ldr	r0, [r0, #8]
 8003674:	f7ff bf9a 	b.w	80035ac <_ZN5Model9GetImageXEv>

08003678 <_ZN11Screen2View14checkCollisionEv>:
    int16_t x2 = lamb.getX();
    int16_t y2 = lamb.getY();
    int16_t w2 = lamb.getWidth();
    int16_t h2 = lamb.getHeight();

    return !(x1 + w1 < x2 || x2 + w2 < x1 ||
 8003678:	f9b0 214c 	ldrsh.w	r2, [r0, #332]	@ 0x14c
 800367c:	f9b0 3150 	ldrsh.w	r3, [r0, #336]	@ 0x150
 8003680:	f9b0 11dc 	ldrsh.w	r1, [r0, #476]	@ 0x1dc
 8003684:	4413      	add	r3, r2
 8003686:	428b      	cmp	r3, r1
 8003688:	db15      	blt.n	80036b6 <_ZN11Screen2View14checkCollisionEv+0x3e>
 800368a:	f9b0 31e0 	ldrsh.w	r3, [r0, #480]	@ 0x1e0
 800368e:	440b      	add	r3, r1
 8003690:	429a      	cmp	r2, r3
 8003692:	dc10      	bgt.n	80036b6 <_ZN11Screen2View14checkCollisionEv+0x3e>
             y1 + h1 < y2 || y2 + h2 < y1);
 8003694:	f9b0 314e 	ldrsh.w	r3, [r0, #334]	@ 0x14e
 8003698:	f9b0 2152 	ldrsh.w	r2, [r0, #338]	@ 0x152
 800369c:	f9b0 11de 	ldrsh.w	r1, [r0, #478]	@ 0x1de
 80036a0:	441a      	add	r2, r3
    return !(x1 + w1 < x2 || x2 + w2 < x1 ||
 80036a2:	428a      	cmp	r2, r1
 80036a4:	db07      	blt.n	80036b6 <_ZN11Screen2View14checkCollisionEv+0x3e>
             y1 + h1 < y2 || y2 + h2 < y1);
 80036a6:	f9b0 21e2 	ldrsh.w	r2, [r0, #482]	@ 0x1e2
 80036aa:	440a      	add	r2, r1
    return !(x1 + w1 < x2 || x2 + w2 < x1 ||
 80036ac:	4293      	cmp	r3, r2
 80036ae:	bfcc      	ite	gt
 80036b0:	2000      	movgt	r0, #0
 80036b2:	2001      	movle	r0, #1
 80036b4:	4770      	bx	lr
 80036b6:	2000      	movs	r0, #0
}
 80036b8:	4770      	bx	lr

080036ba <_ZN11Screen2View14tearDownScreenEv>:
}

void Screen2View::tearDownScreen()
{
    Screen2ViewBase::tearDownScreen();
    presenter->UpdateImageX(localImageX);
 80036ba:	f9b0 142c 	ldrsh.w	r1, [r0, #1068]	@ 0x42c
 80036be:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 80036c0:	f7ff bfd4 	b.w	800366c <_ZN16Screen2Presenter12UpdateImageXEs>

080036c4 <_ZN11Screen2ViewD1Ev>:

class Screen2View : public Screen2ViewBase
{
public:
    Screen2View();
    virtual ~Screen2View() {}
 80036c4:	b510      	push	{r4, lr}
 80036c6:	4b03      	ldr	r3, [pc, #12]	@ (80036d4 <_ZN11Screen2ViewD1Ev+0x10>)
 80036c8:	6003      	str	r3, [r0, #0]
 80036ca:	4604      	mov	r4, r0
 80036cc:	f7ff f9e4 	bl	8002a98 <_ZN15Screen2ViewBaseD1Ev>
 80036d0:	4620      	mov	r0, r4
 80036d2:	bd10      	pop	{r4, pc}
 80036d4:	080144a0 	.word	0x080144a0

080036d8 <_ZN11Screen2ViewD0Ev>:
 80036d8:	b510      	push	{r4, lr}
 80036da:	4604      	mov	r4, r0
 80036dc:	f7ff fff2 	bl	80036c4 <_ZN11Screen2ViewD1Ev>
 80036e0:	4620      	mov	r0, r4
 80036e2:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 80036e6:	f00e fc5b 	bl	8011fa0 <_ZdlPvj>
 80036ea:	4620      	mov	r0, r4
 80036ec:	bd10      	pop	{r4, pc}
	...

080036f0 <_Z10xorshift32v>:
{
 80036f0:	b510      	push	{r4, lr}
    if (seed == 0)
 80036f2:	4c07      	ldr	r4, [pc, #28]	@ (8003710 <_Z10xorshift32v+0x20>)
 80036f4:	6823      	ldr	r3, [r4, #0]
 80036f6:	b913      	cbnz	r3, 80036fe <_Z10xorshift32v+0xe>
        seed = HAL_GetTick();  // hoặc giá trị ADC noise nếu có
 80036f8:	f000 fc26 	bl	8003f48 <HAL_GetTick>
 80036fc:	6020      	str	r0, [r4, #0]
    seed ^= seed << 13;
 80036fe:	6820      	ldr	r0, [r4, #0]
 8003700:	ea80 3040 	eor.w	r0, r0, r0, lsl #13
    seed ^= seed >> 17;
 8003704:	ea80 4050 	eor.w	r0, r0, r0, lsr #17
    seed ^= seed << 5;
 8003708:	ea80 1040 	eor.w	r0, r0, r0, lsl #5
 800370c:	6020      	str	r0, [r4, #0]
}
 800370e:	bd10      	pop	{r4, pc}
 8003710:	200018cc 	.word	0x200018cc

08003714 <_ZN11Screen2ViewC1Ev>:
Screen2View::Screen2View()
 8003714:	b510      	push	{r4, lr}
 8003716:	4604      	mov	r4, r0
    : isGameOver(false), fallSpeed(2), speedLevel(0),carSpeedStep(2)
 8003718:	f7ff fb20 	bl	8002d5c <_ZN15Screen2ViewBaseC1Ev>
 800371c:	4b08      	ldr	r3, [pc, #32]	@ (8003740 <_ZN11Screen2ViewC1Ev+0x2c>)
 800371e:	6023      	str	r3, [r4, #0]
 8003720:	2202      	movs	r2, #2
 8003722:	2300      	movs	r3, #0
 8003724:	f8a4 2436 	strh.w	r2, [r4, #1078]	@ 0x436
 8003728:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800372c:	f884 3434 	strb.w	r3, [r4, #1076]	@ 0x434
 8003730:	f8c4 2438 	str.w	r2, [r4, #1080]	@ 0x438
 8003734:	f884 343c 	strb.w	r3, [r4, #1084]	@ 0x43c
    tickCount = 0;
 8003738:	f8c4 3430 	str.w	r3, [r4, #1072]	@ 0x430
}
 800373c:	4620      	mov	r0, r4
 800373e:	bd10      	pop	{r4, pc}
 8003740:	080144a0 	.word	0x080144a0

08003744 <_ZN11Screen2View11setupScreenEv>:
{
 8003744:	b510      	push	{r4, lr}
 8003746:	4604      	mov	r4, r0
    localImageX = presenter->GetImageX();
 8003748:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 800374a:	f7ff ff92 	bl	8003672 <_ZN16Screen2Presenter9GetImageXEv>
 800374e:	f8a4 042c 	strh.w	r0, [r4, #1068]	@ 0x42c
    Screen2ViewBase::setupScreen();
 8003752:	4620      	mov	r0, r4
 8003754:	f7ff f9a1 	bl	8002a9a <_ZN15Screen2ViewBase11setupScreenEv>
        rect.x = x;
 8003758:	f8b4 342c 	ldrh.w	r3, [r4, #1068]	@ 0x42c
 800375c:	f8a4 314c 	strh.w	r3, [r4, #332]	@ 0x14c
 8003760:	230e      	movs	r3, #14
 8003762:	f8c4 31dc 	str.w	r3, [r4, #476]	@ 0x1dc
    score = 0;
 8003766:	2300      	movs	r3, #0
 8003768:	f8c4 3424 	str.w	r3, [r4, #1060]	@ 0x424
    highScore = 0;
 800376c:	f8c4 3428 	str.w	r3, [r4, #1064]	@ 0x428
}
 8003770:	bd10      	pop	{r4, pc}
	...

08003774 <_ZN11Screen2View15handleTickEventEv>:
}

void Screen2View::handleTickEvent()
{
 8003774:	b573      	push	{r0, r1, r4, r5, r6, lr}

	if (isGameOver)
	{
	    // Chờ người dùng nhấn nút PG3 để chơi lại
	    uint8_t msg;
	    if (osMessageQueueGet(Queue1Handle, &msg, NULL, 0) == osOK && msg == 'A')
 8003776:	4b88      	ldr	r3, [pc, #544]	@ (8003998 <_ZN11Screen2View15handleTickEventEv+0x224>)
{
 8003778:	4604      	mov	r4, r0
	    if (osMessageQueueGet(Queue1Handle, &msg, NULL, 0) == osOK && msg == 'A')
 800377a:	6818      	ldr	r0, [r3, #0]
	if (isGameOver)
 800377c:	f894 3434 	ldrb.w	r3, [r4, #1076]	@ 0x434
 8003780:	2b00      	cmp	r3, #0
 8003782:	d04b      	beq.n	800381c <_ZN11Screen2View15handleTickEventEv+0xa8>
	    if (osMessageQueueGet(Queue1Handle, &msg, NULL, 0) == osOK && msg == 'A')
 8003784:	2300      	movs	r3, #0
 8003786:	461a      	mov	r2, r3
 8003788:	f10d 0107 	add.w	r1, sp, #7
 800378c:	f002 ff4c 	bl	8006628 <osMessageQueueGet>
 8003790:	4605      	mov	r5, r0
 8003792:	2800      	cmp	r0, #0
 8003794:	d140      	bne.n	8003818 <_ZN11Screen2View15handleTickEventEv+0xa4>
 8003796:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800379a:	2b41      	cmp	r3, #65	@ 0x41
 800379c:	d13c      	bne.n	8003818 <_ZN11Screen2View15handleTickEventEv+0xa4>
	    {
	        // Reset lại trạng thái game
	    	score = 0;

	    	Unicode::snprintf(scoreBuffer, sizeof(scoreBuffer), "%d", score);
 800379e:	f504 7675 	add.w	r6, r4, #980	@ 0x3d4
 80037a2:	4603      	mov	r3, r0
 80037a4:	2128      	movs	r1, #40	@ 0x28
 80037a6:	4a7d      	ldr	r2, [pc, #500]	@ (800399c <_ZN11Screen2View15handleTickEventEv+0x228>)
	    	score = 0;
 80037a8:	f8c4 0424 	str.w	r0, [r4, #1060]	@ 0x424
	    	Unicode::snprintf(scoreBuffer, sizeof(scoreBuffer), "%d", score);
 80037ac:	4630      	mov	r0, r6
 80037ae:	f00b fc69 	bl	800f084 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	    	textScore.setWildcard(scoreBuffer);
	    	textScore.invalidate();
 80037b2:	f504 7026 	add.w	r0, r4, #664	@ 0x298
 80037b6:	f8c4 62e0 	str.w	r6, [r4, #736]	@ 0x2e0
 80037ba:	f009 fcdb 	bl	800d174 <_ZNK8touchgfx8Drawable10invalidateEv>

	    	isGameOver = false;
	    	tickCount = 0;
	    	fallSpeed = 2;
 80037be:	2302      	movs	r3, #2
 80037c0:	f8a4 3436 	strh.w	r3, [r4, #1078]	@ 0x436
	    	speedLevel = 0;
 80037c4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
	    	localImageX = 100;
 80037c8:	2264      	movs	r2, #100	@ 0x64
	    	speedLevel = 0;
 80037ca:	f8c4 3438 	str.w	r3, [r4, #1080]	@ 0x438
        visible = vis;
 80037ce:	2301      	movs	r3, #1
	    	localImageX = 100;
 80037d0:	f8a4 242c 	strh.w	r2, [r4, #1068]	@ 0x42c
 80037d4:	f884 31fd 	strb.w	r3, [r4, #509]	@ 0x1fd
        rect.x = x;
 80037d8:	f8a4 214c 	strh.w	r2, [r4, #332]	@ 0x14c
        visible = vis;
 80037dc:	f884 3141 	strb.w	r3, [r4, #321]	@ 0x141
	        track1.setVisible(false);
	        track2.setVisible(false);
	        track3.setVisible(false);
	        track4.setVisible(false);

	        image1.invalidate();
 80037e0:	f504 70a4 	add.w	r0, r4, #328	@ 0x148
	    	isGameOver = false;
 80037e4:	f884 5434 	strb.w	r5, [r4, #1076]	@ 0x434
	    	tickCount = 0;
 80037e8:	f8c4 5430 	str.w	r5, [r4, #1072]	@ 0x430
        rect.y = y;
 80037ec:	f8a4 51de 	strh.w	r5, [r4, #478]	@ 0x1de
        visible = vis;
 80037f0:	f884 5229 	strb.w	r5, [r4, #553]	@ 0x229
 80037f4:	f884 5115 	strb.w	r5, [r4, #277]	@ 0x115
 80037f8:	f884 50e9 	strb.w	r5, [r4, #233]	@ 0xe9
 80037fc:	f884 50bd 	strb.w	r5, [r4, #189]	@ 0xbd
 8003800:	f884 5091 	strb.w	r5, [r4, #145]	@ 0x91
	        image1.invalidate();
 8003804:	f009 fcb6 	bl	800d174 <_ZNK8touchgfx8Drawable10invalidateEv>
	        lamb.invalidate();
 8003808:	f504 70ec 	add.w	r0, r4, #472	@ 0x1d8
 800380c:	f009 fcb2 	bl	800d174 <_ZNK8touchgfx8Drawable10invalidateEv>
	        textGameOver.invalidate();
 8003810:	f504 7001 	add.w	r0, r4, #516	@ 0x204
     *
     * @see Container::invalidate
     */
    void invalidate() const
    {
        container.invalidate();
 8003814:	f009 fcae 	bl	800d174 <_ZNK8touchgfx8Drawable10invalidateEv>
	    speedLevel++;    // tăng cấp độ (tùy dùng cho điểm số nếu cần)
	    carSpeedStep = fallSpeed;  // đồng bộ tốc độ xe theo tốc độ cừu
	}

	invalidate();
}
 8003818:	b002      	add	sp, #8
 800381a:	bd70      	pop	{r4, r5, r6, pc}
	if (osMessageQueueGet(Queue1Handle, &msg, NULL, 0) == osOK)
 800381c:	461a      	mov	r2, r3
 800381e:	f10d 0107 	add.w	r1, sp, #7
 8003822:	f002 ff01 	bl	8006628 <osMessageQueueGet>
 8003826:	b9b0      	cbnz	r0, 8003856 <_ZN11Screen2View15handleTickEventEv+0xe2>
	    if (msg == 'L' && localImageX > minX)
 8003828:	f89d 1007 	ldrb.w	r1, [sp, #7]
        return rect.width;
 800382c:	f9b4 2150 	ldrsh.w	r2, [r4, #336]	@ 0x150
 8003830:	f9b4 342c 	ldrsh.w	r3, [r4, #1068]	@ 0x42c
 8003834:	294c      	cmp	r1, #76	@ 0x4c
 8003836:	d122      	bne.n	800387e <_ZN11Screen2View15handleTickEventEv+0x10a>
 8003838:	2b00      	cmp	r3, #0
 800383a:	dd04      	ble.n	8003846 <_ZN11Screen2View15handleTickEventEv+0xd2>
	        localImageX -= carSpeedStep;
 800383c:	f8b4 243a 	ldrh.w	r2, [r4, #1082]	@ 0x43a
 8003840:	1a9b      	subs	r3, r3, r2
	        localImageX += carSpeedStep;
 8003842:	f8a4 342c 	strh.w	r3, [r4, #1068]	@ 0x42c
        rect.x = x;
 8003846:	f8b4 342c 	ldrh.w	r3, [r4, #1068]	@ 0x42c
 800384a:	f8a4 314c 	strh.w	r3, [r4, #332]	@ 0x14c
	    image1.invalidate();
 800384e:	f504 70a4 	add.w	r0, r4, #328	@ 0x148
 8003852:	f009 fc8f 	bl	800d174 <_ZNK8touchgfx8Drawable10invalidateEv>
	tickCount++;
 8003856:	f8d4 3430 	ldr.w	r3, [r4, #1072]	@ 0x430
	switch (tickCount % 5)
 800385a:	2205      	movs	r2, #5
	tickCount++;
 800385c:	3301      	adds	r3, #1
	switch (tickCount % 5)
 800385e:	fbb3 f2f2 	udiv	r2, r3, r2
 8003862:	eb02 0282 	add.w	r2, r2, r2, lsl #2
	tickCount++;
 8003866:	f8c4 3430 	str.w	r3, [r4, #1072]	@ 0x430
	switch (tickCount % 5)
 800386a:	1a9b      	subs	r3, r3, r2
 800386c:	3b01      	subs	r3, #1
 800386e:	2101      	movs	r1, #1
 8003870:	2200      	movs	r2, #0
 8003872:	2b03      	cmp	r3, #3
 8003874:	d80e      	bhi.n	8003894 <_ZN11Screen2View15handleTickEventEv+0x120>
 8003876:	e8df f003 	tbb	[pc, r3]
 800387a:	807b      	.short	0x807b
 800387c:	8a85      	.short	0x8a85
	    else if (msg == 'R' && localImageX < maxX)
 800387e:	2952      	cmp	r1, #82	@ 0x52
 8003880:	d1e1      	bne.n	8003846 <_ZN11Screen2View15handleTickEventEv+0xd2>
	    const int16_t maxX = 240 - image1.getWidth();  // giới hạn không ra ngoài màn hình
 8003882:	f1c2 02f0 	rsb	r2, r2, #240	@ 0xf0
	    else if (msg == 'R' && localImageX < maxX)
 8003886:	b212      	sxth	r2, r2
 8003888:	429a      	cmp	r2, r3
 800388a:	dddc      	ble.n	8003846 <_ZN11Screen2View15handleTickEventEv+0xd2>
	        localImageX += carSpeedStep;
 800388c:	f8b4 243a 	ldrh.w	r2, [r4, #1082]	@ 0x43a
 8003890:	4413      	add	r3, r2
 8003892:	e7d6      	b.n	8003842 <_ZN11Screen2View15handleTickEventEv+0xce>
        visible = vis;
 8003894:	f884 1141 	strb.w	r1, [r4, #321]	@ 0x141
 8003898:	f884 2091 	strb.w	r2, [r4, #145]	@ 0x91
	int newY = lamb.getY() + fallSpeed;
 800389c:	f9b4 31de 	ldrsh.w	r3, [r4, #478]	@ 0x1de
 80038a0:	f9b4 2436 	ldrsh.w	r2, [r4, #1078]	@ 0x436
 80038a4:	4413      	add	r3, r2
	if (newY >= 320)
 80038a6:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80038aa:	db34      	blt.n	8003916 <_ZN11Screen2View15handleTickEventEv+0x1a2>
	    score++;
 80038ac:	f8d4 3424 	ldr.w	r3, [r4, #1060]	@ 0x424
	    if (score > highScore)
 80038b0:	f8d4 2428 	ldr.w	r2, [r4, #1064]	@ 0x428
	    score++;
 80038b4:	3301      	adds	r3, #1
	    if (score > highScore)
 80038b6:	4293      	cmp	r3, r2
	    Unicode::snprintf(scoreBuffer, sizeof(scoreBuffer), "%d", score);
 80038b8:	f504 7575 	add.w	r5, r4, #980	@ 0x3d4
	            highScore = score;
 80038bc:	bfc8      	it	gt
 80038be:	f8c4 3428 	strgt.w	r3, [r4, #1064]	@ 0x428
	    Unicode::snprintf(scoreBuffer, sizeof(scoreBuffer), "%d", score);
 80038c2:	4a36      	ldr	r2, [pc, #216]	@ (800399c <_ZN11Screen2View15handleTickEventEv+0x228>)
	    score++;
 80038c4:	f8c4 3424 	str.w	r3, [r4, #1060]	@ 0x424
	    Unicode::snprintf(scoreBuffer, sizeof(scoreBuffer), "%d", score);
 80038c8:	2128      	movs	r1, #40	@ 0x28
 80038ca:	4628      	mov	r0, r5
 80038cc:	f00b fbda 	bl	800f084 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 80038d0:	f8c4 52e0 	str.w	r5, [r4, #736]	@ 0x2e0
	    textScore.invalidate();
 80038d4:	f504 7026 	add.w	r0, r4, #664	@ 0x298
	    Unicode::snprintf(highScoreBuffer, sizeof(highScoreBuffer), "%d", highScore);
 80038d8:	f504 757f 	add.w	r5, r4, #1020	@ 0x3fc
	    textScore.invalidate();
 80038dc:	f009 fc4a 	bl	800d174 <_ZNK8touchgfx8Drawable10invalidateEv>
	    Unicode::snprintf(highScoreBuffer, sizeof(highScoreBuffer), "%d", highScore);
 80038e0:	f8d4 3428 	ldr.w	r3, [r4, #1064]	@ 0x428
 80038e4:	4a2d      	ldr	r2, [pc, #180]	@ (800399c <_ZN11Screen2View15handleTickEventEv+0x228>)
 80038e6:	2128      	movs	r1, #40	@ 0x28
 80038e8:	4628      	mov	r0, r5
 80038ea:	f00b fbcb 	bl	800f084 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	    textHighScore.invalidate();
 80038ee:	f504 7013 	add.w	r0, r4, #588	@ 0x24c
 80038f2:	f8c4 5294 	str.w	r5, [r4, #660]	@ 0x294
 80038f6:	f009 fc3d 	bl	800d174 <_ZNK8touchgfx8Drawable10invalidateEv>
	    int index = xorshift32() % 4;
 80038fa:	f7ff fef9 	bl	80036f0 <_Z10xorshift32v>
	    int newX = index * 60 + 15;
 80038fe:	233c      	movs	r3, #60	@ 0x3c
	    int index = xorshift32() % 4;
 8003900:	f000 0003 	and.w	r0, r0, #3
	    int newX = index * 60 + 15;
 8003904:	4358      	muls	r0, r3
 8003906:	300f      	adds	r0, #15
	    lamb.setX(newX);
 8003908:	f8a4 01dc 	strh.w	r0, [r4, #476]	@ 0x1dc
	    lamb.invalidate(); // Thêm dòng này để cập nhật giao diện
 800390c:	f504 70ec 	add.w	r0, r4, #472	@ 0x1d8
 8003910:	f009 fc30 	bl	800d174 <_ZNK8touchgfx8Drawable10invalidateEv>
	    newY = 0;
 8003914:	2300      	movs	r3, #0
	lamb.setY(newY);
 8003916:	f8a4 31de 	strh.w	r3, [r4, #478]	@ 0x1de
	if (checkCollision())
 800391a:	6823      	ldr	r3, [r4, #0]
 800391c:	4620      	mov	r0, r4
 800391e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003920:	4798      	blx	r3
 8003922:	b158      	cbz	r0, 800393c <_ZN11Screen2View15handleTickEventEv+0x1c8>
	    isGameOver = true;
 8003924:	2301      	movs	r3, #1
 8003926:	f884 3434 	strb.w	r3, [r4, #1076]	@ 0x434
 800392a:	f884 3229 	strb.w	r3, [r4, #553]	@ 0x229
 800392e:	2300      	movs	r3, #0
 8003930:	f884 31fd 	strb.w	r3, [r4, #509]	@ 0x1fd
	    textGameOver.invalidate();
 8003934:	f504 7001 	add.w	r0, r4, #516	@ 0x204
 8003938:	f009 fc1c 	bl	800d174 <_ZNK8touchgfx8Drawable10invalidateEv>
	if (tickCount % 300 == 0 && fallSpeed < 5)
 800393c:	f8d4 3430 	ldr.w	r3, [r4, #1072]	@ 0x430
 8003940:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003944:	fbb3 f1f2 	udiv	r1, r3, r2
 8003948:	fb02 3311 	mls	r3, r2, r1, r3
 800394c:	b973      	cbnz	r3, 800396c <_ZN11Screen2View15handleTickEventEv+0x1f8>
 800394e:	f9b4 3436 	ldrsh.w	r3, [r4, #1078]	@ 0x436
 8003952:	2b04      	cmp	r3, #4
 8003954:	dc0a      	bgt.n	800396c <_ZN11Screen2View15handleTickEventEv+0x1f8>
	    speedLevel++;    // tăng cấp độ (tùy dùng cho điểm số nếu cần)
 8003956:	f8b4 2438 	ldrh.w	r2, [r4, #1080]	@ 0x438
	    fallSpeed++;     // tăng tốc cừu
 800395a:	3301      	adds	r3, #1
 800395c:	b21b      	sxth	r3, r3
	    speedLevel++;    // tăng cấp độ (tùy dùng cho điểm số nếu cần)
 800395e:	3201      	adds	r2, #1
	    fallSpeed++;     // tăng tốc cừu
 8003960:	f8a4 3436 	strh.w	r3, [r4, #1078]	@ 0x436
	    speedLevel++;    // tăng cấp độ (tùy dùng cho điểm số nếu cần)
 8003964:	f8a4 2438 	strh.w	r2, [r4, #1080]	@ 0x438
	    carSpeedStep = fallSpeed;  // đồng bộ tốc độ xe theo tốc độ cừu
 8003968:	f8a4 343a 	strh.w	r3, [r4, #1082]	@ 0x43a
 800396c:	1d20      	adds	r0, r4, #4
 800396e:	e751      	b.n	8003814 <_ZN11Screen2View15handleTickEventEv+0xa0>
 8003970:	f884 1115 	strb.w	r1, [r4, #277]	@ 0x115
 8003974:	f884 2141 	strb.w	r2, [r4, #321]	@ 0x141
    }
 8003978:	e790      	b.n	800389c <_ZN11Screen2View15handleTickEventEv+0x128>
        visible = vis;
 800397a:	f884 10e9 	strb.w	r1, [r4, #233]	@ 0xe9
 800397e:	f884 2115 	strb.w	r2, [r4, #277]	@ 0x115
    }
 8003982:	e78b      	b.n	800389c <_ZN11Screen2View15handleTickEventEv+0x128>
        visible = vis;
 8003984:	f884 10bd 	strb.w	r1, [r4, #189]	@ 0xbd
 8003988:	f884 20e9 	strb.w	r2, [r4, #233]	@ 0xe9
    }
 800398c:	e786      	b.n	800389c <_ZN11Screen2View15handleTickEventEv+0x128>
        visible = vis;
 800398e:	f884 1091 	strb.w	r1, [r4, #145]	@ 0x91
 8003992:	f884 20bd 	strb.w	r2, [r4, #189]	@ 0xbd
    }
 8003996:	e781      	b.n	800389c <_ZN11Screen2View15handleTickEventEv+0x128>
 8003998:	200015f4 	.word	0x200015f4
 800399c:	08013ca3 	.word	0x08013ca3

080039a0 <ili9341_GetLcdPixelWidth>:
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
}
 80039a0:	20f0      	movs	r0, #240	@ 0xf0
 80039a2:	4770      	bx	lr

080039a4 <ili9341_GetLcdPixelHeight>:
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
}
 80039a4:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 80039a8:	4770      	bx	lr

080039aa <ili9341_DisplayOn>:
  LCD_IO_WriteReg(LCD_Reg);
 80039aa:	2029      	movs	r0, #41	@ 0x29
 80039ac:	f7fd bf7e 	b.w	80018ac <LCD_IO_WriteReg>

080039b0 <ili9341_DisplayOff>:
 80039b0:	2028      	movs	r0, #40	@ 0x28
 80039b2:	f7fd bf7b 	b.w	80018ac <LCD_IO_WriteReg>

080039b6 <ili9341_Init>:
{
 80039b6:	b508      	push	{r3, lr}
  LCD_IO_Init();
 80039b8:	f7fd ff4c 	bl	8001854 <LCD_IO_Init>
  LCD_IO_WriteReg(LCD_Reg);
 80039bc:	20ca      	movs	r0, #202	@ 0xca
 80039be:	f7fd ff75 	bl	80018ac <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80039c2:	20c3      	movs	r0, #195	@ 0xc3
 80039c4:	f7fd ff56 	bl	8001874 <LCD_IO_WriteData>
 80039c8:	2008      	movs	r0, #8
 80039ca:	f7fd ff53 	bl	8001874 <LCD_IO_WriteData>
 80039ce:	2050      	movs	r0, #80	@ 0x50
 80039d0:	f7fd ff50 	bl	8001874 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80039d4:	20cf      	movs	r0, #207	@ 0xcf
 80039d6:	f7fd ff69 	bl	80018ac <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80039da:	2000      	movs	r0, #0
 80039dc:	f7fd ff4a 	bl	8001874 <LCD_IO_WriteData>
 80039e0:	20c1      	movs	r0, #193	@ 0xc1
 80039e2:	f7fd ff47 	bl	8001874 <LCD_IO_WriteData>
 80039e6:	2030      	movs	r0, #48	@ 0x30
 80039e8:	f7fd ff44 	bl	8001874 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80039ec:	20ed      	movs	r0, #237	@ 0xed
 80039ee:	f7fd ff5d 	bl	80018ac <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80039f2:	2064      	movs	r0, #100	@ 0x64
 80039f4:	f7fd ff3e 	bl	8001874 <LCD_IO_WriteData>
 80039f8:	2003      	movs	r0, #3
 80039fa:	f7fd ff3b 	bl	8001874 <LCD_IO_WriteData>
 80039fe:	2012      	movs	r0, #18
 8003a00:	f7fd ff38 	bl	8001874 <LCD_IO_WriteData>
 8003a04:	2081      	movs	r0, #129	@ 0x81
 8003a06:	f7fd ff35 	bl	8001874 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003a0a:	20e8      	movs	r0, #232	@ 0xe8
 8003a0c:	f7fd ff4e 	bl	80018ac <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003a10:	2085      	movs	r0, #133	@ 0x85
 8003a12:	f7fd ff2f 	bl	8001874 <LCD_IO_WriteData>
 8003a16:	2000      	movs	r0, #0
 8003a18:	f7fd ff2c 	bl	8001874 <LCD_IO_WriteData>
 8003a1c:	2078      	movs	r0, #120	@ 0x78
 8003a1e:	f7fd ff29 	bl	8001874 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003a22:	20cb      	movs	r0, #203	@ 0xcb
 8003a24:	f7fd ff42 	bl	80018ac <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003a28:	2039      	movs	r0, #57	@ 0x39
 8003a2a:	f7fd ff23 	bl	8001874 <LCD_IO_WriteData>
 8003a2e:	202c      	movs	r0, #44	@ 0x2c
 8003a30:	f7fd ff20 	bl	8001874 <LCD_IO_WriteData>
 8003a34:	2000      	movs	r0, #0
 8003a36:	f7fd ff1d 	bl	8001874 <LCD_IO_WriteData>
 8003a3a:	2034      	movs	r0, #52	@ 0x34
 8003a3c:	f7fd ff1a 	bl	8001874 <LCD_IO_WriteData>
 8003a40:	2002      	movs	r0, #2
 8003a42:	f7fd ff17 	bl	8001874 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003a46:	20f7      	movs	r0, #247	@ 0xf7
 8003a48:	f7fd ff30 	bl	80018ac <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003a4c:	2020      	movs	r0, #32
 8003a4e:	f7fd ff11 	bl	8001874 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003a52:	20ea      	movs	r0, #234	@ 0xea
 8003a54:	f7fd ff2a 	bl	80018ac <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003a58:	2000      	movs	r0, #0
 8003a5a:	f7fd ff0b 	bl	8001874 <LCD_IO_WriteData>
 8003a5e:	2000      	movs	r0, #0
 8003a60:	f7fd ff08 	bl	8001874 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003a64:	20b1      	movs	r0, #177	@ 0xb1
 8003a66:	f7fd ff21 	bl	80018ac <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003a6a:	2000      	movs	r0, #0
 8003a6c:	f7fd ff02 	bl	8001874 <LCD_IO_WriteData>
 8003a70:	201b      	movs	r0, #27
 8003a72:	f7fd feff 	bl	8001874 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003a76:	20b6      	movs	r0, #182	@ 0xb6
 8003a78:	f7fd ff18 	bl	80018ac <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003a7c:	200a      	movs	r0, #10
 8003a7e:	f7fd fef9 	bl	8001874 <LCD_IO_WriteData>
 8003a82:	20a2      	movs	r0, #162	@ 0xa2
 8003a84:	f7fd fef6 	bl	8001874 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003a88:	20c0      	movs	r0, #192	@ 0xc0
 8003a8a:	f7fd ff0f 	bl	80018ac <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003a8e:	2010      	movs	r0, #16
 8003a90:	f7fd fef0 	bl	8001874 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003a94:	20c1      	movs	r0, #193	@ 0xc1
 8003a96:	f7fd ff09 	bl	80018ac <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003a9a:	2010      	movs	r0, #16
 8003a9c:	f7fd feea 	bl	8001874 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003aa0:	20c5      	movs	r0, #197	@ 0xc5
 8003aa2:	f7fd ff03 	bl	80018ac <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003aa6:	2045      	movs	r0, #69	@ 0x45
 8003aa8:	f7fd fee4 	bl	8001874 <LCD_IO_WriteData>
 8003aac:	2015      	movs	r0, #21
 8003aae:	f7fd fee1 	bl	8001874 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003ab2:	20c7      	movs	r0, #199	@ 0xc7
 8003ab4:	f7fd fefa 	bl	80018ac <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003ab8:	2090      	movs	r0, #144	@ 0x90
 8003aba:	f7fd fedb 	bl	8001874 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003abe:	2036      	movs	r0, #54	@ 0x36
 8003ac0:	f7fd fef4 	bl	80018ac <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003ac4:	20c8      	movs	r0, #200	@ 0xc8
 8003ac6:	f7fd fed5 	bl	8001874 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003aca:	20f2      	movs	r0, #242	@ 0xf2
 8003acc:	f7fd feee 	bl	80018ac <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003ad0:	2000      	movs	r0, #0
 8003ad2:	f7fd fecf 	bl	8001874 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003ad6:	20b0      	movs	r0, #176	@ 0xb0
 8003ad8:	f7fd fee8 	bl	80018ac <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003adc:	20c2      	movs	r0, #194	@ 0xc2
 8003ade:	f7fd fec9 	bl	8001874 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003ae2:	20b6      	movs	r0, #182	@ 0xb6
 8003ae4:	f7fd fee2 	bl	80018ac <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003ae8:	200a      	movs	r0, #10
 8003aea:	f7fd fec3 	bl	8001874 <LCD_IO_WriteData>
 8003aee:	20a7      	movs	r0, #167	@ 0xa7
 8003af0:	f7fd fec0 	bl	8001874 <LCD_IO_WriteData>
 8003af4:	2027      	movs	r0, #39	@ 0x27
 8003af6:	f7fd febd 	bl	8001874 <LCD_IO_WriteData>
 8003afa:	2004      	movs	r0, #4
 8003afc:	f7fd feba 	bl	8001874 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003b00:	202a      	movs	r0, #42	@ 0x2a
 8003b02:	f7fd fed3 	bl	80018ac <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003b06:	2000      	movs	r0, #0
 8003b08:	f7fd feb4 	bl	8001874 <LCD_IO_WriteData>
 8003b0c:	2000      	movs	r0, #0
 8003b0e:	f7fd feb1 	bl	8001874 <LCD_IO_WriteData>
 8003b12:	2000      	movs	r0, #0
 8003b14:	f7fd feae 	bl	8001874 <LCD_IO_WriteData>
 8003b18:	20ef      	movs	r0, #239	@ 0xef
 8003b1a:	f7fd feab 	bl	8001874 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003b1e:	202b      	movs	r0, #43	@ 0x2b
 8003b20:	f7fd fec4 	bl	80018ac <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003b24:	2000      	movs	r0, #0
 8003b26:	f7fd fea5 	bl	8001874 <LCD_IO_WriteData>
 8003b2a:	2000      	movs	r0, #0
 8003b2c:	f7fd fea2 	bl	8001874 <LCD_IO_WriteData>
 8003b30:	2001      	movs	r0, #1
 8003b32:	f7fd fe9f 	bl	8001874 <LCD_IO_WriteData>
 8003b36:	203f      	movs	r0, #63	@ 0x3f
 8003b38:	f7fd fe9c 	bl	8001874 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003b3c:	20f6      	movs	r0, #246	@ 0xf6
 8003b3e:	f7fd feb5 	bl	80018ac <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003b42:	2001      	movs	r0, #1
 8003b44:	f7fd fe96 	bl	8001874 <LCD_IO_WriteData>
 8003b48:	2000      	movs	r0, #0
 8003b4a:	f7fd fe93 	bl	8001874 <LCD_IO_WriteData>
 8003b4e:	2006      	movs	r0, #6
 8003b50:	f7fd fe90 	bl	8001874 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003b54:	202c      	movs	r0, #44	@ 0x2c
 8003b56:	f7fd fea9 	bl	80018ac <LCD_IO_WriteReg>
  LCD_Delay(200);
 8003b5a:	20c8      	movs	r0, #200	@ 0xc8
 8003b5c:	f7fd fef4 	bl	8001948 <LCD_Delay>
  LCD_IO_WriteReg(LCD_Reg);
 8003b60:	2026      	movs	r0, #38	@ 0x26
 8003b62:	f7fd fea3 	bl	80018ac <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003b66:	2001      	movs	r0, #1
 8003b68:	f7fd fe84 	bl	8001874 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003b6c:	20e0      	movs	r0, #224	@ 0xe0
 8003b6e:	f7fd fe9d 	bl	80018ac <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003b72:	200f      	movs	r0, #15
 8003b74:	f7fd fe7e 	bl	8001874 <LCD_IO_WriteData>
 8003b78:	2029      	movs	r0, #41	@ 0x29
 8003b7a:	f7fd fe7b 	bl	8001874 <LCD_IO_WriteData>
 8003b7e:	2024      	movs	r0, #36	@ 0x24
 8003b80:	f7fd fe78 	bl	8001874 <LCD_IO_WriteData>
 8003b84:	200c      	movs	r0, #12
 8003b86:	f7fd fe75 	bl	8001874 <LCD_IO_WriteData>
 8003b8a:	200e      	movs	r0, #14
 8003b8c:	f7fd fe72 	bl	8001874 <LCD_IO_WriteData>
 8003b90:	2009      	movs	r0, #9
 8003b92:	f7fd fe6f 	bl	8001874 <LCD_IO_WriteData>
 8003b96:	204e      	movs	r0, #78	@ 0x4e
 8003b98:	f7fd fe6c 	bl	8001874 <LCD_IO_WriteData>
 8003b9c:	2078      	movs	r0, #120	@ 0x78
 8003b9e:	f7fd fe69 	bl	8001874 <LCD_IO_WriteData>
 8003ba2:	203c      	movs	r0, #60	@ 0x3c
 8003ba4:	f7fd fe66 	bl	8001874 <LCD_IO_WriteData>
 8003ba8:	2009      	movs	r0, #9
 8003baa:	f7fd fe63 	bl	8001874 <LCD_IO_WriteData>
 8003bae:	2013      	movs	r0, #19
 8003bb0:	f7fd fe60 	bl	8001874 <LCD_IO_WriteData>
 8003bb4:	2005      	movs	r0, #5
 8003bb6:	f7fd fe5d 	bl	8001874 <LCD_IO_WriteData>
 8003bba:	2017      	movs	r0, #23
 8003bbc:	f7fd fe5a 	bl	8001874 <LCD_IO_WriteData>
 8003bc0:	2011      	movs	r0, #17
 8003bc2:	f7fd fe57 	bl	8001874 <LCD_IO_WriteData>
 8003bc6:	2000      	movs	r0, #0
 8003bc8:	f7fd fe54 	bl	8001874 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003bcc:	20e1      	movs	r0, #225	@ 0xe1
 8003bce:	f7fd fe6d 	bl	80018ac <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003bd2:	2000      	movs	r0, #0
 8003bd4:	f7fd fe4e 	bl	8001874 <LCD_IO_WriteData>
 8003bd8:	2016      	movs	r0, #22
 8003bda:	f7fd fe4b 	bl	8001874 <LCD_IO_WriteData>
 8003bde:	201b      	movs	r0, #27
 8003be0:	f7fd fe48 	bl	8001874 <LCD_IO_WriteData>
 8003be4:	2004      	movs	r0, #4
 8003be6:	f7fd fe45 	bl	8001874 <LCD_IO_WriteData>
 8003bea:	2011      	movs	r0, #17
 8003bec:	f7fd fe42 	bl	8001874 <LCD_IO_WriteData>
 8003bf0:	2007      	movs	r0, #7
 8003bf2:	f7fd fe3f 	bl	8001874 <LCD_IO_WriteData>
 8003bf6:	2031      	movs	r0, #49	@ 0x31
 8003bf8:	f7fd fe3c 	bl	8001874 <LCD_IO_WriteData>
 8003bfc:	2033      	movs	r0, #51	@ 0x33
 8003bfe:	f7fd fe39 	bl	8001874 <LCD_IO_WriteData>
 8003c02:	2042      	movs	r0, #66	@ 0x42
 8003c04:	f7fd fe36 	bl	8001874 <LCD_IO_WriteData>
 8003c08:	2005      	movs	r0, #5
 8003c0a:	f7fd fe33 	bl	8001874 <LCD_IO_WriteData>
 8003c0e:	200c      	movs	r0, #12
 8003c10:	f7fd fe30 	bl	8001874 <LCD_IO_WriteData>
 8003c14:	200a      	movs	r0, #10
 8003c16:	f7fd fe2d 	bl	8001874 <LCD_IO_WriteData>
 8003c1a:	2028      	movs	r0, #40	@ 0x28
 8003c1c:	f7fd fe2a 	bl	8001874 <LCD_IO_WriteData>
 8003c20:	202f      	movs	r0, #47	@ 0x2f
 8003c22:	f7fd fe27 	bl	8001874 <LCD_IO_WriteData>
 8003c26:	200f      	movs	r0, #15
 8003c28:	f7fd fe24 	bl	8001874 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003c2c:	2011      	movs	r0, #17
 8003c2e:	f7fd fe3d 	bl	80018ac <LCD_IO_WriteReg>
  LCD_Delay(200);
 8003c32:	20c8      	movs	r0, #200	@ 0xc8
 8003c34:	f7fd fe88 	bl	8001948 <LCD_Delay>
  LCD_IO_WriteReg(LCD_Reg);
 8003c38:	2029      	movs	r0, #41	@ 0x29
 8003c3a:	f7fd fe37 	bl	80018ac <LCD_IO_WriteReg>
}
 8003c3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  LCD_IO_WriteReg(LCD_Reg);
 8003c42:	202c      	movs	r0, #44	@ 0x2c
 8003c44:	f7fd be32 	b.w	80018ac <LCD_IO_WriteReg>

08003c48 <ili9341_ReadID>:
{
 8003c48:	b508      	push	{r3, lr}
  LCD_IO_Init();
 8003c4a:	f7fd fe03 	bl	8001854 <LCD_IO_Init>
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8003c4e:	2103      	movs	r1, #3
 8003c50:	20d3      	movs	r0, #211	@ 0xd3
 8003c52:	f7fd fe47 	bl	80018e4 <LCD_IO_ReadData>
}
 8003c56:	b280      	uxth	r0, r0
 8003c58:	bd08      	pop	{r3, pc}

08003c5a <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 8003c5a:	b510      	push	{r4, lr}
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 8003c5c:	b2c4      	uxtb	r4, r0
 8003c5e:	2202      	movs	r2, #2
 8003c60:	2103      	movs	r1, #3
 8003c62:	4620      	mov	r0, r4
 8003c64:	f7fd fdac 	bl	80017c0 <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 8003c68:	200a      	movs	r0, #10
 8003c6a:	f7fd fdf1 	bl	8001850 <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 8003c6e:	4620      	mov	r0, r4
 8003c70:	2200      	movs	r2, #0
 8003c72:	2103      	movs	r1, #3
 8003c74:	f7fd fda4 	bl	80017c0 <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
}
 8003c78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  IOE_Delay(2); 
 8003c7c:	2002      	movs	r0, #2
 8003c7e:	f7fd bde7 	b.w	8001850 <IOE_Delay>

08003c82 <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 8003c82:	b538      	push	{r3, r4, r5, lr}
 8003c84:	4604      	mov	r4, r0
  /* Initialize IO BUS layer */
  IOE_Init(); 
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8003c86:	b2e4      	uxtb	r4, r4
  IOE_Init(); 
 8003c88:	f7fd fd98 	bl	80017bc <IOE_Init>
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8003c8c:	2100      	movs	r1, #0
 8003c8e:	4620      	mov	r0, r4
 8003c90:	f7fd fdae 	bl	80017f0 <IOE_Read>
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 8003c94:	2101      	movs	r1, #1
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8003c96:	4605      	mov	r5, r0
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 8003c98:	4620      	mov	r0, r4
 8003c9a:	f7fd fda9 	bl	80017f0 <IOE_Read>
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8003c9e:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
}
 8003ca2:	b280      	uxth	r0, r0
 8003ca4:	bd38      	pop	{r3, r4, r5, pc}

08003ca6 <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 8003ca6:	b510      	push	{r4, lr}
  uint8_t state;
  uint8_t ret = 0;
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)0x80);
 8003ca8:	b2c4      	uxtb	r4, r0
 8003caa:	2140      	movs	r1, #64	@ 0x40
 8003cac:	4620      	mov	r0, r4
 8003cae:	f7fd fd9f 	bl	80017f0 <IOE_Read>
  
  if(state > 0)
 8003cb2:	0603      	lsls	r3, r0, #24
 8003cb4:	d507      	bpl.n	8003cc6 <stmpe811_TS_DetectTouch+0x20>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 8003cb6:	214c      	movs	r1, #76	@ 0x4c
 8003cb8:	4620      	mov	r0, r4
 8003cba:	f7fd fd99 	bl	80017f0 <IOE_Read>
 8003cbe:	3800      	subs	r0, #0
 8003cc0:	bf18      	it	ne
 8003cc2:	2001      	movne	r0, #1
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
  }
  
  return ret;
}
 8003cc4:	bd10      	pop	{r4, pc}
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	214b      	movs	r1, #75	@ 0x4b
 8003cca:	4620      	mov	r0, r4
 8003ccc:	f7fd fd78 	bl	80017c0 <IOE_Write>
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8003cd0:	4620      	mov	r0, r4
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	214b      	movs	r1, #75	@ 0x4b
 8003cd6:	f7fd fd73 	bl	80017c0 <IOE_Write>
  uint8_t ret = 0;
 8003cda:	2000      	movs	r0, #0
 8003cdc:	e7f2      	b.n	8003cc4 <stmpe811_TS_DetectTouch+0x1e>

08003cde <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8003cde:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 8003ce0:	2304      	movs	r3, #4
 8003ce2:	b2c4      	uxtb	r4, r0
{
 8003ce4:	460e      	mov	r6, r1
 8003ce6:	4615      	mov	r5, r2
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 8003ce8:	21d7      	movs	r1, #215	@ 0xd7
 8003cea:	eb0d 0203 	add.w	r2, sp, r3
 8003cee:	4620      	mov	r0, r4
 8003cf0:	f7fd fd98 	bl	8001824 <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 8003cf4:	9b01      	ldr	r3, [sp, #4]
 8003cf6:	ba1b      	rev	r3, r3
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 8003cf8:	0d1a      	lsrs	r2, r3, #20
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 8003cfa:	f3c3 230b 	ubfx	r3, r3, #8, #12
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 8003cfe:	8032      	strh	r2, [r6, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8003d00:	4620      	mov	r0, r4
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 8003d02:	802b      	strh	r3, [r5, #0]
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8003d04:	2201      	movs	r2, #1
 8003d06:	214b      	movs	r1, #75	@ 0x4b
 8003d08:	f7fd fd5a 	bl	80017c0 <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	214b      	movs	r1, #75	@ 0x4b
 8003d10:	4620      	mov	r0, r4
 8003d12:	f7fd fd55 	bl	80017c0 <IOE_Write>
}
 8003d16:	b002      	add	sp, #8
 8003d18:	bd70      	pop	{r4, r5, r6, pc}
	...

08003d1c <stmpe811_Init>:
{
 8003d1c:	b510      	push	{r4, lr}
  uint8_t idx = 0;
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
  {
    if(stmpe811[idx] == DeviceAddr)
 8003d1e:	4a0a      	ldr	r2, [pc, #40]	@ (8003d48 <stmpe811_Init+0x2c>)
 8003d20:	7813      	ldrb	r3, [r2, #0]
 8003d22:	4298      	cmp	r0, r3
{
 8003d24:	4604      	mov	r4, r0
    if(stmpe811[idx] == DeviceAddr)
 8003d26:	d00d      	beq.n	8003d44 <stmpe811_Init+0x28>
 8003d28:	7851      	ldrb	r1, [r2, #1]
 8003d2a:	4288      	cmp	r0, r1
 8003d2c:	d00a      	beq.n	8003d44 <stmpe811_Init+0x28>
 8003d2e:	b10b      	cbz	r3, 8003d34 <stmpe811_Init+0x18>
 8003d30:	b941      	cbnz	r1, 8003d44 <stmpe811_Init+0x28>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8003d32:	2301      	movs	r3, #1
      stmpe811[empty] = DeviceAddr;
 8003d34:	54d4      	strb	r4, [r2, r3]
      IOE_Init(); 
 8003d36:	f7fd fd41 	bl	80017bc <IOE_Init>
      stmpe811_Reset(DeviceAddr);
 8003d3a:	4620      	mov	r0, r4
}
 8003d3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      stmpe811_Reset(DeviceAddr);
 8003d40:	f7ff bf8b 	b.w	8003c5a <stmpe811_Reset>
}
 8003d44:	bd10      	pop	{r4, pc}
 8003d46:	bf00      	nop
 8003d48:	200018d0 	.word	0x200018d0

08003d4c <stmpe811_EnableGlobalIT>:
{
 8003d4c:	b510      	push	{r4, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8003d4e:	b2c4      	uxtb	r4, r0
 8003d50:	2109      	movs	r1, #9
 8003d52:	4620      	mov	r0, r4
 8003d54:	f7fd fd4c 	bl	80017f0 <IOE_Read>
  tmp |= (uint8_t)STMPE811_GIT_EN;
 8003d58:	f040 0201 	orr.w	r2, r0, #1
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 8003d5c:	b2d2      	uxtb	r2, r2
 8003d5e:	4620      	mov	r0, r4
 8003d60:	2109      	movs	r1, #9
}
 8003d62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 8003d66:	f7fd bd2b 	b.w	80017c0 <IOE_Write>

08003d6a <stmpe811_DisableGlobalIT>:
{
 8003d6a:	b510      	push	{r4, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8003d6c:	b2c4      	uxtb	r4, r0
 8003d6e:	2109      	movs	r1, #9
 8003d70:	4620      	mov	r0, r4
 8003d72:	f7fd fd3d 	bl	80017f0 <IOE_Read>
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 8003d76:	2109      	movs	r1, #9
 8003d78:	f000 02fe 	and.w	r2, r0, #254	@ 0xfe
 8003d7c:	4620      	mov	r0, r4
}
 8003d7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 8003d82:	f7fd bd1d 	b.w	80017c0 <IOE_Write>

08003d86 <stmpe811_EnableITSource>:
{
 8003d86:	b538      	push	{r3, r4, r5, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8003d88:	b2c4      	uxtb	r4, r0
{
 8003d8a:	460d      	mov	r5, r1
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8003d8c:	4620      	mov	r0, r4
 8003d8e:	210a      	movs	r1, #10
 8003d90:	f7fd fd2e 	bl	80017f0 <IOE_Read>
  tmp |= Source; 
 8003d94:	ea40 0205 	orr.w	r2, r0, r5
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8003d98:	b2d2      	uxtb	r2, r2
 8003d9a:	4620      	mov	r0, r4
 8003d9c:	210a      	movs	r1, #10
}
 8003d9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8003da2:	f7fd bd0d 	b.w	80017c0 <IOE_Write>

08003da6 <stmpe811_TS_EnableIT>:
{
 8003da6:	b510      	push	{r4, lr}
 8003da8:	4604      	mov	r4, r0
  IOE_ITConfig();
 8003daa:	f7fd fd08 	bl	80017be <IOE_ITConfig>
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 8003dae:	4620      	mov	r0, r4
 8003db0:	211f      	movs	r1, #31
 8003db2:	f7ff ffe8 	bl	8003d86 <stmpe811_EnableITSource>
  stmpe811_EnableGlobalIT(DeviceAddr);
 8003db6:	4620      	mov	r0, r4
}
 8003db8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  stmpe811_EnableGlobalIT(DeviceAddr);
 8003dbc:	f7ff bfc6 	b.w	8003d4c <stmpe811_EnableGlobalIT>

08003dc0 <stmpe811_DisableITSource>:
{
 8003dc0:	b538      	push	{r3, r4, r5, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8003dc2:	b2c4      	uxtb	r4, r0
{
 8003dc4:	460d      	mov	r5, r1
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8003dc6:	4620      	mov	r0, r4
 8003dc8:	210a      	movs	r1, #10
 8003dca:	f7fd fd11 	bl	80017f0 <IOE_Read>
  tmp &= ~Source; 
 8003dce:	ea20 0205 	bic.w	r2, r0, r5
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8003dd2:	b2d2      	uxtb	r2, r2
 8003dd4:	4620      	mov	r0, r4
 8003dd6:	210a      	movs	r1, #10
}
 8003dd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8003ddc:	f7fd bcf0 	b.w	80017c0 <IOE_Write>

08003de0 <stmpe811_TS_DisableIT>:
{
 8003de0:	b510      	push	{r4, lr}
 8003de2:	4604      	mov	r4, r0
  stmpe811_DisableGlobalIT(DeviceAddr);
 8003de4:	f7ff ffc1 	bl	8003d6a <stmpe811_DisableGlobalIT>
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 8003de8:	4620      	mov	r0, r4
 8003dea:	211f      	movs	r1, #31
}
 8003dec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 8003df0:	f7ff bfe6 	b.w	8003dc0 <stmpe811_DisableITSource>

08003df4 <stmpe811_ReadGITStatus>:
{
 8003df4:	b510      	push	{r4, lr}
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 8003df6:	b2c0      	uxtb	r0, r0
{
 8003df8:	460c      	mov	r4, r1
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 8003dfa:	210b      	movs	r1, #11
 8003dfc:	f7fd fcf8 	bl	80017f0 <IOE_Read>
}
 8003e00:	4020      	ands	r0, r4
 8003e02:	bd10      	pop	{r4, pc}

08003e04 <stmpe811_TS_ITStatus>:
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 8003e04:	211f      	movs	r1, #31
 8003e06:	f7ff bff5 	b.w	8003df4 <stmpe811_ReadGITStatus>

08003e0a <stmpe811_ClearGlobalIT>:
{
 8003e0a:	460a      	mov	r2, r1
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 8003e0c:	b2c0      	uxtb	r0, r0
 8003e0e:	210b      	movs	r1, #11
 8003e10:	f7fd bcd6 	b.w	80017c0 <IOE_Write>

08003e14 <stmpe811_TS_ClearIT>:
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 8003e14:	211f      	movs	r1, #31
 8003e16:	f7ff bff8 	b.w	8003e0a <stmpe811_ClearGlobalIT>

08003e1a <stmpe811_IO_EnableAF>:
{
 8003e1a:	b538      	push	{r3, r4, r5, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 8003e1c:	b2c4      	uxtb	r4, r0
{
 8003e1e:	460d      	mov	r5, r1
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 8003e20:	4620      	mov	r0, r4
 8003e22:	2117      	movs	r1, #23
 8003e24:	f7fd fce4 	bl	80017f0 <IOE_Read>
  tmp &= ~(uint8_t)IO_Pin;   
 8003e28:	ea20 0205 	bic.w	r2, r0, r5
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 8003e2c:	b2d2      	uxtb	r2, r2
 8003e2e:	4620      	mov	r0, r4
 8003e30:	2117      	movs	r1, #23
}
 8003e32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 8003e36:	f7fd bcc3 	b.w	80017c0 <IOE_Write>

08003e3a <stmpe811_TS_Start>:
{
 8003e3a:	b570      	push	{r4, r5, r6, lr}
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8003e3c:	b2c4      	uxtb	r4, r0
{
 8003e3e:	4606      	mov	r6, r0
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8003e40:	2104      	movs	r1, #4
 8003e42:	4620      	mov	r0, r4
 8003e44:	f7fd fcd4 	bl	80017f0 <IOE_Read>
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8003e48:	2104      	movs	r1, #4
 8003e4a:	f000 02fb 	and.w	r2, r0, #251	@ 0xfb
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8003e4e:	4605      	mov	r5, r0
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8003e50:	4620      	mov	r0, r4
 8003e52:	f7fd fcb5 	bl	80017c0 <IOE_Write>
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 8003e56:	4630      	mov	r0, r6
 8003e58:	21f0      	movs	r1, #240	@ 0xf0
 8003e5a:	f7ff ffde 	bl	8003e1a <stmpe811_IO_EnableAF>
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8003e5e:	f005 02f8 	and.w	r2, r5, #248	@ 0xf8
 8003e62:	4620      	mov	r0, r4
 8003e64:	2104      	movs	r1, #4
 8003e66:	f7fd fcab 	bl	80017c0 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 8003e6a:	2249      	movs	r2, #73	@ 0x49
 8003e6c:	2120      	movs	r1, #32
 8003e6e:	4620      	mov	r0, r4
 8003e70:	f7fd fca6 	bl	80017c0 <IOE_Write>
  IOE_Delay(2); 
 8003e74:	2002      	movs	r0, #2
 8003e76:	f7fd fceb 	bl	8001850 <IOE_Delay>
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 8003e7a:	4620      	mov	r0, r4
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	2121      	movs	r1, #33	@ 0x21
 8003e80:	f7fd fc9e 	bl	80017c0 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 8003e84:	4620      	mov	r0, r4
 8003e86:	229a      	movs	r2, #154	@ 0x9a
 8003e88:	2141      	movs	r1, #65	@ 0x41
 8003e8a:	f7fd fc99 	bl	80017c0 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 8003e8e:	4620      	mov	r0, r4
 8003e90:	2201      	movs	r2, #1
 8003e92:	214a      	movs	r1, #74	@ 0x4a
 8003e94:	f7fd fc94 	bl	80017c0 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8003e98:	4620      	mov	r0, r4
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	214b      	movs	r1, #75	@ 0x4b
 8003e9e:	f7fd fc8f 	bl	80017c0 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8003ea2:	4620      	mov	r0, r4
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	214b      	movs	r1, #75	@ 0x4b
 8003ea8:	f7fd fc8a 	bl	80017c0 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 8003eac:	4620      	mov	r0, r4
 8003eae:	2201      	movs	r2, #1
 8003eb0:	2156      	movs	r1, #86	@ 0x56
 8003eb2:	f7fd fc85 	bl	80017c0 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 8003eb6:	4620      	mov	r0, r4
 8003eb8:	2201      	movs	r2, #1
 8003eba:	2158      	movs	r1, #88	@ 0x58
 8003ebc:	f7fd fc80 	bl	80017c0 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 8003ec0:	4620      	mov	r0, r4
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	2140      	movs	r1, #64	@ 0x40
 8003ec6:	f7fd fc7b 	bl	80017c0 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 8003eca:	4620      	mov	r0, r4
 8003ecc:	22ff      	movs	r2, #255	@ 0xff
 8003ece:	210b      	movs	r1, #11
 8003ed0:	f7fd fc76 	bl	80017c0 <IOE_Write>
}
 8003ed4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  IOE_Delay(2); 
 8003ed8:	2002      	movs	r0, #2
 8003eda:	f7fd bcb9 	b.w	8001850 <IOE_Delay>
	...

08003ee0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003ee0:	4b05      	ldr	r3, [pc, #20]	@ (8003ef8 <SystemInit+0x18>)
 8003ee2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003ee6:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
 8003eea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003eee:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003ef2:	609a      	str	r2, [r3, #8]
#endif
}
 8003ef4:	4770      	bx	lr
 8003ef6:	bf00      	nop
 8003ef8:	e000ed00 	.word	0xe000ed00

08003efc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003efc:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003efe:	4b0b      	ldr	r3, [pc, #44]	@ (8003f2c <HAL_Init+0x30>)
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f06:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003f0e:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f16:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f18:	2003      	movs	r0, #3
 8003f1a:	f000 f82f 	bl	8003f7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003f1e:	2000      	movs	r0, #0
 8003f20:	f7fd ff54 	bl	8001dcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003f24:	f7fd fd1e 	bl	8001964 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8003f28:	2000      	movs	r0, #0
 8003f2a:	bd08      	pop	{r3, pc}
 8003f2c:	40023c00 	.word	0x40023c00

08003f30 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8003f30:	4a03      	ldr	r2, [pc, #12]	@ (8003f40 <HAL_IncTick+0x10>)
 8003f32:	4b04      	ldr	r3, [pc, #16]	@ (8003f44 <HAL_IncTick+0x14>)
 8003f34:	6811      	ldr	r1, [r2, #0]
 8003f36:	781b      	ldrb	r3, [r3, #0]
 8003f38:	440b      	add	r3, r1
 8003f3a:	6013      	str	r3, [r2, #0]
}
 8003f3c:	4770      	bx	lr
 8003f3e:	bf00      	nop
 8003f40:	200018d4 	.word	0x200018d4
 8003f44:	20000078 	.word	0x20000078

08003f48 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003f48:	4b01      	ldr	r3, [pc, #4]	@ (8003f50 <HAL_GetTick+0x8>)
 8003f4a:	6818      	ldr	r0, [r3, #0]
}
 8003f4c:	4770      	bx	lr
 8003f4e:	bf00      	nop
 8003f50:	200018d4 	.word	0x200018d4

08003f54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f54:	b538      	push	{r3, r4, r5, lr}
 8003f56:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003f58:	f7ff fff6 	bl	8003f48 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003f5c:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8003f5e:	bf1c      	itt	ne
 8003f60:	4b05      	ldrne	r3, [pc, #20]	@ (8003f78 <HAL_Delay+0x24>)
 8003f62:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8003f64:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8003f66:	bf18      	it	ne
 8003f68:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003f6a:	f7ff ffed 	bl	8003f48 <HAL_GetTick>
 8003f6e:	1b43      	subs	r3, r0, r5
 8003f70:	42a3      	cmp	r3, r4
 8003f72:	d3fa      	bcc.n	8003f6a <HAL_Delay+0x16>
  {
  }
}
 8003f74:	bd38      	pop	{r3, r4, r5, pc}
 8003f76:	bf00      	nop
 8003f78:	20000078 	.word	0x20000078

08003f7c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f7c:	4907      	ldr	r1, [pc, #28]	@ (8003f9c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8003f7e:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f80:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f84:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f86:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f88:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f8c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f90:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003f94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8003f98:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003f9a:	4770      	bx	lr
 8003f9c:	e000ed00 	.word	0xe000ed00

08003fa0 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003fa0:	4b16      	ldr	r3, [pc, #88]	@ (8003ffc <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003fa2:	b530      	push	{r4, r5, lr}
 8003fa4:	68dc      	ldr	r4, [r3, #12]
 8003fa6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003faa:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003fae:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003fb0:	2b04      	cmp	r3, #4
 8003fb2:	bf28      	it	cs
 8003fb4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003fb6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fb8:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003fbc:	bf8c      	ite	hi
 8003fbe:	3c03      	subhi	r4, #3
 8003fc0:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fc2:	fa05 f303 	lsl.w	r3, r5, r3
 8003fc6:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fca:	40a5      	lsls	r5, r4
 8003fcc:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fd0:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 8003fd2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fd4:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fd8:	bfac      	ite	ge
 8003fda:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fde:	4a08      	ldrlt	r2, [pc, #32]	@ (8004000 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fe0:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fe4:	bfb8      	it	lt
 8003fe6:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	bfaa      	itet	ge
 8003fee:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ff2:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ff4:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003ff8:	bd30      	pop	{r4, r5, pc}
 8003ffa:	bf00      	nop
 8003ffc:	e000ed00 	.word	0xe000ed00
 8004000:	e000ed14 	.word	0xe000ed14

08004004 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004004:	2800      	cmp	r0, #0
 8004006:	db07      	blt.n	8004018 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004008:	0941      	lsrs	r1, r0, #5
 800400a:	4a04      	ldr	r2, [pc, #16]	@ (800401c <HAL_NVIC_EnableIRQ+0x18>)
 800400c:	f000 001f 	and.w	r0, r0, #31
 8004010:	2301      	movs	r3, #1
 8004012:	4083      	lsls	r3, r0
 8004014:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004018:	4770      	bx	lr
 800401a:	bf00      	nop
 800401c:	e000e100 	.word	0xe000e100

08004020 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004020:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004022:	4604      	mov	r4, r0
 8004024:	b150      	cbz	r0, 800403c <HAL_CRC_Init+0x1c>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004026:	7943      	ldrb	r3, [r0, #5]
 8004028:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800402c:	b913      	cbnz	r3, 8004034 <HAL_CRC_Init+0x14>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800402e:	7102      	strb	r2, [r0, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004030:	f7fd fcb8 	bl	80019a4 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004034:	2301      	movs	r3, #1
 8004036:	7163      	strb	r3, [r4, #5]

  /* Return function status */
  return HAL_OK;
 8004038:	2000      	movs	r0, #0
}
 800403a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800403c:	2001      	movs	r0, #1
 800403e:	e7fc      	b.n	800403a <HAL_CRC_Init+0x1a>

08004040 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004040:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8004042:	4604      	mov	r4, r0
 8004044:	b320      	cbz	r0, 8004090 <HAL_DMA2D_Init+0x50>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8004046:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 800404a:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800404e:	b91b      	cbnz	r3, 8004058 <HAL_DMA2D_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8004050:	f880 2038 	strb.w	r2, [r0, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8004054:	f7fd fcbe 	bl	80019d4 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004058:	2302      	movs	r3, #2
 800405a:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800405e:	6823      	ldr	r3, [r4, #0]
 8004060:	6861      	ldr	r1, [r4, #4]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8004068:	430a      	orrs	r2, r1
 800406a:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800406c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800406e:	68a1      	ldr	r1, [r4, #8]
 8004070:	f022 0207 	bic.w	r2, r2, #7
 8004074:	430a      	orrs	r2, r1
 8004076:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004078:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800407a:	68e1      	ldr	r1, [r4, #12]
 800407c:	f36f 020d 	bfc	r2, #0, #14
 8004080:	430a      	orrs	r2, r1
 8004082:	641a      	str	r2, [r3, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004084:	2000      	movs	r0, #0

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004086:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004088:	63e0      	str	r0, [r4, #60]	@ 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800408a:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39

  return HAL_OK;
}
 800408e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004090:	2001      	movs	r0, #1
 8004092:	e7fc      	b.n	800408e <HAL_DMA2D_Init+0x4e>

08004094 <HAL_DMA2D_LineEventCallback>:
  * @brief  Transfer watermark callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
 8004094:	4770      	bx	lr

08004096 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @brief  CLUT Transfer Complete callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
 8004096:	4770      	bx	lr

08004098 <HAL_DMA2D_IRQHandler>:
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8004098:	6803      	ldr	r3, [r0, #0]
{
 800409a:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800409c:	685e      	ldr	r6, [r3, #4]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800409e:	681d      	ldr	r5, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80040a0:	07f2      	lsls	r2, r6, #31
{
 80040a2:	4604      	mov	r4, r0
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80040a4:	d514      	bpl.n	80040d0 <HAL_DMA2D_IRQHandler+0x38>
    if ((crflags & DMA2D_IT_TE) != 0U)
 80040a6:	05e9      	lsls	r1, r5, #23
 80040a8:	d512      	bpl.n	80040d0 <HAL_DMA2D_IRQHandler+0x38>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80040b0:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80040b2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80040b4:	f042 0201 	orr.w	r2, r2, #1
 80040b8:	63c2      	str	r2, [r0, #60]	@ 0x3c
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80040ba:	2201      	movs	r2, #1
 80040bc:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80040be:	2304      	movs	r3, #4
 80040c0:	f880 3039 	strb.w	r3, [r0, #57]	@ 0x39
      __HAL_UNLOCK(hdma2d);
 80040c4:	2300      	movs	r3, #0
 80040c6:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
      if (hdma2d->XferErrorCallback != NULL)
 80040ca:	6943      	ldr	r3, [r0, #20]
 80040cc:	b103      	cbz	r3, 80040d0 <HAL_DMA2D_IRQHandler+0x38>
        hdma2d->XferErrorCallback(hdma2d);
 80040ce:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80040d0:	06b2      	lsls	r2, r6, #26
 80040d2:	d516      	bpl.n	8004102 <HAL_DMA2D_IRQHandler+0x6a>
    if ((crflags & DMA2D_IT_CE) != 0U)
 80040d4:	04ab      	lsls	r3, r5, #18
 80040d6:	d514      	bpl.n	8004102 <HAL_DMA2D_IRQHandler+0x6a>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80040d8:	6823      	ldr	r3, [r4, #0]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80040e0:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80040e2:	2220      	movs	r2, #32
 80040e4:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80040e6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80040e8:	f043 0302 	orr.w	r3, r3, #2
 80040ec:	63e3      	str	r3, [r4, #60]	@ 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80040ee:	2304      	movs	r3, #4
 80040f0:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
      __HAL_UNLOCK(hdma2d);
 80040f4:	2300      	movs	r3, #0
 80040f6:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
      if (hdma2d->XferErrorCallback != NULL)
 80040fa:	6963      	ldr	r3, [r4, #20]
 80040fc:	b10b      	cbz	r3, 8004102 <HAL_DMA2D_IRQHandler+0x6a>
        hdma2d->XferErrorCallback(hdma2d);
 80040fe:	4620      	mov	r0, r4
 8004100:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004102:	0730      	lsls	r0, r6, #28
 8004104:	d516      	bpl.n	8004134 <HAL_DMA2D_IRQHandler+0x9c>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8004106:	0529      	lsls	r1, r5, #20
 8004108:	d514      	bpl.n	8004134 <HAL_DMA2D_IRQHandler+0x9c>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800410a:	6823      	ldr	r3, [r4, #0]
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004112:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8004114:	2208      	movs	r2, #8
 8004116:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004118:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800411a:	f043 0304 	orr.w	r3, r3, #4
 800411e:	63e3      	str	r3, [r4, #60]	@ 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004120:	2304      	movs	r3, #4
 8004122:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
      __HAL_UNLOCK(hdma2d);
 8004126:	2300      	movs	r3, #0
 8004128:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
      if (hdma2d->XferErrorCallback != NULL)
 800412c:	6963      	ldr	r3, [r4, #20]
 800412e:	b10b      	cbz	r3, 8004134 <HAL_DMA2D_IRQHandler+0x9c>
        hdma2d->XferErrorCallback(hdma2d);
 8004130:	4620      	mov	r0, r4
 8004132:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8004134:	0772      	lsls	r2, r6, #29
 8004136:	d50b      	bpl.n	8004150 <HAL_DMA2D_IRQHandler+0xb8>
    if ((crflags & DMA2D_IT_TW) != 0U)
 8004138:	056b      	lsls	r3, r5, #21
 800413a:	d509      	bpl.n	8004150 <HAL_DMA2D_IRQHandler+0xb8>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800413c:	6823      	ldr	r3, [r4, #0]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004144:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8004146:	2204      	movs	r2, #4
 8004148:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 800414a:	4620      	mov	r0, r4
 800414c:	f7ff ffa2 	bl	8004094 <HAL_DMA2D_LineEventCallback>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8004150:	07b0      	lsls	r0, r6, #30
 8004152:	d514      	bpl.n	800417e <HAL_DMA2D_IRQHandler+0xe6>
    if ((crflags & DMA2D_IT_TC) != 0U)
 8004154:	05a9      	lsls	r1, r5, #22
 8004156:	d512      	bpl.n	800417e <HAL_DMA2D_IRQHandler+0xe6>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8004158:	6823      	ldr	r3, [r4, #0]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004160:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8004162:	2202      	movs	r2, #2
 8004164:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004166:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004168:	63e3      	str	r3, [r4, #60]	@ 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800416a:	2301      	movs	r3, #1
 800416c:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
      __HAL_UNLOCK(hdma2d);
 8004170:	2300      	movs	r3, #0
 8004172:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
      if (hdma2d->XferCpltCallback != NULL)
 8004176:	6923      	ldr	r3, [r4, #16]
 8004178:	b10b      	cbz	r3, 800417e <HAL_DMA2D_IRQHandler+0xe6>
        hdma2d->XferCpltCallback(hdma2d);
 800417a:	4620      	mov	r0, r4
 800417c:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800417e:	06f2      	lsls	r2, r6, #27
 8004180:	d513      	bpl.n	80041aa <HAL_DMA2D_IRQHandler+0x112>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8004182:	04eb      	lsls	r3, r5, #19
 8004184:	d511      	bpl.n	80041aa <HAL_DMA2D_IRQHandler+0x112>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8004186:	6823      	ldr	r3, [r4, #0]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800418e:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8004190:	2210      	movs	r2, #16
 8004192:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004194:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004196:	63e3      	str	r3, [r4, #60]	@ 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004198:	2301      	movs	r3, #1
 800419a:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
      __HAL_UNLOCK(hdma2d);
 800419e:	2300      	movs	r3, #0
 80041a0:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80041a4:	4620      	mov	r0, r4
 80041a6:	f7ff ff76 	bl	8004096 <HAL_DMA2D_CLUTLoadingCpltCallback>
}
 80041aa:	bd70      	pop	{r4, r5, r6, pc}

080041ac <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80041ac:	b5f0      	push	{r4, r5, r6, r7, lr}
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80041ae:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 80041b2:	2a01      	cmp	r2, #1
{
 80041b4:	4603      	mov	r3, r0
 80041b6:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hdma2d);
 80041ba:	d02b      	beq.n	8004214 <HAL_DMA2D_ConfigLayer+0x68>
 80041bc:	2201      	movs	r2, #1
 80041be:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80041c2:	f883 0039 	strb.w	r0, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80041c6:	eb03 1201 	add.w	r2, r3, r1, lsl #4
 80041ca:	e9d2 4007 	ldrd	r4, r0, [r2, #28]
 80041ce:	6a55      	ldr	r5, [r2, #36]	@ 0x24
 80041d0:	4f17      	ldr	r7, [pc, #92]	@ (8004230 <HAL_DMA2D_ConfigLayer+0x84>)
 80041d2:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80041d6:	3c09      	subs	r4, #9
 80041d8:	2c01      	cmp	r4, #1
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80041da:	bf9c      	itt	ls
 80041dc:	f005 427f 	andls.w	r2, r5, #4278190080	@ 0xff000000
 80041e0:	4310      	orrls	r0, r2
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80041e2:	ea4f 1601 	mov.w	r6, r1, lsl #4

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80041e6:	681a      	ldr	r2, [r3, #0]
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80041e8:	bf88      	it	hi
 80041ea:	ea40 6005 	orrhi.w	r0, r0, r5, lsl #24
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80041ee:	b991      	cbnz	r1, 8004216 <HAL_DMA2D_ConfigLayer+0x6a>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80041f0:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 80041f2:	4039      	ands	r1, r7
 80041f4:	4301      	orrs	r1, r0
 80041f6:	6251      	str	r1, [r2, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80041f8:	2c01      	cmp	r4, #1
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80041fa:	6999      	ldr	r1, [r3, #24]
 80041fc:	6191      	str	r1, [r2, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80041fe:	d803      	bhi.n	8004208 <HAL_DMA2D_ConfigLayer+0x5c>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8004200:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004202:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8004206:	6291      	str	r1, [r2, #40]	@ 0x28
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004208:	2201      	movs	r2, #1

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800420a:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800420c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  __HAL_UNLOCK(hdma2d);
 8004210:	f883 0038 	strb.w	r0, [r3, #56]	@ 0x38

  return HAL_OK;
}
 8004214:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004216:	69d1      	ldr	r1, [r2, #28]
 8004218:	4039      	ands	r1, r7
 800421a:	4301      	orrs	r1, r0
 800421c:	61d1      	str	r1, [r2, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800421e:	1999      	adds	r1, r3, r6
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004220:	2c01      	cmp	r4, #1
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004222:	6989      	ldr	r1, [r1, #24]
 8004224:	6111      	str	r1, [r2, #16]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8004226:	bf9c      	itt	ls
 8004228:	f025 457f 	bicls.w	r5, r5, #4278190080	@ 0xff000000
 800422c:	6215      	strls	r5, [r2, #32]
 800422e:	e7eb      	b.n	8004208 <HAL_DMA2D_ConfigLayer+0x5c>
 8004230:	00fcfff0 	.word	0x00fcfff0

08004234 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004234:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004238:	f8df 91bc 	ldr.w	r9, [pc, #444]	@ 80043f8 <HAL_GPIO_Init+0x1c4>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800423c:	4a6c      	ldr	r2, [pc, #432]	@ (80043f0 <HAL_GPIO_Init+0x1bc>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 800423e:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004240:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 8004242:	2401      	movs	r4, #1
 8004244:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004246:	ea04 0605 	and.w	r6, r4, r5
    if(iocurrent == ioposition)
 800424a:	43ac      	bics	r4, r5
 800424c:	f040 80b7 	bne.w	80043be <HAL_GPIO_Init+0x18a>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004250:	684d      	ldr	r5, [r1, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004252:	2703      	movs	r7, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004254:	f005 0403 	and.w	r4, r5, #3
 8004258:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800425c:	fa07 fc08 	lsl.w	ip, r7, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004260:	1e67      	subs	r7, r4, #1
 8004262:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004264:	ea6f 0c0c 	mvn.w	ip, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004268:	d834      	bhi.n	80042d4 <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 800426a:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800426c:	ea07 0e0c 	and.w	lr, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004270:	68cf      	ldr	r7, [r1, #12]
 8004272:	fa07 f708 	lsl.w	r7, r7, r8
 8004276:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 800427a:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800427c:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800427e:	ea27 0e06 	bic.w	lr, r7, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004282:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8004286:	409f      	lsls	r7, r3
 8004288:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 800428c:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 800428e:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004290:	ea07 0e0c 	and.w	lr, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004294:	688f      	ldr	r7, [r1, #8]
 8004296:	fa07 f708 	lsl.w	r7, r7, r8
 800429a:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800429e:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 80042a0:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042a2:	d119      	bne.n	80042d8 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 80042a4:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80042a8:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80042ac:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80042b0:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80042b4:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80042b8:	f04f 0e0f 	mov.w	lr, #15
 80042bc:	fa0e fe0b 	lsl.w	lr, lr, fp
 80042c0:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80042c4:	690f      	ldr	r7, [r1, #16]
 80042c6:	fa07 f70b 	lsl.w	r7, r7, fp
 80042ca:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 80042ce:	f8ca 7020 	str.w	r7, [sl, #32]
 80042d2:	e001      	b.n	80042d8 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80042d4:	2c03      	cmp	r4, #3
 80042d6:	d1da      	bne.n	800428e <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 80042d8:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80042da:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80042de:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80042e2:	433c      	orrs	r4, r7
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80042e4:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      GPIOx->MODER = temp;
 80042e8:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80042ea:	d068      	beq.n	80043be <HAL_GPIO_Init+0x18a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042ec:	2400      	movs	r4, #0
 80042ee:	9401      	str	r4, [sp, #4]
 80042f0:	f8d9 4044 	ldr.w	r4, [r9, #68]	@ 0x44
 80042f4:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 80042f8:	f8c9 4044 	str.w	r4, [r9, #68]	@ 0x44
 80042fc:	f8d9 4044 	ldr.w	r4, [r9, #68]	@ 0x44
 8004300:	f023 0703 	bic.w	r7, r3, #3
 8004304:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 8004308:	f404 4480 	and.w	r4, r4, #16384	@ 0x4000
 800430c:	f507 379c 	add.w	r7, r7, #79872	@ 0x13800
 8004310:	9401      	str	r4, [sp, #4]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004312:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004316:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8004318:	f8d7 e008 	ldr.w	lr, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800431c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8004320:	240f      	movs	r4, #15
 8004322:	fa04 f40c 	lsl.w	r4, r4, ip
 8004326:	ea2e 0e04 	bic.w	lr, lr, r4
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800432a:	4c32      	ldr	r4, [pc, #200]	@ (80043f4 <HAL_GPIO_Init+0x1c0>)
 800432c:	42a0      	cmp	r0, r4
 800432e:	d04d      	beq.n	80043cc <HAL_GPIO_Init+0x198>
 8004330:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8004334:	42a0      	cmp	r0, r4
 8004336:	d04b      	beq.n	80043d0 <HAL_GPIO_Init+0x19c>
 8004338:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800433c:	42a0      	cmp	r0, r4
 800433e:	d049      	beq.n	80043d4 <HAL_GPIO_Init+0x1a0>
 8004340:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8004344:	42a0      	cmp	r0, r4
 8004346:	d047      	beq.n	80043d8 <HAL_GPIO_Init+0x1a4>
 8004348:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800434c:	42a0      	cmp	r0, r4
 800434e:	d045      	beq.n	80043dc <HAL_GPIO_Init+0x1a8>
 8004350:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8004354:	42a0      	cmp	r0, r4
 8004356:	d043      	beq.n	80043e0 <HAL_GPIO_Init+0x1ac>
 8004358:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800435c:	42a0      	cmp	r0, r4
 800435e:	d041      	beq.n	80043e4 <HAL_GPIO_Init+0x1b0>
 8004360:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8004364:	42a0      	cmp	r0, r4
 8004366:	d03f      	beq.n	80043e8 <HAL_GPIO_Init+0x1b4>
 8004368:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800436c:	42a0      	cmp	r0, r4
 800436e:	d03d      	beq.n	80043ec <HAL_GPIO_Init+0x1b8>
 8004370:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8004374:	42a0      	cmp	r0, r4
 8004376:	bf14      	ite	ne
 8004378:	240a      	movne	r4, #10
 800437a:	2409      	moveq	r4, #9
 800437c:	fa04 f40c 	lsl.w	r4, r4, ip
 8004380:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004384:	60bc      	str	r4, [r7, #8]
        temp = EXTI->RTSR;
 8004386:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8004388:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800438a:	f415 1f80 	tst.w	r5, #1048576	@ 0x100000
        temp &= ~((uint32_t)iocurrent);
 800438e:	bf0c      	ite	eq
 8004390:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 8004392:	4334      	orrne	r4, r6
        }
        EXTI->RTSR = temp;
 8004394:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 8004396:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004398:	f415 1f00 	tst.w	r5, #2097152	@ 0x200000
        temp &= ~((uint32_t)iocurrent);
 800439c:	bf0c      	ite	eq
 800439e:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 80043a0:	4334      	orrne	r4, r6
        }
        EXTI->FTSR = temp;
 80043a2:	60d4      	str	r4, [r2, #12]

        temp = EXTI->EMR;
 80043a4:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80043a6:	f415 3f00 	tst.w	r5, #131072	@ 0x20000
        temp &= ~((uint32_t)iocurrent);
 80043aa:	bf0c      	ite	eq
 80043ac:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 80043ae:	4334      	orrne	r4, r6
        }
        EXTI->EMR = temp;
 80043b0:	6054      	str	r4, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80043b2:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80043b4:	03ed      	lsls	r5, r5, #15
        temp &= ~((uint32_t)iocurrent);
 80043b6:	bf54      	ite	pl
 80043b8:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 80043ba:	4334      	orrmi	r4, r6
        }
        EXTI->IMR = temp;
 80043bc:	6014      	str	r4, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80043be:	3301      	adds	r3, #1
 80043c0:	2b10      	cmp	r3, #16
 80043c2:	f47f af3d 	bne.w	8004240 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 80043c6:	b003      	add	sp, #12
 80043c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80043cc:	2400      	movs	r4, #0
 80043ce:	e7d5      	b.n	800437c <HAL_GPIO_Init+0x148>
 80043d0:	2401      	movs	r4, #1
 80043d2:	e7d3      	b.n	800437c <HAL_GPIO_Init+0x148>
 80043d4:	2402      	movs	r4, #2
 80043d6:	e7d1      	b.n	800437c <HAL_GPIO_Init+0x148>
 80043d8:	2403      	movs	r4, #3
 80043da:	e7cf      	b.n	800437c <HAL_GPIO_Init+0x148>
 80043dc:	2404      	movs	r4, #4
 80043de:	e7cd      	b.n	800437c <HAL_GPIO_Init+0x148>
 80043e0:	2405      	movs	r4, #5
 80043e2:	e7cb      	b.n	800437c <HAL_GPIO_Init+0x148>
 80043e4:	2406      	movs	r4, #6
 80043e6:	e7c9      	b.n	800437c <HAL_GPIO_Init+0x148>
 80043e8:	2407      	movs	r4, #7
 80043ea:	e7c7      	b.n	800437c <HAL_GPIO_Init+0x148>
 80043ec:	2408      	movs	r4, #8
 80043ee:	e7c5      	b.n	800437c <HAL_GPIO_Init+0x148>
 80043f0:	40013c00 	.word	0x40013c00
 80043f4:	40020000 	.word	0x40020000
 80043f8:	40023800 	.word	0x40023800

080043fc <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80043fc:	6903      	ldr	r3, [r0, #16]
 80043fe:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8004400:	bf14      	ite	ne
 8004402:	2001      	movne	r0, #1
 8004404:	2000      	moveq	r0, #0
 8004406:	4770      	bx	lr

08004408 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004408:	b10a      	cbz	r2, 800440e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800440a:	6181      	str	r1, [r0, #24]
  }
}
 800440c:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800440e:	0409      	lsls	r1, r1, #16
 8004410:	e7fb      	b.n	800440a <HAL_GPIO_WritePin+0x2>

08004412 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004412:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004414:	ea01 0203 	and.w	r2, r1, r3
 8004418:	ea21 0103 	bic.w	r1, r1, r3
 800441c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004420:	6181      	str	r1, [r0, #24]
}
 8004422:	4770      	bx	lr

08004424 <HAL_GPIO_EXTI_Callback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004424:	4770      	bx	lr
	...

08004428 <HAL_GPIO_EXTI_IRQHandler>:
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004428:	4a04      	ldr	r2, [pc, #16]	@ (800443c <HAL_GPIO_EXTI_IRQHandler+0x14>)
 800442a:	6951      	ldr	r1, [r2, #20]
 800442c:	4201      	tst	r1, r0
{
 800442e:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004430:	d002      	beq.n	8004438 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004432:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004434:	f7ff fff6 	bl	8004424 <HAL_GPIO_EXTI_Callback>
}
 8004438:	bd08      	pop	{r3, pc}
 800443a:	bf00      	nop
 800443c:	40013c00 	.word	0x40013c00

08004440 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004440:	6801      	ldr	r1, [r0, #0]
 8004442:	694b      	ldr	r3, [r1, #20]
 8004444:	f413 6380 	ands.w	r3, r3, #1024	@ 0x400
 8004448:	f04f 0200 	mov.w	r2, #0
 800444c:	d010      	beq.n	8004470 <I2C_IsAcknowledgeFailed+0x30>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800444e:	f46f 6380 	mvn.w	r3, #1024	@ 0x400
 8004452:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8004454:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 8004456:	6302      	str	r2, [r0, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004458:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800445c:	f880 203e 	strb.w	r2, [r0, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004460:	6c03      	ldr	r3, [r0, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004462:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004466:	f043 0304 	orr.w	r3, r3, #4
 800446a:	6403      	str	r3, [r0, #64]	@ 0x40

    return HAL_ERROR;
 800446c:	2001      	movs	r0, #1
 800446e:	4770      	bx	lr
  }
  return HAL_OK;
 8004470:	4618      	mov	r0, r3
}
 8004472:	4770      	bx	lr

08004474 <I2C_WaitOnFlagUntilTimeout>:
{
 8004474:	e92d 46f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r9, sl, lr}
 8004478:	4606      	mov	r6, r0
 800447a:	460f      	mov	r7, r1
 800447c:	4691      	mov	r9, r2
 800447e:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004480:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004484:	6833      	ldr	r3, [r6, #0]
 8004486:	f1ba 0f01 	cmp.w	sl, #1
 800448a:	bf0c      	ite	eq
 800448c:	695c      	ldreq	r4, [r3, #20]
 800448e:	699c      	ldrne	r4, [r3, #24]
 8004490:	ea27 0404 	bic.w	r4, r7, r4
 8004494:	b2a4      	uxth	r4, r4
 8004496:	fab4 f484 	clz	r4, r4
 800449a:	0964      	lsrs	r4, r4, #5
 800449c:	45a1      	cmp	r9, r4
 800449e:	d001      	beq.n	80044a4 <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 80044a0:	2000      	movs	r0, #0
 80044a2:	e017      	b.n	80044d4 <I2C_WaitOnFlagUntilTimeout+0x60>
    if (Timeout != HAL_MAX_DELAY)
 80044a4:	1c6a      	adds	r2, r5, #1
 80044a6:	d0ee      	beq.n	8004486 <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044a8:	f7ff fd4e 	bl	8003f48 <HAL_GetTick>
 80044ac:	9b08      	ldr	r3, [sp, #32]
 80044ae:	1ac0      	subs	r0, r0, r3
 80044b0:	42a8      	cmp	r0, r5
 80044b2:	d801      	bhi.n	80044b8 <I2C_WaitOnFlagUntilTimeout+0x44>
 80044b4:	2d00      	cmp	r5, #0
 80044b6:	d1e5      	bne.n	8004484 <I2C_WaitOnFlagUntilTimeout+0x10>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80044b8:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80044ba:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80044bc:	6333      	str	r3, [r6, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80044be:	f886 203d 	strb.w	r2, [r6, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80044c2:	f886 303e 	strb.w	r3, [r6, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80044c6:	6c32      	ldr	r2, [r6, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 80044c8:	f886 303c 	strb.w	r3, [r6, #60]	@ 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80044cc:	f042 0220 	orr.w	r2, r2, #32
 80044d0:	6432      	str	r2, [r6, #64]	@ 0x40
        return HAL_ERROR;
 80044d2:	2001      	movs	r0, #1
}
 80044d4:	e8bd 86f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r9, sl, pc}

080044d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 80044d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044dc:	4604      	mov	r4, r0
 80044de:	460f      	mov	r7, r1
 80044e0:	4616      	mov	r6, r2
 80044e2:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80044e4:	6825      	ldr	r5, [r4, #0]
 80044e6:	6968      	ldr	r0, [r5, #20]
 80044e8:	ea27 0000 	bic.w	r0, r7, r0
 80044ec:	b280      	uxth	r0, r0
 80044ee:	b1c0      	cbz	r0, 8004522 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80044f0:	696b      	ldr	r3, [r5, #20]
 80044f2:	055a      	lsls	r2, r3, #21
 80044f4:	d517      	bpl.n	8004526 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044f6:	682b      	ldr	r3, [r5, #0]
 80044f8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80044fc:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044fe:	f46f 6380 	mvn.w	r3, #1024	@ 0x400
 8004502:	616b      	str	r3, [r5, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8004504:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004506:	2300      	movs	r3, #0
 8004508:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800450a:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800450e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004512:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004514:	f043 0304 	orr.w	r3, r3, #4
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004518:	6423      	str	r3, [r4, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 800451a:	2300      	movs	r3, #0
 800451c:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
      return HAL_ERROR;
 8004520:	2001      	movs	r0, #1
}
 8004522:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8004526:	1c73      	adds	r3, r6, #1
 8004528:	d0dd      	beq.n	80044e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800452a:	f7ff fd0d 	bl	8003f48 <HAL_GetTick>
 800452e:	eba0 0008 	sub.w	r0, r0, r8
 8004532:	42b0      	cmp	r0, r6
 8004534:	d909      	bls.n	800454a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x72>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004536:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8004538:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 800453a:	6323      	str	r3, [r4, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800453c:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004540:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004544:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004546:	4313      	orrs	r3, r2
 8004548:	e7e6      	b.n	8004518 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x40>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800454a:	2e00      	cmp	r6, #0
 800454c:	d1ca      	bne.n	80044e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
 800454e:	e7f2      	b.n	8004536 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>

08004550 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8004550:	b570      	push	{r4, r5, r6, lr}
 8004552:	4604      	mov	r4, r0
 8004554:	460d      	mov	r5, r1
 8004556:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004558:	6823      	ldr	r3, [r4, #0]
 800455a:	695b      	ldr	r3, [r3, #20]
 800455c:	061b      	lsls	r3, r3, #24
 800455e:	d501      	bpl.n	8004564 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 8004560:	2000      	movs	r0, #0
 8004562:	e018      	b.n	8004596 <I2C_WaitOnTXEFlagUntilTimeout+0x46>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004564:	4620      	mov	r0, r4
 8004566:	f7ff ff6b 	bl	8004440 <I2C_IsAcknowledgeFailed>
 800456a:	b998      	cbnz	r0, 8004594 <I2C_WaitOnTXEFlagUntilTimeout+0x44>
    if (Timeout != HAL_MAX_DELAY)
 800456c:	1c6a      	adds	r2, r5, #1
 800456e:	d0f3      	beq.n	8004558 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004570:	f7ff fcea 	bl	8003f48 <HAL_GetTick>
 8004574:	1b80      	subs	r0, r0, r6
 8004576:	42a8      	cmp	r0, r5
 8004578:	d90e      	bls.n	8004598 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
        hi2c->PreviousState       = I2C_STATE_NONE;
 800457a:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 800457c:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 800457e:	6323      	str	r3, [r4, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004580:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004584:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004588:	6c22      	ldr	r2, [r4, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 800458a:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800458e:	f042 0220 	orr.w	r2, r2, #32
 8004592:	6422      	str	r2, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8004594:	2001      	movs	r0, #1
}
 8004596:	bd70      	pop	{r4, r5, r6, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004598:	2d00      	cmp	r5, #0
 800459a:	d1dd      	bne.n	8004558 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
 800459c:	e7ed      	b.n	800457a <I2C_WaitOnTXEFlagUntilTimeout+0x2a>
	...

080045a0 <I2C_RequestMemoryWrite>:
{
 80045a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80045a4:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045a6:	6802      	ldr	r2, [r0, #0]
{
 80045a8:	b085      	sub	sp, #20
 80045aa:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	@ 0x30
 80045ae:	4699      	mov	r9, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045b0:	6813      	ldr	r3, [r2, #0]
 80045b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045b6:	6013      	str	r3, [r2, #0]
{
 80045b8:	460e      	mov	r6, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80045ba:	463b      	mov	r3, r7
 80045bc:	f8cd 8000 	str.w	r8, [sp]
 80045c0:	2200      	movs	r2, #0
 80045c2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
{
 80045c6:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80045c8:	f7ff ff54 	bl	8004474 <I2C_WaitOnFlagUntilTimeout>
 80045cc:	6823      	ldr	r3, [r4, #0]
 80045ce:	b138      	cbz	r0, 80045e0 <I2C_RequestMemoryWrite+0x40>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	05db      	lsls	r3, r3, #23
 80045d4:	d502      	bpl.n	80045dc <I2C_RequestMemoryWrite+0x3c>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80045d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80045da:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 80045dc:	2603      	movs	r6, #3
 80045de:	e020      	b.n	8004622 <I2C_RequestMemoryWrite+0x82>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80045e0:	f006 06fe 	and.w	r6, r6, #254	@ 0xfe
 80045e4:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80045e6:	491a      	ldr	r1, [pc, #104]	@ (8004650 <I2C_RequestMemoryWrite+0xb0>)
 80045e8:	4643      	mov	r3, r8
 80045ea:	463a      	mov	r2, r7
 80045ec:	4620      	mov	r0, r4
 80045ee:	f7ff ff73 	bl	80044d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045f2:	b9a8      	cbnz	r0, 8004620 <I2C_RequestMemoryWrite+0x80>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045f4:	6823      	ldr	r3, [r4, #0]
 80045f6:	9003      	str	r0, [sp, #12]
 80045f8:	695a      	ldr	r2, [r3, #20]
 80045fa:	9203      	str	r2, [sp, #12]
 80045fc:	699b      	ldr	r3, [r3, #24]
 80045fe:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004600:	4642      	mov	r2, r8
 8004602:	4639      	mov	r1, r7
 8004604:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004606:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004608:	f7ff ffa2 	bl	8004550 <I2C_WaitOnTXEFlagUntilTimeout>
 800460c:	4606      	mov	r6, r0
 800460e:	b160      	cbz	r0, 800462a <I2C_RequestMemoryWrite+0x8a>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004610:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004612:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004614:	bf01      	itttt	eq
 8004616:	6822      	ldreq	r2, [r4, #0]
 8004618:	6813      	ldreq	r3, [r2, #0]
 800461a:	f443 7300 	orreq.w	r3, r3, #512	@ 0x200
 800461e:	6013      	streq	r3, [r2, #0]
    return HAL_ERROR;
 8004620:	2601      	movs	r6, #1
}
 8004622:	4630      	mov	r0, r6
 8004624:	b005      	add	sp, #20
 8004626:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800462a:	f1b9 0f01 	cmp.w	r9, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800462e:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004630:	d102      	bne.n	8004638 <I2C_RequestMemoryWrite+0x98>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004632:	b2ed      	uxtb	r5, r5
 8004634:	611d      	str	r5, [r3, #16]
 8004636:	e7f4      	b.n	8004622 <I2C_RequestMemoryWrite+0x82>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004638:	0a2a      	lsrs	r2, r5, #8
 800463a:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800463c:	4639      	mov	r1, r7
 800463e:	4642      	mov	r2, r8
 8004640:	4620      	mov	r0, r4
 8004642:	f7ff ff85 	bl	8004550 <I2C_WaitOnTXEFlagUntilTimeout>
 8004646:	2800      	cmp	r0, #0
 8004648:	d1e2      	bne.n	8004610 <I2C_RequestMemoryWrite+0x70>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800464a:	6823      	ldr	r3, [r4, #0]
 800464c:	e7f1      	b.n	8004632 <I2C_RequestMemoryWrite+0x92>
 800464e:	bf00      	nop
 8004650:	00010002 	.word	0x00010002

08004654 <I2C_RequestMemoryRead>:
{
 8004654:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004658:	469a      	mov	sl, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800465a:	6803      	ldr	r3, [r0, #0]
{
 800465c:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004664:	601a      	str	r2, [r3, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004666:	681a      	ldr	r2, [r3, #0]
{
 8004668:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	@ 0x30
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800466c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004670:	601a      	str	r2, [r3, #0]
{
 8004672:	460e      	mov	r6, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004674:	463b      	mov	r3, r7
 8004676:	f8cd 8000 	str.w	r8, [sp]
 800467a:	2200      	movs	r2, #0
 800467c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
{
 8004680:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004682:	f7ff fef7 	bl	8004474 <I2C_WaitOnFlagUntilTimeout>
 8004686:	6823      	ldr	r3, [r4, #0]
 8004688:	b138      	cbz	r0, 800469a <I2C_RequestMemoryRead+0x46>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800468a:	681b      	ldr	r3, [r3, #0]
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800468c:	05db      	lsls	r3, r3, #23
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800468e:	bf44      	itt	mi
 8004690:	f44f 7300 	movmi.w	r3, #512	@ 0x200
 8004694:	6423      	strmi	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 8004696:	2003      	movs	r0, #3
 8004698:	e021      	b.n	80046de <I2C_RequestMemoryRead+0x8a>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800469a:	fa5f f986 	uxtb.w	r9, r6
 800469e:	f006 06fe 	and.w	r6, r6, #254	@ 0xfe
 80046a2:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80046a4:	492b      	ldr	r1, [pc, #172]	@ (8004754 <I2C_RequestMemoryRead+0x100>)
 80046a6:	4643      	mov	r3, r8
 80046a8:	463a      	mov	r2, r7
 80046aa:	4620      	mov	r0, r4
 80046ac:	f7ff ff14 	bl	80044d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046b0:	b9a0      	cbnz	r0, 80046dc <I2C_RequestMemoryRead+0x88>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046b2:	6823      	ldr	r3, [r4, #0]
 80046b4:	9003      	str	r0, [sp, #12]
 80046b6:	695a      	ldr	r2, [r3, #20]
 80046b8:	9203      	str	r2, [sp, #12]
 80046ba:	699b      	ldr	r3, [r3, #24]
 80046bc:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046be:	4642      	mov	r2, r8
 80046c0:	4639      	mov	r1, r7
 80046c2:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046c4:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046c6:	f7ff ff43 	bl	8004550 <I2C_WaitOnTXEFlagUntilTimeout>
 80046ca:	b158      	cbz	r0, 80046e4 <I2C_RequestMemoryRead+0x90>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046cc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80046ce:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046d0:	bf01      	itttt	eq
 80046d2:	6822      	ldreq	r2, [r4, #0]
 80046d4:	6813      	ldreq	r3, [r2, #0]
 80046d6:	f443 7300 	orreq.w	r3, r3, #512	@ 0x200
 80046da:	6013      	streq	r3, [r2, #0]
    return HAL_ERROR;
 80046dc:	2001      	movs	r0, #1
}
 80046de:	b004      	add	sp, #16
 80046e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80046e4:	f1ba 0f01 	cmp.w	sl, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046e8:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80046ea:	d11a      	bne.n	8004722 <I2C_RequestMemoryRead+0xce>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80046ec:	b2ed      	uxtb	r5, r5
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046ee:	4642      	mov	r2, r8
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80046f0:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046f2:	4639      	mov	r1, r7
 80046f4:	4620      	mov	r0, r4
 80046f6:	f7ff ff2b 	bl	8004550 <I2C_WaitOnTXEFlagUntilTimeout>
 80046fa:	4602      	mov	r2, r0
 80046fc:	2800      	cmp	r0, #0
 80046fe:	d1e5      	bne.n	80046cc <I2C_RequestMemoryRead+0x78>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004700:	6821      	ldr	r1, [r4, #0]
 8004702:	680b      	ldr	r3, [r1, #0]
 8004704:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004708:	600b      	str	r3, [r1, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800470a:	4620      	mov	r0, r4
 800470c:	f8cd 8000 	str.w	r8, [sp]
 8004710:	463b      	mov	r3, r7
 8004712:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004716:	f7ff fead 	bl	8004474 <I2C_WaitOnFlagUntilTimeout>
 800471a:	6822      	ldr	r2, [r4, #0]
 800471c:	b160      	cbz	r0, 8004738 <I2C_RequestMemoryRead+0xe4>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800471e:	6813      	ldr	r3, [r2, #0]
 8004720:	e7b4      	b.n	800468c <I2C_RequestMemoryRead+0x38>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004722:	0a2a      	lsrs	r2, r5, #8
 8004724:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004726:	4639      	mov	r1, r7
 8004728:	4642      	mov	r2, r8
 800472a:	4620      	mov	r0, r4
 800472c:	f7ff ff10 	bl	8004550 <I2C_WaitOnTXEFlagUntilTimeout>
 8004730:	2800      	cmp	r0, #0
 8004732:	d1cb      	bne.n	80046cc <I2C_RequestMemoryRead+0x78>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004734:	6823      	ldr	r3, [r4, #0]
 8004736:	e7d9      	b.n	80046ec <I2C_RequestMemoryRead+0x98>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004738:	f049 0301 	orr.w	r3, r9, #1
 800473c:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800473e:	4905      	ldr	r1, [pc, #20]	@ (8004754 <I2C_RequestMemoryRead+0x100>)
 8004740:	4643      	mov	r3, r8
 8004742:	463a      	mov	r2, r7
 8004744:	4620      	mov	r0, r4
 8004746:	f7ff fec7 	bl	80044d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800474a:	3800      	subs	r0, #0
 800474c:	bf18      	it	ne
 800474e:	2001      	movne	r0, #1
 8004750:	e7c5      	b.n	80046de <I2C_RequestMemoryRead+0x8a>
 8004752:	bf00      	nop
 8004754:	00010002 	.word	0x00010002

08004758 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8004758:	b570      	push	{r4, r5, r6, lr}
 800475a:	4604      	mov	r4, r0
 800475c:	460d      	mov	r5, r1
 800475e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004760:	6823      	ldr	r3, [r4, #0]
 8004762:	695b      	ldr	r3, [r3, #20]
 8004764:	075b      	lsls	r3, r3, #29
 8004766:	d501      	bpl.n	800476c <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8004768:	2000      	movs	r0, #0
 800476a:	e018      	b.n	800479e <I2C_WaitOnBTFFlagUntilTimeout+0x46>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800476c:	4620      	mov	r0, r4
 800476e:	f7ff fe67 	bl	8004440 <I2C_IsAcknowledgeFailed>
 8004772:	b998      	cbnz	r0, 800479c <I2C_WaitOnBTFFlagUntilTimeout+0x44>
    if (Timeout != HAL_MAX_DELAY)
 8004774:	1c6a      	adds	r2, r5, #1
 8004776:	d0f3      	beq.n	8004760 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004778:	f7ff fbe6 	bl	8003f48 <HAL_GetTick>
 800477c:	1b80      	subs	r0, r0, r6
 800477e:	42a8      	cmp	r0, r5
 8004780:	d90e      	bls.n	80047a0 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004782:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8004784:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004786:	6323      	str	r3, [r4, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004788:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800478c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004790:	6c22      	ldr	r2, [r4, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8004792:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004796:	f042 0220 	orr.w	r2, r2, #32
 800479a:	6422      	str	r2, [r4, #64]	@ 0x40
      return HAL_ERROR;
 800479c:	2001      	movs	r0, #1
}
 800479e:	bd70      	pop	{r4, r5, r6, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047a0:	2d00      	cmp	r5, #0
 80047a2:	d1dd      	bne.n	8004760 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
 80047a4:	e7ed      	b.n	8004782 <I2C_WaitOnBTFFlagUntilTimeout+0x2a>

080047a6 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 80047a6:	b570      	push	{r4, r5, r6, lr}
 80047a8:	4604      	mov	r4, r0
 80047aa:	460d      	mov	r5, r1
 80047ac:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80047ae:	6821      	ldr	r1, [r4, #0]
 80047b0:	694b      	ldr	r3, [r1, #20]
 80047b2:	f013 0340 	ands.w	r3, r3, #64	@ 0x40
 80047b6:	d001      	beq.n	80047bc <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 80047b8:	2000      	movs	r0, #0
 80047ba:	e011      	b.n	80047e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80047bc:	694a      	ldr	r2, [r1, #20]
 80047be:	06d2      	lsls	r2, r2, #27
 80047c0:	d50f      	bpl.n	80047e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x3c>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047c2:	f06f 0210 	mvn.w	r2, #16
 80047c6:	614a      	str	r2, [r1, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 80047c8:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 80047ca:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80047cc:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047d0:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80047d4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047d6:	6423      	str	r3, [r4, #64]	@ 0x40
      __HAL_UNLOCK(hi2c);
 80047d8:	2300      	movs	r3, #0
 80047da:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
      return HAL_ERROR;
 80047de:	2001      	movs	r0, #1
}
 80047e0:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047e2:	f7ff fbb1 	bl	8003f48 <HAL_GetTick>
 80047e6:	1b80      	subs	r0, r0, r6
 80047e8:	42a8      	cmp	r0, r5
 80047ea:	d909      	bls.n	8004800 <I2C_WaitOnRXNEFlagUntilTimeout+0x5a>
      hi2c->PreviousState       = I2C_STATE_NONE;
 80047ec:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 80047ee:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 80047f0:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80047f2:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047f6:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047fa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80047fc:	4313      	orrs	r3, r2
 80047fe:	e7ea      	b.n	80047d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x30>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004800:	2d00      	cmp	r5, #0
 8004802:	d1d4      	bne.n	80047ae <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
 8004804:	e7f2      	b.n	80047ec <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
	...

08004808 <HAL_I2C_Init>:
{
 8004808:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 800480a:	4604      	mov	r4, r0
 800480c:	b908      	cbnz	r0, 8004812 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 800480e:	2001      	movs	r0, #1
}
 8004810:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004812:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8004816:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800481a:	b91b      	cbnz	r3, 8004824 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 800481c:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 8004820:	f7fd f8fa 	bl	8001a18 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8004824:	2324      	movs	r3, #36	@ 0x24
 8004826:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 800482a:	6823      	ldr	r3, [r4, #0]
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	f022 0201 	bic.w	r2, r2, #1
 8004832:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800483a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004842:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004844:	f000 fe66 	bl	8005514 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004848:	4b3f      	ldr	r3, [pc, #252]	@ (8004948 <HAL_I2C_Init+0x140>)
 800484a:	6865      	ldr	r5, [r4, #4]
 800484c:	429d      	cmp	r5, r3
 800484e:	bf94      	ite	ls
 8004850:	4b3e      	ldrls	r3, [pc, #248]	@ (800494c <HAL_I2C_Init+0x144>)
 8004852:	4b3f      	ldrhi	r3, [pc, #252]	@ (8004950 <HAL_I2C_Init+0x148>)
 8004854:	4298      	cmp	r0, r3
 8004856:	bf8c      	ite	hi
 8004858:	2300      	movhi	r3, #0
 800485a:	2301      	movls	r3, #1
 800485c:	2b00      	cmp	r3, #0
 800485e:	d1d6      	bne.n	800480e <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004860:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004862:	4e39      	ldr	r6, [pc, #228]	@ (8004948 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004864:	6851      	ldr	r1, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8004866:	4b3b      	ldr	r3, [pc, #236]	@ (8004954 <HAL_I2C_Init+0x14c>)
 8004868:	fbb0 f3f3 	udiv	r3, r0, r3
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800486c:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8004870:	4319      	orrs	r1, r3
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004872:	42b5      	cmp	r5, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004874:	6051      	str	r1, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004876:	bf88      	it	hi
 8004878:	f44f 7696 	movhi.w	r6, #300	@ 0x12c
 800487c:	6a11      	ldr	r1, [r2, #32]
 800487e:	bf88      	it	hi
 8004880:	4373      	mulhi	r3, r6
 8004882:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8004886:	bf84      	itt	hi
 8004888:	f44f 767a 	movhi.w	r6, #1000	@ 0x3e8
 800488c:	fbb3 f3f6 	udivhi	r3, r3, r6
 8004890:	3301      	adds	r3, #1
 8004892:	430b      	orrs	r3, r1
 8004894:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004896:	69d1      	ldr	r1, [r2, #28]
 8004898:	1e43      	subs	r3, r0, #1
 800489a:	482b      	ldr	r0, [pc, #172]	@ (8004948 <HAL_I2C_Init+0x140>)
 800489c:	f421 414f 	bic.w	r1, r1, #52992	@ 0xcf00
 80048a0:	4285      	cmp	r5, r0
 80048a2:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 80048a6:	d832      	bhi.n	800490e <HAL_I2C_Init+0x106>
 80048a8:	006d      	lsls	r5, r5, #1
 80048aa:	f640 70fc 	movw	r0, #4092	@ 0xffc
 80048ae:	fbb3 f3f5 	udiv	r3, r3, r5
 80048b2:	3301      	adds	r3, #1
 80048b4:	4203      	tst	r3, r0
 80048b6:	d042      	beq.n	800493e <HAL_I2C_Init+0x136>
 80048b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048bc:	4319      	orrs	r1, r3
 80048be:	61d1      	str	r1, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80048c0:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 80048c4:	6811      	ldr	r1, [r2, #0]
 80048c6:	4303      	orrs	r3, r0
 80048c8:	f021 01c0 	bic.w	r1, r1, #192	@ 0xc0
 80048cc:	430b      	orrs	r3, r1
 80048ce:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80048d0:	6891      	ldr	r1, [r2, #8]
 80048d2:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 80048d6:	f421 4103 	bic.w	r1, r1, #33536	@ 0x8300
 80048da:	4303      	orrs	r3, r0
 80048dc:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 80048e0:	430b      	orrs	r3, r1
 80048e2:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80048e4:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 80048e8:	68d1      	ldr	r1, [r2, #12]
 80048ea:	4303      	orrs	r3, r0
 80048ec:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 80048f0:	430b      	orrs	r3, r1
 80048f2:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 80048f4:	6813      	ldr	r3, [r2, #0]
 80048f6:	f043 0301 	orr.w	r3, r3, #1
 80048fa:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048fc:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 80048fe:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004900:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004902:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004906:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004908:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
  return HAL_OK;
 800490c:	e780      	b.n	8004810 <HAL_I2C_Init+0x8>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800490e:	68a0      	ldr	r0, [r4, #8]
 8004910:	b950      	cbnz	r0, 8004928 <HAL_I2C_Init+0x120>
 8004912:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004916:	fbb3 f3f5 	udiv	r3, r3, r5
 800491a:	3301      	adds	r3, #1
 800491c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004920:	b17b      	cbz	r3, 8004942 <HAL_I2C_Init+0x13a>
 8004922:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004926:	e7c9      	b.n	80048bc <HAL_I2C_Init+0xb4>
 8004928:	2019      	movs	r0, #25
 800492a:	4368      	muls	r0, r5
 800492c:	fbb3 f3f0 	udiv	r3, r3, r0
 8004930:	3301      	adds	r3, #1
 8004932:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004936:	b123      	cbz	r3, 8004942 <HAL_I2C_Init+0x13a>
 8004938:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800493c:	e7be      	b.n	80048bc <HAL_I2C_Init+0xb4>
 800493e:	2304      	movs	r3, #4
 8004940:	e7bc      	b.n	80048bc <HAL_I2C_Init+0xb4>
 8004942:	2301      	movs	r3, #1
 8004944:	e7ba      	b.n	80048bc <HAL_I2C_Init+0xb4>
 8004946:	bf00      	nop
 8004948:	000186a0 	.word	0x000186a0
 800494c:	001e847f 	.word	0x001e847f
 8004950:	003d08ff 	.word	0x003d08ff
 8004954:	000f4240 	.word	0x000f4240

08004958 <HAL_I2C_Mem_Write>:
{
 8004958:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800495c:	4604      	mov	r4, r0
 800495e:	4699      	mov	r9, r3
 8004960:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004962:	460f      	mov	r7, r1
 8004964:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 8004966:	f7ff faef 	bl	8003f48 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800496a:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 800496e:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 8004970:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004972:	d003      	beq.n	800497c <HAL_I2C_Mem_Write+0x24>
      return HAL_BUSY;
 8004974:	2002      	movs	r0, #2
}
 8004976:	b003      	add	sp, #12
 8004978:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800497c:	9000      	str	r0, [sp, #0]
 800497e:	493c      	ldr	r1, [pc, #240]	@ (8004a70 <HAL_I2C_Mem_Write+0x118>)
 8004980:	2319      	movs	r3, #25
 8004982:	2201      	movs	r2, #1
 8004984:	4620      	mov	r0, r4
 8004986:	f7ff fd75 	bl	8004474 <I2C_WaitOnFlagUntilTimeout>
 800498a:	2800      	cmp	r0, #0
 800498c:	d1f2      	bne.n	8004974 <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 800498e:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8004992:	2b01      	cmp	r3, #1
 8004994:	d0ee      	beq.n	8004974 <HAL_I2C_Mem_Write+0x1c>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004996:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 8004998:	2301      	movs	r3, #1
 800499a:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800499e:	6803      	ldr	r3, [r0, #0]
 80049a0:	07d9      	lsls	r1, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 80049a2:	bf5e      	ittt	pl
 80049a4:	6803      	ldrpl	r3, [r0, #0]
 80049a6:	f043 0301 	orrpl.w	r3, r3, #1
 80049aa:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80049ac:	6803      	ldr	r3, [r0, #0]
 80049ae:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80049b2:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80049b4:	2321      	movs	r3, #33	@ 0x21
 80049b6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80049ba:	2340      	movs	r3, #64	@ 0x40
 80049bc:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049c0:	2300      	movs	r3, #0
 80049c2:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 80049c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80049c6:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80049c8:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 80049cc:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80049ce:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80049d0:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80049d2:	4b28      	ldr	r3, [pc, #160]	@ (8004a74 <HAL_I2C_Mem_Write+0x11c>)
 80049d4:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80049d6:	4642      	mov	r2, r8
 80049d8:	e9cd 6500 	strd	r6, r5, [sp]
 80049dc:	464b      	mov	r3, r9
 80049de:	4639      	mov	r1, r7
 80049e0:	4620      	mov	r0, r4
 80049e2:	f7ff fddd 	bl	80045a0 <I2C_RequestMemoryWrite>
 80049e6:	2800      	cmp	r0, #0
 80049e8:	d02a      	beq.n	8004a40 <HAL_I2C_Mem_Write+0xe8>
      return HAL_ERROR;
 80049ea:	2001      	movs	r0, #1
 80049ec:	e7c3      	b.n	8004976 <HAL_I2C_Mem_Write+0x1e>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049ee:	f7ff fdaf 	bl	8004550 <I2C_WaitOnTXEFlagUntilTimeout>
 80049f2:	b140      	cbz	r0, 8004a06 <HAL_I2C_Mem_Write+0xae>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049f4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80049f6:	2b04      	cmp	r3, #4
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049f8:	bf01      	itttt	eq
 80049fa:	6822      	ldreq	r2, [r4, #0]
 80049fc:	6813      	ldreq	r3, [r2, #0]
 80049fe:	f443 7300 	orreq.w	r3, r3, #512	@ 0x200
 8004a02:	6013      	streq	r3, [r2, #0]
 8004a04:	e7f1      	b.n	80049ea <HAL_I2C_Mem_Write+0x92>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a06:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004a08:	6827      	ldr	r7, [r4, #0]
 8004a0a:	461a      	mov	r2, r3
 8004a0c:	f812 1b01 	ldrb.w	r1, [r2], #1
 8004a10:	6139      	str	r1, [r7, #16]
      hi2c->pBuffPtr++;
 8004a12:	6262      	str	r2, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8004a14:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8004a16:	8d21      	ldrh	r1, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8004a18:	3a01      	subs	r2, #1
 8004a1a:	b292      	uxth	r2, r2
 8004a1c:	8562      	strh	r2, [r4, #42]	@ 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004a1e:	697a      	ldr	r2, [r7, #20]
      hi2c->XferSize--;
 8004a20:	1e48      	subs	r0, r1, #1
 8004a22:	b280      	uxth	r0, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004a24:	0752      	lsls	r2, r2, #29
      hi2c->XferSize--;
 8004a26:	8520      	strh	r0, [r4, #40]	@ 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004a28:	d50a      	bpl.n	8004a40 <HAL_I2C_Mem_Write+0xe8>
 8004a2a:	b148      	cbz	r0, 8004a40 <HAL_I2C_Mem_Write+0xe8>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a2c:	785a      	ldrb	r2, [r3, #1]
 8004a2e:	613a      	str	r2, [r7, #16]
        hi2c->pBuffPtr++;
 8004a30:	3302      	adds	r3, #2
 8004a32:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 8004a34:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8004a36:	3b01      	subs	r3, #1
        hi2c->XferSize--;
 8004a38:	3902      	subs	r1, #2
        hi2c->XferCount--;
 8004a3a:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8004a3c:	8521      	strh	r1, [r4, #40]	@ 0x28
        hi2c->XferCount--;
 8004a3e:	8563      	strh	r3, [r4, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004a40:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a42:	462a      	mov	r2, r5
 8004a44:	4631      	mov	r1, r6
 8004a46:	4620      	mov	r0, r4
    while (hi2c->XferSize > 0U)
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d1d0      	bne.n	80049ee <HAL_I2C_Mem_Write+0x96>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a4c:	f7ff fe84 	bl	8004758 <I2C_WaitOnBTFFlagUntilTimeout>
 8004a50:	2800      	cmp	r0, #0
 8004a52:	d1cf      	bne.n	80049f4 <HAL_I2C_Mem_Write+0x9c>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a54:	6822      	ldr	r2, [r4, #0]
 8004a56:	6813      	ldr	r3, [r2, #0]
 8004a58:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004a5c:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8004a5e:	2320      	movs	r3, #32
 8004a60:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    __HAL_UNLOCK(hi2c);
 8004a64:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a68:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
    return HAL_OK;
 8004a6c:	e783      	b.n	8004976 <HAL_I2C_Mem_Write+0x1e>
 8004a6e:	bf00      	nop
 8004a70:	00100002 	.word	0x00100002
 8004a74:	ffff0000 	.word	0xffff0000

08004a78 <HAL_I2C_Mem_Read>:
{
 8004a78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004a7c:	4604      	mov	r4, r0
 8004a7e:	b087      	sub	sp, #28
 8004a80:	4699      	mov	r9, r3
 8004a82:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8004a84:	460d      	mov	r5, r1
 8004a86:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 8004a88:	f7ff fa5e 	bl	8003f48 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a8c:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 8004a90:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 8004a92:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a94:	d004      	beq.n	8004aa0 <HAL_I2C_Mem_Read+0x28>
      return HAL_BUSY;
 8004a96:	2502      	movs	r5, #2
}
 8004a98:	4628      	mov	r0, r5
 8004a9a:	b007      	add	sp, #28
 8004a9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004aa0:	9000      	str	r0, [sp, #0]
 8004aa2:	4976      	ldr	r1, [pc, #472]	@ (8004c7c <HAL_I2C_Mem_Read+0x204>)
 8004aa4:	2319      	movs	r3, #25
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	4620      	mov	r0, r4
 8004aaa:	f7ff fce3 	bl	8004474 <I2C_WaitOnFlagUntilTimeout>
 8004aae:	2800      	cmp	r0, #0
 8004ab0:	d1f1      	bne.n	8004a96 <HAL_I2C_Mem_Read+0x1e>
    __HAL_LOCK(hi2c);
 8004ab2:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d0ed      	beq.n	8004a96 <HAL_I2C_Mem_Read+0x1e>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004aba:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 8004abc:	2301      	movs	r3, #1
 8004abe:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ac2:	6803      	ldr	r3, [r0, #0]
 8004ac4:	07db      	lsls	r3, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 8004ac6:	bf5e      	ittt	pl
 8004ac8:	6803      	ldrpl	r3, [r0, #0]
 8004aca:	f043 0301 	orrpl.w	r3, r3, #1
 8004ace:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ad0:	6803      	ldr	r3, [r0, #0]
 8004ad2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004ad6:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004ad8:	2322      	movs	r3, #34	@ 0x22
 8004ada:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004ade:	2340      	movs	r3, #64	@ 0x40
 8004ae0:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 8004ae8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004aea:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004aec:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 8004af0:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004af2:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8004af4:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004af6:	4b62      	ldr	r3, [pc, #392]	@ (8004c80 <HAL_I2C_Mem_Read+0x208>)
 8004af8:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004afa:	4629      	mov	r1, r5
 8004afc:	e9cd 7600 	strd	r7, r6, [sp]
 8004b00:	464b      	mov	r3, r9
 8004b02:	4642      	mov	r2, r8
 8004b04:	4620      	mov	r0, r4
 8004b06:	f7ff fda5 	bl	8004654 <I2C_RequestMemoryRead>
 8004b0a:	4605      	mov	r5, r0
 8004b0c:	b108      	cbz	r0, 8004b12 <HAL_I2C_Mem_Read+0x9a>
      return HAL_ERROR;
 8004b0e:	2501      	movs	r5, #1
 8004b10:	e7c2      	b.n	8004a98 <HAL_I2C_Mem_Read+0x20>
    if (hi2c->XferSize == 0U)
 8004b12:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b14:	6823      	ldr	r3, [r4, #0]
    if (hi2c->XferSize == 0U)
 8004b16:	b9b2      	cbnz	r2, 8004b46 <HAL_I2C_Mem_Read+0xce>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b18:	9002      	str	r0, [sp, #8]
 8004b1a:	695a      	ldr	r2, [r3, #20]
 8004b1c:	9202      	str	r2, [sp, #8]
 8004b1e:	699a      	ldr	r2, [r3, #24]
 8004b20:	9202      	str	r2, [sp, #8]
 8004b22:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b2a:	601a      	str	r2, [r3, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004b2c:	f8df 8154 	ldr.w	r8, [pc, #340]	@ 8004c84 <HAL_I2C_Mem_Read+0x20c>
    while (hi2c->XferSize > 0U)
 8004b30:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d12c      	bne.n	8004b90 <HAL_I2C_Mem_Read+0x118>
    hi2c->State = HAL_I2C_STATE_READY;
 8004b36:	2220      	movs	r2, #32
 8004b38:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
    __HAL_UNLOCK(hi2c);
 8004b3c:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b40:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    return HAL_OK;
 8004b44:	e7a8      	b.n	8004a98 <HAL_I2C_Mem_Read+0x20>
    else if (hi2c->XferSize == 1U)
 8004b46:	2a01      	cmp	r2, #1
 8004b48:	d10a      	bne.n	8004b60 <HAL_I2C_Mem_Read+0xe8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b50:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b52:	9003      	str	r0, [sp, #12]
 8004b54:	695a      	ldr	r2, [r3, #20]
 8004b56:	9203      	str	r2, [sp, #12]
 8004b58:	699a      	ldr	r2, [r3, #24]
 8004b5a:	9203      	str	r2, [sp, #12]
 8004b5c:	9a03      	ldr	r2, [sp, #12]
 8004b5e:	e7e1      	b.n	8004b24 <HAL_I2C_Mem_Read+0xac>
    else if (hi2c->XferSize == 2U)
 8004b60:	2a02      	cmp	r2, #2
 8004b62:	d10e      	bne.n	8004b82 <HAL_I2C_Mem_Read+0x10a>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b6a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b72:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b74:	9004      	str	r0, [sp, #16]
 8004b76:	695a      	ldr	r2, [r3, #20]
 8004b78:	9204      	str	r2, [sp, #16]
 8004b7a:	699b      	ldr	r3, [r3, #24]
 8004b7c:	9304      	str	r3, [sp, #16]
 8004b7e:	9b04      	ldr	r3, [sp, #16]
 8004b80:	e7d4      	b.n	8004b2c <HAL_I2C_Mem_Read+0xb4>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b82:	9005      	str	r0, [sp, #20]
 8004b84:	695a      	ldr	r2, [r3, #20]
 8004b86:	9205      	str	r2, [sp, #20]
 8004b88:	699b      	ldr	r3, [r3, #24]
 8004b8a:	9305      	str	r3, [sp, #20]
 8004b8c:	9b05      	ldr	r3, [sp, #20]
 8004b8e:	e7cd      	b.n	8004b2c <HAL_I2C_Mem_Read+0xb4>
      if (hi2c->XferSize <= 3U)
 8004b90:	2b03      	cmp	r3, #3
 8004b92:	d856      	bhi.n	8004c42 <HAL_I2C_Mem_Read+0x1ca>
        if (hi2c->XferSize == 1U)
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d115      	bne.n	8004bc4 <HAL_I2C_Mem_Read+0x14c>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b98:	4632      	mov	r2, r6
 8004b9a:	4639      	mov	r1, r7
 8004b9c:	4620      	mov	r0, r4
 8004b9e:	f7ff fe02 	bl	80047a6 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004ba2:	2800      	cmp	r0, #0
 8004ba4:	d1b3      	bne.n	8004b0e <HAL_I2C_Mem_Read+0x96>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ba6:	6823      	ldr	r3, [r4, #0]
 8004ba8:	691a      	ldr	r2, [r3, #16]
 8004baa:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004bac:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8004bae:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004bb0:	3301      	adds	r3, #1
 8004bb2:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8004bb4:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8004bb6:	3b01      	subs	r3, #1
 8004bb8:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8004bba:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8004bbc:	3b01      	subs	r3, #1
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	8563      	strh	r3, [r4, #42]	@ 0x2a
 8004bc2:	e7b5      	b.n	8004b30 <HAL_I2C_Mem_Read+0xb8>
        else if (hi2c->XferSize == 2U)
 8004bc4:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004bc6:	9600      	str	r6, [sp, #0]
 8004bc8:	463b      	mov	r3, r7
 8004bca:	f04f 0200 	mov.w	r2, #0
 8004bce:	4641      	mov	r1, r8
 8004bd0:	4620      	mov	r0, r4
        else if (hi2c->XferSize == 2U)
 8004bd2:	d119      	bne.n	8004c08 <HAL_I2C_Mem_Read+0x190>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004bd4:	f7ff fc4e 	bl	8004474 <I2C_WaitOnFlagUntilTimeout>
 8004bd8:	2800      	cmp	r0, #0
 8004bda:	d198      	bne.n	8004b0e <HAL_I2C_Mem_Read+0x96>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bdc:	6823      	ldr	r3, [r4, #0]
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004be4:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004be6:	691a      	ldr	r2, [r3, #16]
 8004be8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004bea:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8004bec:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8004bee:	1c53      	adds	r3, r2, #1
 8004bf0:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8004bf2:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8004bf4:	3b01      	subs	r3, #1
 8004bf6:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8004bf8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8004bfa:	3b01      	subs	r3, #1
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	8563      	strh	r3, [r4, #42]	@ 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c00:	6823      	ldr	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c02:	691b      	ldr	r3, [r3, #16]
 8004c04:	7053      	strb	r3, [r2, #1]
 8004c06:	e7d2      	b.n	8004bae <HAL_I2C_Mem_Read+0x136>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004c08:	f7ff fc34 	bl	8004474 <I2C_WaitOnFlagUntilTimeout>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	2800      	cmp	r0, #0
 8004c10:	f47f af7d 	bne.w	8004b0e <HAL_I2C_Mem_Read+0x96>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c14:	6823      	ldr	r3, [r4, #0]
 8004c16:	6819      	ldr	r1, [r3, #0]
 8004c18:	f421 6180 	bic.w	r1, r1, #1024	@ 0x400
 8004c1c:	6019      	str	r1, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c1e:	6919      	ldr	r1, [r3, #16]
 8004c20:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004c22:	7019      	strb	r1, [r3, #0]
          hi2c->pBuffPtr++;
 8004c24:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004c26:	3301      	adds	r3, #1
 8004c28:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8004c2a:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8004c2c:	3b01      	subs	r3, #1
 8004c2e:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8004c30:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8004c32:	3b01      	subs	r3, #1
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	8563      	strh	r3, [r4, #42]	@ 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004c38:	4641      	mov	r1, r8
 8004c3a:	9600      	str	r6, [sp, #0]
 8004c3c:	463b      	mov	r3, r7
 8004c3e:	4620      	mov	r0, r4
 8004c40:	e7c8      	b.n	8004bd4 <HAL_I2C_Mem_Read+0x15c>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c42:	4632      	mov	r2, r6
 8004c44:	4639      	mov	r1, r7
 8004c46:	4620      	mov	r0, r4
 8004c48:	f7ff fdad 	bl	80047a6 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004c4c:	2800      	cmp	r0, #0
 8004c4e:	f47f af5e 	bne.w	8004b0e <HAL_I2C_Mem_Read+0x96>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c52:	6823      	ldr	r3, [r4, #0]
 8004c54:	691a      	ldr	r2, [r3, #16]
 8004c56:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004c58:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004c5a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8004c5c:	1c53      	adds	r3, r2, #1
 8004c5e:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferSize--;
 8004c60:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8004c62:	3b01      	subs	r3, #1
 8004c64:	8523      	strh	r3, [r4, #40]	@ 0x28
        hi2c->XferCount--;
 8004c66:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8004c68:	3b01      	subs	r3, #1
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	8563      	strh	r3, [r4, #42]	@ 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004c6e:	6823      	ldr	r3, [r4, #0]
 8004c70:	6959      	ldr	r1, [r3, #20]
 8004c72:	0749      	lsls	r1, r1, #29
 8004c74:	f57f af5c 	bpl.w	8004b30 <HAL_I2C_Mem_Read+0xb8>
 8004c78:	e7c3      	b.n	8004c02 <HAL_I2C_Mem_Read+0x18a>
 8004c7a:	bf00      	nop
 8004c7c:	00100002 	.word	0x00100002
 8004c80:	ffff0000 	.word	0xffff0000
 8004c84:	00010004 	.word	0x00010004

08004c88 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004c88:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c8a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8004c8e:	2b20      	cmp	r3, #32
 8004c90:	b2dc      	uxtb	r4, r3
 8004c92:	d116      	bne.n	8004cc2 <HAL_I2CEx_ConfigAnalogFilter+0x3a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004c94:	2324      	movs	r3, #36	@ 0x24
 8004c96:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004c9a:	6803      	ldr	r3, [r0, #0]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	f022 0201 	bic.w	r2, r2, #1
 8004ca2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004ca4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004ca6:	f022 0210 	bic.w	r2, r2, #16
 8004caa:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004cac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004cae:	4311      	orrs	r1, r2
 8004cb0:	6259      	str	r1, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	f042 0201 	orr.w	r2, r2, #1
 8004cb8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004cba:	f880 403d 	strb.w	r4, [r0, #61]	@ 0x3d

    return HAL_OK;
 8004cbe:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8004cc0:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8004cc2:	2002      	movs	r0, #2
 8004cc4:	e7fc      	b.n	8004cc0 <HAL_I2CEx_ConfigAnalogFilter+0x38>

08004cc6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004cc6:	b530      	push	{r4, r5, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cc8:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8004ccc:	2b20      	cmp	r3, #32
 8004cce:	b2dc      	uxtb	r4, r3
 8004cd0:	d116      	bne.n	8004d00 <HAL_I2CEx_ConfigDigitalFilter+0x3a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004cd2:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004cd4:	2324      	movs	r3, #36	@ 0x24
 8004cd6:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
    __HAL_I2C_DISABLE(hi2c);
 8004cda:	6813      	ldr	r3, [r2, #0]
 8004cdc:	f023 0301 	bic.w	r3, r3, #1
 8004ce0:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004ce2:	6a55      	ldr	r5, [r2, #36]	@ 0x24

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004ce4:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 8004ce8:	402b      	ands	r3, r5

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004cea:	430b      	orrs	r3, r1

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004cec:	b29b      	uxth	r3, r3
 8004cee:	6253      	str	r3, [r2, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004cf0:	6813      	ldr	r3, [r2, #0]
 8004cf2:	f043 0301 	orr.w	r3, r3, #1
 8004cf6:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004cf8:	f880 403d 	strb.w	r4, [r0, #61]	@ 0x3d

    return HAL_OK;
 8004cfc:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8004cfe:	bd30      	pop	{r4, r5, pc}
    return HAL_BUSY;
 8004d00:	2002      	movs	r0, #2
 8004d02:	e7fc      	b.n	8004cfe <HAL_I2CEx_ConfigDigitalFilter+0x38>

08004d04 <LTDC_SetConfig>:
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004d04:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004d06:	f8d1 c000 	ldr.w	ip, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004d0a:	01d2      	lsls	r2, r2, #7
 8004d0c:	3284      	adds	r2, #132	@ 0x84
 8004d0e:	1883      	adds	r3, r0, r2
{
 8004d10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004d14:	68c6      	ldr	r6, [r0, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004d16:	685d      	ldr	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004d18:	684c      	ldr	r4, [r1, #4]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004d1a:	f8d1 9018 	ldr.w	r9, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004d1e:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
 8004d22:	605d      	str	r5, [r3, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004d24:	68c5      	ldr	r5, [r0, #12]
 8004d26:	f10c 0701 	add.w	r7, ip, #1
 8004d2a:	f3c5 450b 	ubfx	r5, r5, #16, #12
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004d2e:	f3c6 460b 	ubfx	r6, r6, #16, #12
 8004d32:	4426      	add	r6, r4
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004d34:	443d      	add	r5, r7
 8004d36:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004d3a:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004d3c:	68c6      	ldr	r6, [r0, #12]
 8004d3e:	68cd      	ldr	r5, [r1, #12]
 8004d40:	f3c6 060a 	ubfx	r6, r6, #0, #11
 8004d44:	442e      	add	r6, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004d46:	689d      	ldr	r5, [r3, #8]
 8004d48:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
 8004d4c:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004d4e:	68c7      	ldr	r7, [r0, #12]
 8004d50:	688d      	ldr	r5, [r1, #8]
 8004d52:	f3c7 070a 	ubfx	r7, r7, #0, #11
 8004d56:	3501      	adds	r5, #1
 8004d58:	443d      	add	r5, r7
 8004d5a:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
 8004d5e:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004d60:	691d      	ldr	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004d62:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004d64:	f025 0507 	bic.w	r5, r5, #7
 8004d68:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004d6a:	f04f 0e00 	mov.w	lr, #0
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004d6e:	611e      	str	r6, [r3, #16]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004d70:	f891 7032 	ldrb.w	r7, [r1, #50]	@ 0x32
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004d74:	699d      	ldr	r5, [r3, #24]
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004d76:	f891 8031 	ldrb.w	r8, [r1, #49]	@ 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004d7a:	f8c3 e018 	str.w	lr, [r3, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004d7e:	f891 5030 	ldrb.w	r5, [r1, #48]	@ 0x30
 8004d82:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 8004d86:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 8004d8a:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 8004d8e:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004d90:	695d      	ldr	r5, [r3, #20]
 8004d92:	f025 05ff 	bic.w	r5, r5, #255	@ 0xff
 8004d96:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004d98:	694d      	ldr	r5, [r1, #20]
 8004d9a:	615d      	str	r5, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004d9c:	69dd      	ldr	r5, [r3, #28]
 8004d9e:	f425 65e0 	bic.w	r5, r5, #1792	@ 0x700
 8004da2:	f025 0507 	bic.w	r5, r5, #7
 8004da6:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004da8:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
 8004dac:	433d      	orrs	r5, r7
 8004dae:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004db0:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004db2:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004db4:	f8c3 e028 	str.w	lr, [r3, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004db8:	2e07      	cmp	r6, #7
 8004dba:	629d      	str	r5, [r3, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004dbc:	bf9c      	itt	ls
 8004dbe:	4d0e      	ldrls	r5, [pc, #56]	@ (8004df8 <LTDC_SetConfig+0xf4>)
 8004dc0:	5dae      	ldrbls	r6, [r5, r6]
  {
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004dc2:	6add      	ldr	r5, [r3, #44]	@ 0x2c
 8004dc4:	f005 25e0 	and.w	r5, r5, #3758153728	@ 0xe000e000
 8004dc8:	62dd      	str	r5, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004dca:	bf88      	it	hi
 8004dcc:	2601      	movhi	r6, #1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004dce:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004dd0:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004dd2:	eba4 040c 	sub.w	r4, r4, ip
 8004dd6:	4374      	muls	r4, r6
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004dd8:	4375      	muls	r5, r6
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004dda:	3403      	adds	r4, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004ddc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8004de0:	62dc      	str	r4, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004de2:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 8004de4:	f36f 040a 	bfc	r4, #0, #11
 8004de8:	631c      	str	r4, [r3, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004dea:	6319      	str	r1, [r3, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004dec:	5883      	ldr	r3, [r0, r2]
 8004dee:	f043 0301 	orr.w	r3, r3, #1
 8004df2:	5083      	str	r3, [r0, r2]
}
 8004df4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004df8:	080144ec 	.word	0x080144ec

08004dfc <HAL_LTDC_Init>:
{
 8004dfc:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 8004dfe:	4604      	mov	r4, r0
 8004e00:	2800      	cmp	r0, #0
 8004e02:	d063      	beq.n	8004ecc <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004e04:	f890 30a1 	ldrb.w	r3, [r0, #161]	@ 0xa1
 8004e08:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8004e0c:	b91b      	cbnz	r3, 8004e16 <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 8004e0e:	f880 20a0 	strb.w	r2, [r0, #160]	@ 0xa0
    HAL_LTDC_MspInit(hltdc);
 8004e12:	f7fc fe5d 	bl	8001ad0 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004e16:	2302      	movs	r3, #2
 8004e18:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004e1c:	6823      	ldr	r3, [r4, #0]
 8004e1e:	699a      	ldr	r2, [r3, #24]
 8004e20:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8004e24:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004e26:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8004e2a:	4302      	orrs	r2, r0
 8004e2c:	68e0      	ldr	r0, [r4, #12]
 8004e2e:	6999      	ldr	r1, [r3, #24]
 8004e30:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004e32:	6920      	ldr	r0, [r4, #16]
 8004e34:	4302      	orrs	r2, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004e36:	430a      	orrs	r2, r1
 8004e38:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004e3a:	689a      	ldr	r2, [r3, #8]
 8004e3c:	4924      	ldr	r1, [pc, #144]	@ (8004ed0 <HAL_LTDC_Init+0xd4>)
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004e3e:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004e40:	400a      	ands	r2, r1
 8004e42:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004e44:	689a      	ldr	r2, [r3, #8]
 8004e46:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8004e4a:	69a0      	ldr	r0, [r4, #24]
 8004e4c:	4302      	orrs	r2, r0
 8004e4e:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004e50:	68da      	ldr	r2, [r3, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004e52:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004e54:	400a      	ands	r2, r1
 8004e56:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004e58:	68da      	ldr	r2, [r3, #12]
 8004e5a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8004e5e:	6a20      	ldr	r0, [r4, #32]
 8004e60:	4302      	orrs	r2, r0
 8004e62:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004e64:	691a      	ldr	r2, [r3, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004e66:	6a60      	ldr	r0, [r4, #36]	@ 0x24
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004e68:	400a      	ands	r2, r1
 8004e6a:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004e6c:	691a      	ldr	r2, [r3, #16]
 8004e6e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8004e72:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8004e74:	4302      	orrs	r2, r0
 8004e76:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004e78:	695a      	ldr	r2, [r3, #20]
 8004e7a:	400a      	ands	r2, r1
 8004e7c:	615a      	str	r2, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004e7e:	695a      	ldr	r2, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004e80:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004e82:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004e86:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004e88:	430a      	orrs	r2, r1
 8004e8a:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004e8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004e8e:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004e92:	f894 1036 	ldrb.w	r1, [r4, #54]	@ 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004e96:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8004e9a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004e9c:	6add      	ldr	r5, [r3, #44]	@ 0x2c
 8004e9e:	f894 2034 	ldrb.w	r2, [r4, #52]	@ 0x34
 8004ea2:	432a      	orrs	r2, r5
 8004ea4:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8004ea8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004eac:	62da      	str	r2, [r3, #44]	@ 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004eae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004eb0:	f042 0206 	orr.w	r2, r2, #6
 8004eb4:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8004eb6:	699a      	ldr	r2, [r3, #24]
 8004eb8:	f042 0201 	orr.w	r2, r2, #1
 8004ebc:	619a      	str	r2, [r3, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004ebe:	2000      	movs	r0, #0
  hltdc->State = HAL_LTDC_STATE_READY;
 8004ec0:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004ec2:	f8c4 00a4 	str.w	r0, [r4, #164]	@ 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8004ec6:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
}
 8004eca:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8004ecc:	2001      	movs	r0, #1
 8004ece:	e7fc      	b.n	8004eca <HAL_LTDC_Init+0xce>
 8004ed0:	f000f800 	.word	0xf000f800

08004ed4 <HAL_LTDC_ErrorCallback>:
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
 8004ed4:	4770      	bx	lr

08004ed6 <HAL_LTDC_ReloadEventCallback>:
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
 8004ed6:	4770      	bx	lr

08004ed8 <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8004ed8:	6803      	ldr	r3, [r0, #0]
{
 8004eda:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8004edc:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8004ede:	6b5d      	ldr	r5, [r3, #52]	@ 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8004ee0:	0772      	lsls	r2, r6, #29
{
 8004ee2:	4604      	mov	r4, r0
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8004ee4:	d514      	bpl.n	8004f10 <HAL_LTDC_IRQHandler+0x38>
 8004ee6:	0769      	lsls	r1, r5, #29
 8004ee8:	d512      	bpl.n	8004f10 <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8004eea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004eec:	f022 0204 	bic.w	r2, r2, #4
 8004ef0:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8004ef2:	2204      	movs	r2, #4
 8004ef4:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8004ef6:	f8d0 30a4 	ldr.w	r3, [r0, #164]	@ 0xa4
 8004efa:	f043 0301 	orr.w	r3, r3, #1
 8004efe:	f8c0 30a4 	str.w	r3, [r0, #164]	@ 0xa4
    __HAL_UNLOCK(hltdc);
 8004f02:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004f04:	f880 20a1 	strb.w	r2, [r0, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 8004f08:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8004f0c:	f7ff ffe2 	bl	8004ed4 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8004f10:	07b2      	lsls	r2, r6, #30
 8004f12:	d516      	bpl.n	8004f42 <HAL_LTDC_IRQHandler+0x6a>
 8004f14:	07ab      	lsls	r3, r5, #30
 8004f16:	d514      	bpl.n	8004f42 <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8004f18:	6823      	ldr	r3, [r4, #0]
 8004f1a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f1c:	f022 0202 	bic.w	r2, r2, #2
 8004f20:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8004f22:	2202      	movs	r2, #2
 8004f24:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8004f26:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	f8c4 30a4 	str.w	r3, [r4, #164]	@ 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004f30:	2304      	movs	r3, #4
 8004f32:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 8004f36:	2300      	movs	r3, #0
 8004f38:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8004f3c:	4620      	mov	r0, r4
 8004f3e:	f7ff ffc9 	bl	8004ed4 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8004f42:	07f0      	lsls	r0, r6, #31
 8004f44:	d510      	bpl.n	8004f68 <HAL_LTDC_IRQHandler+0x90>
 8004f46:	07e9      	lsls	r1, r5, #31
 8004f48:	d50e      	bpl.n	8004f68 <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8004f4a:	6823      	ldr	r3, [r4, #0]
 8004f4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f4e:	f022 0201 	bic.w	r2, r2, #1
 8004f52:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8004f54:	2201      	movs	r2, #1
 8004f56:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_UNLOCK(hltdc);
 8004f58:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 8004f5a:	f884 20a1 	strb.w	r2, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 8004f5e:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 8004f62:	4620      	mov	r0, r4
 8004f64:	f7fc f978 	bl	8001258 <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8004f68:	0732      	lsls	r2, r6, #28
 8004f6a:	d511      	bpl.n	8004f90 <HAL_LTDC_IRQHandler+0xb8>
 8004f6c:	072b      	lsls	r3, r5, #28
 8004f6e:	d50f      	bpl.n	8004f90 <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8004f70:	6823      	ldr	r3, [r4, #0]
 8004f72:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f74:	f022 0208 	bic.w	r2, r2, #8
 8004f78:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8004f7a:	2208      	movs	r2, #8
 8004f7c:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 8004f84:	2300      	movs	r3, #0
 8004f86:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 8004f8a:	4620      	mov	r0, r4
 8004f8c:	f7ff ffa3 	bl	8004ed6 <HAL_LTDC_ReloadEventCallback>
}
 8004f90:	bd70      	pop	{r4, r5, r6, pc}

08004f92 <HAL_LTDC_ConfigLayer>:
{
 8004f92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 8004f96:	f890 30a0 	ldrb.w	r3, [r0, #160]	@ 0xa0
 8004f9a:	2b01      	cmp	r3, #1
{
 8004f9c:	4606      	mov	r6, r0
 8004f9e:	460f      	mov	r7, r1
 8004fa0:	4694      	mov	ip, r2
 8004fa2:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hltdc);
 8004fa6:	d01f      	beq.n	8004fe8 <HAL_LTDC_ConfigLayer+0x56>
 8004fa8:	f04f 0801 	mov.w	r8, #1
 8004fac:	f886 80a0 	strb.w	r8, [r6, #160]	@ 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004fb0:	f886 00a1 	strb.w	r0, [r6, #161]	@ 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004fb4:	2434      	movs	r4, #52	@ 0x34
 8004fb6:	460d      	mov	r5, r1
 8004fb8:	fb04 6402 	mla	r4, r4, r2, r6
 8004fbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004fbe:	3438      	adds	r4, #56	@ 0x38
 8004fc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004fc2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004fc4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004fc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004fc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004fca:	682b      	ldr	r3, [r5, #0]
 8004fcc:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004fce:	4630      	mov	r0, r6
 8004fd0:	4662      	mov	r2, ip
 8004fd2:	4639      	mov	r1, r7
 8004fd4:	f7ff fe96 	bl	8004d04 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004fd8:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 8004fda:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004fdc:	f8c3 8024 	str.w	r8, [r3, #36]	@ 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004fe0:	f886 80a1 	strb.w	r8, [r6, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 8004fe4:	f886 00a0 	strb.w	r0, [r6, #160]	@ 0xa0
}
 8004fe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004fec <HAL_LTDC_ProgramLineEvent>:
  __HAL_LOCK(hltdc);
 8004fec:	f890 20a0 	ldrb.w	r2, [r0, #160]	@ 0xa0
 8004ff0:	2a01      	cmp	r2, #1
{
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hltdc);
 8004ff8:	d012      	beq.n	8005020 <HAL_LTDC_ProgramLineEvent+0x34>
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8004ffa:	681a      	ldr	r2, [r3, #0]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004ffc:	f883 00a1 	strb.w	r0, [r3, #161]	@ 0xa1
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005000:	6b50      	ldr	r0, [r2, #52]	@ 0x34
 8005002:	f020 0001 	bic.w	r0, r0, #1
 8005006:	6350      	str	r0, [r2, #52]	@ 0x34
  LTDC->LIPCR = (uint32_t)Line;
 8005008:	4806      	ldr	r0, [pc, #24]	@ (8005024 <HAL_LTDC_ProgramLineEvent+0x38>)
 800500a:	6401      	str	r1, [r0, #64]	@ 0x40
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 800500c:	6b51      	ldr	r1, [r2, #52]	@ 0x34
 800500e:	f041 0101 	orr.w	r1, r1, #1
 8005012:	6351      	str	r1, [r2, #52]	@ 0x34
  __HAL_UNLOCK(hltdc);
 8005014:	2000      	movs	r0, #0
  hltdc->State = HAL_LTDC_STATE_READY;
 8005016:	2201      	movs	r2, #1
 8005018:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 800501c:	f883 00a0 	strb.w	r0, [r3, #160]	@ 0xa0
}
 8005020:	4770      	bx	lr
 8005022:	bf00      	nop
 8005024:	40016800 	.word	0x40016800

08005028 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005028:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800502c:	4604      	mov	r4, r0
 800502e:	b340      	cbz	r0, 8005082 <HAL_RCC_OscConfig+0x5a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005030:	6803      	ldr	r3, [r0, #0]
 8005032:	07de      	lsls	r6, r3, #31
 8005034:	d410      	bmi.n	8005058 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005036:	6823      	ldr	r3, [r4, #0]
 8005038:	079d      	lsls	r5, r3, #30
 800503a:	d45b      	bmi.n	80050f4 <HAL_RCC_OscConfig+0xcc>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800503c:	6823      	ldr	r3, [r4, #0]
 800503e:	0719      	lsls	r1, r3, #28
 8005040:	f100 809d 	bmi.w	800517e <HAL_RCC_OscConfig+0x156>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005044:	6823      	ldr	r3, [r4, #0]
 8005046:	075a      	lsls	r2, r3, #29
 8005048:	f100 80bd 	bmi.w	80051c6 <HAL_RCC_OscConfig+0x19e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800504c:	69a3      	ldr	r3, [r4, #24]
 800504e:	2b00      	cmp	r3, #0
 8005050:	f040 8124 	bne.w	800529c <HAL_RCC_OscConfig+0x274>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8005054:	2000      	movs	r0, #0
 8005056:	e02c      	b.n	80050b2 <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005058:	4b8d      	ldr	r3, [pc, #564]	@ (8005290 <HAL_RCC_OscConfig+0x268>)
 800505a:	689a      	ldr	r2, [r3, #8]
 800505c:	f002 020c 	and.w	r2, r2, #12
 8005060:	2a04      	cmp	r2, #4
 8005062:	d007      	beq.n	8005074 <HAL_RCC_OscConfig+0x4c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005064:	689a      	ldr	r2, [r3, #8]
 8005066:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800506a:	2a08      	cmp	r2, #8
 800506c:	d10b      	bne.n	8005086 <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	0259      	lsls	r1, r3, #9
 8005072:	d508      	bpl.n	8005086 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005074:	4b86      	ldr	r3, [pc, #536]	@ (8005290 <HAL_RCC_OscConfig+0x268>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	039a      	lsls	r2, r3, #14
 800507a:	d5dc      	bpl.n	8005036 <HAL_RCC_OscConfig+0xe>
 800507c:	6863      	ldr	r3, [r4, #4]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d1d9      	bne.n	8005036 <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 8005082:	2001      	movs	r0, #1
 8005084:	e015      	b.n	80050b2 <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005086:	6863      	ldr	r3, [r4, #4]
 8005088:	4d81      	ldr	r5, [pc, #516]	@ (8005290 <HAL_RCC_OscConfig+0x268>)
 800508a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800508e:	d113      	bne.n	80050b8 <HAL_RCC_OscConfig+0x90>
 8005090:	682b      	ldr	r3, [r5, #0]
 8005092:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005096:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005098:	f7fe ff56 	bl	8003f48 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800509c:	4e7c      	ldr	r6, [pc, #496]	@ (8005290 <HAL_RCC_OscConfig+0x268>)
        tickstart = HAL_GetTick();
 800509e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050a0:	6833      	ldr	r3, [r6, #0]
 80050a2:	039b      	lsls	r3, r3, #14
 80050a4:	d4c7      	bmi.n	8005036 <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050a6:	f7fe ff4f 	bl	8003f48 <HAL_GetTick>
 80050aa:	1b40      	subs	r0, r0, r5
 80050ac:	2864      	cmp	r0, #100	@ 0x64
 80050ae:	d9f7      	bls.n	80050a0 <HAL_RCC_OscConfig+0x78>
            return HAL_TIMEOUT;
 80050b0:	2003      	movs	r0, #3
}
 80050b2:	b002      	add	sp, #8
 80050b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80050bc:	d104      	bne.n	80050c8 <HAL_RCC_OscConfig+0xa0>
 80050be:	682b      	ldr	r3, [r5, #0]
 80050c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80050c4:	602b      	str	r3, [r5, #0]
 80050c6:	e7e3      	b.n	8005090 <HAL_RCC_OscConfig+0x68>
 80050c8:	682a      	ldr	r2, [r5, #0]
 80050ca:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80050ce:	602a      	str	r2, [r5, #0]
 80050d0:	682a      	ldr	r2, [r5, #0]
 80050d2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80050d6:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d1dd      	bne.n	8005098 <HAL_RCC_OscConfig+0x70>
        tickstart = HAL_GetTick();
 80050dc:	f7fe ff34 	bl	8003f48 <HAL_GetTick>
 80050e0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050e2:	682b      	ldr	r3, [r5, #0]
 80050e4:	039f      	lsls	r7, r3, #14
 80050e6:	d5a6      	bpl.n	8005036 <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050e8:	f7fe ff2e 	bl	8003f48 <HAL_GetTick>
 80050ec:	1b80      	subs	r0, r0, r6
 80050ee:	2864      	cmp	r0, #100	@ 0x64
 80050f0:	d9f7      	bls.n	80050e2 <HAL_RCC_OscConfig+0xba>
 80050f2:	e7dd      	b.n	80050b0 <HAL_RCC_OscConfig+0x88>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80050f4:	4b66      	ldr	r3, [pc, #408]	@ (8005290 <HAL_RCC_OscConfig+0x268>)
 80050f6:	689a      	ldr	r2, [r3, #8]
 80050f8:	f012 0f0c 	tst.w	r2, #12
 80050fc:	d007      	beq.n	800510e <HAL_RCC_OscConfig+0xe6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050fe:	689a      	ldr	r2, [r3, #8]
 8005100:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005104:	2a08      	cmp	r2, #8
 8005106:	d111      	bne.n	800512c <HAL_RCC_OscConfig+0x104>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	025d      	lsls	r5, r3, #9
 800510c:	d40e      	bmi.n	800512c <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800510e:	4a60      	ldr	r2, [pc, #384]	@ (8005290 <HAL_RCC_OscConfig+0x268>)
 8005110:	6813      	ldr	r3, [r2, #0]
 8005112:	0799      	lsls	r1, r3, #30
 8005114:	d502      	bpl.n	800511c <HAL_RCC_OscConfig+0xf4>
 8005116:	68e3      	ldr	r3, [r4, #12]
 8005118:	2b01      	cmp	r3, #1
 800511a:	d1b2      	bne.n	8005082 <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800511c:	6813      	ldr	r3, [r2, #0]
 800511e:	6921      	ldr	r1, [r4, #16]
 8005120:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005124:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005128:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800512a:	e787      	b.n	800503c <HAL_RCC_OscConfig+0x14>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800512c:	68e2      	ldr	r2, [r4, #12]
 800512e:	4b59      	ldr	r3, [pc, #356]	@ (8005294 <HAL_RCC_OscConfig+0x26c>)
 8005130:	b1b2      	cbz	r2, 8005160 <HAL_RCC_OscConfig+0x138>
        __HAL_RCC_HSI_ENABLE();
 8005132:	2201      	movs	r2, #1
 8005134:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005136:	f7fe ff07 	bl	8003f48 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800513a:	4d55      	ldr	r5, [pc, #340]	@ (8005290 <HAL_RCC_OscConfig+0x268>)
        tickstart = HAL_GetTick();
 800513c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800513e:	682b      	ldr	r3, [r5, #0]
 8005140:	079b      	lsls	r3, r3, #30
 8005142:	d507      	bpl.n	8005154 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005144:	682b      	ldr	r3, [r5, #0]
 8005146:	6922      	ldr	r2, [r4, #16]
 8005148:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800514c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8005150:	602b      	str	r3, [r5, #0]
 8005152:	e773      	b.n	800503c <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005154:	f7fe fef8 	bl	8003f48 <HAL_GetTick>
 8005158:	1b80      	subs	r0, r0, r6
 800515a:	2802      	cmp	r0, #2
 800515c:	d9ef      	bls.n	800513e <HAL_RCC_OscConfig+0x116>
 800515e:	e7a7      	b.n	80050b0 <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_HSI_DISABLE();
 8005160:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005162:	f7fe fef1 	bl	8003f48 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005166:	4e4a      	ldr	r6, [pc, #296]	@ (8005290 <HAL_RCC_OscConfig+0x268>)
        tickstart = HAL_GetTick();
 8005168:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800516a:	6833      	ldr	r3, [r6, #0]
 800516c:	079f      	lsls	r7, r3, #30
 800516e:	f57f af65 	bpl.w	800503c <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005172:	f7fe fee9 	bl	8003f48 <HAL_GetTick>
 8005176:	1b40      	subs	r0, r0, r5
 8005178:	2802      	cmp	r0, #2
 800517a:	d9f6      	bls.n	800516a <HAL_RCC_OscConfig+0x142>
 800517c:	e798      	b.n	80050b0 <HAL_RCC_OscConfig+0x88>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800517e:	6962      	ldr	r2, [r4, #20]
 8005180:	4b44      	ldr	r3, [pc, #272]	@ (8005294 <HAL_RCC_OscConfig+0x26c>)
 8005182:	b182      	cbz	r2, 80051a6 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8005184:	2201      	movs	r2, #1
 8005186:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 800518a:	f7fe fedd 	bl	8003f48 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800518e:	4e40      	ldr	r6, [pc, #256]	@ (8005290 <HAL_RCC_OscConfig+0x268>)
      tickstart = HAL_GetTick();
 8005190:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005192:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8005194:	079b      	lsls	r3, r3, #30
 8005196:	f53f af55 	bmi.w	8005044 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800519a:	f7fe fed5 	bl	8003f48 <HAL_GetTick>
 800519e:	1b40      	subs	r0, r0, r5
 80051a0:	2802      	cmp	r0, #2
 80051a2:	d9f6      	bls.n	8005192 <HAL_RCC_OscConfig+0x16a>
 80051a4:	e784      	b.n	80050b0 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_LSI_DISABLE();
 80051a6:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 80051aa:	f7fe fecd 	bl	8003f48 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051ae:	4e38      	ldr	r6, [pc, #224]	@ (8005290 <HAL_RCC_OscConfig+0x268>)
      tickstart = HAL_GetTick();
 80051b0:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051b2:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 80051b4:	079f      	lsls	r7, r3, #30
 80051b6:	f57f af45 	bpl.w	8005044 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80051ba:	f7fe fec5 	bl	8003f48 <HAL_GetTick>
 80051be:	1b40      	subs	r0, r0, r5
 80051c0:	2802      	cmp	r0, #2
 80051c2:	d9f6      	bls.n	80051b2 <HAL_RCC_OscConfig+0x18a>
 80051c4:	e774      	b.n	80050b0 <HAL_RCC_OscConfig+0x88>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051c6:	4b32      	ldr	r3, [pc, #200]	@ (8005290 <HAL_RCC_OscConfig+0x268>)
 80051c8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80051ca:	f012 5280 	ands.w	r2, r2, #268435456	@ 0x10000000
 80051ce:	d128      	bne.n	8005222 <HAL_RCC_OscConfig+0x1fa>
      __HAL_RCC_PWR_CLK_ENABLE();
 80051d0:	9201      	str	r2, [sp, #4]
 80051d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80051d4:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80051d8:	641a      	str	r2, [r3, #64]	@ 0x40
 80051da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051e0:	9301      	str	r3, [sp, #4]
 80051e2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80051e4:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051e6:	4d2c      	ldr	r5, [pc, #176]	@ (8005298 <HAL_RCC_OscConfig+0x270>)
 80051e8:	682b      	ldr	r3, [r5, #0]
 80051ea:	05d8      	lsls	r0, r3, #23
 80051ec:	d51b      	bpl.n	8005226 <HAL_RCC_OscConfig+0x1fe>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051ee:	68a3      	ldr	r3, [r4, #8]
 80051f0:	4d27      	ldr	r5, [pc, #156]	@ (8005290 <HAL_RCC_OscConfig+0x268>)
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d127      	bne.n	8005246 <HAL_RCC_OscConfig+0x21e>
 80051f6:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 80051f8:	f043 0301 	orr.w	r3, r3, #1
 80051fc:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 80051fe:	f7fe fea3 	bl	8003f48 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005202:	4e23      	ldr	r6, [pc, #140]	@ (8005290 <HAL_RCC_OscConfig+0x268>)
      tickstart = HAL_GetTick();
 8005204:	4605      	mov	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005206:	f241 3888 	movw	r8, #5000	@ 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800520a:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 800520c:	079a      	lsls	r2, r3, #30
 800520e:	d539      	bpl.n	8005284 <HAL_RCC_OscConfig+0x25c>
    if(pwrclkchanged == SET)
 8005210:	2f00      	cmp	r7, #0
 8005212:	f43f af1b 	beq.w	800504c <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8005216:	4a1e      	ldr	r2, [pc, #120]	@ (8005290 <HAL_RCC_OscConfig+0x268>)
 8005218:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800521a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800521e:	6413      	str	r3, [r2, #64]	@ 0x40
 8005220:	e714      	b.n	800504c <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8005222:	2700      	movs	r7, #0
 8005224:	e7df      	b.n	80051e6 <HAL_RCC_OscConfig+0x1be>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005226:	682b      	ldr	r3, [r5, #0]
 8005228:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800522c:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800522e:	f7fe fe8b 	bl	8003f48 <HAL_GetTick>
 8005232:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005234:	682b      	ldr	r3, [r5, #0]
 8005236:	05d9      	lsls	r1, r3, #23
 8005238:	d4d9      	bmi.n	80051ee <HAL_RCC_OscConfig+0x1c6>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800523a:	f7fe fe85 	bl	8003f48 <HAL_GetTick>
 800523e:	1b80      	subs	r0, r0, r6
 8005240:	2802      	cmp	r0, #2
 8005242:	d9f7      	bls.n	8005234 <HAL_RCC_OscConfig+0x20c>
 8005244:	e734      	b.n	80050b0 <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005246:	2b05      	cmp	r3, #5
 8005248:	d104      	bne.n	8005254 <HAL_RCC_OscConfig+0x22c>
 800524a:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800524c:	f043 0304 	orr.w	r3, r3, #4
 8005250:	672b      	str	r3, [r5, #112]	@ 0x70
 8005252:	e7d0      	b.n	80051f6 <HAL_RCC_OscConfig+0x1ce>
 8005254:	6f2a      	ldr	r2, [r5, #112]	@ 0x70
 8005256:	f022 0201 	bic.w	r2, r2, #1
 800525a:	672a      	str	r2, [r5, #112]	@ 0x70
 800525c:	6f2a      	ldr	r2, [r5, #112]	@ 0x70
 800525e:	f022 0204 	bic.w	r2, r2, #4
 8005262:	672a      	str	r2, [r5, #112]	@ 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005264:	2b00      	cmp	r3, #0
 8005266:	d1ca      	bne.n	80051fe <HAL_RCC_OscConfig+0x1d6>
      tickstart = HAL_GetTick();
 8005268:	f7fe fe6e 	bl	8003f48 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800526c:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8005270:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005272:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8005274:	079b      	lsls	r3, r3, #30
 8005276:	d5cb      	bpl.n	8005210 <HAL_RCC_OscConfig+0x1e8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005278:	f7fe fe66 	bl	8003f48 <HAL_GetTick>
 800527c:	1b80      	subs	r0, r0, r6
 800527e:	4540      	cmp	r0, r8
 8005280:	d9f7      	bls.n	8005272 <HAL_RCC_OscConfig+0x24a>
 8005282:	e715      	b.n	80050b0 <HAL_RCC_OscConfig+0x88>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005284:	f7fe fe60 	bl	8003f48 <HAL_GetTick>
 8005288:	1b40      	subs	r0, r0, r5
 800528a:	4540      	cmp	r0, r8
 800528c:	d9bd      	bls.n	800520a <HAL_RCC_OscConfig+0x1e2>
 800528e:	e70f      	b.n	80050b0 <HAL_RCC_OscConfig+0x88>
 8005290:	40023800 	.word	0x40023800
 8005294:	42470000 	.word	0x42470000
 8005298:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800529c:	4d37      	ldr	r5, [pc, #220]	@ (800537c <HAL_RCC_OscConfig+0x354>)
 800529e:	68aa      	ldr	r2, [r5, #8]
 80052a0:	f002 020c 	and.w	r2, r2, #12
 80052a4:	2a08      	cmp	r2, #8
 80052a6:	d03e      	beq.n	8005326 <HAL_RCC_OscConfig+0x2fe>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052a8:	2b02      	cmp	r3, #2
 80052aa:	4b35      	ldr	r3, [pc, #212]	@ (8005380 <HAL_RCC_OscConfig+0x358>)
 80052ac:	f04f 0200 	mov.w	r2, #0
        __HAL_RCC_PLL_DISABLE();
 80052b0:	661a      	str	r2, [r3, #96]	@ 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052b2:	d12b      	bne.n	800530c <HAL_RCC_OscConfig+0x2e4>
        tickstart = HAL_GetTick();
 80052b4:	f7fe fe48 	bl	8003f48 <HAL_GetTick>
 80052b8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052ba:	682b      	ldr	r3, [r5, #0]
 80052bc:	0199      	lsls	r1, r3, #6
 80052be:	d41f      	bmi.n	8005300 <HAL_RCC_OscConfig+0x2d8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80052c0:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 80052c4:	4313      	orrs	r3, r2
 80052c6:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80052c8:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80052cc:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80052ce:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80052d2:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80052d4:	0852      	lsrs	r2, r2, #1
 80052d6:	3a01      	subs	r2, #1
 80052d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80052dc:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80052de:	4b28      	ldr	r3, [pc, #160]	@ (8005380 <HAL_RCC_OscConfig+0x358>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052e0:	4d26      	ldr	r5, [pc, #152]	@ (800537c <HAL_RCC_OscConfig+0x354>)
        __HAL_RCC_PLL_ENABLE();
 80052e2:	2201      	movs	r2, #1
 80052e4:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80052e6:	f7fe fe2f 	bl	8003f48 <HAL_GetTick>
 80052ea:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052ec:	682b      	ldr	r3, [r5, #0]
 80052ee:	019a      	lsls	r2, r3, #6
 80052f0:	f53f aeb0 	bmi.w	8005054 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052f4:	f7fe fe28 	bl	8003f48 <HAL_GetTick>
 80052f8:	1b00      	subs	r0, r0, r4
 80052fa:	2802      	cmp	r0, #2
 80052fc:	d9f6      	bls.n	80052ec <HAL_RCC_OscConfig+0x2c4>
 80052fe:	e6d7      	b.n	80050b0 <HAL_RCC_OscConfig+0x88>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005300:	f7fe fe22 	bl	8003f48 <HAL_GetTick>
 8005304:	1b80      	subs	r0, r0, r6
 8005306:	2802      	cmp	r0, #2
 8005308:	d9d7      	bls.n	80052ba <HAL_RCC_OscConfig+0x292>
 800530a:	e6d1      	b.n	80050b0 <HAL_RCC_OscConfig+0x88>
        tickstart = HAL_GetTick();
 800530c:	f7fe fe1c 	bl	8003f48 <HAL_GetTick>
 8005310:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005312:	682b      	ldr	r3, [r5, #0]
 8005314:	019b      	lsls	r3, r3, #6
 8005316:	f57f ae9d 	bpl.w	8005054 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800531a:	f7fe fe15 	bl	8003f48 <HAL_GetTick>
 800531e:	1b00      	subs	r0, r0, r4
 8005320:	2802      	cmp	r0, #2
 8005322:	d9f6      	bls.n	8005312 <HAL_RCC_OscConfig+0x2ea>
 8005324:	e6c4      	b.n	80050b0 <HAL_RCC_OscConfig+0x88>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005326:	2b01      	cmp	r3, #1
 8005328:	f43f aeab 	beq.w	8005082 <HAL_RCC_OscConfig+0x5a>
        pll_config = RCC->PLLCFGR;
 800532c:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800532e:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005330:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005334:	4291      	cmp	r1, r2
 8005336:	f47f aea4 	bne.w	8005082 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800533a:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800533c:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005340:	428a      	cmp	r2, r1
 8005342:	f47f ae9e 	bne.w	8005082 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005346:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005348:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 800534c:	401a      	ands	r2, r3
 800534e:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8005352:	f47f ae96 	bne.w	8005082 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005356:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8005358:	0852      	lsrs	r2, r2, #1
 800535a:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 800535e:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005360:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8005364:	f47f ae8d 	bne.w	8005082 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005368:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800536a:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800536e:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8005372:	bf14      	ite	ne
 8005374:	2001      	movne	r0, #1
 8005376:	2000      	moveq	r0, #0
 8005378:	e69b      	b.n	80050b2 <HAL_RCC_OscConfig+0x8a>
 800537a:	bf00      	nop
 800537c:	40023800 	.word	0x40023800
 8005380:	42470000 	.word	0x42470000

08005384 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005384:	4913      	ldr	r1, [pc, #76]	@ (80053d4 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8005386:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005388:	688b      	ldr	r3, [r1, #8]
 800538a:	f003 030c 	and.w	r3, r3, #12
 800538e:	2b04      	cmp	r3, #4
 8005390:	d01c      	beq.n	80053cc <HAL_RCC_GetSysClockFreq+0x48>
 8005392:	2b08      	cmp	r3, #8
 8005394:	d11c      	bne.n	80053d0 <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005396:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005398:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800539a:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800539c:	f413 0380 	ands.w	r3, r3, #4194304	@ 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053a0:	bf14      	ite	ne
 80053a2:	480d      	ldrne	r0, [pc, #52]	@ (80053d8 <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053a4:	480d      	ldreq	r0, [pc, #52]	@ (80053dc <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053a6:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80053aa:	bf18      	it	ne
 80053ac:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80053ae:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053b2:	fba1 0100 	umull	r0, r1, r1, r0
 80053b6:	f7fa ff6b 	bl	8000290 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80053ba:	4b06      	ldr	r3, [pc, #24]	@ (80053d4 <HAL_RCC_GetSysClockFreq+0x50>)
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80053c2:	3301      	adds	r3, #1
 80053c4:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80053c6:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80053ca:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80053cc:	4802      	ldr	r0, [pc, #8]	@ (80053d8 <HAL_RCC_GetSysClockFreq+0x54>)
 80053ce:	e7fc      	b.n	80053ca <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
 80053d0:	4802      	ldr	r0, [pc, #8]	@ (80053dc <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 80053d2:	e7fa      	b.n	80053ca <HAL_RCC_GetSysClockFreq+0x46>
 80053d4:	40023800 	.word	0x40023800
 80053d8:	007a1200 	.word	0x007a1200
 80053dc:	00f42400 	.word	0x00f42400

080053e0 <HAL_RCC_ClockConfig>:
{
 80053e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053e4:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80053e6:	4604      	mov	r4, r0
 80053e8:	b910      	cbnz	r0, 80053f0 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80053ea:	2001      	movs	r0, #1
}
 80053ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80053f0:	4b43      	ldr	r3, [pc, #268]	@ (8005500 <HAL_RCC_ClockConfig+0x120>)
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	f002 020f 	and.w	r2, r2, #15
 80053f8:	428a      	cmp	r2, r1
 80053fa:	d328      	bcc.n	800544e <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053fc:	6821      	ldr	r1, [r4, #0]
 80053fe:	078f      	lsls	r7, r1, #30
 8005400:	d42d      	bmi.n	800545e <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005402:	07c8      	lsls	r0, r1, #31
 8005404:	d440      	bmi.n	8005488 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005406:	4b3e      	ldr	r3, [pc, #248]	@ (8005500 <HAL_RCC_ClockConfig+0x120>)
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	f002 020f 	and.w	r2, r2, #15
 800540e:	42aa      	cmp	r2, r5
 8005410:	d865      	bhi.n	80054de <HAL_RCC_ClockConfig+0xfe>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005412:	6822      	ldr	r2, [r4, #0]
 8005414:	0751      	lsls	r1, r2, #29
 8005416:	d46b      	bmi.n	80054f0 <HAL_RCC_ClockConfig+0x110>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005418:	0713      	lsls	r3, r2, #28
 800541a:	d507      	bpl.n	800542c <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800541c:	4a39      	ldr	r2, [pc, #228]	@ (8005504 <HAL_RCC_ClockConfig+0x124>)
 800541e:	6921      	ldr	r1, [r4, #16]
 8005420:	6893      	ldr	r3, [r2, #8]
 8005422:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8005426:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800542a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800542c:	f7ff ffaa 	bl	8005384 <HAL_RCC_GetSysClockFreq>
 8005430:	4b34      	ldr	r3, [pc, #208]	@ (8005504 <HAL_RCC_ClockConfig+0x124>)
 8005432:	4a35      	ldr	r2, [pc, #212]	@ (8005508 <HAL_RCC_ClockConfig+0x128>)
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800543a:	5cd3      	ldrb	r3, [r2, r3]
 800543c:	40d8      	lsrs	r0, r3
 800543e:	4b33      	ldr	r3, [pc, #204]	@ (800550c <HAL_RCC_ClockConfig+0x12c>)
 8005440:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8005442:	4b33      	ldr	r3, [pc, #204]	@ (8005510 <HAL_RCC_ClockConfig+0x130>)
 8005444:	6818      	ldr	r0, [r3, #0]
 8005446:	f7fc fcc1 	bl	8001dcc <HAL_InitTick>
  return HAL_OK;
 800544a:	2000      	movs	r0, #0
 800544c:	e7ce      	b.n	80053ec <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800544e:	b2ca      	uxtb	r2, r1
 8005450:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f003 030f 	and.w	r3, r3, #15
 8005458:	428b      	cmp	r3, r1
 800545a:	d1c6      	bne.n	80053ea <HAL_RCC_ClockConfig+0xa>
 800545c:	e7ce      	b.n	80053fc <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800545e:	4b29      	ldr	r3, [pc, #164]	@ (8005504 <HAL_RCC_ClockConfig+0x124>)
 8005460:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005464:	bf1e      	ittt	ne
 8005466:	689a      	ldrne	r2, [r3, #8]
 8005468:	f442 52e0 	orrne.w	r2, r2, #7168	@ 0x1c00
 800546c:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800546e:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005470:	bf42      	ittt	mi
 8005472:	689a      	ldrmi	r2, [r3, #8]
 8005474:	f442 4260 	orrmi.w	r2, r2, #57344	@ 0xe000
 8005478:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800547a:	689a      	ldr	r2, [r3, #8]
 800547c:	68a0      	ldr	r0, [r4, #8]
 800547e:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8005482:	4302      	orrs	r2, r0
 8005484:	609a      	str	r2, [r3, #8]
 8005486:	e7bc      	b.n	8005402 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005488:	6862      	ldr	r2, [r4, #4]
 800548a:	4b1e      	ldr	r3, [pc, #120]	@ (8005504 <HAL_RCC_ClockConfig+0x124>)
 800548c:	2a01      	cmp	r2, #1
 800548e:	d11c      	bne.n	80054ca <HAL_RCC_ClockConfig+0xea>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005496:	d0a8      	beq.n	80053ea <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005498:	4e1a      	ldr	r6, [pc, #104]	@ (8005504 <HAL_RCC_ClockConfig+0x124>)
 800549a:	68b3      	ldr	r3, [r6, #8]
 800549c:	f023 0303 	bic.w	r3, r3, #3
 80054a0:	4313      	orrs	r3, r2
 80054a2:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80054a4:	f7fe fd50 	bl	8003f48 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054a8:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 80054ac:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054ae:	68b3      	ldr	r3, [r6, #8]
 80054b0:	6862      	ldr	r2, [r4, #4]
 80054b2:	f003 030c 	and.w	r3, r3, #12
 80054b6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80054ba:	d0a4      	beq.n	8005406 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054bc:	f7fe fd44 	bl	8003f48 <HAL_GetTick>
 80054c0:	1bc0      	subs	r0, r0, r7
 80054c2:	4540      	cmp	r0, r8
 80054c4:	d9f3      	bls.n	80054ae <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 80054c6:	2003      	movs	r0, #3
 80054c8:	e790      	b.n	80053ec <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80054ca:	1e91      	subs	r1, r2, #2
 80054cc:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054ce:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80054d0:	d802      	bhi.n	80054d8 <HAL_RCC_ClockConfig+0xf8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054d2:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80054d6:	e7de      	b.n	8005496 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054d8:	f013 0f02 	tst.w	r3, #2
 80054dc:	e7db      	b.n	8005496 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054de:	b2ea      	uxtb	r2, r5
 80054e0:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f003 030f 	and.w	r3, r3, #15
 80054e8:	42ab      	cmp	r3, r5
 80054ea:	f47f af7e 	bne.w	80053ea <HAL_RCC_ClockConfig+0xa>
 80054ee:	e790      	b.n	8005412 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054f0:	4904      	ldr	r1, [pc, #16]	@ (8005504 <HAL_RCC_ClockConfig+0x124>)
 80054f2:	68e0      	ldr	r0, [r4, #12]
 80054f4:	688b      	ldr	r3, [r1, #8]
 80054f6:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 80054fa:	4303      	orrs	r3, r0
 80054fc:	608b      	str	r3, [r1, #8]
 80054fe:	e78b      	b.n	8005418 <HAL_RCC_ClockConfig+0x38>
 8005500:	40023c00 	.word	0x40023c00
 8005504:	40023800 	.word	0x40023800
 8005508:	080144dc 	.word	0x080144dc
 800550c:	20000074 	.word	0x20000074
 8005510:	2000007c 	.word	0x2000007c

08005514 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005514:	4b04      	ldr	r3, [pc, #16]	@ (8005528 <HAL_RCC_GetPCLK1Freq+0x14>)
 8005516:	4a05      	ldr	r2, [pc, #20]	@ (800552c <HAL_RCC_GetPCLK1Freq+0x18>)
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800551e:	5cd3      	ldrb	r3, [r2, r3]
 8005520:	4a03      	ldr	r2, [pc, #12]	@ (8005530 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8005522:	6810      	ldr	r0, [r2, #0]
}
 8005524:	40d8      	lsrs	r0, r3
 8005526:	4770      	bx	lr
 8005528:	40023800 	.word	0x40023800
 800552c:	080144d4 	.word	0x080144d4
 8005530:	20000074 	.word	0x20000074

08005534 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005534:	230f      	movs	r3, #15
 8005536:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005538:	4b0b      	ldr	r3, [pc, #44]	@ (8005568 <HAL_RCC_GetClockConfig+0x34>)
 800553a:	689a      	ldr	r2, [r3, #8]
 800553c:	f002 0203 	and.w	r2, r2, #3
 8005540:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005542:	689a      	ldr	r2, [r3, #8]
 8005544:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 8005548:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800554a:	689a      	ldr	r2, [r3, #8]
 800554c:	f402 52e0 	and.w	r2, r2, #7168	@ 0x1c00
 8005550:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	08db      	lsrs	r3, r3, #3
 8005556:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 800555a:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800555c:	4b03      	ldr	r3, [pc, #12]	@ (800556c <HAL_RCC_GetClockConfig+0x38>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f003 030f 	and.w	r3, r3, #15
 8005564:	600b      	str	r3, [r1, #0]
}
 8005566:	4770      	bx	lr
 8005568:	40023800 	.word	0x40023800
 800556c:	40023c00 	.word	0x40023c00

08005570 <HAL_RCCEx_PeriphCLKConfig>:
  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005570:	6803      	ldr	r3, [r0, #0]
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005572:	f013 0f43 	tst.w	r3, #67	@ 0x43
{
 8005576:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005578:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800557a:	f040 8088 	bne.w	800568e <HAL_RCCEx_PeriphCLKConfig+0x11e>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800557e:	6823      	ldr	r3, [r4, #0]
 8005580:	f013 0f0c 	tst.w	r3, #12
 8005584:	d045      	beq.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0xa2>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005586:	4b8c      	ldr	r3, [pc, #560]	@ (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
    /* Get tick */
    tickstart = HAL_GetTick();
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005588:	4d8c      	ldr	r5, [pc, #560]	@ (80057bc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
    __HAL_RCC_PLLSAI_DISABLE();
 800558a:	2200      	movs	r2, #0
 800558c:	671a      	str	r2, [r3, #112]	@ 0x70
    tickstart = HAL_GetTick();
 800558e:	f7fe fcdb 	bl	8003f48 <HAL_GetTick>
 8005592:	4606      	mov	r6, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005594:	682b      	ldr	r3, [r5, #0]
 8005596:	0099      	lsls	r1, r3, #2
 8005598:	f100 80cb 	bmi.w	8005732 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800559c:	6821      	ldr	r1, [r4, #0]
 800559e:	074a      	lsls	r2, r1, #29
 80055a0:	d515      	bpl.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x5e>
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80055a2:	e9d4 0304 	ldrd	r0, r3, [r4, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80055a6:	f8d5 2088 	ldr.w	r2, [r5, #136]	@ 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80055aa:	061b      	lsls	r3, r3, #24
 80055ac:	f002 42e0 	and.w	r2, r2, #1879048192	@ 0x70000000
 80055b0:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80055b4:	4313      	orrs	r3, r2
 80055b6:	f8c5 3088 	str.w	r3, [r5, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80055ba:	f8d5 308c 	ldr.w	r3, [r5, #140]	@ 0x8c
 80055be:	6a22      	ldr	r2, [r4, #32]
 80055c0:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 80055c4:	3a01      	subs	r2, #1
 80055c6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80055ca:	f8c5 308c 	str.w	r3, [r5, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80055ce:	070b      	lsls	r3, r1, #28
 80055d0:	d514      	bpl.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80055d2:	4a7a      	ldr	r2, [pc, #488]	@ (80057bc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80055d4:	69a3      	ldr	r3, [r4, #24]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80055d6:	f8d2 1088 	ldr.w	r1, [r2, #136]	@ 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80055da:	6920      	ldr	r0, [r4, #16]
 80055dc:	071b      	lsls	r3, r3, #28
 80055de:	f001 6170 	and.w	r1, r1, #251658240	@ 0xf000000
 80055e2:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80055e6:	430b      	orrs	r3, r1
 80055e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80055ec:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 80055f0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80055f2:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80055f6:	430b      	orrs	r3, r1
 80055f8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80055fc:	4b6e      	ldr	r3, [pc, #440]	@ (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
    /* Get tick */
    tickstart = HAL_GetTick();
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80055fe:	4e6f      	ldr	r6, [pc, #444]	@ (80057bc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
    __HAL_RCC_PLLSAI_ENABLE();
 8005600:	2201      	movs	r2, #1
 8005602:	671a      	str	r2, [r3, #112]	@ 0x70
    tickstart = HAL_GetTick();
 8005604:	f7fe fca0 	bl	8003f48 <HAL_GetTick>
 8005608:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800560a:	6833      	ldr	r3, [r6, #0]
 800560c:	009f      	lsls	r7, r3, #2
 800560e:	f140 8097 	bpl.w	8005740 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005612:	6823      	ldr	r3, [r4, #0]
 8005614:	0698      	lsls	r0, r3, #26
 8005616:	d534      	bpl.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x112>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005618:	2300      	movs	r3, #0
 800561a:	9301      	str	r3, [sp, #4]
 800561c:	4b67      	ldr	r3, [pc, #412]	@ (80057bc <HAL_RCCEx_PeriphCLKConfig+0x24c>)

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800561e:	4d68      	ldr	r5, [pc, #416]	@ (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8005620:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005622:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8005626:	641a      	str	r2, [r3, #64]	@ 0x40
 8005628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800562a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800562e:	9301      	str	r3, [sp, #4]
 8005630:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8005632:	682b      	ldr	r3, [r5, #0]
 8005634:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005638:	602b      	str	r3, [r5, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800563a:	f7fe fc85 	bl	8003f48 <HAL_GetTick>
 800563e:	4606      	mov	r6, r0

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005640:	682b      	ldr	r3, [r5, #0]
 8005642:	05d8      	lsls	r0, r3, #23
 8005644:	f140 8083 	bpl.w	800574e <HAL_RCCEx_PeriphCLKConfig+0x1de>
      {
        return HAL_TIMEOUT;
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005648:	4d5c      	ldr	r5, [pc, #368]	@ (80057bc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800564a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800564c:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800564e:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8005652:	f040 8083 	bne.w	800575c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005656:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8005658:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 800565c:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 8005660:	4a56      	ldr	r2, [pc, #344]	@ (80057bc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005662:	f040 809e 	bne.w	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x232>
 8005666:	6891      	ldr	r1, [r2, #8]
 8005668:	f023 4070 	bic.w	r0, r3, #4026531840	@ 0xf0000000
 800566c:	f421 11f8 	bic.w	r1, r1, #2031616	@ 0x1f0000
 8005670:	f420 7040 	bic.w	r0, r0, #768	@ 0x300
 8005674:	4301      	orrs	r1, r0
 8005676:	6091      	str	r1, [r2, #8]
 8005678:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 800567a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800567e:	430b      	orrs	r3, r1
 8005680:	6713      	str	r3, [r2, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005682:	6823      	ldr	r3, [r4, #0]
 8005684:	06db      	lsls	r3, r3, #27
 8005686:	f100 8090 	bmi.w	80057aa <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
  return HAL_OK;
 800568a:	2000      	movs	r0, #0
 800568c:	e04f      	b.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    __HAL_RCC_PLLI2S_DISABLE();
 800568e:	4b4a      	ldr	r3, [pc, #296]	@ (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005690:	4e4a      	ldr	r6, [pc, #296]	@ (80057bc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
    __HAL_RCC_PLLI2S_DISABLE();
 8005692:	2200      	movs	r2, #0
 8005694:	669a      	str	r2, [r3, #104]	@ 0x68
    tickstart = HAL_GetTick();
 8005696:	f7fe fc57 	bl	8003f48 <HAL_GetTick>
 800569a:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800569c:	6833      	ldr	r3, [r6, #0]
 800569e:	011f      	lsls	r7, r3, #4
 80056a0:	d43f      	bmi.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80056a2:	6821      	ldr	r1, [r4, #0]
 80056a4:	07c8      	lsls	r0, r1, #31
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80056a6:	bf41      	itttt	mi
 80056a8:	e9d4 2301 	ldrdmi	r2, r3, [r4, #4]
 80056ac:	071b      	lslmi	r3, r3, #28
 80056ae:	ea43 1382 	orrmi.w	r3, r3, r2, lsl #6
 80056b2:	f8c6 3084 	strmi.w	r3, [r6, #132]	@ 0x84
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80056b6:	078a      	lsls	r2, r1, #30
 80056b8:	d515      	bpl.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x176>
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80056ba:	4a40      	ldr	r2, [pc, #256]	@ (80057bc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80056bc:	68e3      	ldr	r3, [r4, #12]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80056be:	f8d2 0084 	ldr.w	r0, [r2, #132]	@ 0x84
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80056c2:	6865      	ldr	r5, [r4, #4]
 80056c4:	061b      	lsls	r3, r3, #24
 80056c6:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
 80056ca:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 80056ce:	4303      	orrs	r3, r0
 80056d0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80056d4:	f8d2 008c 	ldr.w	r0, [r2, #140]	@ 0x8c
 80056d8:	69e3      	ldr	r3, [r4, #28]
 80056da:	f020 001f 	bic.w	r0, r0, #31
 80056de:	3b01      	subs	r3, #1
 80056e0:	4303      	orrs	r3, r0
 80056e2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80056e6:	064b      	lsls	r3, r1, #25
 80056e8:	d50a      	bpl.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x190>
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80056ea:	68e3      	ldr	r3, [r4, #12]
 80056ec:	6862      	ldr	r2, [r4, #4]
 80056ee:	061b      	lsls	r3, r3, #24
 80056f0:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80056f4:	68a2      	ldr	r2, [r4, #8]
 80056f6:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80056fa:	4a30      	ldr	r2, [pc, #192]	@ (80057bc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80056fc:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8005700:	4b2d      	ldr	r3, [pc, #180]	@ (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005702:	4e2e      	ldr	r6, [pc, #184]	@ (80057bc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
    __HAL_RCC_PLLI2S_ENABLE();
 8005704:	2201      	movs	r2, #1
 8005706:	669a      	str	r2, [r3, #104]	@ 0x68
    tickstart = HAL_GetTick();
 8005708:	f7fe fc1e 	bl	8003f48 <HAL_GetTick>
 800570c:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800570e:	6833      	ldr	r3, [r6, #0]
 8005710:	011f      	lsls	r7, r3, #4
 8005712:	f53f af34 	bmi.w	800557e <HAL_RCCEx_PeriphCLKConfig+0xe>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005716:	f7fe fc17 	bl	8003f48 <HAL_GetTick>
 800571a:	1b40      	subs	r0, r0, r5
 800571c:	2802      	cmp	r0, #2
 800571e:	d9f6      	bls.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x19e>
 8005720:	e004      	b.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005722:	f7fe fc11 	bl	8003f48 <HAL_GetTick>
 8005726:	1b40      	subs	r0, r0, r5
 8005728:	2802      	cmp	r0, #2
 800572a:	d9b7      	bls.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        return HAL_TIMEOUT;
 800572c:	2003      	movs	r0, #3
}
 800572e:	b003      	add	sp, #12
 8005730:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005732:	f7fe fc09 	bl	8003f48 <HAL_GetTick>
 8005736:	1b80      	subs	r0, r0, r6
 8005738:	2802      	cmp	r0, #2
 800573a:	f67f af2b 	bls.w	8005594 <HAL_RCCEx_PeriphCLKConfig+0x24>
 800573e:	e7f5      	b.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005740:	f7fe fc02 	bl	8003f48 <HAL_GetTick>
 8005744:	1b40      	subs	r0, r0, r5
 8005746:	2802      	cmp	r0, #2
 8005748:	f67f af5f 	bls.w	800560a <HAL_RCCEx_PeriphCLKConfig+0x9a>
 800574c:	e7ee      	b.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800574e:	f7fe fbfb 	bl	8003f48 <HAL_GetTick>
 8005752:	1b80      	subs	r0, r0, r6
 8005754:	2802      	cmp	r0, #2
 8005756:	f67f af73 	bls.w	8005640 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 800575a:	e7e7      	b.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800575c:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 8005760:	4293      	cmp	r3, r2
 8005762:	f43f af78 	beq.w	8005656 <HAL_RCCEx_PeriphCLKConfig+0xe6>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005766:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8005768:	4a13      	ldr	r2, [pc, #76]	@ (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800576a:	2101      	movs	r1, #1
 800576c:	f8c2 1e40 	str.w	r1, [r2, #3648]	@ 0xe40
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005770:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005774:	2100      	movs	r1, #0
 8005776:	f8c2 1e40 	str.w	r1, [r2, #3648]	@ 0xe40
      RCC->BDCR = tmpreg1;
 800577a:	672b      	str	r3, [r5, #112]	@ 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800577c:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800577e:	07d9      	lsls	r1, r3, #31
 8005780:	f57f af69 	bpl.w	8005656 <HAL_RCCEx_PeriphCLKConfig+0xe6>
        tickstart = HAL_GetTick();
 8005784:	f7fe fbe0 	bl	8003f48 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005788:	f241 3788 	movw	r7, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 800578c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800578e:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8005790:	079a      	lsls	r2, r3, #30
 8005792:	f53f af60 	bmi.w	8005656 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005796:	f7fe fbd7 	bl	8003f48 <HAL_GetTick>
 800579a:	1b80      	subs	r0, r0, r6
 800579c:	42b8      	cmp	r0, r7
 800579e:	d9f6      	bls.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80057a0:	e7c4      	b.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80057a2:	6891      	ldr	r1, [r2, #8]
 80057a4:	f421 11f8 	bic.w	r1, r1, #2031616	@ 0x1f0000
 80057a8:	e765      	b.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x106>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80057aa:	4b06      	ldr	r3, [pc, #24]	@ (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80057ac:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 80057b0:	f8c3 21e0 	str.w	r2, [r3, #480]	@ 0x1e0
 80057b4:	e769      	b.n	800568a <HAL_RCCEx_PeriphCLKConfig+0x11a>
 80057b6:	bf00      	nop
 80057b8:	42470000 	.word	0x42470000
 80057bc:	40023800 	.word	0x40023800
 80057c0:	40007000 	.word	0x40007000
 80057c4:	42471000 	.word	0x42471000

080057c8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80057c8:	b538      	push	{r3, r4, r5, lr}
 80057ca:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80057cc:	4604      	mov	r4, r0
 80057ce:	b1c8      	cbz	r0, 8005804 <HAL_SDRAM_Init+0x3c>
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80057d0:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 80057d4:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80057d8:	b91b      	cbnz	r3, 80057e2 <HAL_SDRAM_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80057da:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80057de:	f7fc fa89 	bl	8001cf4 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80057e2:	2302      	movs	r3, #2
 80057e4:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80057e8:	1d21      	adds	r1, r4, #4
 80057ea:	6820      	ldr	r0, [r4, #0]
 80057ec:	f000 fce6 	bl	80061bc <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80057f0:	6862      	ldr	r2, [r4, #4]
 80057f2:	6820      	ldr	r0, [r4, #0]
 80057f4:	4629      	mov	r1, r5
 80057f6:	f000 fd17 	bl	8006228 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80057fa:	2301      	movs	r3, #1
 80057fc:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c

  return HAL_OK;
 8005800:	2000      	movs	r0, #0
}
 8005802:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8005804:	2001      	movs	r0, #1
 8005806:	e7fc      	b.n	8005802 <HAL_SDRAM_Init+0x3a>

08005808 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8005808:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800580a:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800580e:	2b02      	cmp	r3, #2
{
 8005810:	4605      	mov	r5, r0
 8005812:	460e      	mov	r6, r1
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8005814:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 8005816:	d012      	beq.n	800583e <HAL_SDRAM_SendCommand+0x36>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8005818:	f000 04fb 	and.w	r4, r0, #251	@ 0xfb
 800581c:	2c01      	cmp	r4, #1
 800581e:	d10f      	bne.n	8005840 <HAL_SDRAM_SendCommand+0x38>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005820:	2302      	movs	r3, #2
 8005822:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8005826:	6828      	ldr	r0, [r5, #0]
 8005828:	f000 fd34 	bl	8006294 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800582c:	6833      	ldr	r3, [r6, #0]
 800582e:	2b02      	cmp	r3, #2
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8005830:	bf06      	itte	eq
 8005832:	2305      	moveq	r3, #5
 8005834:	f885 302c 	strbeq.w	r3, [r5, #44]	@ 0x2c
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8005838:	f885 402c 	strbne.w	r4, [r5, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800583c:	2000      	movs	r0, #0
}
 800583e:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8005840:	2001      	movs	r0, #1
 8005842:	e7fc      	b.n	800583e <HAL_SDRAM_SendCommand+0x36>

08005844 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8005844:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005846:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 800584a:	2b02      	cmp	r3, #2
{
 800584c:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800584e:	b2d8      	uxtb	r0, r3
 8005850:	d00d      	beq.n	800586e <HAL_SDRAM_ProgramRefreshRate+0x2a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8005852:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8005856:	2b01      	cmp	r3, #1
 8005858:	b2dd      	uxtb	r5, r3
 800585a:	d109      	bne.n	8005870 <HAL_SDRAM_ProgramRefreshRate+0x2c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800585c:	2302      	movs	r3, #2

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800585e:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005860:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8005864:	f000 fd3a 	bl	80062dc <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8005868:	f884 502c 	strb.w	r5, [r4, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800586c:	2000      	movs	r0, #0
}
 800586e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8005870:	2001      	movs	r0, #1
 8005872:	e7fc      	b.n	800586e <HAL_SDRAM_ProgramRefreshRate+0x2a>

08005874 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8005874:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005878:	461c      	mov	r4, r3
 800587a:	4616      	mov	r6, r2
 800587c:	460f      	mov	r7, r1
 800587e:	4605      	mov	r5, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005880:	f7fe fb62 	bl	8003f48 <HAL_GetTick>
 8005884:	4434      	add	r4, r6
 8005886:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 8005888:	f7fe fb5e 	bl	8003f48 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800588c:	4b24      	ldr	r3, [pc, #144]	@ (8005920 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xac>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8005894:	4363      	muls	r3, r4
  tmp_tickstart = HAL_GetTick();
 8005896:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005898:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800589a:	682a      	ldr	r2, [r5, #0]
 800589c:	6893      	ldr	r3, [r2, #8]
 800589e:	ea37 0303 	bics.w	r3, r7, r3
 80058a2:	d001      	beq.n	80058a8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x34>
      }
      count--;
    }
  }

  return HAL_OK;
 80058a4:	2000      	movs	r0, #0
 80058a6:	e02e      	b.n	8005906 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x92>
    if (Timeout != HAL_MAX_DELAY)
 80058a8:	1c73      	adds	r3, r6, #1
 80058aa:	d0f7      	beq.n	800589c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x28>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80058ac:	f7fe fb4c 	bl	8003f48 <HAL_GetTick>
 80058b0:	eba0 0008 	sub.w	r0, r0, r8
 80058b4:	42a0      	cmp	r0, r4
 80058b6:	d329      	bcc.n	800590c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x98>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80058b8:	682b      	ldr	r3, [r5, #0]
 80058ba:	685a      	ldr	r2, [r3, #4]
 80058bc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80058c0:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058c2:	686a      	ldr	r2, [r5, #4]
 80058c4:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 80058c8:	d10a      	bne.n	80058e0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6c>
 80058ca:	68aa      	ldr	r2, [r5, #8]
 80058cc:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 80058d0:	d002      	beq.n	80058d8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x64>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80058d2:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 80058d6:	d103      	bne.n	80058e0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6c>
          __HAL_SPI_DISABLE(hspi);
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80058de:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80058e0:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 80058e2:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 80058e6:	d107      	bne.n	80058f8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x84>
          SPI_RESET_CRC(hspi);
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80058ee:	601a      	str	r2, [r3, #0]
 80058f0:	681a      	ldr	r2, [r3, #0]
 80058f2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80058f6:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80058f8:	2301      	movs	r3, #1
 80058fa:	f885 3051 	strb.w	r3, [r5, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80058fe:	2300      	movs	r3, #0
 8005900:	f885 3050 	strb.w	r3, [r5, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005904:	2003      	movs	r0, #3
}
 8005906:	b002      	add	sp, #8
 8005908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (count == 0U)
 800590c:	9a01      	ldr	r2, [sp, #4]
      count--;
 800590e:	9b01      	ldr	r3, [sp, #4]
      if (count == 0U)
 8005910:	2a00      	cmp	r2, #0
      count--;
 8005912:	f103 33ff 	add.w	r3, r3, #4294967295
 8005916:	9301      	str	r3, [sp, #4]
 8005918:	bf08      	it	eq
 800591a:	4614      	moveq	r4, r2
 800591c:	e7bd      	b.n	800589a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x26>
 800591e:	bf00      	nop
 8005920:	20000074 	.word	0x20000074

08005924 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005924:	b538      	push	{r3, r4, r5, lr}
 8005926:	4613      	mov	r3, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005928:	6842      	ldr	r2, [r0, #4]
 800592a:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
{
 800592e:	4604      	mov	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005930:	d006      	beq.n	8005940 <SPI_EndRxTransaction+0x1c>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005932:	460a      	mov	r2, r1
 8005934:	2101      	movs	r1, #1
 8005936:	f7ff ff9d 	bl	8005874 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 800593a:	b9b8      	cbnz	r0, 800596c <SPI_EndRxTransaction+0x48>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 800593c:	2000      	movs	r0, #0
}
 800593e:	bd38      	pop	{r3, r4, r5, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005940:	6882      	ldr	r2, [r0, #8]
 8005942:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8005946:	d002      	beq.n	800594e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005948:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800594c:	d107      	bne.n	800595e <SPI_EndRxTransaction+0x3a>
    __HAL_SPI_DISABLE(hspi);
 800594e:	6825      	ldr	r5, [r4, #0]
 8005950:	6828      	ldr	r0, [r5, #0]
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005952:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
    __HAL_SPI_DISABLE(hspi);
 8005956:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 800595a:	6028      	str	r0, [r5, #0]
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800595c:	d003      	beq.n	8005966 <SPI_EndRxTransaction+0x42>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800595e:	460a      	mov	r2, r1
 8005960:	2180      	movs	r1, #128	@ 0x80
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005962:	4620      	mov	r0, r4
 8005964:	e7e7      	b.n	8005936 <SPI_EndRxTransaction+0x12>
 8005966:	460a      	mov	r2, r1
 8005968:	2101      	movs	r1, #1
 800596a:	e7fa      	b.n	8005962 <SPI_EndRxTransaction+0x3e>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800596c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800596e:	f043 0320 	orr.w	r3, r3, #32
 8005972:	6563      	str	r3, [r4, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005974:	2003      	movs	r0, #3
 8005976:	e7e2      	b.n	800593e <SPI_EndRxTransaction+0x1a>

08005978 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005978:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800597a:	4613      	mov	r3, r2
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800597c:	4a12      	ldr	r2, [pc, #72]	@ (80059c8 <SPI_EndRxTxTransaction+0x50>)
 800597e:	6815      	ldr	r5, [r2, #0]
 8005980:	4a12      	ldr	r2, [pc, #72]	@ (80059cc <SPI_EndRxTxTransaction+0x54>)
 8005982:	fbb5 f5f2 	udiv	r5, r5, r2
 8005986:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800598a:	4355      	muls	r5, r2
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800598c:	6842      	ldr	r2, [r0, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800598e:	9501      	str	r5, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005990:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
{
 8005994:	4604      	mov	r4, r0
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005996:	d10b      	bne.n	80059b0 <SPI_EndRxTxTransaction+0x38>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005998:	460a      	mov	r2, r1
 800599a:	2180      	movs	r1, #128	@ 0x80
 800599c:	f7ff ff6a 	bl	8005874 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 80059a0:	b178      	cbz	r0, 80059c2 <SPI_EndRxTxTransaction+0x4a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059a2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80059a4:	f043 0320 	orr.w	r3, r3, #32
 80059a8:	6563      	str	r3, [r4, #84]	@ 0x54
      return HAL_TIMEOUT;
 80059aa:	2003      	movs	r0, #3
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
  }

  return HAL_OK;
}
 80059ac:	b003      	add	sp, #12
 80059ae:	bd30      	pop	{r4, r5, pc}
      if (count == 0U)
 80059b0:	9b01      	ldr	r3, [sp, #4]
 80059b2:	b133      	cbz	r3, 80059c2 <SPI_EndRxTxTransaction+0x4a>
      count--;
 80059b4:	9b01      	ldr	r3, [sp, #4]
 80059b6:	3b01      	subs	r3, #1
 80059b8:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80059ba:	6823      	ldr	r3, [r4, #0]
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	061b      	lsls	r3, r3, #24
 80059c0:	d4f6      	bmi.n	80059b0 <SPI_EndRxTxTransaction+0x38>
  return HAL_OK;
 80059c2:	2000      	movs	r0, #0
 80059c4:	e7f2      	b.n	80059ac <SPI_EndRxTxTransaction+0x34>
 80059c6:	bf00      	nop
 80059c8:	20000074 	.word	0x20000074
 80059cc:	016e3600 	.word	0x016e3600

080059d0 <HAL_SPI_Init>:
{
 80059d0:	b510      	push	{r4, lr}
  if (hspi == NULL)
 80059d2:	4604      	mov	r4, r0
 80059d4:	2800      	cmp	r0, #0
 80059d6:	d055      	beq.n	8005a84 <HAL_SPI_Init+0xb4>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80059d8:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d14e      	bne.n	8005a7c <HAL_SPI_Init+0xac>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80059de:	6842      	ldr	r2, [r0, #4]
 80059e0:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 80059e4:	d000      	beq.n	80059e8 <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80059e6:	61c3      	str	r3, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80059e8:	2300      	movs	r3, #0
 80059ea:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80059ec:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 80059f0:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80059f4:	b923      	cbnz	r3, 8005a00 <HAL_SPI_Init+0x30>
    hspi->Lock = HAL_UNLOCKED;
 80059f6:	f884 2050 	strb.w	r2, [r4, #80]	@ 0x50
    HAL_SPI_MspInit(hspi);
 80059fa:	4620      	mov	r0, r4
 80059fc:	f7fc f944 	bl	8001c88 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8005a00:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005a02:	68a0      	ldr	r0, [r4, #8]
 8005a04:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 8005a06:	2302      	movs	r3, #2
 8005a08:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_SPI_DISABLE(hspi);
 8005a0c:	680b      	ldr	r3, [r1, #0]
 8005a0e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a12:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005a14:	6863      	ldr	r3, [r4, #4]
 8005a16:	f400 4004 	and.w	r0, r0, #33792	@ 0x8400
 8005a1a:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 8005a1e:	4303      	orrs	r3, r0
 8005a20:	68e0      	ldr	r0, [r4, #12]
 8005a22:	f400 6000 	and.w	r0, r0, #2048	@ 0x800
 8005a26:	4303      	orrs	r3, r0
 8005a28:	6920      	ldr	r0, [r4, #16]
 8005a2a:	f000 0002 	and.w	r0, r0, #2
 8005a2e:	4303      	orrs	r3, r0
 8005a30:	6960      	ldr	r0, [r4, #20]
 8005a32:	f000 0001 	and.w	r0, r0, #1
 8005a36:	4303      	orrs	r3, r0
 8005a38:	f402 7000 	and.w	r0, r2, #512	@ 0x200
 8005a3c:	4303      	orrs	r3, r0
 8005a3e:	69e0      	ldr	r0, [r4, #28]
 8005a40:	f000 0038 	and.w	r0, r0, #56	@ 0x38
 8005a44:	4303      	orrs	r3, r0
 8005a46:	6a20      	ldr	r0, [r4, #32]
 8005a48:	f000 0080 	and.w	r0, r0, #128	@ 0x80
 8005a4c:	4303      	orrs	r3, r0
 8005a4e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8005a50:	f400 5000 	and.w	r0, r0, #8192	@ 0x2000
 8005a54:	4303      	orrs	r3, r0
 8005a56:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005a58:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005a5a:	0c12      	lsrs	r2, r2, #16
 8005a5c:	f003 0310 	and.w	r3, r3, #16
 8005a60:	f002 0204 	and.w	r2, r2, #4
 8005a64:	431a      	orrs	r2, r3
 8005a66:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005a68:	69cb      	ldr	r3, [r1, #28]
 8005a6a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005a6e:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a70:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8005a72:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a74:	6560      	str	r0, [r4, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005a76:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
}
 8005a7a:	bd10      	pop	{r4, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005a7c:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005a7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005a82:	e7b1      	b.n	80059e8 <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 8005a84:	2001      	movs	r0, #1
 8005a86:	e7f8      	b.n	8005a7a <HAL_SPI_Init+0xaa>

08005a88 <HAL_SPI_Transmit>:
{
 8005a88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005a8c:	461f      	mov	r7, r3
  __HAL_LOCK(hspi);
 8005a8e:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
 8005a92:	2b01      	cmp	r3, #1
{
 8005a94:	4604      	mov	r4, r0
 8005a96:	460d      	mov	r5, r1
 8005a98:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8005a9a:	f000 80a0 	beq.w	8005bde <HAL_SPI_Transmit+0x156>
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50
  tickstart = HAL_GetTick();
 8005aa4:	f7fe fa50 	bl	8003f48 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8005aa8:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 8005aac:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8005aae:	4681      	mov	r9, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8005ab0:	b2d8      	uxtb	r0, r3
 8005ab2:	f040 8092 	bne.w	8005bda <HAL_SPI_Transmit+0x152>
  if ((pData == NULL) || (Size == 0U))
 8005ab6:	2d00      	cmp	r5, #0
 8005ab8:	d061      	beq.n	8005b7e <HAL_SPI_Transmit+0xf6>
 8005aba:	f1b8 0f00 	cmp.w	r8, #0
 8005abe:	d05e      	beq.n	8005b7e <HAL_SPI_Transmit+0xf6>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005ac0:	2303      	movs	r3, #3
 8005ac2:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->RxISR       = NULL;
 8005aca:	e9c4 3310 	strd	r3, r3, [r4, #64]	@ 0x40
  hspi->TxXferCount = Size;
 8005ace:	f8a4 8036 	strh.w	r8, [r4, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005ad2:	63a3      	str	r3, [r4, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005ad4:	87a3      	strh	r3, [r4, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005ad6:	87e3      	strh	r3, [r4, #62]	@ 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ad8:	68a3      	ldr	r3, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 8005ada:	6826      	ldr	r6, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005adc:	6325      	str	r5, [r4, #48]	@ 0x30
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ade:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
  hspi->TxXferSize  = Size;
 8005ae2:	f8a4 8034 	strh.w	r8, [r4, #52]	@ 0x34
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ae6:	d107      	bne.n	8005af8 <HAL_SPI_Transmit+0x70>
    __HAL_SPI_DISABLE(hspi);
 8005ae8:	6833      	ldr	r3, [r6, #0]
 8005aea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005aee:	6033      	str	r3, [r6, #0]
    SPI_1LINE_TX(hspi);
 8005af0:	6833      	ldr	r3, [r6, #0]
 8005af2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005af6:	6033      	str	r3, [r6, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005af8:	6833      	ldr	r3, [r6, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005afa:	68e2      	ldr	r2, [r4, #12]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005afc:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8005afe:	bf5e      	ittt	pl
 8005b00:	6833      	ldrpl	r3, [r6, #0]
 8005b02:	f043 0340 	orrpl.w	r3, r3, #64	@ 0x40
 8005b06:	6033      	strpl	r3, [r6, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005b08:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b0c:	6863      	ldr	r3, [r4, #4]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005b0e:	d13f      	bne.n	8005b90 <HAL_SPI_Transmit+0x108>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b10:	b113      	cbz	r3, 8005b18 <HAL_SPI_Transmit+0x90>
 8005b12:	f1b8 0f01 	cmp.w	r8, #1
 8005b16:	d107      	bne.n	8005b28 <HAL_SPI_Transmit+0xa0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b18:	f835 3b02 	ldrh.w	r3, [r5], #2
 8005b1c:	60f3      	str	r3, [r6, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b1e:	6325      	str	r5, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8005b20:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8005b22:	3b01      	subs	r3, #1
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	86e3      	strh	r3, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 8005b28:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	b9a3      	cbnz	r3, 8005b58 <HAL_SPI_Transmit+0xd0>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b2e:	464a      	mov	r2, r9
 8005b30:	4639      	mov	r1, r7
 8005b32:	4620      	mov	r0, r4
 8005b34:	f7ff ff20 	bl	8005978 <SPI_EndRxTxTransaction>
 8005b38:	2800      	cmp	r0, #0
 8005b3a:	d14b      	bne.n	8005bd4 <HAL_SPI_Transmit+0x14c>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005b3c:	68a3      	ldr	r3, [r4, #8]
 8005b3e:	b933      	cbnz	r3, 8005b4e <HAL_SPI_Transmit+0xc6>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b40:	9301      	str	r3, [sp, #4]
 8005b42:	6823      	ldr	r3, [r4, #0]
 8005b44:	68da      	ldr	r2, [r3, #12]
 8005b46:	9201      	str	r2, [sp, #4]
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	9301      	str	r3, [sp, #4]
 8005b4c:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b4e:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8005b50:	3800      	subs	r0, #0
 8005b52:	bf18      	it	ne
 8005b54:	2001      	movne	r0, #1
error:
 8005b56:	e012      	b.n	8005b7e <HAL_SPI_Transmit+0xf6>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005b58:	6822      	ldr	r2, [r4, #0]
 8005b5a:	6893      	ldr	r3, [r2, #8]
 8005b5c:	0798      	lsls	r0, r3, #30
 8005b5e:	d505      	bpl.n	8005b6c <HAL_SPI_Transmit+0xe4>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b60:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005b62:	f833 1b02 	ldrh.w	r1, [r3], #2
 8005b66:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b68:	6323      	str	r3, [r4, #48]	@ 0x30
 8005b6a:	e7d9      	b.n	8005b20 <HAL_SPI_Transmit+0x98>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b6c:	f7fe f9ec 	bl	8003f48 <HAL_GetTick>
 8005b70:	eba0 0009 	sub.w	r0, r0, r9
 8005b74:	42b8      	cmp	r0, r7
 8005b76:	d3d7      	bcc.n	8005b28 <HAL_SPI_Transmit+0xa0>
 8005b78:	1c79      	adds	r1, r7, #1
 8005b7a:	d0d5      	beq.n	8005b28 <HAL_SPI_Transmit+0xa0>
          errorcode = HAL_TIMEOUT;
 8005b7c:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8005b84:	2300      	movs	r3, #0
 8005b86:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 8005b8a:	b003      	add	sp, #12
 8005b8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b90:	b113      	cbz	r3, 8005b98 <HAL_SPI_Transmit+0x110>
 8005b92:	f1b8 0f01 	cmp.w	r8, #1
 8005b96:	d108      	bne.n	8005baa <HAL_SPI_Transmit+0x122>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005b98:	782b      	ldrb	r3, [r5, #0]
 8005b9a:	7333      	strb	r3, [r6, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005b9c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005b9e:	3301      	adds	r3, #1
 8005ba0:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8005ba2:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8005ba4:	3b01      	subs	r3, #1
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	86e3      	strh	r3, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 8005baa:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d0bd      	beq.n	8005b2e <HAL_SPI_Transmit+0xa6>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005bb2:	6823      	ldr	r3, [r4, #0]
 8005bb4:	689a      	ldr	r2, [r3, #8]
 8005bb6:	0792      	lsls	r2, r2, #30
 8005bb8:	d503      	bpl.n	8005bc2 <HAL_SPI_Transmit+0x13a>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005bba:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8005bbc:	7812      	ldrb	r2, [r2, #0]
 8005bbe:	731a      	strb	r2, [r3, #12]
 8005bc0:	e7ec      	b.n	8005b9c <HAL_SPI_Transmit+0x114>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005bc2:	f7fe f9c1 	bl	8003f48 <HAL_GetTick>
 8005bc6:	eba0 0009 	sub.w	r0, r0, r9
 8005bca:	42b8      	cmp	r0, r7
 8005bcc:	d3ed      	bcc.n	8005baa <HAL_SPI_Transmit+0x122>
 8005bce:	1c7b      	adds	r3, r7, #1
 8005bd0:	d0eb      	beq.n	8005baa <HAL_SPI_Transmit+0x122>
 8005bd2:	e7d3      	b.n	8005b7c <HAL_SPI_Transmit+0xf4>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005bd4:	2320      	movs	r3, #32
 8005bd6:	6563      	str	r3, [r4, #84]	@ 0x54
 8005bd8:	e7b0      	b.n	8005b3c <HAL_SPI_Transmit+0xb4>
    errorcode = HAL_BUSY;
 8005bda:	2002      	movs	r0, #2
 8005bdc:	e7cf      	b.n	8005b7e <HAL_SPI_Transmit+0xf6>
  __HAL_LOCK(hspi);
 8005bde:	2002      	movs	r0, #2
 8005be0:	e7d3      	b.n	8005b8a <HAL_SPI_Transmit+0x102>

08005be2 <HAL_SPI_TransmitReceive>:
{
 8005be2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005be6:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8005be8:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
{
 8005bec:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
  __HAL_LOCK(hspi);
 8005bf0:	2b01      	cmp	r3, #1
{
 8005bf2:	4604      	mov	r4, r0
 8005bf4:	460d      	mov	r5, r1
 8005bf6:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 8005bf8:	f000 80e1 	beq.w	8005dbe <HAL_SPI_TransmitReceive+0x1dc>
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50
  tickstart = HAL_GetTick();
 8005c02:	f7fe f9a1 	bl	8003f48 <HAL_GetTick>
  tmp_state           = hspi->State;
 8005c06:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
  tmp_mode            = hspi->Init.Mode;
 8005c0a:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005c0c:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8005c0e:	4607      	mov	r7, r0
  tmp_state           = hspi->State;
 8005c10:	b2d9      	uxtb	r1, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005c12:	d00a      	beq.n	8005c2a <HAL_SPI_TransmitReceive+0x48>
 8005c14:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8005c18:	f040 80cf 	bne.w	8005dba <HAL_SPI_TransmitReceive+0x1d8>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005c1c:	68a3      	ldr	r3, [r4, #8]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	f040 80cb 	bne.w	8005dba <HAL_SPI_TransmitReceive+0x1d8>
 8005c24:	2904      	cmp	r1, #4
 8005c26:	f040 80c8 	bne.w	8005dba <HAL_SPI_TransmitReceive+0x1d8>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005c2a:	b115      	cbz	r5, 8005c32 <HAL_SPI_TransmitReceive+0x50>
 8005c2c:	f1b9 0f00 	cmp.w	r9, #0
 8005c30:	d109      	bne.n	8005c46 <HAL_SPI_TransmitReceive+0x64>
    errorcode = HAL_ERROR;
 8005c32:	2001      	movs	r0, #1
  hspi->State = HAL_SPI_STATE_READY;
 8005c34:	2301      	movs	r3, #1
 8005c36:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 8005c40:	b003      	add	sp, #12
 8005c42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005c46:	2e00      	cmp	r6, #0
 8005c48:	d0f3      	beq.n	8005c32 <HAL_SPI_TransmitReceive+0x50>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005c4a:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005c4e:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005c52:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005c54:	bf1c      	itt	ne
 8005c56:	2305      	movne	r3, #5
 8005c58:	f884 3051 	strbne.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->TxISR       = NULL;
 8005c60:	e9c4 3310 	strd	r3, r3, [r4, #64]	@ 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c64:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8005c66:	87e6      	strh	r6, [r4, #62]	@ 0x3e
  hspi->TxXferCount = Size;
 8005c68:	86e6      	strh	r6, [r4, #54]	@ 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c6a:	6819      	ldr	r1, [r3, #0]
  hspi->RxXferSize  = Size;
 8005c6c:	87a6      	strh	r6, [r4, #60]	@ 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c6e:	0649      	lsls	r1, r1, #25
    __HAL_SPI_ENABLE(hspi);
 8005c70:	bf58      	it	pl
 8005c72:	6819      	ldrpl	r1, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005c74:	6325      	str	r5, [r4, #48]	@ 0x30
    __HAL_SPI_ENABLE(hspi);
 8005c76:	bf58      	it	pl
 8005c78:	f041 0140 	orrpl.w	r1, r1, #64	@ 0x40
  hspi->TxXferSize  = Size;
 8005c7c:	86a6      	strh	r6, [r4, #52]	@ 0x34
    __HAL_SPI_ENABLE(hspi);
 8005c7e:	bf58      	it	pl
 8005c80:	6019      	strpl	r1, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005c82:	68e1      	ldr	r1, [r4, #12]
 8005c84:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8005c88:	d148      	bne.n	8005d1c <HAL_SPI_TransmitReceive+0x13a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c8a:	b10a      	cbz	r2, 8005c90 <HAL_SPI_TransmitReceive+0xae>
 8005c8c:	2e01      	cmp	r6, #1
 8005c8e:	d107      	bne.n	8005ca0 <HAL_SPI_TransmitReceive+0xbe>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c90:	f835 2b02 	ldrh.w	r2, [r5], #2
 8005c94:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8005c96:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c98:	6325      	str	r5, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8005c9a:	3b01      	subs	r3, #1
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 8005ca0:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ca2:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	b963      	cbnz	r3, 8005cc2 <HAL_SPI_TransmitReceive+0xe0>
 8005ca8:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	b94b      	cbnz	r3, 8005cc2 <HAL_SPI_TransmitReceive+0xe0>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005cae:	463a      	mov	r2, r7
 8005cb0:	4641      	mov	r1, r8
 8005cb2:	4620      	mov	r0, r4
 8005cb4:	f7ff fe60 	bl	8005978 <SPI_EndRxTxTransaction>
 8005cb8:	2800      	cmp	r0, #0
 8005cba:	d072      	beq.n	8005da2 <HAL_SPI_TransmitReceive+0x1c0>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005cbc:	2320      	movs	r3, #32
 8005cbe:	6563      	str	r3, [r4, #84]	@ 0x54
    goto error;
 8005cc0:	e7b7      	b.n	8005c32 <HAL_SPI_TransmitReceive+0x50>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005cc2:	6821      	ldr	r1, [r4, #0]
 8005cc4:	688b      	ldr	r3, [r1, #8]
 8005cc6:	079a      	lsls	r2, r3, #30
 8005cc8:	d50d      	bpl.n	8005ce6 <HAL_SPI_TransmitReceive+0x104>
 8005cca:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	b153      	cbz	r3, 8005ce6 <HAL_SPI_TransmitReceive+0x104>
 8005cd0:	b145      	cbz	r5, 8005ce4 <HAL_SPI_TransmitReceive+0x102>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005cd2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005cd4:	f833 2b02 	ldrh.w	r2, [r3], #2
 8005cd8:	60ca      	str	r2, [r1, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005cda:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8005cdc:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8005cde:	3b01      	subs	r3, #1
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	86e3      	strh	r3, [r4, #54]	@ 0x36
{
 8005ce4:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005ce6:	688a      	ldr	r2, [r1, #8]
 8005ce8:	f012 0201 	ands.w	r2, r2, #1
 8005cec:	d00c      	beq.n	8005d08 <HAL_SPI_TransmitReceive+0x126>
 8005cee:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	b14b      	cbz	r3, 8005d08 <HAL_SPI_TransmitReceive+0x126>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005cf4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8005cf6:	68c9      	ldr	r1, [r1, #12]
 8005cf8:	f823 1b02 	strh.w	r1, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005cfc:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8005cfe:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8005d00:	3b01      	subs	r3, #1
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8005d06:	4615      	mov	r5, r2
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005d08:	f7fe f91e 	bl	8003f48 <HAL_GetTick>
 8005d0c:	1bc0      	subs	r0, r0, r7
 8005d0e:	4540      	cmp	r0, r8
 8005d10:	d3c7      	bcc.n	8005ca2 <HAL_SPI_TransmitReceive+0xc0>
 8005d12:	f1b8 3fff 	cmp.w	r8, #4294967295
 8005d16:	d0c4      	beq.n	8005ca2 <HAL_SPI_TransmitReceive+0xc0>
        errorcode = HAL_TIMEOUT;
 8005d18:	2003      	movs	r0, #3
 8005d1a:	e78b      	b.n	8005c34 <HAL_SPI_TransmitReceive+0x52>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d1c:	b10a      	cbz	r2, 8005d22 <HAL_SPI_TransmitReceive+0x140>
 8005d1e:	2e01      	cmp	r6, #1
 8005d20:	d108      	bne.n	8005d34 <HAL_SPI_TransmitReceive+0x152>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005d22:	782a      	ldrb	r2, [r5, #0]
 8005d24:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005d26:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005d28:	3301      	adds	r3, #1
 8005d2a:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8005d2c:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8005d2e:	3b01      	subs	r3, #1
 8005d30:	b29b      	uxth	r3, r3
 8005d32:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 8005d34:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d36:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8005d38:	b29b      	uxth	r3, r3
 8005d3a:	b91b      	cbnz	r3, 8005d44 <HAL_SPI_TransmitReceive+0x162>
 8005d3c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8005d3e:	b29b      	uxth	r3, r3
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d0b4      	beq.n	8005cae <HAL_SPI_TransmitReceive+0xcc>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005d44:	6822      	ldr	r2, [r4, #0]
 8005d46:	6893      	ldr	r3, [r2, #8]
 8005d48:	079b      	lsls	r3, r3, #30
 8005d4a:	d50e      	bpl.n	8005d6a <HAL_SPI_TransmitReceive+0x188>
 8005d4c:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	b15b      	cbz	r3, 8005d6a <HAL_SPI_TransmitReceive+0x188>
 8005d52:	b14d      	cbz	r5, 8005d68 <HAL_SPI_TransmitReceive+0x186>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005d54:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005d56:	781b      	ldrb	r3, [r3, #0]
 8005d58:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 8005d5a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005d5c:	3301      	adds	r3, #1
 8005d5e:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8005d60:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8005d62:	3b01      	subs	r3, #1
 8005d64:	b29b      	uxth	r3, r3
 8005d66:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 8005d68:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005d6a:	6822      	ldr	r2, [r4, #0]
 8005d6c:	6891      	ldr	r1, [r2, #8]
 8005d6e:	f011 0101 	ands.w	r1, r1, #1
 8005d72:	d00d      	beq.n	8005d90 <HAL_SPI_TransmitReceive+0x1ae>
 8005d74:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8005d76:	b29b      	uxth	r3, r3
 8005d78:	b153      	cbz	r3, 8005d90 <HAL_SPI_TransmitReceive+0x1ae>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005d7a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8005d7c:	68d2      	ldr	r2, [r2, #12]
 8005d7e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005d80:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8005d82:	3301      	adds	r3, #1
 8005d84:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8005d86:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8005d88:	3b01      	subs	r3, #1
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8005d8e:	460d      	mov	r5, r1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005d90:	f7fe f8da 	bl	8003f48 <HAL_GetTick>
 8005d94:	1bc0      	subs	r0, r0, r7
 8005d96:	4540      	cmp	r0, r8
 8005d98:	d3cd      	bcc.n	8005d36 <HAL_SPI_TransmitReceive+0x154>
 8005d9a:	f1b8 3fff 	cmp.w	r8, #4294967295
 8005d9e:	d0ca      	beq.n	8005d36 <HAL_SPI_TransmitReceive+0x154>
 8005da0:	e7ba      	b.n	8005d18 <HAL_SPI_TransmitReceive+0x136>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005da2:	68a3      	ldr	r3, [r4, #8]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	f47f af45 	bne.w	8005c34 <HAL_SPI_TransmitReceive+0x52>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005daa:	6823      	ldr	r3, [r4, #0]
 8005dac:	9001      	str	r0, [sp, #4]
 8005dae:	68da      	ldr	r2, [r3, #12]
 8005db0:	9201      	str	r2, [sp, #4]
 8005db2:	689b      	ldr	r3, [r3, #8]
 8005db4:	9301      	str	r3, [sp, #4]
 8005db6:	9b01      	ldr	r3, [sp, #4]
 8005db8:	e73c      	b.n	8005c34 <HAL_SPI_TransmitReceive+0x52>
    errorcode = HAL_BUSY;
 8005dba:	2002      	movs	r0, #2
 8005dbc:	e73a      	b.n	8005c34 <HAL_SPI_TransmitReceive+0x52>
  __HAL_LOCK(hspi);
 8005dbe:	2002      	movs	r0, #2
 8005dc0:	e73e      	b.n	8005c40 <HAL_SPI_TransmitReceive+0x5e>

08005dc2 <HAL_SPI_Receive>:
{
 8005dc2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005dc6:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005dc8:	6843      	ldr	r3, [r0, #4]
 8005dca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
{
 8005dce:	4604      	mov	r4, r0
 8005dd0:	4689      	mov	r9, r1
 8005dd2:	4617      	mov	r7, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005dd4:	d10c      	bne.n	8005df0 <HAL_SPI_Receive+0x2e>
 8005dd6:	6883      	ldr	r3, [r0, #8]
 8005dd8:	b953      	cbnz	r3, 8005df0 <HAL_SPI_Receive+0x2e>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005dda:	2304      	movs	r3, #4
 8005ddc:	f880 3051 	strb.w	r3, [r0, #81]	@ 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005de0:	4613      	mov	r3, r2
 8005de2:	9500      	str	r5, [sp, #0]
 8005de4:	460a      	mov	r2, r1
 8005de6:	f7ff fefc 	bl	8005be2 <HAL_SPI_TransmitReceive>
}
 8005dea:	b003      	add	sp, #12
 8005dec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi);
 8005df0:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d07f      	beq.n	8005ef8 <HAL_SPI_Receive+0x136>
 8005df8:	2301      	movs	r3, #1
 8005dfa:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  tickstart = HAL_GetTick();
 8005dfe:	f7fe f8a3 	bl	8003f48 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8005e02:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 8005e06:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8005e08:	4680      	mov	r8, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8005e0a:	b2d8      	uxtb	r0, r3
 8005e0c:	d172      	bne.n	8005ef4 <HAL_SPI_Receive+0x132>
  if ((pData == NULL) || (Size == 0U))
 8005e0e:	f1b9 0f00 	cmp.w	r9, #0
 8005e12:	d05c      	beq.n	8005ece <HAL_SPI_Receive+0x10c>
 8005e14:	2f00      	cmp	r7, #0
 8005e16:	d05a      	beq.n	8005ece <HAL_SPI_Receive+0x10c>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e18:	68a2      	ldr	r2, [r4, #8]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005e1a:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e1e:	2600      	movs	r6, #0
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005e20:	2304      	movs	r3, #4
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e22:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005e26:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  hspi->TxISR       = NULL;
 8005e2a:	e9c4 6610 	strd	r6, r6, [r4, #64]	@ 0x40
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e2e:	6566      	str	r6, [r4, #84]	@ 0x54
    __HAL_SPI_DISABLE(hspi);
 8005e30:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8005e32:	87e7      	strh	r7, [r4, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005e34:	87a7      	strh	r7, [r4, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005e36:	6326      	str	r6, [r4, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8005e38:	86a6      	strh	r6, [r4, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8005e3a:	86e6      	strh	r6, [r4, #54]	@ 0x36
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e3c:	d107      	bne.n	8005e4e <HAL_SPI_Receive+0x8c>
    __HAL_SPI_DISABLE(hspi);
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005e44:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005e4c:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	0656      	lsls	r6, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8005e52:	bf5e      	ittt	pl
 8005e54:	681a      	ldrpl	r2, [r3, #0]
 8005e56:	f042 0240 	orrpl.w	r2, r2, #64	@ 0x40
 8005e5a:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005e5c:	68e3      	ldr	r3, [r4, #12]
 8005e5e:	b1f3      	cbz	r3, 8005e9e <HAL_SPI_Receive+0xdc>
    while (hspi->RxXferCount > 0U)
 8005e60:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	b1fb      	cbz	r3, 8005ea6 <HAL_SPI_Receive+0xe4>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005e66:	6823      	ldr	r3, [r4, #0]
 8005e68:	689a      	ldr	r2, [r3, #8]
 8005e6a:	07d2      	lsls	r2, r2, #31
 8005e6c:	d536      	bpl.n	8005edc <HAL_SPI_Receive+0x11a>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005e6e:	68da      	ldr	r2, [r3, #12]
 8005e70:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8005e72:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005e76:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8005e78:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8005e7a:	3b01      	subs	r3, #1
 8005e7c:	b29b      	uxth	r3, r3
 8005e7e:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8005e80:	e7ee      	b.n	8005e60 <HAL_SPI_Receive+0x9e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005e82:	6823      	ldr	r3, [r4, #0]
 8005e84:	689a      	ldr	r2, [r3, #8]
 8005e86:	07d0      	lsls	r0, r2, #31
 8005e88:	d518      	bpl.n	8005ebc <HAL_SPI_Receive+0xfa>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005e8a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8005e8c:	7b1b      	ldrb	r3, [r3, #12]
 8005e8e:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005e90:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8005e92:	3301      	adds	r3, #1
 8005e94:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8005e96:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8005e98:	3b01      	subs	r3, #1
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    while (hspi->RxXferCount > 0U)
 8005e9e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8005ea0:	b29b      	uxth	r3, r3
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d1ed      	bne.n	8005e82 <HAL_SPI_Receive+0xc0>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ea6:	4642      	mov	r2, r8
 8005ea8:	4629      	mov	r1, r5
 8005eaa:	4620      	mov	r0, r4
 8005eac:	f7ff fd3a 	bl	8005924 <SPI_EndRxTransaction>
 8005eb0:	b9e8      	cbnz	r0, 8005eee <HAL_SPI_Receive+0x12c>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005eb2:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8005eb4:	3800      	subs	r0, #0
 8005eb6:	bf18      	it	ne
 8005eb8:	2001      	movne	r0, #1
error :
 8005eba:	e008      	b.n	8005ece <HAL_SPI_Receive+0x10c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ebc:	f7fe f844 	bl	8003f48 <HAL_GetTick>
 8005ec0:	eba0 0008 	sub.w	r0, r0, r8
 8005ec4:	42a8      	cmp	r0, r5
 8005ec6:	d3ea      	bcc.n	8005e9e <HAL_SPI_Receive+0xdc>
 8005ec8:	1c69      	adds	r1, r5, #1
 8005eca:	d0e8      	beq.n	8005e9e <HAL_SPI_Receive+0xdc>
          errorcode = HAL_TIMEOUT;
 8005ecc:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  return errorcode;
 8005eda:	e786      	b.n	8005dea <HAL_SPI_Receive+0x28>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005edc:	f7fe f834 	bl	8003f48 <HAL_GetTick>
 8005ee0:	eba0 0008 	sub.w	r0, r0, r8
 8005ee4:	42a8      	cmp	r0, r5
 8005ee6:	d3bb      	bcc.n	8005e60 <HAL_SPI_Receive+0x9e>
 8005ee8:	1c6b      	adds	r3, r5, #1
 8005eea:	d0b9      	beq.n	8005e60 <HAL_SPI_Receive+0x9e>
 8005eec:	e7ee      	b.n	8005ecc <HAL_SPI_Receive+0x10a>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005eee:	2320      	movs	r3, #32
 8005ef0:	6563      	str	r3, [r4, #84]	@ 0x54
 8005ef2:	e7de      	b.n	8005eb2 <HAL_SPI_Receive+0xf0>
    errorcode = HAL_BUSY;
 8005ef4:	2002      	movs	r0, #2
 8005ef6:	e7ea      	b.n	8005ece <HAL_SPI_Receive+0x10c>
  __HAL_LOCK(hspi);
 8005ef8:	2002      	movs	r0, #2
 8005efa:	e776      	b.n	8005dea <HAL_SPI_Receive+0x28>

08005efc <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005efc:	4770      	bx	lr
	...

08005f00 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f00:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	d130      	bne.n	8005f6a <HAL_TIM_Base_Start_IT+0x6a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f08:	2302      	movs	r3, #2
 8005f0a:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005f0e:	6803      	ldr	r3, [r0, #0]
 8005f10:	68da      	ldr	r2, [r3, #12]
 8005f12:	f042 0201 	orr.w	r2, r2, #1
 8005f16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f18:	4a15      	ldr	r2, [pc, #84]	@ (8005f70 <HAL_TIM_Base_Start_IT+0x70>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d01a      	beq.n	8005f54 <HAL_TIM_Base_Start_IT+0x54>
 8005f1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f22:	d017      	beq.n	8005f54 <HAL_TIM_Base_Start_IT+0x54>
 8005f24:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d013      	beq.n	8005f54 <HAL_TIM_Base_Start_IT+0x54>
 8005f2c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d00f      	beq.n	8005f54 <HAL_TIM_Base_Start_IT+0x54>
 8005f34:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d00b      	beq.n	8005f54 <HAL_TIM_Base_Start_IT+0x54>
 8005f3c:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d007      	beq.n	8005f54 <HAL_TIM_Base_Start_IT+0x54>
 8005f44:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d003      	beq.n	8005f54 <HAL_TIM_Base_Start_IT+0x54>
 8005f4c:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d104      	bne.n	8005f5e <HAL_TIM_Base_Start_IT+0x5e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f54:	689a      	ldr	r2, [r3, #8]
 8005f56:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f5a:	2a06      	cmp	r2, #6
 8005f5c:	d003      	beq.n	8005f66 <HAL_TIM_Base_Start_IT+0x66>
    {
      __HAL_TIM_ENABLE(htim);
 8005f5e:	681a      	ldr	r2, [r3, #0]
 8005f60:	f042 0201 	orr.w	r2, r2, #1
 8005f64:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 8005f66:	2000      	movs	r0, #0
 8005f68:	4770      	bx	lr
    return HAL_ERROR;
 8005f6a:	2001      	movs	r0, #1
}
 8005f6c:	4770      	bx	lr
 8005f6e:	bf00      	nop
 8005f70:	40010000 	.word	0x40010000

08005f74 <HAL_TIM_OC_DelayElapsedCallback>:
/**
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 8005f74:	4770      	bx	lr

08005f76 <HAL_TIM_IC_CaptureCallback>:
/**
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 8005f76:	4770      	bx	lr

08005f78 <HAL_TIM_PWM_PulseFinishedCallback>:
/**
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 8005f78:	4770      	bx	lr

08005f7a <HAL_TIM_TriggerCallback>:
/**
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 8005f7a:	4770      	bx	lr

08005f7c <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005f7c:	6803      	ldr	r3, [r0, #0]
 8005f7e:	691a      	ldr	r2, [r3, #16]
 8005f80:	0791      	lsls	r1, r2, #30
{
 8005f82:	b510      	push	{r4, lr}
 8005f84:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005f86:	d50e      	bpl.n	8005fa6 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005f88:	68da      	ldr	r2, [r3, #12]
 8005f8a:	0792      	lsls	r2, r2, #30
 8005f8c:	d50b      	bpl.n	8005fa6 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005f8e:	f06f 0202 	mvn.w	r2, #2
 8005f92:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f94:	2201      	movs	r2, #1
 8005f96:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f98:	699b      	ldr	r3, [r3, #24]
 8005f9a:	079b      	lsls	r3, r3, #30
 8005f9c:	d077      	beq.n	800608e <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8005f9e:	f7ff ffea 	bl	8005f76 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005fa6:	6823      	ldr	r3, [r4, #0]
 8005fa8:	691a      	ldr	r2, [r3, #16]
 8005faa:	0750      	lsls	r0, r2, #29
 8005fac:	d510      	bpl.n	8005fd0 <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005fae:	68da      	ldr	r2, [r3, #12]
 8005fb0:	0751      	lsls	r1, r2, #29
 8005fb2:	d50d      	bpl.n	8005fd0 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005fb4:	f06f 0204 	mvn.w	r2, #4
 8005fb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005fba:	2202      	movs	r2, #2
 8005fbc:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005fbe:	699b      	ldr	r3, [r3, #24]
 8005fc0:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8005fc4:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005fc6:	d068      	beq.n	800609a <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8005fc8:	f7ff ffd5 	bl	8005f76 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005fd0:	6823      	ldr	r3, [r4, #0]
 8005fd2:	691a      	ldr	r2, [r3, #16]
 8005fd4:	0712      	lsls	r2, r2, #28
 8005fd6:	d50f      	bpl.n	8005ff8 <HAL_TIM_IRQHandler+0x7c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005fd8:	68da      	ldr	r2, [r3, #12]
 8005fda:	0710      	lsls	r0, r2, #28
 8005fdc:	d50c      	bpl.n	8005ff8 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005fde:	f06f 0208 	mvn.w	r2, #8
 8005fe2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005fe4:	2204      	movs	r2, #4
 8005fe6:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005fe8:	69db      	ldr	r3, [r3, #28]
 8005fea:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8005fec:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005fee:	d05a      	beq.n	80060a6 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8005ff0:	f7ff ffc1 	bl	8005f76 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005ff8:	6823      	ldr	r3, [r4, #0]
 8005ffa:	691a      	ldr	r2, [r3, #16]
 8005ffc:	06d2      	lsls	r2, r2, #27
 8005ffe:	d510      	bpl.n	8006022 <HAL_TIM_IRQHandler+0xa6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006000:	68da      	ldr	r2, [r3, #12]
 8006002:	06d0      	lsls	r0, r2, #27
 8006004:	d50d      	bpl.n	8006022 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006006:	f06f 0210 	mvn.w	r2, #16
 800600a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800600c:	2208      	movs	r2, #8
 800600e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006010:	69db      	ldr	r3, [r3, #28]
 8006012:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8006016:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006018:	d04b      	beq.n	80060b2 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 800601a:	f7ff ffac 	bl	8005f76 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800601e:	2300      	movs	r3, #0
 8006020:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006022:	6823      	ldr	r3, [r4, #0]
 8006024:	691a      	ldr	r2, [r3, #16]
 8006026:	07d1      	lsls	r1, r2, #31
 8006028:	d508      	bpl.n	800603c <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800602a:	68da      	ldr	r2, [r3, #12]
 800602c:	07d2      	lsls	r2, r2, #31
 800602e:	d505      	bpl.n	800603c <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006030:	f06f 0201 	mvn.w	r2, #1
 8006034:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8006036:	4620      	mov	r0, r4
 8006038:	f7fb fc88 	bl	800194c <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800603c:	6823      	ldr	r3, [r4, #0]
 800603e:	691a      	ldr	r2, [r3, #16]
 8006040:	0610      	lsls	r0, r2, #24
 8006042:	d508      	bpl.n	8006056 <HAL_TIM_IRQHandler+0xda>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006044:	68da      	ldr	r2, [r3, #12]
 8006046:	0611      	lsls	r1, r2, #24
 8006048:	d505      	bpl.n	8006056 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800604a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800604e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8006050:	4620      	mov	r0, r4
 8006052:	f000 f8b2 	bl	80061ba <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006056:	6823      	ldr	r3, [r4, #0]
 8006058:	691a      	ldr	r2, [r3, #16]
 800605a:	0652      	lsls	r2, r2, #25
 800605c:	d508      	bpl.n	8006070 <HAL_TIM_IRQHandler+0xf4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800605e:	68da      	ldr	r2, [r3, #12]
 8006060:	0650      	lsls	r0, r2, #25
 8006062:	d505      	bpl.n	8006070 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006064:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006068:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800606a:	4620      	mov	r0, r4
 800606c:	f7ff ff85 	bl	8005f7a <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006070:	6823      	ldr	r3, [r4, #0]
 8006072:	691a      	ldr	r2, [r3, #16]
 8006074:	0691      	lsls	r1, r2, #26
 8006076:	d522      	bpl.n	80060be <HAL_TIM_IRQHandler+0x142>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006078:	68da      	ldr	r2, [r3, #12]
 800607a:	0692      	lsls	r2, r2, #26
 800607c:	d51f      	bpl.n	80060be <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800607e:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8006082:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006084:	611a      	str	r2, [r3, #16]
}
 8006086:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800608a:	f000 b895 	b.w	80061b8 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800608e:	f7ff ff71 	bl	8005f74 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006092:	4620      	mov	r0, r4
 8006094:	f7ff ff70 	bl	8005f78 <HAL_TIM_PWM_PulseFinishedCallback>
 8006098:	e783      	b.n	8005fa2 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800609a:	f7ff ff6b 	bl	8005f74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800609e:	4620      	mov	r0, r4
 80060a0:	f7ff ff6a 	bl	8005f78 <HAL_TIM_PWM_PulseFinishedCallback>
 80060a4:	e792      	b.n	8005fcc <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060a6:	f7ff ff65 	bl	8005f74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060aa:	4620      	mov	r0, r4
 80060ac:	f7ff ff64 	bl	8005f78 <HAL_TIM_PWM_PulseFinishedCallback>
 80060b0:	e7a0      	b.n	8005ff4 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060b2:	f7ff ff5f 	bl	8005f74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060b6:	4620      	mov	r0, r4
 80060b8:	f7ff ff5e 	bl	8005f78 <HAL_TIM_PWM_PulseFinishedCallback>
 80060bc:	e7af      	b.n	800601e <HAL_TIM_IRQHandler+0xa2>
}
 80060be:	bd10      	pop	{r4, pc}

080060c0 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80060c0:	4a25      	ldr	r2, [pc, #148]	@ (8006158 <TIM_Base_SetConfig+0x98>)
  tmpcr1 = TIMx->CR1;
 80060c2:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80060c4:	4290      	cmp	r0, r2
 80060c6:	d012      	beq.n	80060ee <TIM_Base_SetConfig+0x2e>
 80060c8:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80060cc:	d00f      	beq.n	80060ee <TIM_Base_SetConfig+0x2e>
 80060ce:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 80060d2:	4290      	cmp	r0, r2
 80060d4:	d00b      	beq.n	80060ee <TIM_Base_SetConfig+0x2e>
 80060d6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80060da:	4290      	cmp	r0, r2
 80060dc:	d007      	beq.n	80060ee <TIM_Base_SetConfig+0x2e>
 80060de:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80060e2:	4290      	cmp	r0, r2
 80060e4:	d003      	beq.n	80060ee <TIM_Base_SetConfig+0x2e>
 80060e6:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 80060ea:	4290      	cmp	r0, r2
 80060ec:	d108      	bne.n	8006100 <TIM_Base_SetConfig+0x40>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80060ee:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80060f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80060f4:	4313      	orrs	r3, r2

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060f6:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80060f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060fc:	4313      	orrs	r3, r2
 80060fe:	e016      	b.n	800612e <TIM_Base_SetConfig+0x6e>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006100:	4a16      	ldr	r2, [pc, #88]	@ (800615c <TIM_Base_SetConfig+0x9c>)
 8006102:	4290      	cmp	r0, r2
 8006104:	d0f7      	beq.n	80060f6 <TIM_Base_SetConfig+0x36>
 8006106:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800610a:	4290      	cmp	r0, r2
 800610c:	d0f3      	beq.n	80060f6 <TIM_Base_SetConfig+0x36>
 800610e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006112:	4290      	cmp	r0, r2
 8006114:	d0ef      	beq.n	80060f6 <TIM_Base_SetConfig+0x36>
 8006116:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 800611a:	4290      	cmp	r0, r2
 800611c:	d0eb      	beq.n	80060f6 <TIM_Base_SetConfig+0x36>
 800611e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006122:	4290      	cmp	r0, r2
 8006124:	d0e7      	beq.n	80060f6 <TIM_Base_SetConfig+0x36>
 8006126:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800612a:	4290      	cmp	r0, r2
 800612c:	d0e3      	beq.n	80060f6 <TIM_Base_SetConfig+0x36>
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800612e:	694a      	ldr	r2, [r1, #20]
 8006130:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006134:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8006136:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006138:	688b      	ldr	r3, [r1, #8]
 800613a:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800613c:	680b      	ldr	r3, [r1, #0]
 800613e:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006140:	4b05      	ldr	r3, [pc, #20]	@ (8006158 <TIM_Base_SetConfig+0x98>)
 8006142:	4298      	cmp	r0, r3
 8006144:	d003      	beq.n	800614e <TIM_Base_SetConfig+0x8e>
 8006146:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800614a:	4298      	cmp	r0, r3
 800614c:	d101      	bne.n	8006152 <TIM_Base_SetConfig+0x92>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800614e:	690b      	ldr	r3, [r1, #16]
 8006150:	6303      	str	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006152:	2301      	movs	r3, #1
 8006154:	6143      	str	r3, [r0, #20]
}
 8006156:	4770      	bx	lr
 8006158:	40010000 	.word	0x40010000
 800615c:	40014000 	.word	0x40014000

08006160 <HAL_TIM_Base_Init>:
{
 8006160:	b510      	push	{r4, lr}
  if (htim == NULL)
 8006162:	4604      	mov	r4, r0
 8006164:	b330      	cbz	r0, 80061b4 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8006166:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800616a:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800616e:	b91b      	cbnz	r3, 8006178 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8006170:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8006174:	f7ff fec2 	bl	8005efc <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8006178:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800617a:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800617c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006180:	1d21      	adds	r1, r4, #4
 8006182:	f7ff ff9d 	bl	80060c0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006186:	2301      	movs	r3, #1
 8006188:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  return HAL_OK;
 800618c:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800618e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8006192:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8006196:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800619a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800619e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80061a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80061a6:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80061aa:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 80061ae:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 80061b2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80061b4:	2001      	movs	r0, #1
 80061b6:	e7fc      	b.n	80061b2 <HAL_TIM_Base_Init+0x52>

080061b8 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 80061b8:	4770      	bx	lr

080061ba <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 80061ba:	4770      	bx	lr

080061bc <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80061bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80061c0:	e9d1 3807 	ldrd	r3, r8, [r1, #28]
 80061c4:	e9d1 2c01 	ldrd	r2, ip, [r1, #4]
 80061c8:	e9d1 7603 	ldrd	r7, r6, [r1, #12]
 80061cc:	e9d1 5405 	ldrd	r5, r4, [r1, #20]
 80061d0:	f8d1 e024 	ldr.w	lr, [r1, #36]	@ 0x24
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80061d4:	6809      	ldr	r1, [r1, #0]
 80061d6:	ea43 0308 	orr.w	r3, r3, r8
 80061da:	b981      	cbnz	r1, 80061fe <FMC_SDRAM_Init+0x42>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80061dc:	ea43 030e 	orr.w	r3, r3, lr
 80061e0:	4313      	orrs	r3, r2
 80061e2:	ea43 030c 	orr.w	r3, r3, ip
 80061e6:	433b      	orrs	r3, r7
 80061e8:	6801      	ldr	r1, [r0, #0]
 80061ea:	4333      	orrs	r3, r6
 80061ec:	432b      	orrs	r3, r5
 80061ee:	4323      	orrs	r3, r4
 80061f0:	f36f 010e 	bfc	r1, #0, #15
 80061f4:	430b      	orrs	r3, r1
 80061f6:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 80061f8:	2000      	movs	r0, #0
 80061fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80061fe:	6801      	ldr	r1, [r0, #0]
 8006200:	ea43 030e 	orr.w	r3, r3, lr
 8006204:	f421 41f8 	bic.w	r1, r1, #31744	@ 0x7c00
 8006208:	430b      	orrs	r3, r1
 800620a:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800620c:	ea42 030c 	orr.w	r3, r2, ip
 8006210:	6841      	ldr	r1, [r0, #4]
 8006212:	433b      	orrs	r3, r7
 8006214:	4333      	orrs	r3, r6
 8006216:	432b      	orrs	r3, r5
 8006218:	f421 42ff 	bic.w	r2, r1, #32640	@ 0x7f80
 800621c:	4323      	orrs	r3, r4
 800621e:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 8006222:	4313      	orrs	r3, r2
 8006224:	6043      	str	r3, [r0, #4]
 8006226:	e7e7      	b.n	80061f8 <FMC_SDRAM_Init+0x3c>

08006228 <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006228:	68cb      	ldr	r3, [r1, #12]
 800622a:	f103 3cff 	add.w	ip, r3, #4294967295
 800622e:	694b      	ldr	r3, [r1, #20]
{
 8006230:	b5f0      	push	{r4, r5, r6, r7, lr}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006232:	684c      	ldr	r4, [r1, #4]
 8006234:	688f      	ldr	r7, [r1, #8]
 8006236:	690e      	ldr	r6, [r1, #16]
 8006238:	698d      	ldr	r5, [r1, #24]
 800623a:	6809      	ldr	r1, [r1, #0]
 800623c:	3b01      	subs	r3, #1
 800623e:	051b      	lsls	r3, r3, #20
 8006240:	3c01      	subs	r4, #1
 8006242:	3f01      	subs	r7, #1
 8006244:	3e01      	subs	r6, #1
 8006246:	3d01      	subs	r5, #1
 8006248:	0124      	lsls	r4, r4, #4
 800624a:	023f      	lsls	r7, r7, #8
 800624c:	0436      	lsls	r6, r6, #16
 800624e:	062d      	lsls	r5, r5, #24
 8006250:	3901      	subs	r1, #1
 8006252:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank == FMC_SDRAM_BANK1)
 8006256:	b95a      	cbnz	r2, 8006270 <FMC_SDRAM_Timing_Init+0x48>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006258:	430b      	orrs	r3, r1
 800625a:	4323      	orrs	r3, r4
 800625c:	6882      	ldr	r2, [r0, #8]
 800625e:	433b      	orrs	r3, r7
 8006260:	4333      	orrs	r3, r6
 8006262:	432b      	orrs	r3, r5
 8006264:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 8006268:	4313      	orrs	r3, r2
 800626a:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
}
 800626c:	2000      	movs	r0, #0
 800626e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006270:	6882      	ldr	r2, [r0, #8]
 8006272:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8006276:	f422 4270 	bic.w	r2, r2, #61440	@ 0xf000
 800627a:	4313      	orrs	r3, r2
 800627c:	6083      	str	r3, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800627e:	ea44 0307 	orr.w	r3, r4, r7
 8006282:	68c2      	ldr	r2, [r0, #12]
 8006284:	430b      	orrs	r3, r1
 8006286:	4333      	orrs	r3, r6
 8006288:	432b      	orrs	r3, r5
 800628a:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 800628e:	4313      	orrs	r3, r2
 8006290:	60c3      	str	r3, [r0, #12]
 8006292:	e7eb      	b.n	800626c <FMC_SDRAM_Timing_Init+0x44>

08006294 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8006294:	b570      	push	{r4, r5, r6, lr}
 8006296:	4604      	mov	r4, r0
 8006298:	4615      	mov	r5, r2
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800629a:	6902      	ldr	r2, [r0, #16]
 800629c:	e9d1 3000 	ldrd	r3, r0, [r1]
 80062a0:	4303      	orrs	r3, r0
 80062a2:	68c8      	ldr	r0, [r1, #12]
 80062a4:	f36f 0215 	bfc	r2, #0, #22
 80062a8:	ea43 2340 	orr.w	r3, r3, r0, lsl #9
 80062ac:	4313      	orrs	r3, r2
 80062ae:	688a      	ldr	r2, [r1, #8]
 80062b0:	3a01      	subs	r2, #1
 80062b2:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 80062b6:	6123      	str	r3, [r4, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 80062b8:	f7fd fe46 	bl	8003f48 <HAL_GetTick>
 80062bc:	4606      	mov	r6, r0

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80062be:	69a0      	ldr	r0, [r4, #24]
 80062c0:	f010 0020 	ands.w	r0, r0, #32
 80062c4:	d003      	beq.n	80062ce <FMC_SDRAM_SendCommand+0x3a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062c6:	1c6b      	adds	r3, r5, #1
 80062c8:	d0f9      	beq.n	80062be <FMC_SDRAM_SendCommand+0x2a>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80062ca:	b90d      	cbnz	r5, 80062d0 <FMC_SDRAM_SendCommand+0x3c>
      {
        return HAL_TIMEOUT;
 80062cc:	2003      	movs	r0, #3
      }
    }
  }
  return HAL_OK;
}
 80062ce:	bd70      	pop	{r4, r5, r6, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80062d0:	f7fd fe3a 	bl	8003f48 <HAL_GetTick>
 80062d4:	1b80      	subs	r0, r0, r6
 80062d6:	42a8      	cmp	r0, r5
 80062d8:	d9f1      	bls.n	80062be <FMC_SDRAM_SendCommand+0x2a>
 80062da:	e7f7      	b.n	80062cc <FMC_SDRAM_SendCommand+0x38>

080062dc <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 80062dc:	6943      	ldr	r3, [r0, #20]
 80062de:	f36f 034d 	bfc	r3, #1, #13
 80062e2:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 80062e6:	6143      	str	r3, [r0, #20]

  return HAL_OK;
}
 80062e8:	2000      	movs	r0, #0
 80062ea:	4770      	bx	lr

080062ec <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80062ec:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 80062ee:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80062f2:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80062f4:	f001 fe1a 	bl	8007f2c <xTaskGetSchedulerState>
 80062f8:	2801      	cmp	r0, #1
 80062fa:	d003      	beq.n	8006304 <SysTick_Handler+0x18>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 80062fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 8006300:	f000 bbe8 	b.w	8006ad4 <xPortSysTickHandler>
}
 8006304:	bd08      	pop	{r3, pc}
	...

08006308 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006308:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800630c:	b92b      	cbnz	r3, 800631a <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 800630e:	4b06      	ldr	r3, [pc, #24]	@ (8006328 <osKernelInitialize+0x20>)
 8006310:	6818      	ldr	r0, [r3, #0]
 8006312:	b928      	cbnz	r0, 8006320 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006314:	2201      	movs	r2, #1
 8006316:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006318:	4770      	bx	lr
    stat = osErrorISR;
 800631a:	f06f 0005 	mvn.w	r0, #5
 800631e:	4770      	bx	lr
    } else {
      stat = osError;
 8006320:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8006324:	4770      	bx	lr
 8006326:	bf00      	nop
 8006328:	20001f98 	.word	0x20001f98

0800632c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800632c:	b510      	push	{r4, lr}
 800632e:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8006332:	b95c      	cbnz	r4, 800634c <osKernelStart+0x20>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 8006334:	4b08      	ldr	r3, [pc, #32]	@ (8006358 <osKernelStart+0x2c>)
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	2a01      	cmp	r2, #1
 800633a:	d10a      	bne.n	8006352 <osKernelStart+0x26>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800633c:	4a07      	ldr	r2, [pc, #28]	@ (800635c <osKernelStart+0x30>)
 800633e:	77d4      	strb	r4, [r2, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006340:	2202      	movs	r2, #2
 8006342:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006344:	f001 fb70 	bl	8007a28 <vTaskStartScheduler>
      stat = osOK;
 8006348:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 800634a:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 800634c:	f06f 0005 	mvn.w	r0, #5
 8006350:	e7fb      	b.n	800634a <osKernelStart+0x1e>
      stat = osError;
 8006352:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 8006356:	e7f8      	b.n	800634a <osKernelStart+0x1e>
 8006358:	20001f98 	.word	0x20001f98
 800635c:	e000ed00 	.word	0xe000ed00

08006360 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006360:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006362:	b087      	sub	sp, #28
 8006364:	4614      	mov	r4, r2
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006366:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006368:	460b      	mov	r3, r1
  hTask = NULL;
 800636a:	9205      	str	r2, [sp, #20]
 800636c:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8006370:	b9fa      	cbnz	r2, 80063b2 <osThreadNew+0x52>
 8006372:	b1f0      	cbz	r0, 80063b2 <osThreadNew+0x52>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 8006374:	b354      	cbz	r4, 80063cc <osThreadNew+0x6c>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8006376:	69a5      	ldr	r5, [r4, #24]
 8006378:	b125      	cbz	r5, 8006384 <osThreadNew+0x24>
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800637a:	1e69      	subs	r1, r5, #1
 800637c:	2937      	cmp	r1, #55	@ 0x37
 800637e:	d902      	bls.n	8006386 <osThreadNew+0x26>
        return (NULL);
 8006380:	2000      	movs	r0, #0
 8006382:	e017      	b.n	80063b4 <osThreadNew+0x54>
    prio  = (UBaseType_t)osPriorityNormal;
 8006384:	2518      	movs	r5, #24
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006386:	6862      	ldr	r2, [r4, #4]
 8006388:	07d2      	lsls	r2, r2, #31
 800638a:	d4f9      	bmi.n	8006380 <osThreadNew+0x20>
      }

      if (attr->stack_size > 0U) {
 800638c:	6966      	ldr	r6, [r4, #20]
 800638e:	b19e      	cbz	r6, 80063b8 <osThreadNew+0x58>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006390:	08b2      	lsrs	r2, r6, #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006392:	e9d4 7c02 	ldrd	r7, ip, [r4, #8]
      if (attr->name != NULL) {
 8006396:	6821      	ldr	r1, [r4, #0]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006398:	b187      	cbz	r7, 80063bc <osThreadNew+0x5c>
 800639a:	f1bc 0f5f 	cmp.w	ip, #95	@ 0x5f
 800639e:	d908      	bls.n	80063b2 <osThreadNew+0x52>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80063a0:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80063a2:	b134      	cbz	r4, 80063b2 <osThreadNew+0x52>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80063a4:	b12e      	cbz	r6, 80063b2 <osThreadNew+0x52>
      mem = 0;
    }

    if (mem == 1) {
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80063a6:	e9cd 4701 	strd	r4, r7, [sp, #4]
 80063aa:	9500      	str	r5, [sp, #0]
 80063ac:	f001 fad5 	bl	800795a <xTaskCreateStatic>
 80063b0:	9005      	str	r0, [sp, #20]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80063b2:	9805      	ldr	r0, [sp, #20]
}
 80063b4:	b007      	add	sp, #28
 80063b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 80063b8:	2280      	movs	r2, #128	@ 0x80
 80063ba:	e7ea      	b.n	8006392 <osThreadNew+0x32>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80063bc:	f1bc 0f00 	cmp.w	ip, #0
 80063c0:	d1f7      	bne.n	80063b2 <osThreadNew+0x52>
 80063c2:	6924      	ldr	r4, [r4, #16]
 80063c4:	2c00      	cmp	r4, #0
 80063c6:	d1f4      	bne.n	80063b2 <osThreadNew+0x52>
 80063c8:	460c      	mov	r4, r1
 80063ca:	e001      	b.n	80063d0 <osThreadNew+0x70>
    prio  = (UBaseType_t)osPriorityNormal;
 80063cc:	2518      	movs	r5, #24
    stack = configMINIMAL_STACK_SIZE;
 80063ce:	2280      	movs	r2, #128	@ 0x80
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80063d0:	a905      	add	r1, sp, #20
 80063d2:	e9cd 5100 	strd	r5, r1, [sp]
 80063d6:	b292      	uxth	r2, r2
 80063d8:	4621      	mov	r1, r4
 80063da:	f001 faf6 	bl	80079ca <xTaskCreate>
 80063de:	2801      	cmp	r0, #1
            hTask = NULL;
 80063e0:	bf1c      	itt	ne
 80063e2:	2300      	movne	r3, #0
 80063e4:	9305      	strne	r3, [sp, #20]
 80063e6:	e7e4      	b.n	80063b2 <osThreadNew+0x52>

080063e8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80063e8:	b508      	push	{r3, lr}
 80063ea:	f3ef 8205 	mrs	r2, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 80063ee:	b922      	cbnz	r2, 80063fa <osDelay+0x12>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 80063f0:	b108      	cbz	r0, 80063f6 <osDelay+0xe>
      vTaskDelay(ticks);
 80063f2:	f001 fc77 	bl	8007ce4 <vTaskDelay>
    stat = osOK;
 80063f6:	2000      	movs	r0, #0
    }
  }

  return (stat);
}
 80063f8:	bd08      	pop	{r3, pc}
    stat = osErrorISR;
 80063fa:	f06f 0005 	mvn.w	r0, #5
  return (stat);
 80063fe:	e7fb      	b.n	80063f8 <osDelay+0x10>

08006400 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8006400:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006402:	4604      	mov	r4, r0
 8006404:	460e      	mov	r6, r1
 8006406:	4615      	mov	r5, r2
 8006408:	f3ef 8205 	mrs	r2, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800640c:	b942      	cbnz	r2, 8006420 <osSemaphoreNew+0x20>
 800640e:	b138      	cbz	r0, 8006420 <osSemaphoreNew+0x20>
 8006410:	4288      	cmp	r0, r1
 8006412:	d305      	bcc.n	8006420 <osSemaphoreNew+0x20>
    mem = -1;

    if (attr != NULL) {
 8006414:	b155      	cbz	r5, 800642c <osSemaphoreNew+0x2c>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006416:	e9d5 3702 	ldrd	r3, r7, [r5, #8]
 800641a:	b12b      	cbz	r3, 8006428 <osSemaphoreNew+0x28>
 800641c:	2f4f      	cmp	r7, #79	@ 0x4f
 800641e:	d822      	bhi.n	8006466 <osSemaphoreNew+0x66>
  hSemaphore = NULL;
 8006420:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 8006422:	4620      	mov	r0, r4
 8006424:	b003      	add	sp, #12
 8006426:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006428:	2f00      	cmp	r7, #0
 800642a:	d1f9      	bne.n	8006420 <osSemaphoreNew+0x20>
      if (max_count == 1U) {
 800642c:	2c01      	cmp	r4, #1
 800642e:	d00c      	beq.n	800644a <osSemaphoreNew+0x4a>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8006430:	4620      	mov	r0, r4
 8006432:	4631      	mov	r1, r6
 8006434:	f000 fd86 	bl	8006f44 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 8006438:	4604      	mov	r4, r0
 800643a:	2800      	cmp	r0, #0
 800643c:	d0f0      	beq.n	8006420 <osSemaphoreNew+0x20>
        if (attr != NULL) {
 800643e:	b985      	cbnz	r5, 8006462 <osSemaphoreNew+0x62>
        vQueueAddToRegistry (hSemaphore, name);
 8006440:	4629      	mov	r1, r5
 8006442:	4620      	mov	r0, r4
 8006444:	f001 f8c4 	bl	80075d0 <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 8006448:	e7eb      	b.n	8006422 <osSemaphoreNew+0x22>
            hSemaphore = xSemaphoreCreateBinary();
 800644a:	2203      	movs	r2, #3
 800644c:	2100      	movs	r1, #0
 800644e:	2001      	movs	r0, #1
 8006450:	f000 fd2f 	bl	8006eb2 <xQueueGenericCreate>
 8006454:	e00e      	b.n	8006474 <osSemaphoreNew+0x74>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8006456:	461a      	mov	r2, r3
 8006458:	f000 fd52 	bl	8006f00 <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 800645c:	4604      	mov	r4, r0
 800645e:	2800      	cmp	r0, #0
 8006460:	d0de      	beq.n	8006420 <osSemaphoreNew+0x20>
          name = attr->name;
 8006462:	682d      	ldr	r5, [r5, #0]
 8006464:	e7ec      	b.n	8006440 <osSemaphoreNew+0x40>
      if (max_count == 1U) {
 8006466:	2801      	cmp	r0, #1
 8006468:	d1f5      	bne.n	8006456 <osSemaphoreNew+0x56>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800646a:	2103      	movs	r1, #3
 800646c:	9100      	str	r1, [sp, #0]
 800646e:	4611      	mov	r1, r2
 8006470:	f000 fcd1 	bl	8006e16 <xQueueGenericCreateStatic>
            hSemaphore = xSemaphoreCreateBinary();
 8006474:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8006476:	2800      	cmp	r0, #0
 8006478:	d0d2      	beq.n	8006420 <osSemaphoreNew+0x20>
 800647a:	2e00      	cmp	r6, #0
 800647c:	d0df      	beq.n	800643e <osSemaphoreNew+0x3e>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800647e:	2300      	movs	r3, #0
 8006480:	461a      	mov	r2, r3
 8006482:	4619      	mov	r1, r3
 8006484:	f000 fd7c 	bl	8006f80 <xQueueGenericSend>
 8006488:	2801      	cmp	r0, #1
 800648a:	d0d8      	beq.n	800643e <osSemaphoreNew+0x3e>
            vSemaphoreDelete (hSemaphore);
 800648c:	4620      	mov	r0, r4
 800648e:	f001 f8c9 	bl	8007624 <vQueueDelete>
      if (hSemaphore != NULL) {
 8006492:	e7c5      	b.n	8006420 <osSemaphoreNew+0x20>

08006494 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8006494:	b513      	push	{r0, r1, r4, lr}
 8006496:	460c      	mov	r4, r1
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8006498:	b328      	cbz	r0, 80064e6 <osSemaphoreAcquire+0x52>
 800649a:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800649e:	b1cb      	cbz	r3, 80064d4 <osSemaphoreAcquire+0x40>
    if (timeout != 0U) {
 80064a0:	bb09      	cbnz	r1, 80064e6 <osSemaphoreAcquire+0x52>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80064a2:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 80064a4:	9101      	str	r1, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80064a6:	f001 f826 	bl	80074f6 <xQueueReceiveFromISR>
 80064aa:	2801      	cmp	r0, #1
 80064ac:	d003      	beq.n	80064b6 <osSemaphoreAcquire+0x22>
        stat = osErrorResource;
 80064ae:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 80064b2:	b002      	add	sp, #8
 80064b4:	bd10      	pop	{r4, pc}
        portYIELD_FROM_ISR (yield);
 80064b6:	9b01      	ldr	r3, [sp, #4]
 80064b8:	b90b      	cbnz	r3, 80064be <osSemaphoreAcquire+0x2a>
  stat = osOK;
 80064ba:	2000      	movs	r0, #0
 80064bc:	e7f9      	b.n	80064b2 <osSemaphoreAcquire+0x1e>
        portYIELD_FROM_ISR (yield);
 80064be:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80064c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80064c6:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80064ca:	f3bf 8f4f 	dsb	sy
 80064ce:	f3bf 8f6f 	isb	sy
 80064d2:	e7f2      	b.n	80064ba <osSemaphoreAcquire+0x26>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80064d4:	f000 ff52 	bl	800737c <xQueueSemaphoreTake>
 80064d8:	2801      	cmp	r0, #1
 80064da:	d0ee      	beq.n	80064ba <osSemaphoreAcquire+0x26>
      if (timeout != 0U) {
 80064dc:	2c00      	cmp	r4, #0
 80064de:	d0e6      	beq.n	80064ae <osSemaphoreAcquire+0x1a>
        stat = osErrorTimeout;
 80064e0:	f06f 0001 	mvn.w	r0, #1
 80064e4:	e7e5      	b.n	80064b2 <osSemaphoreAcquire+0x1e>
    stat = osErrorParameter;
 80064e6:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 80064ea:	e7e2      	b.n	80064b2 <osSemaphoreAcquire+0x1e>

080064ec <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80064ec:	b507      	push	{r0, r1, r2, lr}
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 80064ee:	b318      	cbz	r0, 8006538 <osSemaphoreRelease+0x4c>
 80064f0:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 80064f4:	b1cb      	cbz	r3, 800652a <osSemaphoreRelease+0x3e>
    yield = pdFALSE;
 80064f6:	2300      	movs	r3, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80064f8:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 80064fa:	9301      	str	r3, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80064fc:	f000 fe4f 	bl	800719e <xQueueGiveFromISR>
 8006500:	2801      	cmp	r0, #1
 8006502:	d004      	beq.n	800650e <osSemaphoreRelease+0x22>
      portYIELD_FROM_ISR (yield);
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
      stat = osErrorResource;
 8006504:	f06f 0002 	mvn.w	r0, #2
    }
  }

  return (stat);
}
 8006508:	b003      	add	sp, #12
 800650a:	f85d fb04 	ldr.w	pc, [sp], #4
      portYIELD_FROM_ISR (yield);
 800650e:	9b01      	ldr	r3, [sp, #4]
 8006510:	b14b      	cbz	r3, 8006526 <osSemaphoreRelease+0x3a>
 8006512:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006516:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800651a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800651e:	f3bf 8f4f 	dsb	sy
 8006522:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8006526:	2000      	movs	r0, #0
 8006528:	e7ee      	b.n	8006508 <osSemaphoreRelease+0x1c>
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800652a:	461a      	mov	r2, r3
 800652c:	4619      	mov	r1, r3
 800652e:	f000 fd27 	bl	8006f80 <xQueueGenericSend>
 8006532:	2801      	cmp	r0, #1
 8006534:	d0f7      	beq.n	8006526 <osSemaphoreRelease+0x3a>
 8006536:	e7e5      	b.n	8006504 <osSemaphoreRelease+0x18>
    stat = osErrorParameter;
 8006538:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800653c:	e7e4      	b.n	8006508 <osSemaphoreRelease+0x1c>

0800653e <osSemaphoreGetCount>:

uint32_t osSemaphoreGetCount (osSemaphoreId_t semaphore_id) {
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
  uint32_t count;

  if (hSemaphore == NULL) {
 800653e:	b130      	cbz	r0, 800654e <osSemaphoreGetCount+0x10>
 8006540:	f3ef 8305 	mrs	r3, IPSR
    count = 0U;
  }
  else if (IS_IRQ()) {
 8006544:	b10b      	cbz	r3, 800654a <osSemaphoreGetCount+0xc>
    count = uxQueueMessagesWaitingFromISR (hSemaphore);
 8006546:	f001 b836 	b.w	80075b6 <uxQueueMessagesWaitingFromISR>
  } else {
    count = (uint32_t)uxSemaphoreGetCount (hSemaphore);
 800654a:	f001 b821 	b.w	8007590 <uxQueueMessagesWaiting>
  }

  return (count);
}
 800654e:	4770      	bx	lr

08006550 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006550:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006552:	4605      	mov	r5, r0
 8006554:	460e      	mov	r6, r1
 8006556:	4614      	mov	r4, r2
 8006558:	f3ef 8705 	mrs	r7, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800655c:	b11f      	cbz	r7, 8006566 <osMessageQueueNew+0x16>
  hQueue = NULL;
 800655e:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 8006560:	4628      	mov	r0, r5
 8006562:	b003      	add	sp, #12
 8006564:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006566:	2800      	cmp	r0, #0
 8006568:	d0f9      	beq.n	800655e <osMessageQueueNew+0xe>
 800656a:	2900      	cmp	r1, #0
 800656c:	d0f7      	beq.n	800655e <osMessageQueueNew+0xe>
    if (attr != NULL) {
 800656e:	b1da      	cbz	r2, 80065a8 <osMessageQueueNew+0x58>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006570:	e9d2 3202 	ldrd	r3, r2, [r2, #8]
 8006574:	b183      	cbz	r3, 8006598 <osMessageQueueNew+0x48>
 8006576:	2a4f      	cmp	r2, #79	@ 0x4f
 8006578:	d9f1      	bls.n	800655e <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800657a:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800657c:	2a00      	cmp	r2, #0
 800657e:	d0ee      	beq.n	800655e <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006580:	6966      	ldr	r6, [r4, #20]
 8006582:	434d      	muls	r5, r1
 8006584:	42ae      	cmp	r6, r5
 8006586:	d3ea      	bcc.n	800655e <osMessageQueueNew+0xe>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006588:	9700      	str	r7, [sp, #0]
 800658a:	f000 fc44 	bl	8006e16 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 800658e:	4605      	mov	r5, r0
 8006590:	2800      	cmp	r0, #0
 8006592:	d0e4      	beq.n	800655e <osMessageQueueNew+0xe>
        name = attr->name;
 8006594:	6824      	ldr	r4, [r4, #0]
 8006596:	e011      	b.n	80065bc <osMessageQueueNew+0x6c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006598:	2a00      	cmp	r2, #0
 800659a:	d1e0      	bne.n	800655e <osMessageQueueNew+0xe>
 800659c:	6923      	ldr	r3, [r4, #16]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d1dd      	bne.n	800655e <osMessageQueueNew+0xe>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80065a2:	6963      	ldr	r3, [r4, #20]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d1da      	bne.n	800655e <osMessageQueueNew+0xe>
          hQueue = xQueueCreate (msg_count, msg_size);
 80065a8:	4628      	mov	r0, r5
 80065aa:	2200      	movs	r2, #0
 80065ac:	4631      	mov	r1, r6
 80065ae:	f000 fc80 	bl	8006eb2 <xQueueGenericCreate>
    if (hQueue != NULL) {
 80065b2:	4605      	mov	r5, r0
 80065b4:	2800      	cmp	r0, #0
 80065b6:	d0d2      	beq.n	800655e <osMessageQueueNew+0xe>
      if (attr != NULL) {
 80065b8:	2c00      	cmp	r4, #0
 80065ba:	d1eb      	bne.n	8006594 <osMessageQueueNew+0x44>
      vQueueAddToRegistry (hQueue, name);
 80065bc:	4621      	mov	r1, r4
 80065be:	4628      	mov	r0, r5
 80065c0:	f001 f806 	bl	80075d0 <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 80065c4:	e7cc      	b.n	8006560 <osMessageQueueNew+0x10>

080065c6 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80065c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80065c8:	461c      	mov	r4, r3
 80065ca:	f3ef 8605 	mrs	r6, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 80065ce:	b1de      	cbz	r6, 8006608 <osMessageQueuePut+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80065d0:	b338      	cbz	r0, 8006622 <osMessageQueuePut+0x5c>
 80065d2:	b331      	cbz	r1, 8006622 <osMessageQueuePut+0x5c>
 80065d4:	bb2b      	cbnz	r3, 8006622 <osMessageQueuePut+0x5c>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80065d6:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 80065d8:	9301      	str	r3, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80065da:	f000 fd83 	bl	80070e4 <xQueueGenericSendFromISR>
 80065de:	2801      	cmp	r0, #1
 80065e0:	d003      	beq.n	80065ea <osMessageQueuePut+0x24>
        stat = osErrorResource;
 80065e2:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 80065e6:	b002      	add	sp, #8
 80065e8:	bd70      	pop	{r4, r5, r6, pc}
        portYIELD_FROM_ISR (yield);
 80065ea:	9b01      	ldr	r3, [sp, #4]
 80065ec:	b90b      	cbnz	r3, 80065f2 <osMessageQueuePut+0x2c>
  stat = osOK;
 80065ee:	2000      	movs	r0, #0
 80065f0:	e7f9      	b.n	80065e6 <osMessageQueuePut+0x20>
        portYIELD_FROM_ISR (yield);
 80065f2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80065f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80065fa:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80065fe:	f3bf 8f4f 	dsb	sy
 8006602:	f3bf 8f6f 	isb	sy
 8006606:	e7f2      	b.n	80065ee <osMessageQueuePut+0x28>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006608:	b158      	cbz	r0, 8006622 <osMessageQueuePut+0x5c>
 800660a:	b151      	cbz	r1, 8006622 <osMessageQueuePut+0x5c>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800660c:	4633      	mov	r3, r6
 800660e:	4622      	mov	r2, r4
 8006610:	f000 fcb6 	bl	8006f80 <xQueueGenericSend>
 8006614:	2801      	cmp	r0, #1
 8006616:	d0ea      	beq.n	80065ee <osMessageQueuePut+0x28>
        if (timeout != 0U) {
 8006618:	2c00      	cmp	r4, #0
 800661a:	d0e2      	beq.n	80065e2 <osMessageQueuePut+0x1c>
          stat = osErrorTimeout;
 800661c:	f06f 0001 	mvn.w	r0, #1
 8006620:	e7e1      	b.n	80065e6 <osMessageQueuePut+0x20>
      stat = osErrorParameter;
 8006622:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8006626:	e7de      	b.n	80065e6 <osMessageQueuePut+0x20>

08006628 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006628:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800662a:	461c      	mov	r4, r3
 800662c:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8006630:	b1db      	cbz	r3, 800666a <osMessageQueueGet+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006632:	b330      	cbz	r0, 8006682 <osMessageQueueGet+0x5a>
 8006634:	b329      	cbz	r1, 8006682 <osMessageQueueGet+0x5a>
 8006636:	bb24      	cbnz	r4, 8006682 <osMessageQueueGet+0x5a>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006638:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800663a:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800663c:	f000 ff5b 	bl	80074f6 <xQueueReceiveFromISR>
 8006640:	2801      	cmp	r0, #1
 8006642:	d003      	beq.n	800664c <osMessageQueueGet+0x24>
        stat = osErrorResource;
 8006644:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 8006648:	b003      	add	sp, #12
 800664a:	bd30      	pop	{r4, r5, pc}
        portYIELD_FROM_ISR (yield);
 800664c:	9b01      	ldr	r3, [sp, #4]
 800664e:	b90b      	cbnz	r3, 8006654 <osMessageQueueGet+0x2c>
  stat = osOK;
 8006650:	2000      	movs	r0, #0
 8006652:	e7f9      	b.n	8006648 <osMessageQueueGet+0x20>
        portYIELD_FROM_ISR (yield);
 8006654:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006658:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800665c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006660:	f3bf 8f4f 	dsb	sy
 8006664:	f3bf 8f6f 	isb	sy
 8006668:	e7f2      	b.n	8006650 <osMessageQueueGet+0x28>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800666a:	b150      	cbz	r0, 8006682 <osMessageQueueGet+0x5a>
 800666c:	b149      	cbz	r1, 8006682 <osMessageQueueGet+0x5a>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800666e:	4622      	mov	r2, r4
 8006670:	f000 fde6 	bl	8007240 <xQueueReceive>
 8006674:	2801      	cmp	r0, #1
 8006676:	d0eb      	beq.n	8006650 <osMessageQueueGet+0x28>
        if (timeout != 0U) {
 8006678:	2c00      	cmp	r4, #0
 800667a:	d0e3      	beq.n	8006644 <osMessageQueueGet+0x1c>
          stat = osErrorTimeout;
 800667c:	f06f 0001 	mvn.w	r0, #1
 8006680:	e7e2      	b.n	8006648 <osMessageQueueGet+0x20>
      stat = osErrorParameter;
 8006682:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8006686:	e7df      	b.n	8006648 <osMessageQueueGet+0x20>

08006688 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8006688:	f7ff bf59 	b.w	800653e <osSemaphoreGetCount>

0800668c <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800668c:	4b03      	ldr	r3, [pc, #12]	@ (800669c <vApplicationGetIdleTaskMemory+0x10>)
 800668e:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006690:	4b03      	ldr	r3, [pc, #12]	@ (80066a0 <vApplicationGetIdleTaskMemory+0x14>)
 8006692:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006694:	2380      	movs	r3, #128	@ 0x80
 8006696:	6013      	str	r3, [r2, #0]
}
 8006698:	4770      	bx	lr
 800669a:	bf00      	nop
 800669c:	20001f38 	.word	0x20001f38
 80066a0:	20001d38 	.word	0x20001d38

080066a4 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80066a4:	4b03      	ldr	r3, [pc, #12]	@ (80066b4 <vApplicationGetTimerTaskMemory+0x10>)
 80066a6:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80066a8:	4b03      	ldr	r3, [pc, #12]	@ (80066b8 <vApplicationGetTimerTaskMemory+0x14>)
 80066aa:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80066ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80066b0:	6013      	str	r3, [r2, #0]
}
 80066b2:	4770      	bx	lr
 80066b4:	20001cd8 	.word	0x20001cd8
 80066b8:	200018d8 	.word	0x200018d8

080066bc <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80066bc:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80066be:	4b10      	ldr	r3, [pc, #64]	@ (8006700 <prvInsertBlockIntoFreeList+0x44>)
 80066c0:	461a      	mov	r2, r3
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4283      	cmp	r3, r0
 80066c6:	d3fb      	bcc.n	80066c0 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80066c8:	6854      	ldr	r4, [r2, #4]
 80066ca:	1911      	adds	r1, r2, r4
 80066cc:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80066ce:	bf01      	itttt	eq
 80066d0:	6841      	ldreq	r1, [r0, #4]
		pxBlockToInsert = pxIterator;
 80066d2:	4610      	moveq	r0, r2
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80066d4:	1909      	addeq	r1, r1, r4
 80066d6:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80066d8:	6844      	ldr	r4, [r0, #4]
 80066da:	1901      	adds	r1, r0, r4
 80066dc:	428b      	cmp	r3, r1
 80066de:	d10c      	bne.n	80066fa <prvInsertBlockIntoFreeList+0x3e>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80066e0:	4908      	ldr	r1, [pc, #32]	@ (8006704 <prvInsertBlockIntoFreeList+0x48>)
 80066e2:	6809      	ldr	r1, [r1, #0]
 80066e4:	428b      	cmp	r3, r1
 80066e6:	d003      	beq.n	80066f0 <prvInsertBlockIntoFreeList+0x34>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80066e8:	6859      	ldr	r1, [r3, #4]
 80066ea:	4421      	add	r1, r4
 80066ec:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80066ee:	6819      	ldr	r1, [r3, #0]
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80066f0:	6001      	str	r1, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80066f2:	4290      	cmp	r0, r2
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80066f4:	bf18      	it	ne
 80066f6:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80066f8:	bd10      	pop	{r4, pc}
 80066fa:	4619      	mov	r1, r3
 80066fc:	e7f8      	b.n	80066f0 <prvInsertBlockIntoFreeList+0x34>
 80066fe:	bf00      	nop
 8006700:	20001fb4 	.word	0x20001fb4
 8006704:	20001fb0 	.word	0x20001fb0

08006708 <pvPortMalloc>:
{
 8006708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800670c:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800670e:	f001 f9d1 	bl	8007ab4 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8006712:	4942      	ldr	r1, [pc, #264]	@ (800681c <pvPortMalloc+0x114>)
 8006714:	4d42      	ldr	r5, [pc, #264]	@ (8006820 <pvPortMalloc+0x118>)
 8006716:	680b      	ldr	r3, [r1, #0]
 8006718:	bb0b      	cbnz	r3, 800675e <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 800671a:	4a42      	ldr	r2, [pc, #264]	@ (8006824 <pvPortMalloc+0x11c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800671c:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800671e:	bf1f      	itttt	ne
 8006720:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006722:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006726:	f502 3280 	addne.w	r2, r2, #65536	@ 0x10000
 800672a:	1a13      	subne	r3, r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800672c:	bf0c      	ite	eq
 800672e:	f44f 3380 	moveq.w	r3, #65536	@ 0x10000
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006732:	4602      	movne	r2, r0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006734:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006736:	4e3c      	ldr	r6, [pc, #240]	@ (8006828 <pvPortMalloc+0x120>)
	uxAddress -= xHeapStructSize;
 8006738:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800673a:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 800673e:	2000      	movs	r0, #0
 8006740:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006742:	6032      	str	r2, [r6, #0]
	pxEnd->pxNextFreeBlock = NULL;
 8006744:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006748:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800674a:	e9c2 3000 	strd	r3, r0, [r2]
	pxEnd = ( void * ) uxAddress;
 800674e:	600b      	str	r3, [r1, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006750:	4b36      	ldr	r3, [pc, #216]	@ (800682c <pvPortMalloc+0x124>)
 8006752:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006754:	4b36      	ldr	r3, [pc, #216]	@ (8006830 <pvPortMalloc+0x128>)
 8006756:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006758:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800675c:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800675e:	682e      	ldr	r6, [r5, #0]
 8006760:	4226      	tst	r6, r4
 8006762:	d155      	bne.n	8006810 <pvPortMalloc+0x108>
			if( xWantedSize > 0 )
 8006764:	2c00      	cmp	r4, #0
 8006766:	d046      	beq.n	80067f6 <pvPortMalloc+0xee>
				xWantedSize += xHeapStructSize;
 8006768:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800676c:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800676e:	bf1c      	itt	ne
 8006770:	f023 0307 	bicne.w	r3, r3, #7
 8006774:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006776:	2b00      	cmp	r3, #0
 8006778:	d04a      	beq.n	8006810 <pvPortMalloc+0x108>
 800677a:	4f2d      	ldr	r7, [pc, #180]	@ (8006830 <pvPortMalloc+0x128>)
 800677c:	683c      	ldr	r4, [r7, #0]
 800677e:	429c      	cmp	r4, r3
 8006780:	d346      	bcc.n	8006810 <pvPortMalloc+0x108>
				pxBlock = xStart.pxNextFreeBlock;
 8006782:	4a29      	ldr	r2, [pc, #164]	@ (8006828 <pvPortMalloc+0x120>)
 8006784:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006786:	6868      	ldr	r0, [r5, #4]
 8006788:	4298      	cmp	r0, r3
 800678a:	d204      	bcs.n	8006796 <pvPortMalloc+0x8e>
 800678c:	f8d5 c000 	ldr.w	ip, [r5]
 8006790:	f1bc 0f00 	cmp.w	ip, #0
 8006794:	d115      	bne.n	80067c2 <pvPortMalloc+0xba>
				if( pxBlock != pxEnd )
 8006796:	6809      	ldr	r1, [r1, #0]
 8006798:	42a9      	cmp	r1, r5
 800679a:	d039      	beq.n	8006810 <pvPortMalloc+0x108>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800679c:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800679e:	f8d2 8000 	ldr.w	r8, [r2]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80067a2:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80067a4:	1ac2      	subs	r2, r0, r3
 80067a6:	2a10      	cmp	r2, #16
 80067a8:	d912      	bls.n	80067d0 <pvPortMalloc+0xc8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80067aa:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80067ac:	0741      	lsls	r1, r0, #29
 80067ae:	d00b      	beq.n	80067c8 <pvPortMalloc+0xc0>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80067b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067b4:	f383 8811 	msr	BASEPRI, r3
 80067b8:	f3bf 8f6f 	isb	sy
 80067bc:	f3bf 8f4f 	dsb	sy
 80067c0:	e7fe      	b.n	80067c0 <pvPortMalloc+0xb8>
					pxPreviousBlock = pxBlock;
 80067c2:	462a      	mov	r2, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 80067c4:	4665      	mov	r5, ip
 80067c6:	e7de      	b.n	8006786 <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80067c8:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80067ca:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80067cc:	f7ff ff76 	bl	80066bc <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80067d0:	686a      	ldr	r2, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80067d2:	4916      	ldr	r1, [pc, #88]	@ (800682c <pvPortMalloc+0x124>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80067d4:	1aa4      	subs	r4, r4, r2
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80067d6:	4316      	orrs	r6, r2
					xNumberOfSuccessfulAllocations++;
 80067d8:	4a16      	ldr	r2, [pc, #88]	@ (8006834 <pvPortMalloc+0x12c>)
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80067da:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80067dc:	603c      	str	r4, [r7, #0]
					pxBlock->pxNextFreeBlock = NULL;
 80067de:	2300      	movs	r3, #0
 80067e0:	602b      	str	r3, [r5, #0]
					xNumberOfSuccessfulAllocations++;
 80067e2:	6813      	ldr	r3, [r2, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80067e4:	606e      	str	r6, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80067e6:	4284      	cmp	r4, r0
					xNumberOfSuccessfulAllocations++;
 80067e8:	f103 0301 	add.w	r3, r3, #1
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80067ec:	bf38      	it	cc
 80067ee:	600c      	strcc	r4, [r1, #0]
					xNumberOfSuccessfulAllocations++;
 80067f0:	6013      	str	r3, [r2, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80067f2:	f108 0408 	add.w	r4, r8, #8
	( void ) xTaskResumeAll();
 80067f6:	f001 fa01 	bl	8007bfc <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80067fa:	0763      	lsls	r3, r4, #29
 80067fc:	d00a      	beq.n	8006814 <pvPortMalloc+0x10c>
 80067fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006802:	f383 8811 	msr	BASEPRI, r3
 8006806:	f3bf 8f6f 	isb	sy
 800680a:	f3bf 8f4f 	dsb	sy
 800680e:	e7fe      	b.n	800680e <pvPortMalloc+0x106>
void *pvReturn = NULL;
 8006810:	2400      	movs	r4, #0
 8006812:	e7f0      	b.n	80067f6 <pvPortMalloc+0xee>
}
 8006814:	4620      	mov	r0, r4
 8006816:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800681a:	bf00      	nop
 800681c:	20001fb0 	.word	0x20001fb0
 8006820:	20001f9c 	.word	0x20001f9c
 8006824:	20001fbc 	.word	0x20001fbc
 8006828:	20001fb4 	.word	0x20001fb4
 800682c:	20001fa8 	.word	0x20001fa8
 8006830:	20001fac 	.word	0x20001fac
 8006834:	20001fa4 	.word	0x20001fa4

08006838 <vPortFree>:
{
 8006838:	b510      	push	{r4, lr}
	if( pv != NULL )
 800683a:	4604      	mov	r4, r0
 800683c:	b390      	cbz	r0, 80068a4 <vPortFree+0x6c>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800683e:	4a1a      	ldr	r2, [pc, #104]	@ (80068a8 <vPortFree+0x70>)
 8006840:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8006844:	6812      	ldr	r2, [r2, #0]
 8006846:	4213      	tst	r3, r2
 8006848:	d108      	bne.n	800685c <vPortFree+0x24>
 800684a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800684e:	f383 8811 	msr	BASEPRI, r3
 8006852:	f3bf 8f6f 	isb	sy
 8006856:	f3bf 8f4f 	dsb	sy
 800685a:	e7fe      	b.n	800685a <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800685c:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8006860:	b141      	cbz	r1, 8006874 <vPortFree+0x3c>
 8006862:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006866:	f383 8811 	msr	BASEPRI, r3
 800686a:	f3bf 8f6f 	isb	sy
 800686e:	f3bf 8f4f 	dsb	sy
 8006872:	e7fe      	b.n	8006872 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006874:	ea23 0302 	bic.w	r3, r3, r2
 8006878:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800687c:	f001 f91a 	bl	8007ab4 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006880:	4a0a      	ldr	r2, [pc, #40]	@ (80068ac <vPortFree+0x74>)
 8006882:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8006886:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006888:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800688c:	440b      	add	r3, r1
 800688e:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006890:	f7ff ff14 	bl	80066bc <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006894:	4a06      	ldr	r2, [pc, #24]	@ (80068b0 <vPortFree+0x78>)
 8006896:	6813      	ldr	r3, [r2, #0]
}
 8006898:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					xNumberOfSuccessfulFrees++;
 800689c:	3301      	adds	r3, #1
 800689e:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 80068a0:	f001 b9ac 	b.w	8007bfc <xTaskResumeAll>
}
 80068a4:	bd10      	pop	{r4, pc}
 80068a6:	bf00      	nop
 80068a8:	20001f9c 	.word	0x20001f9c
 80068ac:	20001fac 	.word	0x20001fac
 80068b0:	20001fa0 	.word	0x20001fa0

080068b4 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80068b4:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80068b8:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80068bc:	e9c0 2302 	strd	r2, r3, [r0, #8]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80068c0:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80068c2:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80068c4:	2300      	movs	r3, #0
 80068c6:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80068c8:	4770      	bx	lr

080068ca <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80068ca:	2300      	movs	r3, #0
 80068cc:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80068ce:	4770      	bx	lr

080068d0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80068d0:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80068d2:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80068d4:	689a      	ldr	r2, [r3, #8]
 80068d6:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80068d8:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80068da:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80068dc:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 80068de:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80068e0:	3301      	adds	r3, #1
 80068e2:	6003      	str	r3, [r0, #0]
}
 80068e4:	4770      	bx	lr

080068e6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80068e6:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80068e8:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80068ea:	1c63      	adds	r3, r4, #1
 80068ec:	d10a      	bne.n	8006904 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80068ee:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80068f0:	685a      	ldr	r2, [r3, #4]
 80068f2:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80068f4:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80068f6:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80068f8:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80068fa:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 80068fc:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80068fe:	3301      	adds	r3, #1
 8006900:	6003      	str	r3, [r0, #0]
}
 8006902:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006904:	f100 0208 	add.w	r2, r0, #8
 8006908:	4613      	mov	r3, r2
 800690a:	6852      	ldr	r2, [r2, #4]
 800690c:	6815      	ldr	r5, [r2, #0]
 800690e:	42a5      	cmp	r5, r4
 8006910:	d9fa      	bls.n	8006908 <vListInsert+0x22>
 8006912:	e7ed      	b.n	80068f0 <vListInsert+0xa>

08006914 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006914:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
List_t * const pxList = pxItemToRemove->pxContainer;
 8006918:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800691a:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800691c:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800691e:	6859      	ldr	r1, [r3, #4]
 8006920:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006922:	bf08      	it	eq
 8006924:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006926:	2200      	movs	r2, #0
 8006928:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	3a01      	subs	r2, #1
 800692e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006930:	6818      	ldr	r0, [r3, #0]
}
 8006932:	4770      	bx	lr

08006934 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006934:	4808      	ldr	r0, [pc, #32]	@ (8006958 <prvPortStartFirstTask+0x24>)
 8006936:	6800      	ldr	r0, [r0, #0]
 8006938:	6800      	ldr	r0, [r0, #0]
 800693a:	f380 8808 	msr	MSP, r0
 800693e:	f04f 0000 	mov.w	r0, #0
 8006942:	f380 8814 	msr	CONTROL, r0
 8006946:	b662      	cpsie	i
 8006948:	b661      	cpsie	f
 800694a:	f3bf 8f4f 	dsb	sy
 800694e:	f3bf 8f6f 	isb	sy
 8006952:	df00      	svc	0
 8006954:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006956:	0000      	.short	0x0000
 8006958:	e000ed08 	.word	0xe000ed08

0800695c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800695c:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800696c <vPortEnableVFP+0x10>
 8006960:	6801      	ldr	r1, [r0, #0]
 8006962:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006966:	6001      	str	r1, [r0, #0]
 8006968:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800696a:	0000      	.short	0x0000
 800696c:	e000ed88 	.word	0xe000ed88

08006970 <prvTaskExitError>:
{
 8006970:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8006972:	2300      	movs	r3, #0
 8006974:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8006976:	4b0d      	ldr	r3, [pc, #52]	@ (80069ac <prvTaskExitError+0x3c>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	3301      	adds	r3, #1
 800697c:	d008      	beq.n	8006990 <prvTaskExitError+0x20>
 800697e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006982:	f383 8811 	msr	BASEPRI, r3
 8006986:	f3bf 8f6f 	isb	sy
 800698a:	f3bf 8f4f 	dsb	sy
 800698e:	e7fe      	b.n	800698e <prvTaskExitError+0x1e>
 8006990:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006994:	f383 8811 	msr	BASEPRI, r3
 8006998:	f3bf 8f6f 	isb	sy
 800699c:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 80069a0:	9b01      	ldr	r3, [sp, #4]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d0fc      	beq.n	80069a0 <prvTaskExitError+0x30>
}
 80069a6:	b002      	add	sp, #8
 80069a8:	4770      	bx	lr
 80069aa:	bf00      	nop
 80069ac:	20000080 	.word	0x20000080

080069b0 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80069b0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80069b4:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80069b8:	4b07      	ldr	r3, [pc, #28]	@ (80069d8 <pxPortInitialiseStack+0x28>)
 80069ba:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80069be:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80069c2:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80069c6:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80069ca:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80069ce:	f840 3c24 	str.w	r3, [r0, #-36]
}
 80069d2:	3844      	subs	r0, #68	@ 0x44
 80069d4:	4770      	bx	lr
 80069d6:	bf00      	nop
 80069d8:	08006971 	.word	0x08006971
 80069dc:	00000000 	.word	0x00000000

080069e0 <SVC_Handler>:
	__asm volatile (
 80069e0:	4b07      	ldr	r3, [pc, #28]	@ (8006a00 <pxCurrentTCBConst2>)
 80069e2:	6819      	ldr	r1, [r3, #0]
 80069e4:	6808      	ldr	r0, [r1, #0]
 80069e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069ea:	f380 8809 	msr	PSP, r0
 80069ee:	f3bf 8f6f 	isb	sy
 80069f2:	f04f 0000 	mov.w	r0, #0
 80069f6:	f380 8811 	msr	BASEPRI, r0
 80069fa:	4770      	bx	lr
 80069fc:	f3af 8000 	nop.w

08006a00 <pxCurrentTCBConst2>:
 8006a00:	200124fc 	.word	0x200124fc

08006a04 <vPortEnterCritical>:
 8006a04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a08:	f383 8811 	msr	BASEPRI, r3
 8006a0c:	f3bf 8f6f 	isb	sy
 8006a10:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8006a14:	4a0a      	ldr	r2, [pc, #40]	@ (8006a40 <vPortEnterCritical+0x3c>)
 8006a16:	6813      	ldr	r3, [r2, #0]
 8006a18:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8006a1a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8006a1c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8006a1e:	d10e      	bne.n	8006a3e <vPortEnterCritical+0x3a>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006a20:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006a24:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 8006a28:	b2db      	uxtb	r3, r3
 8006a2a:	b143      	cbz	r3, 8006a3e <vPortEnterCritical+0x3a>
 8006a2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a30:	f383 8811 	msr	BASEPRI, r3
 8006a34:	f3bf 8f6f 	isb	sy
 8006a38:	f3bf 8f4f 	dsb	sy
 8006a3c:	e7fe      	b.n	8006a3c <vPortEnterCritical+0x38>
}
 8006a3e:	4770      	bx	lr
 8006a40:	20000080 	.word	0x20000080

08006a44 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8006a44:	4a08      	ldr	r2, [pc, #32]	@ (8006a68 <vPortExitCritical+0x24>)
 8006a46:	6813      	ldr	r3, [r2, #0]
 8006a48:	b943      	cbnz	r3, 8006a5c <vPortExitCritical+0x18>
 8006a4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a4e:	f383 8811 	msr	BASEPRI, r3
 8006a52:	f3bf 8f6f 	isb	sy
 8006a56:	f3bf 8f4f 	dsb	sy
 8006a5a:	e7fe      	b.n	8006a5a <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8006a5c:	3b01      	subs	r3, #1
 8006a5e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006a60:	b90b      	cbnz	r3, 8006a66 <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006a62:	f383 8811 	msr	BASEPRI, r3
}
 8006a66:	4770      	bx	lr
 8006a68:	20000080 	.word	0x20000080
 8006a6c:	00000000 	.word	0x00000000

08006a70 <PendSV_Handler>:
	__asm volatile
 8006a70:	f3ef 8009 	mrs	r0, PSP
 8006a74:	f3bf 8f6f 	isb	sy
 8006a78:	4b15      	ldr	r3, [pc, #84]	@ (8006ad0 <pxCurrentTCBConst>)
 8006a7a:	681a      	ldr	r2, [r3, #0]
 8006a7c:	f01e 0f10 	tst.w	lr, #16
 8006a80:	bf08      	it	eq
 8006a82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006a86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a8a:	6010      	str	r0, [r2, #0]
 8006a8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006a90:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006a94:	f380 8811 	msr	BASEPRI, r0
 8006a98:	f3bf 8f4f 	dsb	sy
 8006a9c:	f3bf 8f6f 	isb	sy
 8006aa0:	f001 f944 	bl	8007d2c <vTaskSwitchContext>
 8006aa4:	f04f 0000 	mov.w	r0, #0
 8006aa8:	f380 8811 	msr	BASEPRI, r0
 8006aac:	bc09      	pop	{r0, r3}
 8006aae:	6819      	ldr	r1, [r3, #0]
 8006ab0:	6808      	ldr	r0, [r1, #0]
 8006ab2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ab6:	f01e 0f10 	tst.w	lr, #16
 8006aba:	bf08      	it	eq
 8006abc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006ac0:	f380 8809 	msr	PSP, r0
 8006ac4:	f3bf 8f6f 	isb	sy
 8006ac8:	4770      	bx	lr
 8006aca:	bf00      	nop
 8006acc:	f3af 8000 	nop.w

08006ad0 <pxCurrentTCBConst>:
 8006ad0:	200124fc 	.word	0x200124fc

08006ad4 <xPortSysTickHandler>:
{
 8006ad4:	b508      	push	{r3, lr}
	__asm volatile
 8006ad6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ada:	f383 8811 	msr	BASEPRI, r3
 8006ade:	f3bf 8f6f 	isb	sy
 8006ae2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8006ae6:	f000 fff3 	bl	8007ad0 <xTaskIncrementTick>
 8006aea:	b128      	cbz	r0, 8006af8 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006aec:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006af0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006af4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 8006af8:	2300      	movs	r3, #0
 8006afa:	f383 8811 	msr	BASEPRI, r3
}
 8006afe:	bd08      	pop	{r3, pc}

08006b00 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006b00:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8006b04:	2300      	movs	r3, #0
 8006b06:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006b08:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006b0a:	4b05      	ldr	r3, [pc, #20]	@ (8006b20 <vPortSetupTimerInterrupt+0x20>)
 8006b0c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	fbb3 f3f1 	udiv	r3, r3, r1
 8006b16:	3b01      	subs	r3, #1
 8006b18:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006b1a:	2307      	movs	r3, #7
 8006b1c:	6113      	str	r3, [r2, #16]
}
 8006b1e:	4770      	bx	lr
 8006b20:	20000074 	.word	0x20000074

08006b24 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006b24:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
{
 8006b28:	b537      	push	{r0, r1, r2, r4, r5, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006b2a:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	@ 0xd00
 8006b2e:	4a38      	ldr	r2, [pc, #224]	@ (8006c10 <xPortStartScheduler+0xec>)
 8006b30:	4291      	cmp	r1, r2
 8006b32:	d108      	bne.n	8006b46 <xPortStartScheduler+0x22>
	__asm volatile
 8006b34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b38:	f383 8811 	msr	BASEPRI, r3
 8006b3c:	f3bf 8f6f 	isb	sy
 8006b40:	f3bf 8f4f 	dsb	sy
 8006b44:	e7fe      	b.n	8006b44 <xPortStartScheduler+0x20>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006b46:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8006b4a:	4b32      	ldr	r3, [pc, #200]	@ (8006c14 <xPortStartScheduler+0xf0>)
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d108      	bne.n	8006b62 <xPortStartScheduler+0x3e>
 8006b50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b54:	f383 8811 	msr	BASEPRI, r3
 8006b58:	f3bf 8f6f 	isb	sy
 8006b5c:	f3bf 8f4f 	dsb	sy
 8006b60:	e7fe      	b.n	8006b60 <xPortStartScheduler+0x3c>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006b62:	4b2d      	ldr	r3, [pc, #180]	@ (8006c18 <xPortStartScheduler+0xf4>)
 8006b64:	781a      	ldrb	r2, [r3, #0]
 8006b66:	b2d2      	uxtb	r2, r2
 8006b68:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006b6a:	22ff      	movs	r2, #255	@ 0xff
 8006b6c:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006b6e:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006b70:	4a2a      	ldr	r2, [pc, #168]	@ (8006c1c <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006b72:	b2db      	uxtb	r3, r3
 8006b74:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006b78:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8006b7c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006b80:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006b82:	4a27      	ldr	r2, [pc, #156]	@ (8006c20 <xPortStartScheduler+0xfc>)
 8006b84:	2307      	movs	r3, #7
 8006b86:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006b88:	f89d 1003 	ldrb.w	r1, [sp, #3]
			ulMaxPRIGROUPValue--;
 8006b8c:	6813      	ldr	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006b8e:	0609      	lsls	r1, r1, #24
 8006b90:	d40a      	bmi.n	8006ba8 <xPortStartScheduler+0x84>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006b92:	2b03      	cmp	r3, #3
 8006b94:	d011      	beq.n	8006bba <xPortStartScheduler+0x96>
 8006b96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b9a:	f383 8811 	msr	BASEPRI, r3
 8006b9e:	f3bf 8f6f 	isb	sy
 8006ba2:	f3bf 8f4f 	dsb	sy
 8006ba6:	e7fe      	b.n	8006ba6 <xPortStartScheduler+0x82>
			ulMaxPRIGROUPValue--;
 8006ba8:	3b01      	subs	r3, #1
 8006baa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006bac:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8006bb0:	005b      	lsls	r3, r3, #1
 8006bb2:	b2db      	uxtb	r3, r3
 8006bb4:	f88d 3003 	strb.w	r3, [sp, #3]
 8006bb8:	e7e6      	b.n	8006b88 <xPortStartScheduler+0x64>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006bba:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8006bbe:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006bc0:	9b01      	ldr	r3, [sp, #4]
 8006bc2:	4a15      	ldr	r2, [pc, #84]	@ (8006c18 <xPortStartScheduler+0xf4>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006bc4:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006bc8:	b2db      	uxtb	r3, r3
 8006bca:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006bcc:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8006bd0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006bd4:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006bd8:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8006bdc:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006be0:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 8006be4:	f7ff ff8c 	bl	8006b00 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8006be8:	4b0e      	ldr	r3, [pc, #56]	@ (8006c24 <xPortStartScheduler+0x100>)
 8006bea:	2500      	movs	r5, #0
 8006bec:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 8006bee:	f7ff feb5 	bl	800695c <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006bf2:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 8006bf6:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006bfa:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 8006bfe:	f7ff fe99 	bl	8006934 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8006c02:	f001 f893 	bl	8007d2c <vTaskSwitchContext>
	prvTaskExitError();
 8006c06:	f7ff feb3 	bl	8006970 <prvTaskExitError>
}
 8006c0a:	4628      	mov	r0, r5
 8006c0c:	b003      	add	sp, #12
 8006c0e:	bd30      	pop	{r4, r5, pc}
 8006c10:	410fc271 	.word	0x410fc271
 8006c14:	410fc270 	.word	0x410fc270
 8006c18:	e000e400 	.word	0xe000e400
 8006c1c:	20011fc0 	.word	0x20011fc0
 8006c20:	20011fbc 	.word	0x20011fbc
 8006c24:	20000080 	.word	0x20000080

08006c28 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006c28:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006c2c:	2b0f      	cmp	r3, #15
 8006c2e:	d90e      	bls.n	8006c4e <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006c30:	4a11      	ldr	r2, [pc, #68]	@ (8006c78 <vPortValidateInterruptPriority+0x50>)
 8006c32:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006c34:	4a11      	ldr	r2, [pc, #68]	@ (8006c7c <vPortValidateInterruptPriority+0x54>)
 8006c36:	7812      	ldrb	r2, [r2, #0]
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	d908      	bls.n	8006c4e <vPortValidateInterruptPriority+0x26>
 8006c3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c40:	f383 8811 	msr	BASEPRI, r3
 8006c44:	f3bf 8f6f 	isb	sy
 8006c48:	f3bf 8f4f 	dsb	sy
 8006c4c:	e7fe      	b.n	8006c4c <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006c4e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006c52:	4a0b      	ldr	r2, [pc, #44]	@ (8006c80 <vPortValidateInterruptPriority+0x58>)
 8006c54:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 8006c58:	6812      	ldr	r2, [r2, #0]
 8006c5a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d908      	bls.n	8006c74 <vPortValidateInterruptPriority+0x4c>
 8006c62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c66:	f383 8811 	msr	BASEPRI, r3
 8006c6a:	f3bf 8f6f 	isb	sy
 8006c6e:	f3bf 8f4f 	dsb	sy
 8006c72:	e7fe      	b.n	8006c72 <vPortValidateInterruptPriority+0x4a>
	}
 8006c74:	4770      	bx	lr
 8006c76:	bf00      	nop
 8006c78:	e000e3f0 	.word	0xe000e3f0
 8006c7c:	20011fc0 	.word	0x20011fc0
 8006c80:	20011fbc 	.word	0x20011fbc

08006c84 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006c84:	b510      	push	{r4, lr}
 8006c86:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006c88:	f7ff febc 	bl	8006a04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006c8c:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8006c8e:	f7ff fed9 	bl	8006a44 <vPortExitCritical>

	return xReturn;
}
 8006c92:	fab4 f084 	clz	r0, r4
 8006c96:	0940      	lsrs	r0, r0, #5
 8006c98:	bd10      	pop	{r4, pc}

08006c9a <prvCopyDataToQueue>:
{
 8006c9a:	b570      	push	{r4, r5, r6, lr}
 8006c9c:	4616      	mov	r6, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006c9e:	6c02      	ldr	r2, [r0, #64]	@ 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ca0:	6b85      	ldr	r5, [r0, #56]	@ 0x38
{
 8006ca2:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006ca4:	b942      	cbnz	r2, 8006cb8 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006ca6:	6806      	ldr	r6, [r0, #0]
 8006ca8:	b99e      	cbnz	r6, 8006cd2 <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006caa:	6880      	ldr	r0, [r0, #8]
 8006cac:	f001 f98c 	bl	8007fc8 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006cb0:	60a6      	str	r6, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006cb2:	3501      	adds	r5, #1
 8006cb4:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 8006cb6:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8006cb8:	b96e      	cbnz	r6, 8006cd6 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006cba:	6840      	ldr	r0, [r0, #4]
 8006cbc:	f00b fc75 	bl	80125aa <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006cc0:	6863      	ldr	r3, [r4, #4]
 8006cc2:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8006cc4:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006cc6:	68a2      	ldr	r2, [r4, #8]
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006cc8:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006cca:	4293      	cmp	r3, r2
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006ccc:	bf24      	itt	cs
 8006cce:	6823      	ldrcs	r3, [r4, #0]
 8006cd0:	6063      	strcs	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 8006cd2:	2000      	movs	r0, #0
 8006cd4:	e7ed      	b.n	8006cb2 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006cd6:	68c0      	ldr	r0, [r0, #12]
 8006cd8:	f00b fc67 	bl	80125aa <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006cdc:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8006cde:	68e3      	ldr	r3, [r4, #12]
 8006ce0:	4251      	negs	r1, r2
 8006ce2:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006ce4:	6822      	ldr	r2, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006ce6:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006ce8:	4293      	cmp	r3, r2
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006cea:	bf3e      	ittt	cc
 8006cec:	68a3      	ldrcc	r3, [r4, #8]
 8006cee:	185b      	addcc	r3, r3, r1
 8006cf0:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8006cf2:	2e02      	cmp	r6, #2
 8006cf4:	d1ed      	bne.n	8006cd2 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006cf6:	b10d      	cbz	r5, 8006cfc <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 8006cf8:	3d01      	subs	r5, #1
 8006cfa:	e7ea      	b.n	8006cd2 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 8006cfc:	4628      	mov	r0, r5
 8006cfe:	e7d8      	b.n	8006cb2 <prvCopyDataToQueue+0x18>

08006d00 <prvCopyDataFromQueue>:
{
 8006d00:	4603      	mov	r3, r0
 8006d02:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006d04:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
 8006d06:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006d08:	b16a      	cbz	r2, 8006d26 <prvCopyDataFromQueue+0x26>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006d0a:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006d0c:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006d0e:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006d10:	428c      	cmp	r4, r1
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006d12:	bf28      	it	cs
 8006d14:	6819      	ldrcs	r1, [r3, #0]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006d16:	60dc      	str	r4, [r3, #12]
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006d18:	bf28      	it	cs
 8006d1a:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006d1c:	68d9      	ldr	r1, [r3, #12]
}
 8006d1e:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006d22:	f00b bc42 	b.w	80125aa <memcpy>
}
 8006d26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d2a:	4770      	bx	lr

08006d2c <prvUnlockQueue>:
{
 8006d2c:	b570      	push	{r4, r5, r6, lr}
 8006d2e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8006d30:	f7ff fe68 	bl	8006a04 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8006d34:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006d38:	f104 0624 	add.w	r6, r4, #36	@ 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8006d3c:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006d3e:	2d00      	cmp	r5, #0
 8006d40:	dd01      	ble.n	8006d46 <prvUnlockQueue+0x1a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006d42:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006d44:	b9b3      	cbnz	r3, 8006d74 <prvUnlockQueue+0x48>
		pxQueue->cTxLock = queueUNLOCKED;
 8006d46:	23ff      	movs	r3, #255	@ 0xff
 8006d48:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 8006d4c:	f7ff fe7a 	bl	8006a44 <vPortExitCritical>
	taskENTER_CRITICAL();
 8006d50:	f7ff fe58 	bl	8006a04 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8006d54:	f894 5044 	ldrb.w	r5, [r4, #68]	@ 0x44
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006d58:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 8006d5c:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006d5e:	2d00      	cmp	r5, #0
 8006d60:	dd01      	ble.n	8006d66 <prvUnlockQueue+0x3a>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006d62:	6923      	ldr	r3, [r4, #16]
 8006d64:	b97b      	cbnz	r3, 8006d86 <prvUnlockQueue+0x5a>
		pxQueue->cRxLock = queueUNLOCKED;
 8006d66:	23ff      	movs	r3, #255	@ 0xff
 8006d68:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
}
 8006d6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8006d70:	f7ff be68 	b.w	8006a44 <vPortExitCritical>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006d74:	4630      	mov	r0, r6
 8006d76:	f001 f84b 	bl	8007e10 <xTaskRemoveFromEventList>
 8006d7a:	b108      	cbz	r0, 8006d80 <prvUnlockQueue+0x54>
						vTaskMissedYield();
 8006d7c:	f001 f8d0 	bl	8007f20 <vTaskMissedYield>
			--cTxLock;
 8006d80:	3d01      	subs	r5, #1
 8006d82:	b26d      	sxtb	r5, r5
 8006d84:	e7db      	b.n	8006d3e <prvUnlockQueue+0x12>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006d86:	4630      	mov	r0, r6
 8006d88:	f001 f842 	bl	8007e10 <xTaskRemoveFromEventList>
 8006d8c:	b108      	cbz	r0, 8006d92 <prvUnlockQueue+0x66>
					vTaskMissedYield();
 8006d8e:	f001 f8c7 	bl	8007f20 <vTaskMissedYield>
				--cRxLock;
 8006d92:	3d01      	subs	r5, #1
 8006d94:	b26d      	sxtb	r5, r5
 8006d96:	e7e2      	b.n	8006d5e <prvUnlockQueue+0x32>

08006d98 <xQueueGenericReset>:
{
 8006d98:	b538      	push	{r3, r4, r5, lr}
 8006d9a:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8006d9c:	4604      	mov	r4, r0
 8006d9e:	b940      	cbnz	r0, 8006db2 <xQueueGenericReset+0x1a>
 8006da0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006da4:	f383 8811 	msr	BASEPRI, r3
 8006da8:	f3bf 8f6f 	isb	sy
 8006dac:	f3bf 8f4f 	dsb	sy
 8006db0:	e7fe      	b.n	8006db0 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 8006db2:	f7ff fe27 	bl	8006a04 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006db6:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	@ 0x3c
 8006dba:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006dbc:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006dbe:	434b      	muls	r3, r1
 8006dc0:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006dc2:	1a5b      	subs	r3, r3, r1
 8006dc4:	441a      	add	r2, r3
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006dc6:	60a0      	str	r0, [r4, #8]
		pxQueue->cRxLock = queueUNLOCKED;
 8006dc8:	23ff      	movs	r3, #255	@ 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006dca:	2000      	movs	r0, #0
 8006dcc:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006dce:	60e2      	str	r2, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006dd0:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006dd4:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 8006dd8:	b9a5      	cbnz	r5, 8006e04 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006dda:	6923      	ldr	r3, [r4, #16]
 8006ddc:	b173      	cbz	r3, 8006dfc <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006dde:	f104 0010 	add.w	r0, r4, #16
 8006de2:	f001 f815 	bl	8007e10 <xTaskRemoveFromEventList>
 8006de6:	b148      	cbz	r0, 8006dfc <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 8006de8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006dec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006df0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006df4:	f3bf 8f4f 	dsb	sy
 8006df8:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8006dfc:	f7ff fe22 	bl	8006a44 <vPortExitCritical>
}
 8006e00:	2001      	movs	r0, #1
 8006e02:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006e04:	f104 0010 	add.w	r0, r4, #16
 8006e08:	f7ff fd54 	bl	80068b4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006e0c:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8006e10:	f7ff fd50 	bl	80068b4 <vListInitialise>
 8006e14:	e7f2      	b.n	8006dfc <xQueueGenericReset+0x64>

08006e16 <xQueueGenericCreateStatic>:
	{
 8006e16:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006e18:	460d      	mov	r5, r1
 8006e1a:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006e1c:	b940      	cbnz	r0, 8006e30 <xQueueGenericCreateStatic+0x1a>
 8006e1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e22:	f383 8811 	msr	BASEPRI, r3
 8006e26:	f3bf 8f6f 	isb	sy
 8006e2a:	f3bf 8f4f 	dsb	sy
 8006e2e:	e7fe      	b.n	8006e2e <xQueueGenericCreateStatic+0x18>
		configASSERT( pxStaticQueue != NULL );
 8006e30:	b943      	cbnz	r3, 8006e44 <xQueueGenericCreateStatic+0x2e>
 8006e32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e36:	f383 8811 	msr	BASEPRI, r3
 8006e3a:	f3bf 8f6f 	isb	sy
 8006e3e:	f3bf 8f4f 	dsb	sy
 8006e42:	e7fe      	b.n	8006e42 <xQueueGenericCreateStatic+0x2c>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006e44:	b14a      	cbz	r2, 8006e5a <xQueueGenericCreateStatic+0x44>
 8006e46:	b991      	cbnz	r1, 8006e6e <xQueueGenericCreateStatic+0x58>
 8006e48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e4c:	f383 8811 	msr	BASEPRI, r3
 8006e50:	f3bf 8f6f 	isb	sy
 8006e54:	f3bf 8f4f 	dsb	sy
 8006e58:	e7fe      	b.n	8006e58 <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006e5a:	b141      	cbz	r1, 8006e6e <xQueueGenericCreateStatic+0x58>
 8006e5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e60:	f383 8811 	msr	BASEPRI, r3
 8006e64:	f3bf 8f6f 	isb	sy
 8006e68:	f3bf 8f4f 	dsb	sy
 8006e6c:	e7fe      	b.n	8006e6c <xQueueGenericCreateStatic+0x56>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006e6e:	2350      	movs	r3, #80	@ 0x50
 8006e70:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006e72:	9b01      	ldr	r3, [sp, #4]
 8006e74:	2b50      	cmp	r3, #80	@ 0x50
 8006e76:	d008      	beq.n	8006e8a <xQueueGenericCreateStatic+0x74>
 8006e78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e7c:	f383 8811 	msr	BASEPRI, r3
 8006e80:	f3bf 8f6f 	isb	sy
 8006e84:	f3bf 8f4f 	dsb	sy
 8006e88:	e7fe      	b.n	8006e88 <xQueueGenericCreateStatic+0x72>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006e8a:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006e8c:	2d00      	cmp	r5, #0
 8006e8e:	bf08      	it	eq
 8006e90:	4622      	moveq	r2, r4
	pxNewQueue->uxItemSize = uxItemSize;
 8006e92:	e9c4 050f 	strd	r0, r5, [r4, #60]	@ 0x3c
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006e96:	f884 1046 	strb.w	r1, [r4, #70]	@ 0x46
 8006e9a:	6022      	str	r2, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006e9c:	4620      	mov	r0, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006e9e:	9b01      	ldr	r3, [sp, #4]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006ea0:	f7ff ff7a 	bl	8006d98 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8006ea4:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8006ea8:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
	}
 8006eac:	4620      	mov	r0, r4
 8006eae:	b003      	add	sp, #12
 8006eb0:	bd30      	pop	{r4, r5, pc}

08006eb2 <xQueueGenericCreate>:
	{
 8006eb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eb4:	460d      	mov	r5, r1
 8006eb6:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006eb8:	4606      	mov	r6, r0
 8006eba:	b940      	cbnz	r0, 8006ece <xQueueGenericCreate+0x1c>
 8006ebc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ec0:	f383 8811 	msr	BASEPRI, r3
 8006ec4:	f3bf 8f6f 	isb	sy
 8006ec8:	f3bf 8f4f 	dsb	sy
 8006ecc:	e7fe      	b.n	8006ecc <xQueueGenericCreate+0x1a>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ece:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006ed0:	3050      	adds	r0, #80	@ 0x50
 8006ed2:	f7ff fc19 	bl	8006708 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8006ed6:	4604      	mov	r4, r0
 8006ed8:	b170      	cbz	r0, 8006ef8 <xQueueGenericCreate+0x46>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006eda:	2300      	movs	r3, #0
 8006edc:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8006ee0:	b165      	cbz	r5, 8006efc <xQueueGenericCreate+0x4a>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006ee2:	f100 0350 	add.w	r3, r0, #80	@ 0x50
	pxNewQueue->uxItemSize = uxItemSize;
 8006ee6:	e9c4 650f 	strd	r6, r5, [r4, #60]	@ 0x3c
 8006eea:	6023      	str	r3, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006eec:	2101      	movs	r1, #1
 8006eee:	4620      	mov	r0, r4
 8006ef0:	f7ff ff52 	bl	8006d98 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8006ef4:	f884 704c 	strb.w	r7, [r4, #76]	@ 0x4c
	}
 8006ef8:	4620      	mov	r0, r4
 8006efa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006efc:	4603      	mov	r3, r0
 8006efe:	e7f2      	b.n	8006ee6 <xQueueGenericCreate+0x34>

08006f00 <xQueueCreateCountingSemaphoreStatic>:
	{
 8006f00:	b513      	push	{r0, r1, r4, lr}
 8006f02:	4613      	mov	r3, r2
 8006f04:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 8006f06:	b940      	cbnz	r0, 8006f1a <xQueueCreateCountingSemaphoreStatic+0x1a>
 8006f08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f0c:	f383 8811 	msr	BASEPRI, r3
 8006f10:	f3bf 8f6f 	isb	sy
 8006f14:	f3bf 8f4f 	dsb	sy
 8006f18:	e7fe      	b.n	8006f18 <xQueueCreateCountingSemaphoreStatic+0x18>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006f1a:	4288      	cmp	r0, r1
 8006f1c:	d208      	bcs.n	8006f30 <xQueueCreateCountingSemaphoreStatic+0x30>
 8006f1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f22:	f383 8811 	msr	BASEPRI, r3
 8006f26:	f3bf 8f6f 	isb	sy
 8006f2a:	f3bf 8f4f 	dsb	sy
 8006f2e:	e7fe      	b.n	8006f2e <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006f30:	2202      	movs	r2, #2
 8006f32:	9200      	str	r2, [sp, #0]
 8006f34:	2200      	movs	r2, #0
 8006f36:	4611      	mov	r1, r2
 8006f38:	f7ff ff6d 	bl	8006e16 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 8006f3c:	b100      	cbz	r0, 8006f40 <xQueueCreateCountingSemaphoreStatic+0x40>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006f3e:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 8006f40:	b002      	add	sp, #8
 8006f42:	bd10      	pop	{r4, pc}

08006f44 <xQueueCreateCountingSemaphore>:
	{
 8006f44:	b510      	push	{r4, lr}
 8006f46:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 8006f48:	b940      	cbnz	r0, 8006f5c <xQueueCreateCountingSemaphore+0x18>
 8006f4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f4e:	f383 8811 	msr	BASEPRI, r3
 8006f52:	f3bf 8f6f 	isb	sy
 8006f56:	f3bf 8f4f 	dsb	sy
 8006f5a:	e7fe      	b.n	8006f5a <xQueueCreateCountingSemaphore+0x16>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006f5c:	4288      	cmp	r0, r1
 8006f5e:	d208      	bcs.n	8006f72 <xQueueCreateCountingSemaphore+0x2e>
 8006f60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f64:	f383 8811 	msr	BASEPRI, r3
 8006f68:	f3bf 8f6f 	isb	sy
 8006f6c:	f3bf 8f4f 	dsb	sy
 8006f70:	e7fe      	b.n	8006f70 <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006f72:	2202      	movs	r2, #2
 8006f74:	2100      	movs	r1, #0
 8006f76:	f7ff ff9c 	bl	8006eb2 <xQueueGenericCreate>
		if( xHandle != NULL )
 8006f7a:	b100      	cbz	r0, 8006f7e <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006f7c:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 8006f7e:	bd10      	pop	{r4, pc}

08006f80 <xQueueGenericSend>:
{
 8006f80:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8006f84:	460f      	mov	r7, r1
 8006f86:	9201      	str	r2, [sp, #4]
 8006f88:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 8006f8a:	4604      	mov	r4, r0
 8006f8c:	b940      	cbnz	r0, 8006fa0 <xQueueGenericSend+0x20>
 8006f8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f92:	f383 8811 	msr	BASEPRI, r3
 8006f96:	f3bf 8f6f 	isb	sy
 8006f9a:	f3bf 8f4f 	dsb	sy
 8006f9e:	e7fe      	b.n	8006f9e <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006fa0:	b951      	cbnz	r1, 8006fb8 <xQueueGenericSend+0x38>
 8006fa2:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8006fa4:	b143      	cbz	r3, 8006fb8 <xQueueGenericSend+0x38>
 8006fa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006faa:	f383 8811 	msr	BASEPRI, r3
 8006fae:	f3bf 8f6f 	isb	sy
 8006fb2:	f3bf 8f4f 	dsb	sy
 8006fb6:	e7fe      	b.n	8006fb6 <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006fb8:	2e02      	cmp	r6, #2
 8006fba:	d10b      	bne.n	8006fd4 <xQueueGenericSend+0x54>
 8006fbc:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	d008      	beq.n	8006fd4 <xQueueGenericSend+0x54>
 8006fc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fc6:	f383 8811 	msr	BASEPRI, r3
 8006fca:	f3bf 8f6f 	isb	sy
 8006fce:	f3bf 8f4f 	dsb	sy
 8006fd2:	e7fe      	b.n	8006fd2 <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006fd4:	f000 ffaa 	bl	8007f2c <xTaskGetSchedulerState>
 8006fd8:	4605      	mov	r5, r0
 8006fda:	b320      	cbz	r0, 8007026 <xQueueGenericSend+0xa6>
 8006fdc:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 8006fde:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 8006fe2:	f7ff fd0f 	bl	8006a04 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006fe6:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8006fe8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8006fea:	429a      	cmp	r2, r3
 8006fec:	d227      	bcs.n	800703e <xQueueGenericSend+0xbe>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006fee:	4632      	mov	r2, r6
 8006ff0:	4639      	mov	r1, r7
 8006ff2:	4620      	mov	r0, r4
 8006ff4:	f7ff fe51 	bl	8006c9a <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ff8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006ffa:	b11b      	cbz	r3, 8007004 <xQueueGenericSend+0x84>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ffc:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007000:	f000 ff06 	bl	8007e10 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8007004:	b148      	cbz	r0, 800701a <xQueueGenericSend+0x9a>
						queueYIELD_IF_USING_PREEMPTION();
 8007006:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800700a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800700e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007012:	f3bf 8f4f 	dsb	sy
 8007016:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800701a:	f7ff fd13 	bl	8006a44 <vPortExitCritical>
				return pdPASS;
 800701e:	2001      	movs	r0, #1
}
 8007020:	b004      	add	sp, #16
 8007022:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007026:	9b01      	ldr	r3, [sp, #4]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d0d8      	beq.n	8006fde <xQueueGenericSend+0x5e>
 800702c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007030:	f383 8811 	msr	BASEPRI, r3
 8007034:	f3bf 8f6f 	isb	sy
 8007038:	f3bf 8f4f 	dsb	sy
 800703c:	e7fe      	b.n	800703c <xQueueGenericSend+0xbc>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800703e:	2e02      	cmp	r6, #2
 8007040:	d0d5      	beq.n	8006fee <xQueueGenericSend+0x6e>
				if( xTicksToWait == ( TickType_t ) 0 )
 8007042:	9b01      	ldr	r3, [sp, #4]
 8007044:	b91b      	cbnz	r3, 800704e <xQueueGenericSend+0xce>
					taskEXIT_CRITICAL();
 8007046:	f7ff fcfd 	bl	8006a44 <vPortExitCritical>
					return errQUEUE_FULL;
 800704a:	2000      	movs	r0, #0
 800704c:	e7e8      	b.n	8007020 <xQueueGenericSend+0xa0>
				else if( xEntryTimeSet == pdFALSE )
 800704e:	b915      	cbnz	r5, 8007056 <xQueueGenericSend+0xd6>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007050:	a802      	add	r0, sp, #8
 8007052:	f000 ff1d 	bl	8007e90 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8007056:	f7ff fcf5 	bl	8006a44 <vPortExitCritical>
		vTaskSuspendAll();
 800705a:	f000 fd2b 	bl	8007ab4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800705e:	f7ff fcd1 	bl	8006a04 <vPortEnterCritical>
 8007062:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8007066:	2bff      	cmp	r3, #255	@ 0xff
 8007068:	bf08      	it	eq
 800706a:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
 800706e:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8007072:	2bff      	cmp	r3, #255	@ 0xff
 8007074:	bf08      	it	eq
 8007076:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
 800707a:	f7ff fce3 	bl	8006a44 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800707e:	a901      	add	r1, sp, #4
 8007080:	a802      	add	r0, sp, #8
 8007082:	f000 ff11 	bl	8007ea8 <xTaskCheckForTimeOut>
 8007086:	bb38      	cbnz	r0, 80070d8 <xQueueGenericSend+0x158>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007088:	f7ff fcbc 	bl	8006a04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800708c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800708e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007090:	429a      	cmp	r2, r3
 8007092:	d10e      	bne.n	80070b2 <xQueueGenericSend+0x132>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8007094:	f7ff fcd6 	bl	8006a44 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007098:	9901      	ldr	r1, [sp, #4]
 800709a:	f104 0010 	add.w	r0, r4, #16
 800709e:	f000 fe7f 	bl	8007da0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80070a2:	4620      	mov	r0, r4
 80070a4:	f7ff fe42 	bl	8006d2c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80070a8:	f000 fda8 	bl	8007bfc <xTaskResumeAll>
 80070ac:	b148      	cbz	r0, 80070c2 <xQueueGenericSend+0x142>
 80070ae:	2501      	movs	r5, #1
 80070b0:	e797      	b.n	8006fe2 <xQueueGenericSend+0x62>
	taskEXIT_CRITICAL();
 80070b2:	f7ff fcc7 	bl	8006a44 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 80070b6:	4620      	mov	r0, r4
 80070b8:	f7ff fe38 	bl	8006d2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80070bc:	f000 fd9e 	bl	8007bfc <xTaskResumeAll>
 80070c0:	e7f5      	b.n	80070ae <xQueueGenericSend+0x12e>
					portYIELD_WITHIN_API();
 80070c2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80070c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80070ca:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80070ce:	f3bf 8f4f 	dsb	sy
 80070d2:	f3bf 8f6f 	isb	sy
 80070d6:	e7ea      	b.n	80070ae <xQueueGenericSend+0x12e>
			prvUnlockQueue( pxQueue );
 80070d8:	4620      	mov	r0, r4
 80070da:	f7ff fe27 	bl	8006d2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80070de:	f000 fd8d 	bl	8007bfc <xTaskResumeAll>
			return errQUEUE_FULL;
 80070e2:	e7b2      	b.n	800704a <xQueueGenericSend+0xca>

080070e4 <xQueueGenericSendFromISR>:
{
 80070e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070e8:	4689      	mov	r9, r1
 80070ea:	4617      	mov	r7, r2
 80070ec:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 80070ee:	4604      	mov	r4, r0
 80070f0:	b940      	cbnz	r0, 8007104 <xQueueGenericSendFromISR+0x20>
 80070f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070f6:	f383 8811 	msr	BASEPRI, r3
 80070fa:	f3bf 8f6f 	isb	sy
 80070fe:	f3bf 8f4f 	dsb	sy
 8007102:	e7fe      	b.n	8007102 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007104:	b951      	cbnz	r1, 800711c <xQueueGenericSendFromISR+0x38>
 8007106:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8007108:	b143      	cbz	r3, 800711c <xQueueGenericSendFromISR+0x38>
 800710a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800710e:	f383 8811 	msr	BASEPRI, r3
 8007112:	f3bf 8f6f 	isb	sy
 8007116:	f3bf 8f4f 	dsb	sy
 800711a:	e7fe      	b.n	800711a <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800711c:	2e02      	cmp	r6, #2
 800711e:	d10b      	bne.n	8007138 <xQueueGenericSendFromISR+0x54>
 8007120:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007122:	2b01      	cmp	r3, #1
 8007124:	d008      	beq.n	8007138 <xQueueGenericSendFromISR+0x54>
 8007126:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800712a:	f383 8811 	msr	BASEPRI, r3
 800712e:	f3bf 8f6f 	isb	sy
 8007132:	f3bf 8f4f 	dsb	sy
 8007136:	e7fe      	b.n	8007136 <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007138:	f7ff fd76 	bl	8006c28 <vPortValidateInterruptPriority>
	__asm volatile
 800713c:	f3ef 8811 	mrs	r8, BASEPRI
 8007140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007144:	f383 8811 	msr	BASEPRI, r3
 8007148:	f3bf 8f6f 	isb	sy
 800714c:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007150:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8007152:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007154:	429a      	cmp	r2, r3
 8007156:	d301      	bcc.n	800715c <xQueueGenericSendFromISR+0x78>
 8007158:	2e02      	cmp	r6, #2
 800715a:	d11e      	bne.n	800719a <xQueueGenericSendFromISR+0xb6>
			const int8_t cTxLock = pxQueue->cTxLock;
 800715c:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007160:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
 8007162:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007164:	4632      	mov	r2, r6
 8007166:	4649      	mov	r1, r9
 8007168:	4620      	mov	r0, r4
 800716a:	f7ff fd96 	bl	8006c9a <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800716e:	1c6b      	adds	r3, r5, #1
 8007170:	d10e      	bne.n	8007190 <xQueueGenericSendFromISR+0xac>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007172:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007174:	b13b      	cbz	r3, 8007186 <xQueueGenericSendFromISR+0xa2>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007176:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800717a:	f000 fe49 	bl	8007e10 <xTaskRemoveFromEventList>
 800717e:	b110      	cbz	r0, 8007186 <xQueueGenericSendFromISR+0xa2>
							if( pxHigherPriorityTaskWoken != NULL )
 8007180:	b10f      	cbz	r7, 8007186 <xQueueGenericSendFromISR+0xa2>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007182:	2301      	movs	r3, #1
 8007184:	603b      	str	r3, [r7, #0]
			xReturn = pdPASS;
 8007186:	2001      	movs	r0, #1
	__asm volatile
 8007188:	f388 8811 	msr	BASEPRI, r8
}
 800718c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007190:	3501      	adds	r5, #1
 8007192:	b26d      	sxtb	r5, r5
 8007194:	f884 5045 	strb.w	r5, [r4, #69]	@ 0x45
 8007198:	e7f5      	b.n	8007186 <xQueueGenericSendFromISR+0xa2>
			xReturn = errQUEUE_FULL;
 800719a:	2000      	movs	r0, #0
 800719c:	e7f4      	b.n	8007188 <xQueueGenericSendFromISR+0xa4>

0800719e <xQueueGiveFromISR>:
{
 800719e:	b570      	push	{r4, r5, r6, lr}
 80071a0:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 80071a2:	4604      	mov	r4, r0
 80071a4:	b940      	cbnz	r0, 80071b8 <xQueueGiveFromISR+0x1a>
	__asm volatile
 80071a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071aa:	f383 8811 	msr	BASEPRI, r3
 80071ae:	f3bf 8f6f 	isb	sy
 80071b2:	f3bf 8f4f 	dsb	sy
 80071b6:	e7fe      	b.n	80071b6 <xQueueGiveFromISR+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
 80071b8:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80071ba:	b143      	cbz	r3, 80071ce <xQueueGiveFromISR+0x30>
 80071bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071c0:	f383 8811 	msr	BASEPRI, r3
 80071c4:	f3bf 8f6f 	isb	sy
 80071c8:	f3bf 8f4f 	dsb	sy
 80071cc:	e7fe      	b.n	80071cc <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80071ce:	6803      	ldr	r3, [r0, #0]
 80071d0:	b953      	cbnz	r3, 80071e8 <xQueueGiveFromISR+0x4a>
 80071d2:	6883      	ldr	r3, [r0, #8]
 80071d4:	b143      	cbz	r3, 80071e8 <xQueueGiveFromISR+0x4a>
 80071d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071da:	f383 8811 	msr	BASEPRI, r3
 80071de:	f3bf 8f6f 	isb	sy
 80071e2:	f3bf 8f4f 	dsb	sy
 80071e6:	e7fe      	b.n	80071e6 <xQueueGiveFromISR+0x48>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80071e8:	f7ff fd1e 	bl	8006c28 <vPortValidateInterruptPriority>
	__asm volatile
 80071ec:	f3ef 8611 	mrs	r6, BASEPRI
 80071f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071f4:	f383 8811 	msr	BASEPRI, r3
 80071f8:	f3bf 8f6f 	isb	sy
 80071fc:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007200:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007202:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007204:	4293      	cmp	r3, r2
 8007206:	d919      	bls.n	800723c <xQueueGiveFromISR+0x9e>
			const int8_t cTxLock = pxQueue->cTxLock;
 8007208:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800720c:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 800720e:	29ff      	cmp	r1, #255	@ 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 8007210:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007212:	63a2      	str	r2, [r4, #56]	@ 0x38
			if( cTxLock == queueUNLOCKED )
 8007214:	d10d      	bne.n	8007232 <xQueueGiveFromISR+0x94>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007216:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007218:	b13b      	cbz	r3, 800722a <xQueueGiveFromISR+0x8c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800721a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800721e:	f000 fdf7 	bl	8007e10 <xTaskRemoveFromEventList>
 8007222:	b110      	cbz	r0, 800722a <xQueueGiveFromISR+0x8c>
							if( pxHigherPriorityTaskWoken != NULL )
 8007224:	b10d      	cbz	r5, 800722a <xQueueGiveFromISR+0x8c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007226:	2301      	movs	r3, #1
 8007228:	602b      	str	r3, [r5, #0]
			xReturn = pdPASS;
 800722a:	2001      	movs	r0, #1
	__asm volatile
 800722c:	f386 8811 	msr	BASEPRI, r6
}
 8007230:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007232:	3301      	adds	r3, #1
 8007234:	b25b      	sxtb	r3, r3
 8007236:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800723a:	e7f6      	b.n	800722a <xQueueGiveFromISR+0x8c>
			xReturn = errQUEUE_FULL;
 800723c:	2000      	movs	r0, #0
 800723e:	e7f5      	b.n	800722c <xQueueGiveFromISR+0x8e>

08007240 <xQueueReceive>:
{
 8007240:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8007244:	460e      	mov	r6, r1
 8007246:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8007248:	4604      	mov	r4, r0
 800724a:	b940      	cbnz	r0, 800725e <xQueueReceive+0x1e>
	__asm volatile
 800724c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007250:	f383 8811 	msr	BASEPRI, r3
 8007254:	f3bf 8f6f 	isb	sy
 8007258:	f3bf 8f4f 	dsb	sy
 800725c:	e7fe      	b.n	800725c <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800725e:	b951      	cbnz	r1, 8007276 <xQueueReceive+0x36>
 8007260:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8007262:	b143      	cbz	r3, 8007276 <xQueueReceive+0x36>
 8007264:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007268:	f383 8811 	msr	BASEPRI, r3
 800726c:	f3bf 8f6f 	isb	sy
 8007270:	f3bf 8f4f 	dsb	sy
 8007274:	e7fe      	b.n	8007274 <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007276:	f000 fe59 	bl	8007f2c <xTaskGetSchedulerState>
 800727a:	4605      	mov	r5, r0
 800727c:	b318      	cbz	r0, 80072c6 <xQueueReceive+0x86>
 800727e:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 8007280:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 8007284:	f7ff fbbe 	bl	8006a04 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007288:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800728a:	b347      	cbz	r7, 80072de <xQueueReceive+0x9e>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800728c:	4631      	mov	r1, r6
 800728e:	4620      	mov	r0, r4
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007290:	3f01      	subs	r7, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007292:	f7ff fd35 	bl	8006d00 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007296:	63a7      	str	r7, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007298:	6923      	ldr	r3, [r4, #16]
 800729a:	b173      	cbz	r3, 80072ba <xQueueReceive+0x7a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800729c:	f104 0010 	add.w	r0, r4, #16
 80072a0:	f000 fdb6 	bl	8007e10 <xTaskRemoveFromEventList>
 80072a4:	b148      	cbz	r0, 80072ba <xQueueReceive+0x7a>
						queueYIELD_IF_USING_PREEMPTION();
 80072a6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80072aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80072ae:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80072b2:	f3bf 8f4f 	dsb	sy
 80072b6:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80072ba:	f7ff fbc3 	bl	8006a44 <vPortExitCritical>
				return pdPASS;
 80072be:	2001      	movs	r0, #1
}
 80072c0:	b004      	add	sp, #16
 80072c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80072c6:	9b01      	ldr	r3, [sp, #4]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d0d9      	beq.n	8007280 <xQueueReceive+0x40>
 80072cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072d0:	f383 8811 	msr	BASEPRI, r3
 80072d4:	f3bf 8f6f 	isb	sy
 80072d8:	f3bf 8f4f 	dsb	sy
 80072dc:	e7fe      	b.n	80072dc <xQueueReceive+0x9c>
				if( xTicksToWait == ( TickType_t ) 0 )
 80072de:	9b01      	ldr	r3, [sp, #4]
 80072e0:	b91b      	cbnz	r3, 80072ea <xQueueReceive+0xaa>
					taskEXIT_CRITICAL();
 80072e2:	f7ff fbaf 	bl	8006a44 <vPortExitCritical>
					return errQUEUE_EMPTY;
 80072e6:	2000      	movs	r0, #0
 80072e8:	e7ea      	b.n	80072c0 <xQueueReceive+0x80>
				else if( xEntryTimeSet == pdFALSE )
 80072ea:	b915      	cbnz	r5, 80072f2 <xQueueReceive+0xb2>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80072ec:	a802      	add	r0, sp, #8
 80072ee:	f000 fdcf 	bl	8007e90 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80072f2:	f7ff fba7 	bl	8006a44 <vPortExitCritical>
		vTaskSuspendAll();
 80072f6:	f000 fbdd 	bl	8007ab4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80072fa:	f7ff fb83 	bl	8006a04 <vPortEnterCritical>
 80072fe:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8007302:	2bff      	cmp	r3, #255	@ 0xff
 8007304:	bf08      	it	eq
 8007306:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
 800730a:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800730e:	2bff      	cmp	r3, #255	@ 0xff
 8007310:	bf08      	it	eq
 8007312:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
 8007316:	f7ff fb95 	bl	8006a44 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800731a:	a901      	add	r1, sp, #4
 800731c:	a802      	add	r0, sp, #8
 800731e:	f000 fdc3 	bl	8007ea8 <xTaskCheckForTimeOut>
 8007322:	bb00      	cbnz	r0, 8007366 <xQueueReceive+0x126>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007324:	4620      	mov	r0, r4
 8007326:	f7ff fcad 	bl	8006c84 <prvIsQueueEmpty>
 800732a:	b1b0      	cbz	r0, 800735a <xQueueReceive+0x11a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800732c:	9901      	ldr	r1, [sp, #4]
 800732e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007332:	f000 fd35 	bl	8007da0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007336:	4620      	mov	r0, r4
 8007338:	f7ff fcf8 	bl	8006d2c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800733c:	f000 fc5e 	bl	8007bfc <xTaskResumeAll>
 8007340:	b948      	cbnz	r0, 8007356 <xQueueReceive+0x116>
					portYIELD_WITHIN_API();
 8007342:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007346:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800734a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800734e:	f3bf 8f4f 	dsb	sy
 8007352:	f3bf 8f6f 	isb	sy
 8007356:	2501      	movs	r5, #1
 8007358:	e794      	b.n	8007284 <xQueueReceive+0x44>
				prvUnlockQueue( pxQueue );
 800735a:	4620      	mov	r0, r4
 800735c:	f7ff fce6 	bl	8006d2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007360:	f000 fc4c 	bl	8007bfc <xTaskResumeAll>
 8007364:	e7f7      	b.n	8007356 <xQueueReceive+0x116>
			prvUnlockQueue( pxQueue );
 8007366:	4620      	mov	r0, r4
 8007368:	f7ff fce0 	bl	8006d2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800736c:	f000 fc46 	bl	8007bfc <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007370:	4620      	mov	r0, r4
 8007372:	f7ff fc87 	bl	8006c84 <prvIsQueueEmpty>
 8007376:	2800      	cmp	r0, #0
 8007378:	d0ed      	beq.n	8007356 <xQueueReceive+0x116>
 800737a:	e7b4      	b.n	80072e6 <xQueueReceive+0xa6>

0800737c <xQueueSemaphoreTake>:
{
 800737c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800737e:	b085      	sub	sp, #20
	configASSERT( ( pxQueue ) );
 8007380:	4604      	mov	r4, r0
{
 8007382:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8007384:	b940      	cbnz	r0, 8007398 <xQueueSemaphoreTake+0x1c>
 8007386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800738a:	f383 8811 	msr	BASEPRI, r3
 800738e:	f3bf 8f6f 	isb	sy
 8007392:	f3bf 8f4f 	dsb	sy
 8007396:	e7fe      	b.n	8007396 <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 8007398:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 800739a:	b145      	cbz	r5, 80073ae <xQueueSemaphoreTake+0x32>
 800739c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073a0:	f383 8811 	msr	BASEPRI, r3
 80073a4:	f3bf 8f6f 	isb	sy
 80073a8:	f3bf 8f4f 	dsb	sy
 80073ac:	e7fe      	b.n	80073ac <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80073ae:	f000 fdbd 	bl	8007f2c <xTaskGetSchedulerState>
 80073b2:	4606      	mov	r6, r0
 80073b4:	b320      	cbz	r0, 8007400 <xQueueSemaphoreTake+0x84>
 80073b6:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 80073b8:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
 80073ba:	f7ff fb23 	bl	8006a04 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80073be:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80073c0:	b353      	cbz	r3, 8007418 <xQueueSemaphoreTake+0x9c>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80073c2:	3b01      	subs	r3, #1
 80073c4:	63a3      	str	r3, [r4, #56]	@ 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80073c6:	6823      	ldr	r3, [r4, #0]
 80073c8:	b913      	cbnz	r3, 80073d0 <xQueueSemaphoreTake+0x54>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80073ca:	f000 fe8d 	bl	80080e8 <pvTaskIncrementMutexHeldCount>
 80073ce:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80073d0:	6923      	ldr	r3, [r4, #16]
 80073d2:	b173      	cbz	r3, 80073f2 <xQueueSemaphoreTake+0x76>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80073d4:	f104 0010 	add.w	r0, r4, #16
 80073d8:	f000 fd1a 	bl	8007e10 <xTaskRemoveFromEventList>
 80073dc:	b148      	cbz	r0, 80073f2 <xQueueSemaphoreTake+0x76>
						queueYIELD_IF_USING_PREEMPTION();
 80073de:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80073e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80073e6:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80073ea:	f3bf 8f4f 	dsb	sy
 80073ee:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80073f2:	f7ff fb27 	bl	8006a44 <vPortExitCritical>
				return pdPASS;
 80073f6:	2001      	movs	r0, #1
}
 80073f8:	b005      	add	sp, #20
 80073fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073fc:	4635      	mov	r5, r6
 80073fe:	e7db      	b.n	80073b8 <xQueueSemaphoreTake+0x3c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007400:	9b01      	ldr	r3, [sp, #4]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d0fa      	beq.n	80073fc <xQueueSemaphoreTake+0x80>
 8007406:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800740a:	f383 8811 	msr	BASEPRI, r3
 800740e:	f3bf 8f6f 	isb	sy
 8007412:	f3bf 8f4f 	dsb	sy
 8007416:	e7fe      	b.n	8007416 <xQueueSemaphoreTake+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8007418:	9b01      	ldr	r3, [sp, #4]
 800741a:	b953      	cbnz	r3, 8007432 <xQueueSemaphoreTake+0xb6>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800741c:	2d00      	cmp	r5, #0
 800741e:	d066      	beq.n	80074ee <xQueueSemaphoreTake+0x172>
 8007420:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007424:	f383 8811 	msr	BASEPRI, r3
 8007428:	f3bf 8f6f 	isb	sy
 800742c:	f3bf 8f4f 	dsb	sy
 8007430:	e7fe      	b.n	8007430 <xQueueSemaphoreTake+0xb4>
				else if( xEntryTimeSet == pdFALSE )
 8007432:	b916      	cbnz	r6, 800743a <xQueueSemaphoreTake+0xbe>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007434:	a802      	add	r0, sp, #8
 8007436:	f000 fd2b 	bl	8007e90 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800743a:	f7ff fb03 	bl	8006a44 <vPortExitCritical>
		vTaskSuspendAll();
 800743e:	f000 fb39 	bl	8007ab4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007442:	f7ff fadf 	bl	8006a04 <vPortEnterCritical>
 8007446:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800744a:	2bff      	cmp	r3, #255	@ 0xff
 800744c:	bf08      	it	eq
 800744e:	f884 7044 	strbeq.w	r7, [r4, #68]	@ 0x44
 8007452:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8007456:	2bff      	cmp	r3, #255	@ 0xff
 8007458:	bf08      	it	eq
 800745a:	f884 7045 	strbeq.w	r7, [r4, #69]	@ 0x45
 800745e:	f7ff faf1 	bl	8006a44 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007462:	a901      	add	r1, sp, #4
 8007464:	a802      	add	r0, sp, #8
 8007466:	f000 fd1f 	bl	8007ea8 <xTaskCheckForTimeOut>
 800746a:	bb50      	cbnz	r0, 80074c2 <xQueueSemaphoreTake+0x146>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800746c:	4620      	mov	r0, r4
 800746e:	f7ff fc09 	bl	8006c84 <prvIsQueueEmpty>
 8007472:	b300      	cbz	r0, 80074b6 <xQueueSemaphoreTake+0x13a>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007474:	6823      	ldr	r3, [r4, #0]
 8007476:	b93b      	cbnz	r3, 8007488 <xQueueSemaphoreTake+0x10c>
						taskENTER_CRITICAL();
 8007478:	f7ff fac4 	bl	8006a04 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800747c:	68a0      	ldr	r0, [r4, #8]
 800747e:	f000 fd65 	bl	8007f4c <xTaskPriorityInherit>
 8007482:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 8007484:	f7ff fade 	bl	8006a44 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007488:	9901      	ldr	r1, [sp, #4]
 800748a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800748e:	f000 fc87 	bl	8007da0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007492:	4620      	mov	r0, r4
 8007494:	f7ff fc4a 	bl	8006d2c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007498:	f000 fbb0 	bl	8007bfc <xTaskResumeAll>
 800749c:	b948      	cbnz	r0, 80074b2 <xQueueSemaphoreTake+0x136>
					portYIELD_WITHIN_API();
 800749e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80074a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80074a6:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80074aa:	f3bf 8f4f 	dsb	sy
 80074ae:	f3bf 8f6f 	isb	sy
 80074b2:	2601      	movs	r6, #1
 80074b4:	e781      	b.n	80073ba <xQueueSemaphoreTake+0x3e>
				prvUnlockQueue( pxQueue );
 80074b6:	4620      	mov	r0, r4
 80074b8:	f7ff fc38 	bl	8006d2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80074bc:	f000 fb9e 	bl	8007bfc <xTaskResumeAll>
 80074c0:	e7f7      	b.n	80074b2 <xQueueSemaphoreTake+0x136>
			prvUnlockQueue( pxQueue );
 80074c2:	4620      	mov	r0, r4
 80074c4:	f7ff fc32 	bl	8006d2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80074c8:	f000 fb98 	bl	8007bfc <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80074cc:	4620      	mov	r0, r4
 80074ce:	f7ff fbd9 	bl	8006c84 <prvIsQueueEmpty>
 80074d2:	2800      	cmp	r0, #0
 80074d4:	d0ed      	beq.n	80074b2 <xQueueSemaphoreTake+0x136>
					if( xInheritanceOccurred != pdFALSE )
 80074d6:	b165      	cbz	r5, 80074f2 <xQueueSemaphoreTake+0x176>
						taskENTER_CRITICAL();
 80074d8:	f7ff fa94 	bl	8006a04 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80074dc:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80074de:	b119      	cbz	r1, 80074e8 <xQueueSemaphoreTake+0x16c>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80074e0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80074e2:	6819      	ldr	r1, [r3, #0]
 80074e4:	f1c1 0138 	rsb	r1, r1, #56	@ 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80074e8:	68a0      	ldr	r0, [r4, #8]
 80074ea:	f000 fdaf 	bl	800804c <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 80074ee:	f7ff faa9 	bl	8006a44 <vPortExitCritical>
					return errQUEUE_EMPTY;
 80074f2:	2000      	movs	r0, #0
 80074f4:	e780      	b.n	80073f8 <xQueueSemaphoreTake+0x7c>

080074f6 <xQueueReceiveFromISR>:
{
 80074f6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074fa:	4689      	mov	r9, r1
 80074fc:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 80074fe:	4604      	mov	r4, r0
 8007500:	b940      	cbnz	r0, 8007514 <xQueueReceiveFromISR+0x1e>
 8007502:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007506:	f383 8811 	msr	BASEPRI, r3
 800750a:	f3bf 8f6f 	isb	sy
 800750e:	f3bf 8f4f 	dsb	sy
 8007512:	e7fe      	b.n	8007512 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007514:	b951      	cbnz	r1, 800752c <xQueueReceiveFromISR+0x36>
 8007516:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8007518:	b143      	cbz	r3, 800752c <xQueueReceiveFromISR+0x36>
 800751a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800751e:	f383 8811 	msr	BASEPRI, r3
 8007522:	f3bf 8f6f 	isb	sy
 8007526:	f3bf 8f4f 	dsb	sy
 800752a:	e7fe      	b.n	800752a <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800752c:	f7ff fb7c 	bl	8006c28 <vPortValidateInterruptPriority>
	__asm volatile
 8007530:	f3ef 8711 	mrs	r7, BASEPRI
 8007534:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007538:	f383 8811 	msr	BASEPRI, r3
 800753c:	f3bf 8f6f 	isb	sy
 8007540:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007544:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007546:	b30d      	cbz	r5, 800758c <xQueueReceiveFromISR+0x96>
			const int8_t cRxLock = pxQueue->cRxLock;
 8007548:	f894 6044 	ldrb.w	r6, [r4, #68]	@ 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800754c:	4649      	mov	r1, r9
			const int8_t cRxLock = pxQueue->cRxLock;
 800754e:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007550:	4620      	mov	r0, r4
 8007552:	f7ff fbd5 	bl	8006d00 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007556:	3d01      	subs	r5, #1
			if( cRxLock == queueUNLOCKED )
 8007558:	1c73      	adds	r3, r6, #1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800755a:	63a5      	str	r5, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 800755c:	d111      	bne.n	8007582 <xQueueReceiveFromISR+0x8c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800755e:	6923      	ldr	r3, [r4, #16]
 8007560:	b153      	cbz	r3, 8007578 <xQueueReceiveFromISR+0x82>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007562:	f104 0010 	add.w	r0, r4, #16
 8007566:	f000 fc53 	bl	8007e10 <xTaskRemoveFromEventList>
 800756a:	b128      	cbz	r0, 8007578 <xQueueReceiveFromISR+0x82>
						if( pxHigherPriorityTaskWoken != NULL )
 800756c:	f1b8 0f00 	cmp.w	r8, #0
 8007570:	d002      	beq.n	8007578 <xQueueReceiveFromISR+0x82>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007572:	2301      	movs	r3, #1
 8007574:	f8c8 3000 	str.w	r3, [r8]
			xReturn = pdPASS;
 8007578:	2001      	movs	r0, #1
	__asm volatile
 800757a:	f387 8811 	msr	BASEPRI, r7
}
 800757e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007582:	3601      	adds	r6, #1
 8007584:	b276      	sxtb	r6, r6
 8007586:	f884 6044 	strb.w	r6, [r4, #68]	@ 0x44
 800758a:	e7f5      	b.n	8007578 <xQueueReceiveFromISR+0x82>
			xReturn = pdFAIL;
 800758c:	4628      	mov	r0, r5
 800758e:	e7f4      	b.n	800757a <xQueueReceiveFromISR+0x84>

08007590 <uxQueueMessagesWaiting>:
{
 8007590:	b510      	push	{r4, lr}
	configASSERT( xQueue );
 8007592:	4604      	mov	r4, r0
 8007594:	b940      	cbnz	r0, 80075a8 <uxQueueMessagesWaiting+0x18>
	__asm volatile
 8007596:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800759a:	f383 8811 	msr	BASEPRI, r3
 800759e:	f3bf 8f6f 	isb	sy
 80075a2:	f3bf 8f4f 	dsb	sy
 80075a6:	e7fe      	b.n	80075a6 <uxQueueMessagesWaiting+0x16>
	taskENTER_CRITICAL();
 80075a8:	f7ff fa2c 	bl	8006a04 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80075ac:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
	taskEXIT_CRITICAL();
 80075ae:	f7ff fa49 	bl	8006a44 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80075b2:	4620      	mov	r0, r4
 80075b4:	bd10      	pop	{r4, pc}

080075b6 <uxQueueMessagesWaitingFromISR>:
	configASSERT( pxQueue );
 80075b6:	b940      	cbnz	r0, 80075ca <uxQueueMessagesWaitingFromISR+0x14>
 80075b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075bc:	f383 8811 	msr	BASEPRI, r3
 80075c0:	f3bf 8f6f 	isb	sy
 80075c4:	f3bf 8f4f 	dsb	sy
 80075c8:	e7fe      	b.n	80075c8 <uxQueueMessagesWaitingFromISR+0x12>
	uxReturn = pxQueue->uxMessagesWaiting;
 80075ca:	6b80      	ldr	r0, [r0, #56]	@ 0x38
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80075cc:	4770      	bx	lr
	...

080075d0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80075d0:	b530      	push	{r4, r5, lr}

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80075d2:	4a07      	ldr	r2, [pc, #28]	@ (80075f0 <vQueueAddToRegistry+0x20>)
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80075d4:	2300      	movs	r3, #0
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80075d6:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 80075da:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 80075de:	b91d      	cbnz	r5, 80075e8 <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80075e0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80075e4:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80075e6:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80075e8:	3301      	adds	r3, #1
 80075ea:	2b08      	cmp	r3, #8
 80075ec:	d1f3      	bne.n	80075d6 <vQueueAddToRegistry+0x6>
 80075ee:	e7fa      	b.n	80075e6 <vQueueAddToRegistry+0x16>
 80075f0:	20011fc4 	.word	0x20011fc4

080075f4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80075f4:	b510      	push	{r4, lr}

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80075f6:	4a09      	ldr	r2, [pc, #36]	@ (800761c <vQueueUnregisterQueue+0x28>)
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80075f8:	2300      	movs	r3, #0
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80075fa:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 80075fe:	4281      	cmp	r1, r0
 8007600:	ea4f 04c3 	mov.w	r4, r3, lsl #3
 8007604:	d106      	bne.n	8007614 <vQueueUnregisterQueue+0x20>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007606:	4a06      	ldr	r2, [pc, #24]	@ (8007620 <vQueueUnregisterQueue+0x2c>)
 8007608:	2100      	movs	r1, #0
 800760a:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800760e:	4422      	add	r2, r4
 8007610:	6051      	str	r1, [r2, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007612:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007614:	3301      	adds	r3, #1
 8007616:	2b08      	cmp	r3, #8
 8007618:	d1ef      	bne.n	80075fa <vQueueUnregisterQueue+0x6>
 800761a:	e7fa      	b.n	8007612 <vQueueUnregisterQueue+0x1e>
 800761c:	20011fc8 	.word	0x20011fc8
 8007620:	20011fc4 	.word	0x20011fc4

08007624 <vQueueDelete>:
{
 8007624:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 8007626:	b940      	cbnz	r0, 800763a <vQueueDelete+0x16>
 8007628:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800762c:	f383 8811 	msr	BASEPRI, r3
 8007630:	f3bf 8f6f 	isb	sy
 8007634:	f3bf 8f4f 	dsb	sy
 8007638:	e7fe      	b.n	8007638 <vQueueDelete+0x14>
		vQueueUnregisterQueue( pxQueue );
 800763a:	f7ff ffdb 	bl	80075f4 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800763e:	f890 3046 	ldrb.w	r3, [r0, #70]	@ 0x46
 8007642:	b91b      	cbnz	r3, 800764c <vQueueDelete+0x28>
}
 8007644:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 8007648:	f7ff b8f6 	b.w	8006838 <vPortFree>
}
 800764c:	bd10      	pop	{r4, pc}

0800764e <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800764e:	b570      	push	{r4, r5, r6, lr}
 8007650:	4604      	mov	r4, r0
 8007652:	460d      	mov	r5, r1
 8007654:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007656:	f7ff f9d5 	bl	8006a04 <vPortEnterCritical>
 800765a:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800765e:	2bff      	cmp	r3, #255	@ 0xff
 8007660:	bf04      	itt	eq
 8007662:	2300      	moveq	r3, #0
 8007664:	f884 3044 	strbeq.w	r3, [r4, #68]	@ 0x44
 8007668:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800766c:	2bff      	cmp	r3, #255	@ 0xff
 800766e:	bf04      	itt	eq
 8007670:	2300      	moveq	r3, #0
 8007672:	f884 3045 	strbeq.w	r3, [r4, #69]	@ 0x45
 8007676:	f7ff f9e5 	bl	8006a44 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800767a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800767c:	b92b      	cbnz	r3, 800768a <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800767e:	4632      	mov	r2, r6
 8007680:	4629      	mov	r1, r5
 8007682:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007686:	f000 fba5 	bl	8007dd4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800768a:	4620      	mov	r0, r4
	}
 800768c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 8007690:	f7ff bb4c 	b.w	8006d2c <prvUnlockQueue>

08007694 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007698:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800769a:	f7ff f9b3 	bl	8006a04 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800769e:	4b30      	ldr	r3, [pc, #192]	@ (8007760 <prvAddNewTaskToReadyList+0xcc>)
		if( pxCurrentTCB == NULL )
 80076a0:	4e30      	ldr	r6, [pc, #192]	@ (8007764 <prvAddNewTaskToReadyList+0xd0>)
		uxCurrentNumberOfTasks++;
 80076a2:	681a      	ldr	r2, [r3, #0]
 80076a4:	4f30      	ldr	r7, [pc, #192]	@ (8007768 <prvAddNewTaskToReadyList+0xd4>)
 80076a6:	3201      	adds	r2, #1
 80076a8:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80076aa:	6835      	ldr	r5, [r6, #0]
 80076ac:	2d00      	cmp	r5, #0
 80076ae:	d14b      	bne.n	8007748 <prvAddNewTaskToReadyList+0xb4>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80076b0:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	2b01      	cmp	r3, #1
 80076b6:	d11f      	bne.n	80076f8 <prvAddNewTaskToReadyList+0x64>
 80076b8:	46b8      	mov	r8, r7
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80076ba:	4640      	mov	r0, r8
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80076bc:	3501      	adds	r5, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80076be:	f7ff f8f9 	bl	80068b4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80076c2:	2d38      	cmp	r5, #56	@ 0x38
 80076c4:	f108 0814 	add.w	r8, r8, #20
 80076c8:	d1f7      	bne.n	80076ba <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 80076ca:	f8df 80c4 	ldr.w	r8, [pc, #196]	@ 8007790 <prvAddNewTaskToReadyList+0xfc>
	vListInitialise( &xDelayedTaskList2 );
 80076ce:	4d27      	ldr	r5, [pc, #156]	@ (800776c <prvAddNewTaskToReadyList+0xd8>)
	vListInitialise( &xDelayedTaskList1 );
 80076d0:	4640      	mov	r0, r8
 80076d2:	f7ff f8ef 	bl	80068b4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80076d6:	4628      	mov	r0, r5
 80076d8:	f7ff f8ec 	bl	80068b4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80076dc:	4824      	ldr	r0, [pc, #144]	@ (8007770 <prvAddNewTaskToReadyList+0xdc>)
 80076de:	f7ff f8e9 	bl	80068b4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80076e2:	4824      	ldr	r0, [pc, #144]	@ (8007774 <prvAddNewTaskToReadyList+0xe0>)
 80076e4:	f7ff f8e6 	bl	80068b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80076e8:	4823      	ldr	r0, [pc, #140]	@ (8007778 <prvAddNewTaskToReadyList+0xe4>)
 80076ea:	f7ff f8e3 	bl	80068b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80076ee:	4b23      	ldr	r3, [pc, #140]	@ (800777c <prvAddNewTaskToReadyList+0xe8>)
 80076f0:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80076f4:	4b22      	ldr	r3, [pc, #136]	@ (8007780 <prvAddNewTaskToReadyList+0xec>)
 80076f6:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 80076f8:	4a22      	ldr	r2, [pc, #136]	@ (8007784 <prvAddNewTaskToReadyList+0xf0>)
 80076fa:	6813      	ldr	r3, [r2, #0]
 80076fc:	3301      	adds	r3, #1
 80076fe:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8007700:	4a21      	ldr	r2, [pc, #132]	@ (8007788 <prvAddNewTaskToReadyList+0xf4>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007702:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8007704:	6811      	ldr	r1, [r2, #0]
 8007706:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8007708:	2014      	movs	r0, #20
 800770a:	428b      	cmp	r3, r1
 800770c:	fb00 7003 	mla	r0, r0, r3, r7
 8007710:	f104 0104 	add.w	r1, r4, #4
 8007714:	bf88      	it	hi
 8007716:	6013      	strhi	r3, [r2, #0]
 8007718:	f7ff f8da 	bl	80068d0 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800771c:	f7ff f992 	bl	8006a44 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8007720:	4b1a      	ldr	r3, [pc, #104]	@ (800778c <prvAddNewTaskToReadyList+0xf8>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	b173      	cbz	r3, 8007744 <prvAddNewTaskToReadyList+0xb0>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007726:	6833      	ldr	r3, [r6, #0]
 8007728:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800772a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800772c:	429a      	cmp	r2, r3
 800772e:	d209      	bcs.n	8007744 <prvAddNewTaskToReadyList+0xb0>
			taskYIELD_IF_USING_PREEMPTION();
 8007730:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007734:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007738:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800773c:	f3bf 8f4f 	dsb	sy
 8007740:	f3bf 8f6f 	isb	sy
}
 8007744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8007748:	4b10      	ldr	r3, [pc, #64]	@ (800778c <prvAddNewTaskToReadyList+0xf8>)
 800774a:	681a      	ldr	r2, [r3, #0]
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800774c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 800774e:	2a00      	cmp	r2, #0
 8007750:	d1d2      	bne.n	80076f8 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007752:	6832      	ldr	r2, [r6, #0]
 8007754:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007756:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8007758:	bf98      	it	ls
 800775a:	6034      	strls	r4, [r6, #0]
 800775c:	e7cc      	b.n	80076f8 <prvAddNewTaskToReadyList+0x64>
 800775e:	bf00      	nop
 8007760:	20012028 	.word	0x20012028
 8007764:	200124fc 	.word	0x200124fc
 8007768:	2001209c 	.word	0x2001209c
 800776c:	20012074 	.word	0x20012074
 8007770:	20012058 	.word	0x20012058
 8007774:	20012044 	.word	0x20012044
 8007778:	2001202c 	.word	0x2001202c
 800777c:	20012070 	.word	0x20012070
 8007780:	2001206c 	.word	0x2001206c
 8007784:	2001200c 	.word	0x2001200c
 8007788:	20012020 	.word	0x20012020
 800778c:	2001201c 	.word	0x2001201c
 8007790:	20012088 	.word	0x20012088

08007794 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007796:	4b15      	ldr	r3, [pc, #84]	@ (80077ec <prvAddCurrentTaskToDelayedList+0x58>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007798:	4d15      	ldr	r5, [pc, #84]	@ (80077f0 <prvAddCurrentTaskToDelayedList+0x5c>)
const TickType_t xConstTickCount = xTickCount;
 800779a:	681c      	ldr	r4, [r3, #0]
{
 800779c:	4606      	mov	r6, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800779e:	6828      	ldr	r0, [r5, #0]
 80077a0:	3004      	adds	r0, #4
{
 80077a2:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80077a4:	f7ff f8b6 	bl	8006914 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80077a8:	1c73      	adds	r3, r6, #1
 80077aa:	d107      	bne.n	80077bc <prvAddCurrentTaskToDelayedList+0x28>
 80077ac:	b137      	cbz	r7, 80077bc <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80077ae:	6829      	ldr	r1, [r5, #0]
 80077b0:	4810      	ldr	r0, [pc, #64]	@ (80077f4 <prvAddCurrentTaskToDelayedList+0x60>)

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80077b2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80077b6:	3104      	adds	r1, #4
 80077b8:	f7ff b88a 	b.w	80068d0 <vListInsertEnd>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80077bc:	682b      	ldr	r3, [r5, #0]
 80077be:	19a4      	adds	r4, r4, r6
 80077c0:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80077c2:	d307      	bcc.n	80077d4 <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80077c4:	4b0c      	ldr	r3, [pc, #48]	@ (80077f8 <prvAddCurrentTaskToDelayedList+0x64>)
 80077c6:	6818      	ldr	r0, [r3, #0]
 80077c8:	6829      	ldr	r1, [r5, #0]
}
 80077ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80077ce:	3104      	adds	r1, #4
 80077d0:	f7ff b889 	b.w	80068e6 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80077d4:	4b09      	ldr	r3, [pc, #36]	@ (80077fc <prvAddCurrentTaskToDelayedList+0x68>)
 80077d6:	6818      	ldr	r0, [r3, #0]
 80077d8:	6829      	ldr	r1, [r5, #0]
 80077da:	3104      	adds	r1, #4
 80077dc:	f7ff f883 	bl	80068e6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80077e0:	4b07      	ldr	r3, [pc, #28]	@ (8007800 <prvAddCurrentTaskToDelayedList+0x6c>)
 80077e2:	681a      	ldr	r2, [r3, #0]
 80077e4:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 80077e6:	bf88      	it	hi
 80077e8:	601c      	strhi	r4, [r3, #0]
}
 80077ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077ec:	20012024 	.word	0x20012024
 80077f0:	200124fc 	.word	0x200124fc
 80077f4:	2001202c 	.word	0x2001202c
 80077f8:	2001206c 	.word	0x2001206c
 80077fc:	20012070 	.word	0x20012070
 8007800:	20012008 	.word	0x20012008

08007804 <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007804:	4a06      	ldr	r2, [pc, #24]	@ (8007820 <prvResetNextTaskUnblockTime+0x1c>)
 8007806:	6813      	ldr	r3, [r2, #0]
 8007808:	6819      	ldr	r1, [r3, #0]
 800780a:	4b06      	ldr	r3, [pc, #24]	@ (8007824 <prvResetNextTaskUnblockTime+0x20>)
 800780c:	b919      	cbnz	r1, 8007816 <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 800780e:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007812:	601a      	str	r2, [r3, #0]
}
 8007814:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007816:	6812      	ldr	r2, [r2, #0]
 8007818:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800781a:	68d2      	ldr	r2, [r2, #12]
 800781c:	6852      	ldr	r2, [r2, #4]
 800781e:	e7f8      	b.n	8007812 <prvResetNextTaskUnblockTime+0xe>
 8007820:	20012070 	.word	0x20012070
 8007824:	20012008 	.word	0x20012008

08007828 <prvDeleteTCB>:
	{
 8007828:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800782a:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
	{
 800782e:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007830:	b93b      	cbnz	r3, 8007842 <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 8007832:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8007834:	f7ff f800 	bl	8006838 <vPortFree>
				vPortFree( pxTCB );
 8007838:	4620      	mov	r0, r4
	}
 800783a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 800783e:	f7fe bffb 	b.w	8006838 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007842:	2b01      	cmp	r3, #1
 8007844:	d0f9      	beq.n	800783a <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007846:	2b02      	cmp	r3, #2
 8007848:	d008      	beq.n	800785c <prvDeleteTCB+0x34>
 800784a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800784e:	f383 8811 	msr	BASEPRI, r3
 8007852:	f3bf 8f6f 	isb	sy
 8007856:	f3bf 8f4f 	dsb	sy
 800785a:	e7fe      	b.n	800785a <prvDeleteTCB+0x32>
	}
 800785c:	bd10      	pop	{r4, pc}
	...

08007860 <prvIdleTask>:
{
 8007860:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007862:	4c13      	ldr	r4, [pc, #76]	@ (80078b0 <prvIdleTask+0x50>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007864:	4f13      	ldr	r7, [pc, #76]	@ (80078b4 <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 8007866:	4d14      	ldr	r5, [pc, #80]	@ (80078b8 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007868:	6823      	ldr	r3, [r4, #0]
 800786a:	b973      	cbnz	r3, 800788a <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800786c:	4b13      	ldr	r3, [pc, #76]	@ (80078bc <prvIdleTask+0x5c>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	2b01      	cmp	r3, #1
 8007872:	d9f8      	bls.n	8007866 <prvIdleTask+0x6>
				taskYIELD();
 8007874:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007878:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800787c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007880:	f3bf 8f4f 	dsb	sy
 8007884:	f3bf 8f6f 	isb	sy
 8007888:	e7ed      	b.n	8007866 <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 800788a:	f7ff f8bb 	bl	8006a04 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007892:	1d30      	adds	r0, r6, #4
 8007894:	f7ff f83e 	bl	8006914 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007898:	682b      	ldr	r3, [r5, #0]
 800789a:	3b01      	subs	r3, #1
 800789c:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 800789e:	6823      	ldr	r3, [r4, #0]
 80078a0:	3b01      	subs	r3, #1
 80078a2:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 80078a4:	f7ff f8ce 	bl	8006a44 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 80078a8:	4630      	mov	r0, r6
 80078aa:	f7ff ffbd 	bl	8007828 <prvDeleteTCB>
 80078ae:	e7db      	b.n	8007868 <prvIdleTask+0x8>
 80078b0:	20012040 	.word	0x20012040
 80078b4:	20012044 	.word	0x20012044
 80078b8:	20012028 	.word	0x20012028
 80078bc:	2001209c 	.word	0x2001209c

080078c0 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80078c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078c4:	e9dd 9409 	ldrd	r9, r4, [sp, #36]	@ 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80078c8:	0096      	lsls	r6, r2, #2
 80078ca:	4632      	mov	r2, r6
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80078cc:	4607      	mov	r7, r0
 80078ce:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80078d0:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80078d2:	21a5      	movs	r1, #165	@ 0xa5
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80078d4:	4698      	mov	r8, r3
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80078d6:	f00a fd98 	bl	801240a <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80078da:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80078dc:	3e04      	subs	r6, #4
 80078de:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80078e0:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 80078e4:	b3b5      	cbz	r5, 8007954 <prvInitialiseNewTask.constprop.0+0x94>
 80078e6:	1e6b      	subs	r3, r5, #1
 80078e8:	f104 0233 	add.w	r2, r4, #51	@ 0x33
 80078ec:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80078ee:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80078f2:	f802 1f01 	strb.w	r1, [r2, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 80078f6:	b109      	cbz	r1, 80078fc <prvInitialiseNewTask.constprop.0+0x3c>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80078f8:	42ab      	cmp	r3, r5
 80078fa:	d1f8      	bne.n	80078ee <prvInitialiseNewTask.constprop.0+0x2e>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80078fc:	2300      	movs	r3, #0
 80078fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007902:	9d08      	ldr	r5, [sp, #32]
 8007904:	2d37      	cmp	r5, #55	@ 0x37
 8007906:	bf28      	it	cs
 8007908:	2537      	movcs	r5, #55	@ 0x37
		pxNewTCB->uxMutexesHeld = 0;
 800790a:	f04f 0a00 	mov.w	sl, #0
	pxNewTCB->uxPriority = uxPriority;
 800790e:	62e5      	str	r5, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8007910:	64e5      	str	r5, [r4, #76]	@ 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007912:	1d20      	adds	r0, r4, #4
		pxNewTCB->uxMutexesHeld = 0;
 8007914:	f8c4 a050 	str.w	sl, [r4, #80]	@ 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007918:	f7fe ffd7 	bl	80068ca <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800791c:	f1c5 0538 	rsb	r5, r5, #56	@ 0x38
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007920:	f104 0018 	add.w	r0, r4, #24
 8007924:	f7fe ffd1 	bl	80068ca <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8007928:	f8c4 a058 	str.w	sl, [r4, #88]	@ 0x58
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800792c:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800792e:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007930:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->pxTaskTag = NULL;
 8007932:	f8c4 a054 	str.w	sl, [r4, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007936:	f884 a05c 	strb.w	sl, [r4, #92]	@ 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800793a:	4642      	mov	r2, r8
 800793c:	4639      	mov	r1, r7
 800793e:	4630      	mov	r0, r6
 8007940:	f7ff f836 	bl	80069b0 <pxPortInitialiseStack>
 8007944:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8007946:	f1b9 0f00 	cmp.w	r9, #0
 800794a:	d001      	beq.n	8007950 <prvInitialiseNewTask.constprop.0+0x90>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800794c:	f8c9 4000 	str.w	r4, [r9]
}
 8007950:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007954:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
 8007958:	e7d3      	b.n	8007902 <prvInitialiseNewTask.constprop.0+0x42>

0800795a <xTaskCreateStatic>:
	{
 800795a:	b570      	push	{r4, r5, r6, lr}
 800795c:	b086      	sub	sp, #24
 800795e:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 8007962:	b945      	cbnz	r5, 8007976 <xTaskCreateStatic+0x1c>
 8007964:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007968:	f383 8811 	msr	BASEPRI, r3
 800796c:	f3bf 8f6f 	isb	sy
 8007970:	f3bf 8f4f 	dsb	sy
 8007974:	e7fe      	b.n	8007974 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 8007976:	b944      	cbnz	r4, 800798a <xTaskCreateStatic+0x30>
 8007978:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800797c:	f383 8811 	msr	BASEPRI, r3
 8007980:	f3bf 8f6f 	isb	sy
 8007984:	f3bf 8f4f 	dsb	sy
 8007988:	e7fe      	b.n	8007988 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 800798a:	2660      	movs	r6, #96	@ 0x60
 800798c:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800798e:	9e05      	ldr	r6, [sp, #20]
 8007990:	2e60      	cmp	r6, #96	@ 0x60
 8007992:	d008      	beq.n	80079a6 <xTaskCreateStatic+0x4c>
 8007994:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007998:	f383 8811 	msr	BASEPRI, r3
 800799c:	f3bf 8f6f 	isb	sy
 80079a0:	f3bf 8f4f 	dsb	sy
 80079a4:	e7fe      	b.n	80079a4 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80079a6:	6325      	str	r5, [r4, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80079a8:	2502      	movs	r5, #2
 80079aa:	f884 505d 	strb.w	r5, [r4, #93]	@ 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80079ae:	ad04      	add	r5, sp, #16
 80079b0:	9501      	str	r5, [sp, #4]
 80079b2:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80079b4:	9402      	str	r4, [sp, #8]
 80079b6:	9500      	str	r5, [sp, #0]
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80079b8:	9e05      	ldr	r6, [sp, #20]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80079ba:	f7ff ff81 	bl	80078c0 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 80079be:	4620      	mov	r0, r4
 80079c0:	f7ff fe68 	bl	8007694 <prvAddNewTaskToReadyList>
	}
 80079c4:	9804      	ldr	r0, [sp, #16]
 80079c6:	b006      	add	sp, #24
 80079c8:	bd70      	pop	{r4, r5, r6, pc}

080079ca <xTaskCreate>:
	{
 80079ca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80079ce:	4607      	mov	r7, r0
 80079d0:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80079d2:	0090      	lsls	r0, r2, #2
	{
 80079d4:	4688      	mov	r8, r1
 80079d6:	4616      	mov	r6, r2
 80079d8:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80079da:	f7fe fe95 	bl	8006708 <pvPortMalloc>
			if( pxStack != NULL )
 80079de:	4605      	mov	r5, r0
 80079e0:	b920      	cbnz	r0, 80079ec <xTaskCreate+0x22>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80079e2:	f04f 30ff 	mov.w	r0, #4294967295
	}
 80079e6:	b005      	add	sp, #20
 80079e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80079ec:	2060      	movs	r0, #96	@ 0x60
 80079ee:	f7fe fe8b 	bl	8006708 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80079f2:	4604      	mov	r4, r0
 80079f4:	b198      	cbz	r0, 8007a1e <xTaskCreate+0x54>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80079f6:	2300      	movs	r3, #0
 80079f8:	f880 305d 	strb.w	r3, [r0, #93]	@ 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80079fc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
					pxNewTCB->pxStack = pxStack;
 80079fe:	6305      	str	r5, [r0, #48]	@ 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007a00:	9301      	str	r3, [sp, #4]
 8007a02:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007a04:	9002      	str	r0, [sp, #8]
 8007a06:	9300      	str	r3, [sp, #0]
 8007a08:	4632      	mov	r2, r6
 8007a0a:	464b      	mov	r3, r9
 8007a0c:	4641      	mov	r1, r8
 8007a0e:	4638      	mov	r0, r7
 8007a10:	f7ff ff56 	bl	80078c0 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007a14:	4620      	mov	r0, r4
 8007a16:	f7ff fe3d 	bl	8007694 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007a1a:	2001      	movs	r0, #1
 8007a1c:	e7e3      	b.n	80079e6 <xTaskCreate+0x1c>
					vPortFree( pxStack );
 8007a1e:	4628      	mov	r0, r5
 8007a20:	f7fe ff0a 	bl	8006838 <vPortFree>
		if( pxNewTCB != NULL )
 8007a24:	e7dd      	b.n	80079e2 <xTaskCreate+0x18>
	...

08007a28 <vTaskStartScheduler>:
{
 8007a28:	b510      	push	{r4, lr}
 8007a2a:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007a2c:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007a2e:	aa07      	add	r2, sp, #28
 8007a30:	a906      	add	r1, sp, #24
 8007a32:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007a34:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007a38:	f7fe fe28 	bl	800668c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007a3c:	9b05      	ldr	r3, [sp, #20]
 8007a3e:	9302      	str	r3, [sp, #8]
 8007a40:	9b06      	ldr	r3, [sp, #24]
 8007a42:	9a07      	ldr	r2, [sp, #28]
 8007a44:	4916      	ldr	r1, [pc, #88]	@ (8007aa0 <vTaskStartScheduler+0x78>)
 8007a46:	4817      	ldr	r0, [pc, #92]	@ (8007aa4 <vTaskStartScheduler+0x7c>)
 8007a48:	e9cd 4300 	strd	r4, r3, [sp]
 8007a4c:	4623      	mov	r3, r4
 8007a4e:	f7ff ff84 	bl	800795a <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8007a52:	b318      	cbz	r0, 8007a9c <vTaskStartScheduler+0x74>
			xReturn = xTimerCreateTimerTask();
 8007a54:	f000 fba6 	bl	80081a4 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8007a58:	2801      	cmp	r0, #1
 8007a5a:	d114      	bne.n	8007a86 <vTaskStartScheduler+0x5e>
 8007a5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a60:	f383 8811 	msr	BASEPRI, r3
 8007a64:	f3bf 8f6f 	isb	sy
 8007a68:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8007a6c:	4b0e      	ldr	r3, [pc, #56]	@ (8007aa8 <vTaskStartScheduler+0x80>)
 8007a6e:	f04f 32ff 	mov.w	r2, #4294967295
 8007a72:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007a74:	4b0d      	ldr	r3, [pc, #52]	@ (8007aac <vTaskStartScheduler+0x84>)
 8007a76:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007a78:	4b0d      	ldr	r3, [pc, #52]	@ (8007ab0 <vTaskStartScheduler+0x88>)
 8007a7a:	601c      	str	r4, [r3, #0]
}
 8007a7c:	b008      	add	sp, #32
 8007a7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8007a82:	f7ff b84f 	b.w	8006b24 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007a86:	3001      	adds	r0, #1
 8007a88:	d108      	bne.n	8007a9c <vTaskStartScheduler+0x74>
 8007a8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a8e:	f383 8811 	msr	BASEPRI, r3
 8007a92:	f3bf 8f6f 	isb	sy
 8007a96:	f3bf 8f4f 	dsb	sy
 8007a9a:	e7fe      	b.n	8007a9a <vTaskStartScheduler+0x72>
}
 8007a9c:	b008      	add	sp, #32
 8007a9e:	bd10      	pop	{r4, pc}
 8007aa0:	08013ca6 	.word	0x08013ca6
 8007aa4:	08007861 	.word	0x08007861
 8007aa8:	20012008 	.word	0x20012008
 8007aac:	2001201c 	.word	0x2001201c
 8007ab0:	20012024 	.word	0x20012024

08007ab4 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8007ab4:	4a02      	ldr	r2, [pc, #8]	@ (8007ac0 <vTaskSuspendAll+0xc>)
 8007ab6:	6813      	ldr	r3, [r2, #0]
 8007ab8:	3301      	adds	r3, #1
 8007aba:	6013      	str	r3, [r2, #0]
}
 8007abc:	4770      	bx	lr
 8007abe:	bf00      	nop
 8007ac0:	20012004 	.word	0x20012004

08007ac4 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8007ac4:	4b01      	ldr	r3, [pc, #4]	@ (8007acc <xTaskGetTickCount+0x8>)
 8007ac6:	6818      	ldr	r0, [r3, #0]
}
 8007ac8:	4770      	bx	lr
 8007aca:	bf00      	nop
 8007acc:	20012024 	.word	0x20012024

08007ad0 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ad0:	4b3f      	ldr	r3, [pc, #252]	@ (8007bd0 <xTaskIncrementTick+0x100>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
{
 8007ad4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d172      	bne.n	8007bc2 <xTaskIncrementTick+0xf2>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007adc:	4b3d      	ldr	r3, [pc, #244]	@ (8007bd4 <xTaskIncrementTick+0x104>)
 8007ade:	681c      	ldr	r4, [r3, #0]
 8007ae0:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8007ae2:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007ae4:	b9bc      	cbnz	r4, 8007b16 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8007ae6:	4b3c      	ldr	r3, [pc, #240]	@ (8007bd8 <xTaskIncrementTick+0x108>)
 8007ae8:	681a      	ldr	r2, [r3, #0]
 8007aea:	6812      	ldr	r2, [r2, #0]
 8007aec:	b142      	cbz	r2, 8007b00 <xTaskIncrementTick+0x30>
 8007aee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007af2:	f383 8811 	msr	BASEPRI, r3
 8007af6:	f3bf 8f6f 	isb	sy
 8007afa:	f3bf 8f4f 	dsb	sy
 8007afe:	e7fe      	b.n	8007afe <xTaskIncrementTick+0x2e>
 8007b00:	4a36      	ldr	r2, [pc, #216]	@ (8007bdc <xTaskIncrementTick+0x10c>)
 8007b02:	6819      	ldr	r1, [r3, #0]
 8007b04:	6810      	ldr	r0, [r2, #0]
 8007b06:	6018      	str	r0, [r3, #0]
 8007b08:	6011      	str	r1, [r2, #0]
 8007b0a:	4a35      	ldr	r2, [pc, #212]	@ (8007be0 <xTaskIncrementTick+0x110>)
 8007b0c:	6813      	ldr	r3, [r2, #0]
 8007b0e:	3301      	adds	r3, #1
 8007b10:	6013      	str	r3, [r2, #0]
 8007b12:	f7ff fe77 	bl	8007804 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007b16:	4d33      	ldr	r5, [pc, #204]	@ (8007be4 <xTaskIncrementTick+0x114>)
 8007b18:	4e33      	ldr	r6, [pc, #204]	@ (8007be8 <xTaskIncrementTick+0x118>)
 8007b1a:	682b      	ldr	r3, [r5, #0]
 8007b1c:	4f33      	ldr	r7, [pc, #204]	@ (8007bec <xTaskIncrementTick+0x11c>)
 8007b1e:	429c      	cmp	r4, r3
BaseType_t xSwitchRequired = pdFALSE;
 8007b20:	f04f 0b00 	mov.w	fp, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007b24:	d212      	bcs.n	8007b4c <xTaskIncrementTick+0x7c>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007b26:	683a      	ldr	r2, [r7, #0]
 8007b28:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007b2a:	2114      	movs	r1, #20
 8007b2c:	434a      	muls	r2, r1
 8007b2e:	58b2      	ldr	r2, [r6, r2]
				xSwitchRequired = pdTRUE;
 8007b30:	2a02      	cmp	r2, #2
			if( xYieldPending != pdFALSE )
 8007b32:	4a2f      	ldr	r2, [pc, #188]	@ (8007bf0 <xTaskIncrementTick+0x120>)
 8007b34:	6812      	ldr	r2, [r2, #0]
				xSwitchRequired = pdTRUE;
 8007b36:	bf28      	it	cs
 8007b38:	f04f 0b01 	movcs.w	fp, #1
				xSwitchRequired = pdTRUE;
 8007b3c:	2a00      	cmp	r2, #0
 8007b3e:	bf18      	it	ne
 8007b40:	f04f 0b01 	movne.w	fp, #1
}
 8007b44:	4658      	mov	r0, fp
 8007b46:	b003      	add	sp, #12
 8007b48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b4c:	f8df 9088 	ldr.w	r9, [pc, #136]	@ 8007bd8 <xTaskIncrementTick+0x108>
					prvAddTaskToReadyList( pxTCB );
 8007b50:	f8df a0a4 	ldr.w	sl, [pc, #164]	@ 8007bf8 <xTaskIncrementTick+0x128>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b54:	f8d9 2000 	ldr.w	r2, [r9]
 8007b58:	6812      	ldr	r2, [r2, #0]
 8007b5a:	b91a      	cbnz	r2, 8007b64 <xTaskIncrementTick+0x94>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8007b60:	602a      	str	r2, [r5, #0]
					break;
 8007b62:	e7e0      	b.n	8007b26 <xTaskIncrementTick+0x56>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b64:	f8d9 2000 	ldr.w	r2, [r9]
 8007b68:	68d2      	ldr	r2, [r2, #12]
 8007b6a:	f8d2 800c 	ldr.w	r8, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007b6e:	f8d8 1004 	ldr.w	r1, [r8, #4]
					if( xConstTickCount < xItemValue )
 8007b72:	428c      	cmp	r4, r1
 8007b74:	d201      	bcs.n	8007b7a <xTaskIncrementTick+0xaa>
						xNextTaskUnblockTime = xItemValue;
 8007b76:	6029      	str	r1, [r5, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007b78:	e7d5      	b.n	8007b26 <xTaskIncrementTick+0x56>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b7a:	f108 0304 	add.w	r3, r8, #4
 8007b7e:	4618      	mov	r0, r3
 8007b80:	9301      	str	r3, [sp, #4]
 8007b82:	f7fe fec7 	bl	8006914 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007b86:	f8d8 1028 	ldr.w	r1, [r8, #40]	@ 0x28
 8007b8a:	b119      	cbz	r1, 8007b94 <xTaskIncrementTick+0xc4>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007b8c:	f108 0018 	add.w	r0, r8, #24
 8007b90:	f7fe fec0 	bl	8006914 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007b94:	f8d8 002c 	ldr.w	r0, [r8, #44]	@ 0x2c
 8007b98:	f8da 1000 	ldr.w	r1, [sl]
 8007b9c:	2314      	movs	r3, #20
 8007b9e:	4288      	cmp	r0, r1
 8007ba0:	bf88      	it	hi
 8007ba2:	f8ca 0000 	strhi.w	r0, [sl]
 8007ba6:	9901      	ldr	r1, [sp, #4]
 8007ba8:	fb03 6000 	mla	r0, r3, r0, r6
 8007bac:	f7fe fe90 	bl	80068d0 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007bb0:	6838      	ldr	r0, [r7, #0]
 8007bb2:	f8d8 102c 	ldr.w	r1, [r8, #44]	@ 0x2c
 8007bb6:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
							xSwitchRequired = pdTRUE;
 8007bb8:	4291      	cmp	r1, r2
 8007bba:	bf28      	it	cs
 8007bbc:	f04f 0b01 	movcs.w	fp, #1
 8007bc0:	e7c8      	b.n	8007b54 <xTaskIncrementTick+0x84>
		++xPendedTicks;
 8007bc2:	4a0c      	ldr	r2, [pc, #48]	@ (8007bf4 <xTaskIncrementTick+0x124>)
 8007bc4:	6813      	ldr	r3, [r2, #0]
 8007bc6:	3301      	adds	r3, #1
 8007bc8:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8007bca:	f04f 0b00 	mov.w	fp, #0
 8007bce:	e7b9      	b.n	8007b44 <xTaskIncrementTick+0x74>
 8007bd0:	20012004 	.word	0x20012004
 8007bd4:	20012024 	.word	0x20012024
 8007bd8:	20012070 	.word	0x20012070
 8007bdc:	2001206c 	.word	0x2001206c
 8007be0:	20012010 	.word	0x20012010
 8007be4:	20012008 	.word	0x20012008
 8007be8:	2001209c 	.word	0x2001209c
 8007bec:	200124fc 	.word	0x200124fc
 8007bf0:	20012014 	.word	0x20012014
 8007bf4:	20012018 	.word	0x20012018
 8007bf8:	20012020 	.word	0x20012020

08007bfc <xTaskResumeAll>:
{
 8007bfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 8007c00:	4c30      	ldr	r4, [pc, #192]	@ (8007cc4 <xTaskResumeAll+0xc8>)
 8007c02:	6823      	ldr	r3, [r4, #0]
 8007c04:	b943      	cbnz	r3, 8007c18 <xTaskResumeAll+0x1c>
 8007c06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c0a:	f383 8811 	msr	BASEPRI, r3
 8007c0e:	f3bf 8f6f 	isb	sy
 8007c12:	f3bf 8f4f 	dsb	sy
 8007c16:	e7fe      	b.n	8007c16 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8007c18:	f7fe fef4 	bl	8006a04 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8007c1c:	6823      	ldr	r3, [r4, #0]
 8007c1e:	3b01      	subs	r3, #1
 8007c20:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c22:	6824      	ldr	r4, [r4, #0]
 8007c24:	b12c      	cbz	r4, 8007c32 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8007c26:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8007c28:	f7fe ff0c 	bl	8006a44 <vPortExitCritical>
}
 8007c2c:	4620      	mov	r0, r4
 8007c2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007c32:	4b25      	ldr	r3, [pc, #148]	@ (8007cc8 <xTaskResumeAll+0xcc>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d0f5      	beq.n	8007c26 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007c3a:	4d24      	ldr	r5, [pc, #144]	@ (8007ccc <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 8007c3c:	4e24      	ldr	r6, [pc, #144]	@ (8007cd0 <xTaskResumeAll+0xd4>)
 8007c3e:	f8df 80a0 	ldr.w	r8, [pc, #160]	@ 8007ce0 <xTaskResumeAll+0xe4>
 8007c42:	e01d      	b.n	8007c80 <xTaskResumeAll+0x84>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c44:	68eb      	ldr	r3, [r5, #12]
 8007c46:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007c48:	1d27      	adds	r7, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007c4a:	f104 0018 	add.w	r0, r4, #24
 8007c4e:	f7fe fe61 	bl	8006914 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007c52:	4638      	mov	r0, r7
 8007c54:	f7fe fe5e 	bl	8006914 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007c58:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8007c5a:	6832      	ldr	r2, [r6, #0]
 8007c5c:	2014      	movs	r0, #20
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	fb00 8003 	mla	r0, r0, r3, r8
 8007c64:	4639      	mov	r1, r7
 8007c66:	bf88      	it	hi
 8007c68:	6033      	strhi	r3, [r6, #0]
 8007c6a:	f7fe fe31 	bl	80068d0 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007c6e:	4b19      	ldr	r3, [pc, #100]	@ (8007cd4 <xTaskResumeAll+0xd8>)
 8007c70:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c76:	429a      	cmp	r2, r3
 8007c78:	d302      	bcc.n	8007c80 <xTaskResumeAll+0x84>
						xYieldPending = pdTRUE;
 8007c7a:	4b17      	ldr	r3, [pc, #92]	@ (8007cd8 <xTaskResumeAll+0xdc>)
 8007c7c:	2201      	movs	r2, #1
 8007c7e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007c80:	682b      	ldr	r3, [r5, #0]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d1de      	bne.n	8007c44 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 8007c86:	b10c      	cbz	r4, 8007c8c <xTaskResumeAll+0x90>
					prvResetNextTaskUnblockTime();
 8007c88:	f7ff fdbc 	bl	8007804 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007c8c:	4d13      	ldr	r5, [pc, #76]	@ (8007cdc <xTaskResumeAll+0xe0>)
 8007c8e:	682c      	ldr	r4, [r5, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8007c90:	b144      	cbz	r4, 8007ca4 <xTaskResumeAll+0xa8>
								xYieldPending = pdTRUE;
 8007c92:	4e11      	ldr	r6, [pc, #68]	@ (8007cd8 <xTaskResumeAll+0xdc>)
 8007c94:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8007c96:	f7ff ff1b 	bl	8007ad0 <xTaskIncrementTick>
 8007c9a:	b100      	cbz	r0, 8007c9e <xTaskResumeAll+0xa2>
								xYieldPending = pdTRUE;
 8007c9c:	6037      	str	r7, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007c9e:	3c01      	subs	r4, #1
 8007ca0:	d1f9      	bne.n	8007c96 <xTaskResumeAll+0x9a>
						xPendedTicks = 0;
 8007ca2:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8007ca4:	4b0c      	ldr	r3, [pc, #48]	@ (8007cd8 <xTaskResumeAll+0xdc>)
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d0bc      	beq.n	8007c26 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8007cac:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007cb0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007cb4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007cb8:	f3bf 8f4f 	dsb	sy
 8007cbc:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8007cc0:	2401      	movs	r4, #1
 8007cc2:	e7b1      	b.n	8007c28 <xTaskResumeAll+0x2c>
 8007cc4:	20012004 	.word	0x20012004
 8007cc8:	20012028 	.word	0x20012028
 8007ccc:	20012058 	.word	0x20012058
 8007cd0:	20012020 	.word	0x20012020
 8007cd4:	200124fc 	.word	0x200124fc
 8007cd8:	20012014 	.word	0x20012014
 8007cdc:	20012018 	.word	0x20012018
 8007ce0:	2001209c 	.word	0x2001209c

08007ce4 <vTaskDelay>:
	{
 8007ce4:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007ce6:	b950      	cbnz	r0, 8007cfe <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 8007ce8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007cec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007cf0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007cf4:	f3bf 8f4f 	dsb	sy
 8007cf8:	f3bf 8f6f 	isb	sy
	}
 8007cfc:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8007cfe:	4b0a      	ldr	r3, [pc, #40]	@ (8007d28 <vTaskDelay+0x44>)
 8007d00:	6819      	ldr	r1, [r3, #0]
 8007d02:	b141      	cbz	r1, 8007d16 <vTaskDelay+0x32>
 8007d04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d08:	f383 8811 	msr	BASEPRI, r3
 8007d0c:	f3bf 8f6f 	isb	sy
 8007d10:	f3bf 8f4f 	dsb	sy
 8007d14:	e7fe      	b.n	8007d14 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8007d16:	f7ff fecd 	bl	8007ab4 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007d1a:	f7ff fd3b 	bl	8007794 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8007d1e:	f7ff ff6d 	bl	8007bfc <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8007d22:	2800      	cmp	r0, #0
 8007d24:	d0e0      	beq.n	8007ce8 <vTaskDelay+0x4>
 8007d26:	e7e9      	b.n	8007cfc <vTaskDelay+0x18>
 8007d28:	20012004 	.word	0x20012004

08007d2c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007d2c:	4b17      	ldr	r3, [pc, #92]	@ (8007d8c <vTaskSwitchContext+0x60>)
 8007d2e:	681a      	ldr	r2, [r3, #0]
 8007d30:	4b17      	ldr	r3, [pc, #92]	@ (8007d90 <vTaskSwitchContext+0x64>)
{
 8007d32:	b570      	push	{r4, r5, r6, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007d34:	b112      	cbz	r2, 8007d3c <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8007d36:	2201      	movs	r2, #1
 8007d38:	601a      	str	r2, [r3, #0]
}
 8007d3a:	bd70      	pop	{r4, r5, r6, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d3c:	4d15      	ldr	r5, [pc, #84]	@ (8007d94 <vTaskSwitchContext+0x68>)
		xYieldPending = pdFALSE;
 8007d3e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d40:	682a      	ldr	r2, [r5, #0]
 8007d42:	4915      	ldr	r1, [pc, #84]	@ (8007d98 <vTaskSwitchContext+0x6c>)
 8007d44:	2614      	movs	r6, #20
 8007d46:	fb06 f302 	mul.w	r3, r6, r2
 8007d4a:	18c8      	adds	r0, r1, r3
 8007d4c:	58cc      	ldr	r4, [r1, r3]
 8007d4e:	b18c      	cbz	r4, 8007d74 <vTaskSwitchContext+0x48>
 8007d50:	6844      	ldr	r4, [r0, #4]
 8007d52:	3308      	adds	r3, #8
 8007d54:	6864      	ldr	r4, [r4, #4]
 8007d56:	6044      	str	r4, [r0, #4]
 8007d58:	440b      	add	r3, r1
 8007d5a:	429c      	cmp	r4, r3
 8007d5c:	bf04      	itt	eq
 8007d5e:	6863      	ldreq	r3, [r4, #4]
 8007d60:	6043      	streq	r3, [r0, #4]
 8007d62:	2314      	movs	r3, #20
 8007d64:	fb03 1102 	mla	r1, r3, r2, r1
 8007d68:	684b      	ldr	r3, [r1, #4]
 8007d6a:	68d9      	ldr	r1, [r3, #12]
 8007d6c:	4b0b      	ldr	r3, [pc, #44]	@ (8007d9c <vTaskSwitchContext+0x70>)
 8007d6e:	6019      	str	r1, [r3, #0]
 8007d70:	602a      	str	r2, [r5, #0]
}
 8007d72:	e7e2      	b.n	8007d3a <vTaskSwitchContext+0xe>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d74:	b942      	cbnz	r2, 8007d88 <vTaskSwitchContext+0x5c>
 8007d76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d7a:	f383 8811 	msr	BASEPRI, r3
 8007d7e:	f3bf 8f6f 	isb	sy
 8007d82:	f3bf 8f4f 	dsb	sy
 8007d86:	e7fe      	b.n	8007d86 <vTaskSwitchContext+0x5a>
 8007d88:	3a01      	subs	r2, #1
 8007d8a:	e7dc      	b.n	8007d46 <vTaskSwitchContext+0x1a>
 8007d8c:	20012004 	.word	0x20012004
 8007d90:	20012014 	.word	0x20012014
 8007d94:	20012020 	.word	0x20012020
 8007d98:	2001209c 	.word	0x2001209c
 8007d9c:	200124fc 	.word	0x200124fc

08007da0 <vTaskPlaceOnEventList>:
{
 8007da0:	b510      	push	{r4, lr}
 8007da2:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8007da4:	b940      	cbnz	r0, 8007db8 <vTaskPlaceOnEventList+0x18>
 8007da6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007daa:	f383 8811 	msr	BASEPRI, r3
 8007dae:	f3bf 8f6f 	isb	sy
 8007db2:	f3bf 8f4f 	dsb	sy
 8007db6:	e7fe      	b.n	8007db6 <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007db8:	4b05      	ldr	r3, [pc, #20]	@ (8007dd0 <vTaskPlaceOnEventList+0x30>)
 8007dba:	6819      	ldr	r1, [r3, #0]
 8007dbc:	3118      	adds	r1, #24
 8007dbe:	f7fe fd92 	bl	80068e6 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007dc2:	4620      	mov	r0, r4
 8007dc4:	2101      	movs	r1, #1
}
 8007dc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007dca:	f7ff bce3 	b.w	8007794 <prvAddCurrentTaskToDelayedList>
 8007dce:	bf00      	nop
 8007dd0:	200124fc 	.word	0x200124fc

08007dd4 <vTaskPlaceOnEventListRestricted>:
	{
 8007dd4:	b538      	push	{r3, r4, r5, lr}
 8007dd6:	460d      	mov	r5, r1
 8007dd8:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 8007dda:	b940      	cbnz	r0, 8007dee <vTaskPlaceOnEventListRestricted+0x1a>
 8007ddc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007de0:	f383 8811 	msr	BASEPRI, r3
 8007de4:	f3bf 8f6f 	isb	sy
 8007de8:	f3bf 8f4f 	dsb	sy
 8007dec:	e7fe      	b.n	8007dec <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007dee:	4b07      	ldr	r3, [pc, #28]	@ (8007e0c <vTaskPlaceOnEventListRestricted+0x38>)
 8007df0:	6819      	ldr	r1, [r3, #0]
 8007df2:	3118      	adds	r1, #24
 8007df4:	f7fe fd6c 	bl	80068d0 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 8007df8:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007dfa:	4621      	mov	r1, r4
 8007dfc:	bf0c      	ite	eq
 8007dfe:	4628      	moveq	r0, r5
 8007e00:	f04f 30ff 	movne.w	r0, #4294967295
	}
 8007e04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007e08:	f7ff bcc4 	b.w	8007794 <prvAddCurrentTaskToDelayedList>
 8007e0c:	200124fc 	.word	0x200124fc

08007e10 <xTaskRemoveFromEventList>:
{
 8007e10:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e12:	68c3      	ldr	r3, [r0, #12]
 8007e14:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8007e16:	b944      	cbnz	r4, 8007e2a <xTaskRemoveFromEventList+0x1a>
 8007e18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e1c:	f383 8811 	msr	BASEPRI, r3
 8007e20:	f3bf 8f6f 	isb	sy
 8007e24:	f3bf 8f4f 	dsb	sy
 8007e28:	e7fe      	b.n	8007e28 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007e2a:	f104 0518 	add.w	r5, r4, #24
 8007e2e:	4628      	mov	r0, r5
 8007e30:	f7fe fd70 	bl	8006914 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e34:	4b10      	ldr	r3, [pc, #64]	@ (8007e78 <xTaskRemoveFromEventList+0x68>)
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	b9db      	cbnz	r3, 8007e72 <xTaskRemoveFromEventList+0x62>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007e3a:	1d25      	adds	r5, r4, #4
 8007e3c:	4628      	mov	r0, r5
 8007e3e:	f7fe fd69 	bl	8006914 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007e42:	4a0e      	ldr	r2, [pc, #56]	@ (8007e7c <xTaskRemoveFromEventList+0x6c>)
 8007e44:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8007e46:	6811      	ldr	r1, [r2, #0]
 8007e48:	428b      	cmp	r3, r1
 8007e4a:	bf88      	it	hi
 8007e4c:	6013      	strhi	r3, [r2, #0]
 8007e4e:	4a0c      	ldr	r2, [pc, #48]	@ (8007e80 <xTaskRemoveFromEventList+0x70>)
 8007e50:	2014      	movs	r0, #20
 8007e52:	4629      	mov	r1, r5
 8007e54:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007e58:	f7fe fd3a 	bl	80068d0 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007e5c:	4b09      	ldr	r3, [pc, #36]	@ (8007e84 <xTaskRemoveFromEventList+0x74>)
 8007e5e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e64:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8007e66:	bf83      	ittte	hi
 8007e68:	4b07      	ldrhi	r3, [pc, #28]	@ (8007e88 <xTaskRemoveFromEventList+0x78>)
 8007e6a:	2001      	movhi	r0, #1
 8007e6c:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 8007e6e:	2000      	movls	r0, #0
}
 8007e70:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007e72:	4806      	ldr	r0, [pc, #24]	@ (8007e8c <xTaskRemoveFromEventList+0x7c>)
 8007e74:	4629      	mov	r1, r5
 8007e76:	e7ef      	b.n	8007e58 <xTaskRemoveFromEventList+0x48>
 8007e78:	20012004 	.word	0x20012004
 8007e7c:	20012020 	.word	0x20012020
 8007e80:	2001209c 	.word	0x2001209c
 8007e84:	200124fc 	.word	0x200124fc
 8007e88:	20012014 	.word	0x20012014
 8007e8c:	20012058 	.word	0x20012058

08007e90 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007e90:	4b03      	ldr	r3, [pc, #12]	@ (8007ea0 <vTaskInternalSetTimeOutState+0x10>)
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007e96:	4b03      	ldr	r3, [pc, #12]	@ (8007ea4 <vTaskInternalSetTimeOutState+0x14>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	6043      	str	r3, [r0, #4]
}
 8007e9c:	4770      	bx	lr
 8007e9e:	bf00      	nop
 8007ea0:	20012010 	.word	0x20012010
 8007ea4:	20012024 	.word	0x20012024

08007ea8 <xTaskCheckForTimeOut>:
{
 8007ea8:	b570      	push	{r4, r5, r6, lr}
 8007eaa:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8007eac:	4605      	mov	r5, r0
 8007eae:	b940      	cbnz	r0, 8007ec2 <xTaskCheckForTimeOut+0x1a>
 8007eb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eb4:	f383 8811 	msr	BASEPRI, r3
 8007eb8:	f3bf 8f6f 	isb	sy
 8007ebc:	f3bf 8f4f 	dsb	sy
 8007ec0:	e7fe      	b.n	8007ec0 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 8007ec2:	b941      	cbnz	r1, 8007ed6 <xTaskCheckForTimeOut+0x2e>
 8007ec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ec8:	f383 8811 	msr	BASEPRI, r3
 8007ecc:	f3bf 8f6f 	isb	sy
 8007ed0:	f3bf 8f4f 	dsb	sy
 8007ed4:	e7fe      	b.n	8007ed4 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 8007ed6:	f7fe fd95 	bl	8006a04 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8007eda:	4b0f      	ldr	r3, [pc, #60]	@ (8007f18 <xTaskCheckForTimeOut+0x70>)
 8007edc:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8007ede:	6823      	ldr	r3, [r4, #0]
 8007ee0:	1c5a      	adds	r2, r3, #1
 8007ee2:	d010      	beq.n	8007f06 <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007ee4:	480d      	ldr	r0, [pc, #52]	@ (8007f1c <xTaskCheckForTimeOut+0x74>)
 8007ee6:	682e      	ldr	r6, [r5, #0]
 8007ee8:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007eea:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007eec:	4286      	cmp	r6, r0
 8007eee:	d001      	beq.n	8007ef4 <xTaskCheckForTimeOut+0x4c>
 8007ef0:	428a      	cmp	r2, r1
 8007ef2:	d90f      	bls.n	8007f14 <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007ef4:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007ef6:	4283      	cmp	r3, r0
 8007ef8:	d90a      	bls.n	8007f10 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 8007efa:	1a5b      	subs	r3, r3, r1
 8007efc:	4413      	add	r3, r2
 8007efe:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007f00:	4628      	mov	r0, r5
 8007f02:	f7ff ffc5 	bl	8007e90 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 8007f06:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8007f08:	f7fe fd9c 	bl	8006a44 <vPortExitCritical>
}
 8007f0c:	4620      	mov	r0, r4
 8007f0e:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 8007f10:	2300      	movs	r3, #0
 8007f12:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8007f14:	2401      	movs	r4, #1
 8007f16:	e7f7      	b.n	8007f08 <xTaskCheckForTimeOut+0x60>
 8007f18:	20012024 	.word	0x20012024
 8007f1c:	20012010 	.word	0x20012010

08007f20 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8007f20:	4b01      	ldr	r3, [pc, #4]	@ (8007f28 <vTaskMissedYield+0x8>)
 8007f22:	2201      	movs	r2, #1
 8007f24:	601a      	str	r2, [r3, #0]
}
 8007f26:	4770      	bx	lr
 8007f28:	20012014 	.word	0x20012014

08007f2c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8007f2c:	4b05      	ldr	r3, [pc, #20]	@ (8007f44 <xTaskGetSchedulerState+0x18>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	b133      	cbz	r3, 8007f40 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f32:	4b05      	ldr	r3, [pc, #20]	@ (8007f48 <xTaskGetSchedulerState+0x1c>)
 8007f34:	6818      	ldr	r0, [r3, #0]
 8007f36:	fab0 f080 	clz	r0, r0
 8007f3a:	0940      	lsrs	r0, r0, #5
 8007f3c:	0040      	lsls	r0, r0, #1
 8007f3e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007f40:	2001      	movs	r0, #1
	}
 8007f42:	4770      	bx	lr
 8007f44:	2001201c 	.word	0x2001201c
 8007f48:	20012004 	.word	0x20012004

08007f4c <xTaskPriorityInherit>:
	{
 8007f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 8007f4e:	4604      	mov	r4, r0
 8007f50:	b338      	cbz	r0, 8007fa2 <xTaskPriorityInherit+0x56>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007f52:	4d1a      	ldr	r5, [pc, #104]	@ (8007fbc <xTaskPriorityInherit+0x70>)
 8007f54:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8007f56:	682a      	ldr	r2, [r5, #0]
 8007f58:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d226      	bcs.n	8007fac <xTaskPriorityInherit+0x60>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007f5e:	6982      	ldr	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007f60:	4e17      	ldr	r6, [pc, #92]	@ (8007fc0 <xTaskPriorityInherit+0x74>)
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007f62:	2a00      	cmp	r2, #0
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f64:	bfa1      	itttt	ge
 8007f66:	682a      	ldrge	r2, [r5, #0]
 8007f68:	6ad2      	ldrge	r2, [r2, #44]	@ 0x2c
 8007f6a:	f1c2 0238 	rsbge	r2, r2, #56	@ 0x38
 8007f6e:	6182      	strge	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007f70:	2214      	movs	r2, #20
 8007f72:	fb02 6303 	mla	r3, r2, r3, r6
 8007f76:	6942      	ldr	r2, [r0, #20]
 8007f78:	429a      	cmp	r2, r3
 8007f7a:	d113      	bne.n	8007fa4 <xTaskPriorityInherit+0x58>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007f7c:	1d07      	adds	r7, r0, #4
 8007f7e:	4638      	mov	r0, r7
 8007f80:	f7fe fcc8 	bl	8006914 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007f84:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007f86:	4a0f      	ldr	r2, [pc, #60]	@ (8007fc4 <xTaskPriorityInherit+0x78>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007f88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007f8a:	6811      	ldr	r1, [r2, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007f8c:	62e3      	str	r3, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007f8e:	2014      	movs	r0, #20
 8007f90:	428b      	cmp	r3, r1
 8007f92:	fb00 6003 	mla	r0, r0, r3, r6
 8007f96:	4639      	mov	r1, r7
 8007f98:	bf88      	it	hi
 8007f9a:	6013      	strhi	r3, [r2, #0]
 8007f9c:	f7fe fc98 	bl	80068d0 <vListInsertEnd>
				xReturn = pdTRUE;
 8007fa0:	2001      	movs	r0, #1
	}
 8007fa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007fa4:	682b      	ldr	r3, [r5, #0]
 8007fa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fa8:	62c3      	str	r3, [r0, #44]	@ 0x2c
 8007faa:	e7f9      	b.n	8007fa0 <xTaskPriorityInherit+0x54>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007fac:	682b      	ldr	r3, [r5, #0]
 8007fae:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 8007fb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fb2:	4298      	cmp	r0, r3
 8007fb4:	bf2c      	ite	cs
 8007fb6:	2000      	movcs	r0, #0
 8007fb8:	2001      	movcc	r0, #1
 8007fba:	e7f2      	b.n	8007fa2 <xTaskPriorityInherit+0x56>
 8007fbc:	200124fc 	.word	0x200124fc
 8007fc0:	2001209c 	.word	0x2001209c
 8007fc4:	20012020 	.word	0x20012020

08007fc8 <xTaskPriorityDisinherit>:
	{
 8007fc8:	b538      	push	{r3, r4, r5, lr}
		if( pxMutexHolder != NULL )
 8007fca:	b908      	cbnz	r0, 8007fd0 <xTaskPriorityDisinherit+0x8>
	BaseType_t xReturn = pdFALSE;
 8007fcc:	2000      	movs	r0, #0
	}
 8007fce:	bd38      	pop	{r3, r4, r5, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8007fd0:	4b1b      	ldr	r3, [pc, #108]	@ (8008040 <xTaskPriorityDisinherit+0x78>)
 8007fd2:	681c      	ldr	r4, [r3, #0]
 8007fd4:	4284      	cmp	r4, r0
 8007fd6:	d008      	beq.n	8007fea <xTaskPriorityDisinherit+0x22>
 8007fd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fdc:	f383 8811 	msr	BASEPRI, r3
 8007fe0:	f3bf 8f6f 	isb	sy
 8007fe4:	f3bf 8f4f 	dsb	sy
 8007fe8:	e7fe      	b.n	8007fe8 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 8007fea:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8007fec:	b943      	cbnz	r3, 8008000 <xTaskPriorityDisinherit+0x38>
 8007fee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ff2:	f383 8811 	msr	BASEPRI, r3
 8007ff6:	f3bf 8f6f 	isb	sy
 8007ffa:	f3bf 8f4f 	dsb	sy
 8007ffe:	e7fe      	b.n	8007ffe <xTaskPriorityDisinherit+0x36>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008000:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8008002:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
			( pxTCB->uxMutexesHeld )--;
 8008004:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008006:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 8008008:	6523      	str	r3, [r4, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800800a:	d0df      	beq.n	8007fcc <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800800c:	2b00      	cmp	r3, #0
 800800e:	d1dd      	bne.n	8007fcc <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008010:	1d25      	adds	r5, r4, #4
 8008012:	4628      	mov	r0, r5
 8008014:	f7fe fc7e 	bl	8006914 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008018:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800801a:	62e3      	str	r3, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800801c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008020:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8008022:	4a08      	ldr	r2, [pc, #32]	@ (8008044 <xTaskPriorityDisinherit+0x7c>)
 8008024:	6811      	ldr	r1, [r2, #0]
 8008026:	428b      	cmp	r3, r1
 8008028:	bf88      	it	hi
 800802a:	6013      	strhi	r3, [r2, #0]
 800802c:	4a06      	ldr	r2, [pc, #24]	@ (8008048 <xTaskPriorityDisinherit+0x80>)
 800802e:	2014      	movs	r0, #20
 8008030:	fb00 2003 	mla	r0, r0, r3, r2
 8008034:	4629      	mov	r1, r5
 8008036:	f7fe fc4b 	bl	80068d0 <vListInsertEnd>
					xReturn = pdTRUE;
 800803a:	2001      	movs	r0, #1
		return xReturn;
 800803c:	e7c7      	b.n	8007fce <xTaskPriorityDisinherit+0x6>
 800803e:	bf00      	nop
 8008040:	200124fc 	.word	0x200124fc
 8008044:	20012020 	.word	0x20012020
 8008048:	2001209c 	.word	0x2001209c

0800804c <vTaskPriorityDisinheritAfterTimeout>:
	{
 800804c:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 800804e:	4604      	mov	r4, r0
 8008050:	2800      	cmp	r0, #0
 8008052:	d041      	beq.n	80080d8 <vTaskPriorityDisinheritAfterTimeout+0x8c>
			configASSERT( pxTCB->uxMutexesHeld );
 8008054:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8008056:	b942      	cbnz	r2, 800806a <vTaskPriorityDisinheritAfterTimeout+0x1e>
 8008058:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800805c:	f383 8811 	msr	BASEPRI, r3
 8008060:	f3bf 8f6f 	isb	sy
 8008064:	f3bf 8f4f 	dsb	sy
 8008068:	e7fe      	b.n	8008068 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800806a:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 800806c:	4299      	cmp	r1, r3
 800806e:	bf38      	it	cc
 8008070:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008072:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8008074:	428b      	cmp	r3, r1
 8008076:	d02f      	beq.n	80080d8 <vTaskPriorityDisinheritAfterTimeout+0x8c>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008078:	2a01      	cmp	r2, #1
 800807a:	d12d      	bne.n	80080d8 <vTaskPriorityDisinheritAfterTimeout+0x8c>
					configASSERT( pxTCB != pxCurrentTCB );
 800807c:	4a17      	ldr	r2, [pc, #92]	@ (80080dc <vTaskPriorityDisinheritAfterTimeout+0x90>)
 800807e:	6812      	ldr	r2, [r2, #0]
 8008080:	4282      	cmp	r2, r0
 8008082:	d108      	bne.n	8008096 <vTaskPriorityDisinheritAfterTimeout+0x4a>
 8008084:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008088:	f383 8811 	msr	BASEPRI, r3
 800808c:	f3bf 8f6f 	isb	sy
 8008090:	f3bf 8f4f 	dsb	sy
 8008094:	e7fe      	b.n	8008094 <vTaskPriorityDisinheritAfterTimeout+0x48>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008096:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008098:	4d11      	ldr	r5, [pc, #68]	@ (80080e0 <vTaskPriorityDisinheritAfterTimeout+0x94>)
					pxTCB->uxPriority = uxPriorityToUse;
 800809a:	62c1      	str	r1, [r0, #44]	@ 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800809c:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800809e:	f04f 0214 	mov.w	r2, #20
 80080a2:	fb02 5303 	mla	r3, r2, r3, r5
 80080a6:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080a8:	bfa4      	itt	ge
 80080aa:	f1c1 0138 	rsbge	r1, r1, #56	@ 0x38
 80080ae:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80080b0:	429a      	cmp	r2, r3
 80080b2:	d111      	bne.n	80080d8 <vTaskPriorityDisinheritAfterTimeout+0x8c>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80080b4:	1d06      	adds	r6, r0, #4
 80080b6:	4630      	mov	r0, r6
 80080b8:	f7fe fc2c 	bl	8006914 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 80080bc:	4a09      	ldr	r2, [pc, #36]	@ (80080e4 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 80080be:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80080c0:	6811      	ldr	r1, [r2, #0]
 80080c2:	2014      	movs	r0, #20
 80080c4:	428b      	cmp	r3, r1
 80080c6:	fb00 5003 	mla	r0, r0, r3, r5
 80080ca:	4631      	mov	r1, r6
	}
 80080cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
						prvAddTaskToReadyList( pxTCB );
 80080d0:	bf88      	it	hi
 80080d2:	6013      	strhi	r3, [r2, #0]
 80080d4:	f7fe bbfc 	b.w	80068d0 <vListInsertEnd>
	}
 80080d8:	bd70      	pop	{r4, r5, r6, pc}
 80080da:	bf00      	nop
 80080dc:	200124fc 	.word	0x200124fc
 80080e0:	2001209c 	.word	0x2001209c
 80080e4:	20012020 	.word	0x20012020

080080e8 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 80080e8:	4b04      	ldr	r3, [pc, #16]	@ (80080fc <pvTaskIncrementMutexHeldCount+0x14>)
 80080ea:	681a      	ldr	r2, [r3, #0]
 80080ec:	b11a      	cbz	r2, 80080f6 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 80080ee:	6819      	ldr	r1, [r3, #0]
 80080f0:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 80080f2:	3201      	adds	r2, #1
 80080f4:	650a      	str	r2, [r1, #80]	@ 0x50
		return pxCurrentTCB;
 80080f6:	6818      	ldr	r0, [r3, #0]
	}
 80080f8:	4770      	bx	lr
 80080fa:	bf00      	nop
 80080fc:	200124fc 	.word	0x200124fc

08008100 <prvInsertTimerInActiveList>:
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

	if( xNextExpiryTime <= xTimeNow )
 8008100:	4291      	cmp	r1, r2
{
 8008102:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008104:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008106:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 8008108:	d80a      	bhi.n	8008120 <prvInsertTimerInActiveList+0x20>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800810a:	1ad2      	subs	r2, r2, r3
 800810c:	6983      	ldr	r3, [r0, #24]
 800810e:	429a      	cmp	r2, r3
 8008110:	d20d      	bcs.n	800812e <prvInsertTimerInActiveList+0x2e>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008112:	4b08      	ldr	r3, [pc, #32]	@ (8008134 <prvInsertTimerInActiveList+0x34>)
 8008114:	1d01      	adds	r1, r0, #4
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008116:	6818      	ldr	r0, [r3, #0]
 8008118:	f7fe fbe5 	bl	80068e6 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800811c:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
 800811e:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008120:	429a      	cmp	r2, r3
 8008122:	d201      	bcs.n	8008128 <prvInsertTimerInActiveList+0x28>
 8008124:	4299      	cmp	r1, r3
 8008126:	d202      	bcs.n	800812e <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008128:	4b03      	ldr	r3, [pc, #12]	@ (8008138 <prvInsertTimerInActiveList+0x38>)
 800812a:	1d01      	adds	r1, r0, #4
 800812c:	e7f3      	b.n	8008116 <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 800812e:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8008130:	e7f5      	b.n	800811e <prvInsertTimerInActiveList+0x1e>
 8008132:	bf00      	nop
 8008134:	200125fc 	.word	0x200125fc
 8008138:	20012600 	.word	0x20012600

0800813c <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800813c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 800813e:	4c11      	ldr	r4, [pc, #68]	@ (8008184 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 8008140:	f7fe fc60 	bl	8006a04 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8008144:	6825      	ldr	r5, [r4, #0]
 8008146:	b9bd      	cbnz	r5, 8008178 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 8008148:	4f0f      	ldr	r7, [pc, #60]	@ (8008188 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 800814a:	4e10      	ldr	r6, [pc, #64]	@ (800818c <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 800814c:	4638      	mov	r0, r7
 800814e:	f7fe fbb1 	bl	80068b4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008152:	4630      	mov	r0, r6
 8008154:	f7fe fbae 	bl	80068b4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008158:	4b0d      	ldr	r3, [pc, #52]	@ (8008190 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800815a:	4a0e      	ldr	r2, [pc, #56]	@ (8008194 <prvCheckForValidListAndQueue+0x58>)
			pxCurrentTimerList = &xActiveTimerList1;
 800815c:	601f      	str	r7, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800815e:	4b0e      	ldr	r3, [pc, #56]	@ (8008198 <prvCheckForValidListAndQueue+0x5c>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008160:	2110      	movs	r1, #16
			pxOverflowTimerList = &xActiveTimerList2;
 8008162:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008164:	200a      	movs	r0, #10
 8008166:	4b0d      	ldr	r3, [pc, #52]	@ (800819c <prvCheckForValidListAndQueue+0x60>)
 8008168:	9500      	str	r5, [sp, #0]
 800816a:	f7fe fe54 	bl	8006e16 <xQueueGenericCreateStatic>
 800816e:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008170:	b110      	cbz	r0, 8008178 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008172:	490b      	ldr	r1, [pc, #44]	@ (80081a0 <prvCheckForValidListAndQueue+0x64>)
 8008174:	f7ff fa2c 	bl	80075d0 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 8008178:	b003      	add	sp, #12
 800817a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 800817e:	f7fe bc61 	b.w	8006a44 <vPortExitCritical>
 8008182:	bf00      	nop
 8008184:	200125f8 	.word	0x200125f8
 8008188:	20012618 	.word	0x20012618
 800818c:	20012604 	.word	0x20012604
 8008190:	20012600 	.word	0x20012600
 8008194:	20012550 	.word	0x20012550
 8008198:	200125fc 	.word	0x200125fc
 800819c:	20012500 	.word	0x20012500
 80081a0:	08013cab 	.word	0x08013cab

080081a4 <xTimerCreateTimerTask>:
{
 80081a4:	b510      	push	{r4, lr}
 80081a6:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 80081a8:	f7ff ffc8 	bl	800813c <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 80081ac:	4b12      	ldr	r3, [pc, #72]	@ (80081f8 <xTimerCreateTimerTask+0x54>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	b1b3      	cbz	r3, 80081e0 <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80081b2:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80081b4:	aa07      	add	r2, sp, #28
 80081b6:	a906      	add	r1, sp, #24
 80081b8:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80081ba:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80081be:	f7fe fa71 	bl	80066a4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80081c2:	9b05      	ldr	r3, [sp, #20]
 80081c4:	9302      	str	r3, [sp, #8]
 80081c6:	9b06      	ldr	r3, [sp, #24]
 80081c8:	9301      	str	r3, [sp, #4]
 80081ca:	2302      	movs	r3, #2
 80081cc:	9300      	str	r3, [sp, #0]
 80081ce:	9a07      	ldr	r2, [sp, #28]
 80081d0:	490a      	ldr	r1, [pc, #40]	@ (80081fc <xTimerCreateTimerTask+0x58>)
 80081d2:	480b      	ldr	r0, [pc, #44]	@ (8008200 <xTimerCreateTimerTask+0x5c>)
 80081d4:	4623      	mov	r3, r4
 80081d6:	f7ff fbc0 	bl	800795a <xTaskCreateStatic>
 80081da:	4b0a      	ldr	r3, [pc, #40]	@ (8008204 <xTimerCreateTimerTask+0x60>)
 80081dc:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 80081de:	b940      	cbnz	r0, 80081f2 <xTimerCreateTimerTask+0x4e>
 80081e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081e4:	f383 8811 	msr	BASEPRI, r3
 80081e8:	f3bf 8f6f 	isb	sy
 80081ec:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 80081f0:	e7fe      	b.n	80081f0 <xTimerCreateTimerTask+0x4c>
}
 80081f2:	2001      	movs	r0, #1
 80081f4:	b008      	add	sp, #32
 80081f6:	bd10      	pop	{r4, pc}
 80081f8:	200125f8 	.word	0x200125f8
 80081fc:	08013cb0 	.word	0x08013cb0
 8008200:	08008305 	.word	0x08008305
 8008204:	200125f4 	.word	0x200125f4

08008208 <xTimerGenericCommand>:
{
 8008208:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800820a:	4616      	mov	r6, r2
	configASSERT( xTimer );
 800820c:	4604      	mov	r4, r0
{
 800820e:	461a      	mov	r2, r3
	configASSERT( xTimer );
 8008210:	b940      	cbnz	r0, 8008224 <xTimerGenericCommand+0x1c>
 8008212:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008216:	f383 8811 	msr	BASEPRI, r3
 800821a:	f3bf 8f6f 	isb	sy
 800821e:	f3bf 8f4f 	dsb	sy
 8008222:	e7fe      	b.n	8008222 <xTimerGenericCommand+0x1a>
	if( xTimerQueue != NULL )
 8008224:	4d0d      	ldr	r5, [pc, #52]	@ (800825c <xTimerGenericCommand+0x54>)
 8008226:	6828      	ldr	r0, [r5, #0]
 8008228:	b180      	cbz	r0, 800824c <xTimerGenericCommand+0x44>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800822a:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800822c:	e9cd 1600 	strd	r1, r6, [sp]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008230:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008232:	dc0d      	bgt.n	8008250 <xTimerGenericCommand+0x48>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008234:	f7ff fe7a 	bl	8007f2c <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008238:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800823a:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800823c:	bf08      	it	eq
 800823e:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008240:	6828      	ldr	r0, [r5, #0]
 8008242:	bf18      	it	ne
 8008244:	461a      	movne	r2, r3
 8008246:	4669      	mov	r1, sp
 8008248:	f7fe fe9a 	bl	8006f80 <xQueueGenericSend>
}
 800824c:	b004      	add	sp, #16
 800824e:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008250:	2300      	movs	r3, #0
 8008252:	4669      	mov	r1, sp
 8008254:	f7fe ff46 	bl	80070e4 <xQueueGenericSendFromISR>
 8008258:	e7f8      	b.n	800824c <xTimerGenericCommand+0x44>
 800825a:	bf00      	nop
 800825c:	200125f8 	.word	0x200125f8

08008260 <prvSampleTimeNow>:
{
 8008260:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	if( xTimeNow < xLastTime )
 8008264:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8008300 <prvSampleTimeNow+0xa0>
{
 8008268:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 800826a:	f7ff fc2b 	bl	8007ac4 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800826e:	f8d8 3000 	ldr.w	r3, [r8]
 8008272:	4283      	cmp	r3, r0
	xTimeNow = xTaskGetTickCount();
 8008274:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 8008276:	d909      	bls.n	800828c <prvSampleTimeNow+0x2c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008278:	4f1f      	ldr	r7, [pc, #124]	@ (80082f8 <prvSampleTimeNow+0x98>)
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	681a      	ldr	r2, [r3, #0]
 800827e:	b96a      	cbnz	r2, 800829c <prvSampleTimeNow+0x3c>
	pxCurrentTimerList = pxOverflowTimerList;
 8008280:	4a1e      	ldr	r2, [pc, #120]	@ (80082fc <prvSampleTimeNow+0x9c>)
 8008282:	6811      	ldr	r1, [r2, #0]
 8008284:	6039      	str	r1, [r7, #0]
	pxOverflowTimerList = pxTemp;
 8008286:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 8008288:	2301      	movs	r3, #1
 800828a:	e000      	b.n	800828e <prvSampleTimeNow+0x2e>
 800828c:	2300      	movs	r3, #0
}
 800828e:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdTRUE;
 8008290:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 8008292:	f8c8 5000 	str.w	r5, [r8]
}
 8008296:	b002      	add	sp, #8
 8008298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800829c:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800829e:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80082a0:	f8d3 9000 	ldr.w	r9, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80082a4:	f104 0a04 	add.w	sl, r4, #4
 80082a8:	4650      	mov	r0, sl
 80082aa:	f7fe fb33 	bl	8006914 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80082ae:	6a23      	ldr	r3, [r4, #32]
 80082b0:	4620      	mov	r0, r4
 80082b2:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80082b4:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80082b8:	075b      	lsls	r3, r3, #29
 80082ba:	d5de      	bpl.n	800827a <prvSampleTimeNow+0x1a>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80082bc:	69a3      	ldr	r3, [r4, #24]
 80082be:	444b      	add	r3, r9
			if( xReloadTime > xNextExpireTime )
 80082c0:	4599      	cmp	r9, r3
 80082c2:	d206      	bcs.n	80082d2 <prvSampleTimeNow+0x72>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80082c4:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80082c6:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80082c8:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80082ca:	4651      	mov	r1, sl
 80082cc:	f7fe fb0b 	bl	80068e6 <vListInsert>
 80082d0:	e7d3      	b.n	800827a <prvSampleTimeNow+0x1a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80082d2:	2300      	movs	r3, #0
 80082d4:	9300      	str	r3, [sp, #0]
 80082d6:	464a      	mov	r2, r9
 80082d8:	4619      	mov	r1, r3
 80082da:	4620      	mov	r0, r4
 80082dc:	f7ff ff94 	bl	8008208 <xTimerGenericCommand>
				configASSERT( xResult );
 80082e0:	2800      	cmp	r0, #0
 80082e2:	d1ca      	bne.n	800827a <prvSampleTimeNow+0x1a>
 80082e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082e8:	f383 8811 	msr	BASEPRI, r3
 80082ec:	f3bf 8f6f 	isb	sy
 80082f0:	f3bf 8f4f 	dsb	sy
 80082f4:	e7fe      	b.n	80082f4 <prvSampleTimeNow+0x94>
 80082f6:	bf00      	nop
 80082f8:	20012600 	.word	0x20012600
 80082fc:	200125fc 	.word	0x200125fc
 8008300:	200125f0 	.word	0x200125f0

08008304 <prvTimerTask>:
{
 8008304:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008308:	4d6e      	ldr	r5, [pc, #440]	@ (80084c4 <prvTimerTask+0x1c0>)
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800830a:	4e6f      	ldr	r6, [pc, #444]	@ (80084c8 <prvTimerTask+0x1c4>)
{
 800830c:	b089      	sub	sp, #36	@ 0x24
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800830e:	682b      	ldr	r3, [r5, #0]
 8008310:	f8d3 8000 	ldr.w	r8, [r3]
 8008314:	f1b8 0f00 	cmp.w	r8, #0
 8008318:	d035      	beq.n	8008386 <prvTimerTask+0x82>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800831a:	68db      	ldr	r3, [r3, #12]
 800831c:	f8d3 8000 	ldr.w	r8, [r3]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008320:	2400      	movs	r4, #0
	vTaskSuspendAll();
 8008322:	f7ff fbc7 	bl	8007ab4 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008326:	a804      	add	r0, sp, #16
 8008328:	f7ff ff9a 	bl	8008260 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 800832c:	9b04      	ldr	r3, [sp, #16]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800832e:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 8008330:	2b00      	cmp	r3, #0
 8008332:	d169      	bne.n	8008408 <prvTimerTask+0x104>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008334:	2c00      	cmp	r4, #0
 8008336:	d14c      	bne.n	80083d2 <prvTimerTask+0xce>
 8008338:	4540      	cmp	r0, r8
 800833a:	d350      	bcc.n	80083de <prvTimerTask+0xda>
				( void ) xTaskResumeAll();
 800833c:	f7ff fc5e 	bl	8007bfc <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008340:	682b      	ldr	r3, [r5, #0]
 8008342:	68db      	ldr	r3, [r3, #12]
 8008344:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008346:	1d38      	adds	r0, r7, #4
 8008348:	f7fe fae4 	bl	8006914 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800834c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008350:	0758      	lsls	r0, r3, #29
 8008352:	d51a      	bpl.n	800838a <prvTimerTask+0x86>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008354:	69b9      	ldr	r1, [r7, #24]
 8008356:	4643      	mov	r3, r8
 8008358:	464a      	mov	r2, r9
 800835a:	4441      	add	r1, r8
 800835c:	4638      	mov	r0, r7
 800835e:	f7ff fecf 	bl	8008100 <prvInsertTimerInActiveList>
 8008362:	b1b0      	cbz	r0, 8008392 <prvTimerTask+0x8e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008364:	9400      	str	r4, [sp, #0]
 8008366:	4623      	mov	r3, r4
 8008368:	4642      	mov	r2, r8
 800836a:	4621      	mov	r1, r4
 800836c:	4638      	mov	r0, r7
 800836e:	f7ff ff4b 	bl	8008208 <xTimerGenericCommand>
			configASSERT( xResult );
 8008372:	b970      	cbnz	r0, 8008392 <prvTimerTask+0x8e>
 8008374:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008378:	f383 8811 	msr	BASEPRI, r3
 800837c:	f3bf 8f6f 	isb	sy
 8008380:	f3bf 8f4f 	dsb	sy
 8008384:	e7fe      	b.n	8008384 <prvTimerTask+0x80>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008386:	2401      	movs	r4, #1
 8008388:	e7cb      	b.n	8008322 <prvTimerTask+0x1e>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800838a:	f023 0301 	bic.w	r3, r3, #1
 800838e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008392:	6a3b      	ldr	r3, [r7, #32]
 8008394:	4638      	mov	r0, r7
 8008396:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008398:	6830      	ldr	r0, [r6, #0]
 800839a:	2200      	movs	r2, #0
 800839c:	a904      	add	r1, sp, #16
 800839e:	f7fe ff4f 	bl	8007240 <xQueueReceive>
 80083a2:	2800      	cmp	r0, #0
 80083a4:	d0b3      	beq.n	800830e <prvTimerTask+0xa>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80083a6:	9b04      	ldr	r3, [sp, #16]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80083a8:	9806      	ldr	r0, [sp, #24]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	db2f      	blt.n	800840e <prvTimerTask+0x10a>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80083ae:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80083b0:	6963      	ldr	r3, [r4, #20]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d132      	bne.n	800841c <prvTimerTask+0x118>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80083b6:	a803      	add	r0, sp, #12
 80083b8:	f7ff ff52 	bl	8008260 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 80083bc:	9b04      	ldr	r3, [sp, #16]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80083be:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 80083c0:	2b09      	cmp	r3, #9
 80083c2:	d8e9      	bhi.n	8008398 <prvTimerTask+0x94>
 80083c4:	e8df f003 	tbb	[pc, r3]
 80083c8:	572e2e2e 	.word	0x572e2e2e
 80083cc:	2e2e765e 	.word	0x2e2e765e
 80083d0:	5e57      	.short	0x5e57
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80083d2:	4b3e      	ldr	r3, [pc, #248]	@ (80084cc <prvTimerTask+0x1c8>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	681c      	ldr	r4, [r3, #0]
 80083d8:	fab4 f484 	clz	r4, r4
 80083dc:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80083de:	6830      	ldr	r0, [r6, #0]
 80083e0:	4622      	mov	r2, r4
 80083e2:	eba8 0109 	sub.w	r1, r8, r9
 80083e6:	f7ff f932 	bl	800764e <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80083ea:	f7ff fc07 	bl	8007bfc <xTaskResumeAll>
 80083ee:	2800      	cmp	r0, #0
 80083f0:	d1d2      	bne.n	8008398 <prvTimerTask+0x94>
					portYIELD_WITHIN_API();
 80083f2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80083f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80083fa:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80083fe:	f3bf 8f4f 	dsb	sy
 8008402:	f3bf 8f6f 	isb	sy
 8008406:	e7c7      	b.n	8008398 <prvTimerTask+0x94>
			( void ) xTaskResumeAll();
 8008408:	f7ff fbf8 	bl	8007bfc <xTaskResumeAll>
}
 800840c:	e7c4      	b.n	8008398 <prvTimerTask+0x94>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800840e:	9b05      	ldr	r3, [sp, #20]
 8008410:	9907      	ldr	r1, [sp, #28]
 8008412:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008414:	9b04      	ldr	r3, [sp, #16]
 8008416:	2b00      	cmp	r3, #0
 8008418:	dbbe      	blt.n	8008398 <prvTimerTask+0x94>
 800841a:	e7c8      	b.n	80083ae <prvTimerTask+0xaa>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800841c:	1d20      	adds	r0, r4, #4
 800841e:	f7fe fa79 	bl	8006914 <uxListRemove>
 8008422:	e7c8      	b.n	80083b6 <prvTimerTask+0xb2>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008424:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008428:	69a1      	ldr	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800842a:	f043 0301 	orr.w	r3, r3, #1
 800842e:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008432:	9b05      	ldr	r3, [sp, #20]
 8008434:	4620      	mov	r0, r4
 8008436:	4419      	add	r1, r3
 8008438:	f7ff fe62 	bl	8008100 <prvInsertTimerInActiveList>
 800843c:	2800      	cmp	r0, #0
 800843e:	d0ab      	beq.n	8008398 <prvTimerTask+0x94>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008440:	6a23      	ldr	r3, [r4, #32]
 8008442:	4620      	mov	r0, r4
 8008444:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008446:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800844a:	0759      	lsls	r1, r3, #29
 800844c:	d5a4      	bpl.n	8008398 <prvTimerTask+0x94>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800844e:	69a2      	ldr	r2, [r4, #24]
 8008450:	9905      	ldr	r1, [sp, #20]
 8008452:	2300      	movs	r3, #0
 8008454:	440a      	add	r2, r1
 8008456:	9300      	str	r3, [sp, #0]
 8008458:	4619      	mov	r1, r3
 800845a:	4620      	mov	r0, r4
 800845c:	f7ff fed4 	bl	8008208 <xTimerGenericCommand>
							configASSERT( xResult );
 8008460:	2800      	cmp	r0, #0
 8008462:	d199      	bne.n	8008398 <prvTimerTask+0x94>
 8008464:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008468:	f383 8811 	msr	BASEPRI, r3
 800846c:	f3bf 8f6f 	isb	sy
 8008470:	f3bf 8f4f 	dsb	sy
 8008474:	e7fe      	b.n	8008474 <prvTimerTask+0x170>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008476:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800847a:	f023 0301 	bic.w	r3, r3, #1
 800847e:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 8008482:	e789      	b.n	8008398 <prvTimerTask+0x94>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008484:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8008488:	f043 0301 	orr.w	r3, r3, #1
 800848c:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008490:	9905      	ldr	r1, [sp, #20]
 8008492:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008494:	b941      	cbnz	r1, 80084a8 <prvTimerTask+0x1a4>
 8008496:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800849a:	f383 8811 	msr	BASEPRI, r3
 800849e:	f3bf 8f6f 	isb	sy
 80084a2:	f3bf 8f4f 	dsb	sy
 80084a6:	e7fe      	b.n	80084a6 <prvTimerTask+0x1a2>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80084a8:	4603      	mov	r3, r0
 80084aa:	4401      	add	r1, r0
 80084ac:	4620      	mov	r0, r4
 80084ae:	f7ff fe27 	bl	8008100 <prvInsertTimerInActiveList>
					break;
 80084b2:	e771      	b.n	8008398 <prvTimerTask+0x94>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80084b4:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80084b8:	079a      	lsls	r2, r3, #30
 80084ba:	d4de      	bmi.n	800847a <prvTimerTask+0x176>
							vPortFree( pxTimer );
 80084bc:	4620      	mov	r0, r4
 80084be:	f7fe f9bb 	bl	8006838 <vPortFree>
 80084c2:	e769      	b.n	8008398 <prvTimerTask+0x94>
 80084c4:	20012600 	.word	0x20012600
 80084c8:	200125f8 	.word	0x200125f8
 80084cc:	200125fc 	.word	0x200125fc

080084d0 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 80084d0:	8880      	ldrh	r0, [r0, #4]
 80084d2:	4770      	bx	lr

080084d4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 80084d4:	b570      	push	{r4, r5, r6, lr}
 80084d6:	6803      	ldr	r3, [r0, #0]
 80084d8:	4605      	mov	r5, r0
 80084da:	460c      	mov	r4, r1
 80084dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084de:	2100      	movs	r1, #0
 80084e0:	4798      	blx	r3
 80084e2:	682b      	ldr	r3, [r5, #0]
 80084e4:	4606      	mov	r6, r0
 80084e6:	6a1b      	ldr	r3, [r3, #32]
 80084e8:	4628      	mov	r0, r5
 80084ea:	4798      	blx	r3
 80084ec:	1ba4      	subs	r4, r4, r6
 80084ee:	b2a4      	uxth	r4, r4
 80084f0:	fbb4 f0f0 	udiv	r0, r4, r0
 80084f4:	bd70      	pop	{r4, r5, r6, pc}

080084f6 <_ZN8touchgfx17AbstractPartition5clearEv>:
 80084f6:	2300      	movs	r3, #0
 80084f8:	8083      	strh	r3, [r0, #4]
 80084fa:	4770      	bx	lr

080084fc <_ZN8touchgfx17AbstractPartition8allocateEt>:
 80084fc:	b510      	push	{r4, lr}
 80084fe:	6803      	ldr	r3, [r0, #0]
 8008500:	8881      	ldrh	r1, [r0, #4]
 8008502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008504:	4604      	mov	r4, r0
 8008506:	4798      	blx	r3
 8008508:	88a3      	ldrh	r3, [r4, #4]
 800850a:	3301      	adds	r3, #1
 800850c:	80a3      	strh	r3, [r4, #4]
 800850e:	bd10      	pop	{r4, pc}

08008510 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8008510:	6803      	ldr	r3, [r0, #0]
 8008512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008514:	4718      	bx	r3

08008516 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8008516:	4770      	bx	lr

08008518 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8008518:	4a02      	ldr	r2, [pc, #8]	@ (8008524 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 800851a:	6002      	str	r2, [r0, #0]
 800851c:	2200      	movs	r2, #0
 800851e:	8082      	strh	r2, [r0, #4]
 8008520:	4770      	bx	lr
 8008522:	bf00      	nop
 8008524:	080144fc 	.word	0x080144fc

08008528 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8008528:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800852a:	2000      	movs	r0, #0
 800852c:	b12b      	cbz	r3, 800853a <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800852e:	b920      	cbnz	r0, 800853a <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8008530:	1a5a      	subs	r2, r3, r1
 8008532:	4250      	negs	r0, r2
 8008534:	4150      	adcs	r0, r2
 8008536:	699b      	ldr	r3, [r3, #24]
 8008538:	e7f8      	b.n	800852c <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 800853a:	4770      	bx	lr

0800853c <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 800853c:	2300      	movs	r3, #0
 800853e:	6148      	str	r0, [r1, #20]
 8008540:	618b      	str	r3, [r1, #24]
 8008542:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8008544:	b913      	cbnz	r3, 800854c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 8008546:	6281      	str	r1, [r0, #40]	@ 0x28
 8008548:	4770      	bx	lr
 800854a:	4613      	mov	r3, r2
 800854c:	699a      	ldr	r2, [r3, #24]
 800854e:	2a00      	cmp	r2, #0
 8008550:	d1fb      	bne.n	800854a <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 8008552:	6199      	str	r1, [r3, #24]
 8008554:	4770      	bx	lr

08008556 <_ZN8touchgfx9Container9removeAllEv>:
 8008556:	2200      	movs	r2, #0
 8008558:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800855a:	b123      	cbz	r3, 8008566 <_ZN8touchgfx9Container9removeAllEv+0x10>
 800855c:	6999      	ldr	r1, [r3, #24]
 800855e:	6281      	str	r1, [r0, #40]	@ 0x28
 8008560:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8008564:	e7f8      	b.n	8008558 <_ZN8touchgfx9Container9removeAllEv+0x2>
 8008566:	4770      	bx	lr

08008568 <_ZN8touchgfx9Container6unlinkEv>:
 8008568:	2300      	movs	r3, #0
 800856a:	6283      	str	r3, [r0, #40]	@ 0x28
 800856c:	4770      	bx	lr

0800856e <_ZNK8touchgfx9Container12getSolidRectEv>:
 800856e:	2200      	movs	r2, #0
 8008570:	8002      	strh	r2, [r0, #0]
 8008572:	8042      	strh	r2, [r0, #2]
 8008574:	8082      	strh	r2, [r0, #4]
 8008576:	80c2      	strh	r2, [r0, #6]
 8008578:	4770      	bx	lr

0800857a <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 800857a:	b570      	push	{r4, r5, r6, lr}
 800857c:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800857e:	460d      	mov	r5, r1
 8008580:	4616      	mov	r6, r2
 8008582:	b13c      	cbz	r4, 8008594 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8008584:	6823      	ldr	r3, [r4, #0]
 8008586:	4620      	mov	r0, r4
 8008588:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800858a:	4632      	mov	r2, r6
 800858c:	4629      	mov	r1, r5
 800858e:	4798      	blx	r3
 8008590:	69a4      	ldr	r4, [r4, #24]
 8008592:	e7f6      	b.n	8008582 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8008594:	bd70      	pop	{r4, r5, r6, pc}

08008596 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8008596:	b538      	push	{r3, r4, r5, lr}
 8008598:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800859a:	460d      	mov	r5, r1
 800859c:	b134      	cbz	r4, 80085ac <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 800859e:	682b      	ldr	r3, [r5, #0]
 80085a0:	4621      	mov	r1, r4
 80085a2:	689b      	ldr	r3, [r3, #8]
 80085a4:	4628      	mov	r0, r5
 80085a6:	4798      	blx	r3
 80085a8:	69a4      	ldr	r4, [r4, #24]
 80085aa:	e7f7      	b.n	800859c <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 80085ac:	bd38      	pop	{r3, r4, r5, pc}

080085ae <_ZN8touchgfx9ContainerD1Ev>:
 80085ae:	4770      	bx	lr

080085b0 <_ZN8touchgfx9ContainerD0Ev>:
 80085b0:	b510      	push	{r4, lr}
 80085b2:	212c      	movs	r1, #44	@ 0x2c
 80085b4:	4604      	mov	r4, r0
 80085b6:	f009 fcf3 	bl	8011fa0 <_ZdlPvj>
 80085ba:	4620      	mov	r0, r4
 80085bc:	bd10      	pop	{r4, pc}

080085be <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 80085be:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80085c0:	b19b      	cbz	r3, 80085ea <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 80085c2:	428b      	cmp	r3, r1
 80085c4:	d109      	bne.n	80085da <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 80085c6:	699a      	ldr	r2, [r3, #24]
 80085c8:	2100      	movs	r1, #0
 80085ca:	6159      	str	r1, [r3, #20]
 80085cc:	6282      	str	r2, [r0, #40]	@ 0x28
 80085ce:	b902      	cbnz	r2, 80085d2 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 80085d0:	4770      	bx	lr
 80085d2:	6199      	str	r1, [r3, #24]
 80085d4:	4770      	bx	lr
 80085d6:	4613      	mov	r3, r2
 80085d8:	b13a      	cbz	r2, 80085ea <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 80085da:	699a      	ldr	r2, [r3, #24]
 80085dc:	428a      	cmp	r2, r1
 80085de:	d1fa      	bne.n	80085d6 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 80085e0:	698a      	ldr	r2, [r1, #24]
 80085e2:	619a      	str	r2, [r3, #24]
 80085e4:	2300      	movs	r3, #0
 80085e6:	e9c1 3305 	strd	r3, r3, [r1, #20]
 80085ea:	4770      	bx	lr

080085ec <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 80085ec:	b410      	push	{r4}
 80085ee:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80085f0:	4604      	mov	r4, r0
 80085f2:	b92b      	cbnz	r3, 8008600 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 80085f4:	6803      	ldr	r3, [r0, #0]
 80085f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80085fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80085fc:	4611      	mov	r1, r2
 80085fe:	4718      	bx	r3
 8008600:	b941      	cbnz	r1, 8008614 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8008602:	6193      	str	r3, [r2, #24]
 8008604:	6282      	str	r2, [r0, #40]	@ 0x28
 8008606:	6154      	str	r4, [r2, #20]
 8008608:	f85d 4b04 	ldr.w	r4, [sp], #4
 800860c:	4770      	bx	lr
 800860e:	4603      	mov	r3, r0
 8008610:	2800      	cmp	r0, #0
 8008612:	d0f9      	beq.n	8008608 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8008614:	4299      	cmp	r1, r3
 8008616:	6998      	ldr	r0, [r3, #24]
 8008618:	d1f9      	bne.n	800860e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 800861a:	6190      	str	r0, [r2, #24]
 800861c:	618a      	str	r2, [r1, #24]
 800861e:	e7f2      	b.n	8008606 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

08008620 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8008620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008624:	461f      	mov	r7, r3
 8008626:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800862a:	460d      	mov	r5, r1
 800862c:	4616      	mov	r6, r2
 800862e:	b103      	cbz	r3, 8008632 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8008630:	6038      	str	r0, [r7, #0]
 8008632:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8008634:	b314      	cbz	r4, 800867c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8008636:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 800863a:	b1eb      	cbz	r3, 8008678 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800863c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8008640:	428d      	cmp	r5, r1
 8008642:	db19      	blt.n	8008678 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8008644:	8923      	ldrh	r3, [r4, #8]
 8008646:	b289      	uxth	r1, r1
 8008648:	440b      	add	r3, r1
 800864a:	b21b      	sxth	r3, r3
 800864c:	429d      	cmp	r5, r3
 800864e:	da13      	bge.n	8008678 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8008650:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8008654:	4296      	cmp	r6, r2
 8008656:	db0f      	blt.n	8008678 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8008658:	8963      	ldrh	r3, [r4, #10]
 800865a:	b292      	uxth	r2, r2
 800865c:	4413      	add	r3, r2
 800865e:	b21b      	sxth	r3, r3
 8008660:	429e      	cmp	r6, r3
 8008662:	da09      	bge.n	8008678 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8008664:	6823      	ldr	r3, [r4, #0]
 8008666:	1ab2      	subs	r2, r6, r2
 8008668:	1a69      	subs	r1, r5, r1
 800866a:	f8d3 8024 	ldr.w	r8, [r3, #36]	@ 0x24
 800866e:	b212      	sxth	r2, r2
 8008670:	463b      	mov	r3, r7
 8008672:	b209      	sxth	r1, r1
 8008674:	4620      	mov	r0, r4
 8008676:	47c0      	blx	r8
 8008678:	69a4      	ldr	r4, [r4, #24]
 800867a:	e7db      	b.n	8008634 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 800867c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008680 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 8008680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008684:	4c6e      	ldr	r4, [pc, #440]	@ (8008840 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 8008686:	b0a1      	sub	sp, #132	@ 0x84
 8008688:	6824      	ldr	r4, [r4, #0]
 800868a:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 800868c:	f894 9049 	ldrb.w	r9, [r4, #73]	@ 0x49
 8008690:	9303      	str	r3, [sp, #12]
 8008692:	2400      	movs	r4, #0
 8008694:	802c      	strh	r4, [r5, #0]
 8008696:	9d2b      	ldr	r5, [sp, #172]	@ 0xac
 8008698:	802c      	strh	r4, [r5, #0]
 800869a:	601c      	str	r4, [r3, #0]
 800869c:	4606      	mov	r6, r0
 800869e:	e9cd 1201 	strd	r1, r2, [sp, #4]
 80086a2:	f7ff ffbd 	bl	8008620 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 80086a6:	f1b9 0f03 	cmp.w	r9, #3
 80086aa:	f340 80c2 	ble.w	8008832 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b2>
 80086ae:	4631      	mov	r1, r6
 80086b0:	a80c      	add	r0, sp, #48	@ 0x30
 80086b2:	f004 fdfb 	bl	800d2ac <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80086b6:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 80086ba:	9306      	str	r3, [sp, #24]
 80086bc:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 80086c0:	9307      	str	r3, [sp, #28]
 80086c2:	9b03      	ldr	r3, [sp, #12]
 80086c4:	f8d3 a000 	ldr.w	sl, [r3]
 80086c8:	f1ba 0f00 	cmp.w	sl, #0
 80086cc:	f000 80b4 	beq.w	8008838 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b8>
 80086d0:	4651      	mov	r1, sl
 80086d2:	a810      	add	r0, sp, #64	@ 0x40
 80086d4:	f004 fdea 	bl	800d2ac <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80086d8:	9b01      	ldr	r3, [sp, #4]
 80086da:	9a06      	ldr	r2, [sp, #24]
 80086dc:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	@ 0x44
 80086e0:	189d      	adds	r5, r3, r2
 80086e2:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	@ 0x40
 80086e6:	9a07      	ldr	r2, [sp, #28]
 80086e8:	2002      	movs	r0, #2
 80086ea:	fb91 f1f0 	sdiv	r1, r1, r0
 80086ee:	4419      	add	r1, r3
 80086f0:	1a6d      	subs	r5, r5, r1
 80086f2:	9b02      	ldr	r3, [sp, #8]
 80086f4:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	@ 0x42
 80086f8:	4413      	add	r3, r2
 80086fa:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	@ 0x46
 80086fe:	fb92 f2f0 	sdiv	r2, r2, r0
 8008702:	440a      	add	r2, r1
 8008704:	1a9b      	subs	r3, r3, r2
 8008706:	435b      	muls	r3, r3
 8008708:	fb05 3505 	mla	r5, r5, r5, r3
 800870c:	4f4d      	ldr	r7, [pc, #308]	@ (8008844 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c4>)
 800870e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8008710:	ac10      	add	r4, sp, #64	@ 0x40
 8008712:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008714:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8008716:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008718:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800871a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800871c:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8008720:	f1b9 0f0c 	cmp.w	r9, #12
 8008724:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8008728:	f04f 0303 	mov.w	r3, #3
 800872c:	bfc8      	it	gt
 800872e:	4698      	movgt	r8, r3
 8008730:	f8cd 9000 	str.w	r9, [sp]
 8008734:	f04f 0400 	mov.w	r4, #0
 8008738:	bfdc      	itt	le
 800873a:	f109 32ff 	addle.w	r2, r9, #4294967295
 800873e:	fb92 f8f3 	sdivle	r8, r2, r3
 8008742:	1c63      	adds	r3, r4, #1
 8008744:	aa10      	add	r2, sp, #64	@ 0x40
 8008746:	f004 0401 	and.w	r4, r4, #1
 800874a:	9308      	str	r3, [sp, #32]
 800874c:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 8008750:	9b00      	ldr	r3, [sp, #0]
 8008752:	fb93 f3f8 	sdiv	r3, r3, r8
 8008756:	b29b      	uxth	r3, r3
 8008758:	3404      	adds	r4, #4
 800875a:	f04f 0b00 	mov.w	fp, #0
 800875e:	9304      	str	r3, [sp, #16]
 8008760:	9a04      	ldr	r2, [sp, #16]
 8008762:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8008766:	fb13 f302 	smulbb	r3, r3, r2
 800876a:	9a01      	ldr	r2, [sp, #4]
 800876c:	b29b      	uxth	r3, r3
 800876e:	1899      	adds	r1, r3, r2
 8008770:	9305      	str	r3, [sp, #20]
 8008772:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8008776:	b209      	sxth	r1, r1
 8008778:	4299      	cmp	r1, r3
 800877a:	db4d      	blt.n	8008818 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800877c:	8932      	ldrh	r2, [r6, #8]
 800877e:	4413      	add	r3, r2
 8008780:	b21b      	sxth	r3, r3
 8008782:	4299      	cmp	r1, r3
 8008784:	da48      	bge.n	8008818 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8008786:	9b04      	ldr	r3, [sp, #16]
 8008788:	6827      	ldr	r7, [r4, #0]
 800878a:	fb17 f703 	smulbb	r7, r7, r3
 800878e:	9b02      	ldr	r3, [sp, #8]
 8008790:	b2bf      	uxth	r7, r7
 8008792:	18fa      	adds	r2, r7, r3
 8008794:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8008798:	b212      	sxth	r2, r2
 800879a:	429a      	cmp	r2, r3
 800879c:	db3c      	blt.n	8008818 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800879e:	8970      	ldrh	r0, [r6, #10]
 80087a0:	4403      	add	r3, r0
 80087a2:	b21b      	sxth	r3, r3
 80087a4:	429a      	cmp	r2, r3
 80087a6:	da37      	bge.n	8008818 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80087a8:	2300      	movs	r3, #0
 80087aa:	930b      	str	r3, [sp, #44]	@ 0x2c
 80087ac:	4630      	mov	r0, r6
 80087ae:	ab0b      	add	r3, sp, #44	@ 0x2c
 80087b0:	f7ff ff36 	bl	8008620 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 80087b4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80087b6:	b37a      	cbz	r2, 8008818 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80087b8:	4552      	cmp	r2, sl
 80087ba:	d02d      	beq.n	8008818 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80087bc:	4611      	mov	r1, r2
 80087be:	a80e      	add	r0, sp, #56	@ 0x38
 80087c0:	9209      	str	r2, [sp, #36]	@ 0x24
 80087c2:	f004 fd73 	bl	800d2ac <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80087c6:	9a06      	ldr	r2, [sp, #24]
 80087c8:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	@ 0x38
 80087cc:	9b01      	ldr	r3, [sp, #4]
 80087ce:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	@ 0x3c
 80087d2:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	@ 0x3e
 80087d6:	4413      	add	r3, r2
 80087d8:	f04f 0e02 	mov.w	lr, #2
 80087dc:	fb91 f1fe 	sdiv	r1, r1, lr
 80087e0:	4401      	add	r1, r0
 80087e2:	1a58      	subs	r0, r3, r1
 80087e4:	9a07      	ldr	r2, [sp, #28]
 80087e6:	9b02      	ldr	r3, [sp, #8]
 80087e8:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	@ 0x3a
 80087ec:	fb9c fcfe 	sdiv	ip, ip, lr
 80087f0:	4413      	add	r3, r2
 80087f2:	448c      	add	ip, r1
 80087f4:	eba3 030c 	sub.w	r3, r3, ip
 80087f8:	435b      	muls	r3, r3
 80087fa:	fb00 3300 	mla	r3, r0, r0, r3
 80087fe:	42ab      	cmp	r3, r5
 8008800:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008802:	d208      	bcs.n	8008816 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 8008804:	9803      	ldr	r0, [sp, #12]
 8008806:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008808:	6001      	str	r1, [r0, #0]
 800880a:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 800880c:	9805      	ldr	r0, [sp, #20]
 800880e:	8008      	strh	r0, [r1, #0]
 8008810:	992b      	ldr	r1, [sp, #172]	@ 0xac
 8008812:	461d      	mov	r5, r3
 8008814:	800f      	strh	r7, [r1, #0]
 8008816:	4692      	mov	sl, r2
 8008818:	f10b 0b01 	add.w	fp, fp, #1
 800881c:	f1bb 0f04 	cmp.w	fp, #4
 8008820:	f104 0408 	add.w	r4, r4, #8
 8008824:	d19c      	bne.n	8008760 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 8008826:	9b00      	ldr	r3, [sp, #0]
 8008828:	9c08      	ldr	r4, [sp, #32]
 800882a:	444b      	add	r3, r9
 800882c:	4544      	cmp	r4, r8
 800882e:	9300      	str	r3, [sp, #0]
 8008830:	d187      	bne.n	8008742 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 8008832:	b021      	add	sp, #132	@ 0x84
 8008834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008838:	f04f 35ff 	mov.w	r5, #4294967295
 800883c:	e766      	b.n	800870c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 800883e:	bf00      	nop
 8008840:	20012638 	.word	0x20012638
 8008844:	08013050 	.word	0x08013050

08008848 <_ZN8touchgfx4RectaNERKS0_>:
 8008848:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800884c:	f9b1 7000 	ldrsh.w	r7, [r1]
 8008850:	888c      	ldrh	r4, [r1, #4]
 8008852:	f9b0 9000 	ldrsh.w	r9, [r0]
 8008856:	443c      	add	r4, r7
 8008858:	b2a4      	uxth	r4, r4
 800885a:	fa0f f884 	sxth.w	r8, r4
 800885e:	45c1      	cmp	r9, r8
 8008860:	da2f      	bge.n	80088c2 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8008862:	8882      	ldrh	r2, [r0, #4]
 8008864:	444a      	add	r2, r9
 8008866:	b292      	uxth	r2, r2
 8008868:	fa0f fe82 	sxth.w	lr, r2
 800886c:	4577      	cmp	r7, lr
 800886e:	da28      	bge.n	80088c2 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8008870:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8008874:	88cb      	ldrh	r3, [r1, #6]
 8008876:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 800887a:	442b      	add	r3, r5
 800887c:	b21b      	sxth	r3, r3
 800887e:	429e      	cmp	r6, r3
 8008880:	da1f      	bge.n	80088c2 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8008882:	88c3      	ldrh	r3, [r0, #6]
 8008884:	4433      	add	r3, r6
 8008886:	b29b      	uxth	r3, r3
 8008888:	fa0f fc83 	sxth.w	ip, r3
 800888c:	4565      	cmp	r5, ip
 800888e:	da18      	bge.n	80088c2 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8008890:	454f      	cmp	r7, r9
 8008892:	bfb8      	it	lt
 8008894:	464f      	movlt	r7, r9
 8008896:	42b5      	cmp	r5, r6
 8008898:	bfb8      	it	lt
 800889a:	4635      	movlt	r5, r6
 800889c:	45f0      	cmp	r8, lr
 800889e:	bfd8      	it	le
 80088a0:	4622      	movle	r2, r4
 80088a2:	1bd2      	subs	r2, r2, r7
 80088a4:	8082      	strh	r2, [r0, #4]
 80088a6:	884a      	ldrh	r2, [r1, #2]
 80088a8:	88c9      	ldrh	r1, [r1, #6]
 80088aa:	8007      	strh	r7, [r0, #0]
 80088ac:	440a      	add	r2, r1
 80088ae:	b292      	uxth	r2, r2
 80088b0:	b211      	sxth	r1, r2
 80088b2:	458c      	cmp	ip, r1
 80088b4:	bfa8      	it	ge
 80088b6:	4613      	movge	r3, r2
 80088b8:	1b5b      	subs	r3, r3, r5
 80088ba:	80c3      	strh	r3, [r0, #6]
 80088bc:	8045      	strh	r5, [r0, #2]
 80088be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80088c2:	2300      	movs	r3, #0
 80088c4:	8003      	strh	r3, [r0, #0]
 80088c6:	8043      	strh	r3, [r0, #2]
 80088c8:	8083      	strh	r3, [r0, #4]
 80088ca:	80c3      	strh	r3, [r0, #6]
 80088cc:	e7f7      	b.n	80088be <_ZN8touchgfx4RectaNERKS0_+0x76>

080088ce <_ZNK8touchgfx4Rect7isEmptyEv>:
 80088ce:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	dd06      	ble.n	80088e4 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 80088d6:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 80088da:	2800      	cmp	r0, #0
 80088dc:	bfcc      	ite	gt
 80088de:	2000      	movgt	r0, #0
 80088e0:	2001      	movle	r0, #1
 80088e2:	4770      	bx	lr
 80088e4:	2001      	movs	r0, #1
 80088e6:	4770      	bx	lr

080088e8 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 80088e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088ec:	2300      	movs	r3, #0
 80088ee:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 80088f0:	8003      	strh	r3, [r0, #0]
 80088f2:	4604      	mov	r4, r0
 80088f4:	8043      	strh	r3, [r0, #2]
 80088f6:	8083      	strh	r3, [r0, #4]
 80088f8:	80c3      	strh	r3, [r0, #6]
 80088fa:	2d00      	cmp	r5, #0
 80088fc:	d040      	beq.n	8008980 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 80088fe:	1d28      	adds	r0, r5, #4
 8008900:	f7ff ffe5 	bl	80088ce <_ZNK8touchgfx4Rect7isEmptyEv>
 8008904:	b988      	cbnz	r0, 800892a <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8008906:	4620      	mov	r0, r4
 8008908:	f7ff ffe1 	bl	80088ce <_ZNK8touchgfx4Rect7isEmptyEv>
 800890c:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8008910:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8008914:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8008918:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 800891c:	b138      	cbz	r0, 800892e <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 800891e:	8022      	strh	r2, [r4, #0]
 8008920:	8063      	strh	r3, [r4, #2]
 8008922:	f8a4 e004 	strh.w	lr, [r4, #4]
 8008926:	f8a4 c006 	strh.w	ip, [r4, #6]
 800892a:	69ad      	ldr	r5, [r5, #24]
 800892c:	e7e5      	b.n	80088fa <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 800892e:	f9b4 0000 	ldrsh.w	r0, [r4]
 8008932:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8008936:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 800893a:	4290      	cmp	r0, r2
 800893c:	4607      	mov	r7, r0
 800893e:	bfa8      	it	ge
 8008940:	4617      	movge	r7, r2
 8008942:	4472      	add	r2, lr
 8008944:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8008948:	8027      	strh	r7, [r4, #0]
 800894a:	4299      	cmp	r1, r3
 800894c:	460e      	mov	r6, r1
 800894e:	4440      	add	r0, r8
 8008950:	bfa8      	it	ge
 8008952:	461e      	movge	r6, r3
 8008954:	4471      	add	r1, lr
 8008956:	4463      	add	r3, ip
 8008958:	b200      	sxth	r0, r0
 800895a:	b212      	sxth	r2, r2
 800895c:	b209      	sxth	r1, r1
 800895e:	b21b      	sxth	r3, r3
 8008960:	4290      	cmp	r0, r2
 8008962:	bfac      	ite	ge
 8008964:	ebc7 0200 	rsbge	r2, r7, r0
 8008968:	ebc7 0202 	rsblt	r2, r7, r2
 800896c:	4299      	cmp	r1, r3
 800896e:	bfac      	ite	ge
 8008970:	ebc6 0301 	rsbge	r3, r6, r1
 8008974:	ebc6 0303 	rsblt	r3, r6, r3
 8008978:	8066      	strh	r6, [r4, #2]
 800897a:	80a2      	strh	r2, [r4, #4]
 800897c:	80e3      	strh	r3, [r4, #6]
 800897e:	e7d4      	b.n	800892a <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8008980:	4620      	mov	r0, r4
 8008982:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008986 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8008986:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800898a:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 800898e:	b383      	cbz	r3, 80089f2 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8008990:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8008992:	b374      	cbz	r4, 80089f2 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8008994:	f9b1 5000 	ldrsh.w	r5, [r1]
 8008998:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 800899c:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 80089a0:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 80089a4:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 80089a8:	b303      	cbz	r3, 80089ec <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 80089aa:	4668      	mov	r0, sp
 80089ac:	1d21      	adds	r1, r4, #4
 80089ae:	f8ad 5000 	strh.w	r5, [sp]
 80089b2:	f8ad 6002 	strh.w	r6, [sp, #2]
 80089b6:	f8ad 7004 	strh.w	r7, [sp, #4]
 80089ba:	f8ad 8006 	strh.w	r8, [sp, #6]
 80089be:	f7ff ff43 	bl	8008848 <_ZN8touchgfx4RectaNERKS0_>
 80089c2:	4668      	mov	r0, sp
 80089c4:	f7ff ff83 	bl	80088ce <_ZNK8touchgfx4Rect7isEmptyEv>
 80089c8:	b980      	cbnz	r0, 80089ec <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 80089ca:	f8bd 3000 	ldrh.w	r3, [sp]
 80089ce:	88a2      	ldrh	r2, [r4, #4]
 80089d0:	1a9b      	subs	r3, r3, r2
 80089d2:	f8ad 3000 	strh.w	r3, [sp]
 80089d6:	88e2      	ldrh	r2, [r4, #6]
 80089d8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80089dc:	1a9b      	subs	r3, r3, r2
 80089de:	f8ad 3002 	strh.w	r3, [sp, #2]
 80089e2:	6823      	ldr	r3, [r4, #0]
 80089e4:	4669      	mov	r1, sp
 80089e6:	689b      	ldr	r3, [r3, #8]
 80089e8:	4620      	mov	r0, r4
 80089ea:	4798      	blx	r3
 80089ec:	69a4      	ldr	r4, [r4, #24]
 80089ee:	2c00      	cmp	r4, #0
 80089f0:	d1d8      	bne.n	80089a4 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 80089f2:	b002      	add	sp, #8
 80089f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080089f8 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 80089f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80089fa:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 80089fe:	460d      	mov	r5, r1
 8008a00:	4616      	mov	r6, r2
 8008a02:	b323      	cbz	r3, 8008a4e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8008a04:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8008a06:	b314      	cbz	r4, 8008a4e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8008a08:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 8008a0c:	b1eb      	cbz	r3, 8008a4a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8008a0e:	6828      	ldr	r0, [r5, #0]
 8008a10:	6869      	ldr	r1, [r5, #4]
 8008a12:	466b      	mov	r3, sp
 8008a14:	c303      	stmia	r3!, {r0, r1}
 8008a16:	4668      	mov	r0, sp
 8008a18:	1d21      	adds	r1, r4, #4
 8008a1a:	f7ff ff15 	bl	8008848 <_ZN8touchgfx4RectaNERKS0_>
 8008a1e:	4668      	mov	r0, sp
 8008a20:	f7ff ff55 	bl	80088ce <_ZNK8touchgfx4Rect7isEmptyEv>
 8008a24:	b988      	cbnz	r0, 8008a4a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8008a26:	f8bd 3000 	ldrh.w	r3, [sp]
 8008a2a:	88a2      	ldrh	r2, [r4, #4]
 8008a2c:	1a9b      	subs	r3, r3, r2
 8008a2e:	f8ad 3000 	strh.w	r3, [sp]
 8008a32:	88e2      	ldrh	r2, [r4, #6]
 8008a34:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8008a38:	1a9b      	subs	r3, r3, r2
 8008a3a:	f8ad 3002 	strh.w	r3, [sp, #2]
 8008a3e:	6823      	ldr	r3, [r4, #0]
 8008a40:	4632      	mov	r2, r6
 8008a42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008a44:	4669      	mov	r1, sp
 8008a46:	4620      	mov	r0, r4
 8008a48:	4798      	blx	r3
 8008a4a:	69a4      	ldr	r4, [r4, #24]
 8008a4c:	e7db      	b.n	8008a06 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8008a4e:	b002      	add	sp, #8
 8008a50:	bd70      	pop	{r4, r5, r6, pc}

08008a52 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8008a52:	b513      	push	{r0, r1, r4, lr}
 8008a54:	6803      	ldr	r3, [r0, #0]
 8008a56:	f8d3 40b4 	ldr.w	r4, [r3, #180]	@ 0xb4
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	e9cd 3300 	strd	r3, r3, [sp]
 8008a60:	466b      	mov	r3, sp
 8008a62:	47a0      	blx	r4
 8008a64:	b002      	add	sp, #8
 8008a66:	bd10      	pop	{r4, pc}

08008a68 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8008a68:	2301      	movs	r3, #1
 8008a6a:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 8008a6e:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 8008a72:	4770      	bx	lr

08008a74 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8008a74:	2301      	movs	r3, #1
 8008a76:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 8008a7a:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 8008a7e:	4770      	bx	lr

08008a80 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8008a80:	6843      	ldr	r3, [r0, #4]
 8008a82:	2201      	movs	r2, #1
 8008a84:	725a      	strb	r2, [r3, #9]
 8008a86:	6840      	ldr	r0, [r0, #4]
 8008a88:	6803      	ldr	r3, [r0, #0]
 8008a8a:	691b      	ldr	r3, [r3, #16]
 8008a8c:	4718      	bx	r3

08008a8e <_ZN8touchgfx3HAL8flushDMAEv>:
 8008a8e:	6840      	ldr	r0, [r0, #4]
 8008a90:	6803      	ldr	r3, [r0, #0]
 8008a92:	689b      	ldr	r3, [r3, #8]
 8008a94:	4718      	bx	r3

08008a96 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 8008a96:	b530      	push	{r4, r5, lr}
 8008a98:	b08b      	sub	sp, #44	@ 0x2c
 8008a9a:	6804      	ldr	r4, [r0, #0]
 8008a9c:	f89d 5058 	ldrb.w	r5, [sp, #88]	@ 0x58
 8008aa0:	9509      	str	r5, [sp, #36]	@ 0x24
 8008aa2:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 8008aa6:	9508      	str	r5, [sp, #32]
 8008aa8:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 8008aac:	9507      	str	r5, [sp, #28]
 8008aae:	f8bd 504c 	ldrh.w	r5, [sp, #76]	@ 0x4c
 8008ab2:	9506      	str	r5, [sp, #24]
 8008ab4:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 8008ab8:	9505      	str	r5, [sp, #20]
 8008aba:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 8008abe:	9504      	str	r5, [sp, #16]
 8008ac0:	f8bd 5040 	ldrh.w	r5, [sp, #64]	@ 0x40
 8008ac4:	9503      	str	r5, [sp, #12]
 8008ac6:	f8bd 503c 	ldrh.w	r5, [sp, #60]	@ 0x3c
 8008aca:	9502      	str	r5, [sp, #8]
 8008acc:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 8008ad0:	e9cd 3500 	strd	r3, r5, [sp]
 8008ad4:	4613      	mov	r3, r2
 8008ad6:	6c24      	ldr	r4, [r4, #64]	@ 0x40
 8008ad8:	2200      	movs	r2, #0
 8008ada:	47a0      	blx	r4
 8008adc:	b00b      	add	sp, #44	@ 0x2c
 8008ade:	bd30      	pop	{r4, r5, pc}

08008ae0 <_ZN8touchgfx3HAL10beginFrameEv>:
 8008ae0:	4b04      	ldr	r3, [pc, #16]	@ (8008af4 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8008ae2:	781b      	ldrb	r3, [r3, #0]
 8008ae4:	b123      	cbz	r3, 8008af0 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8008ae6:	f890 006e 	ldrb.w	r0, [r0, #110]	@ 0x6e
 8008aea:	f080 0001 	eor.w	r0, r0, #1
 8008aee:	4770      	bx	lr
 8008af0:	2001      	movs	r0, #1
 8008af2:	4770      	bx	lr
 8008af4:	20012636 	.word	0x20012636

08008af8 <_ZN8touchgfx3HAL8endFrameEv>:
 8008af8:	b510      	push	{r4, lr}
 8008afa:	4604      	mov	r4, r0
 8008afc:	6840      	ldr	r0, [r0, #4]
 8008afe:	6803      	ldr	r3, [r0, #0]
 8008b00:	689b      	ldr	r3, [r3, #8]
 8008b02:	4798      	blx	r3
 8008b04:	f894 306d 	ldrb.w	r3, [r4, #109]	@ 0x6d
 8008b08:	b113      	cbz	r3, 8008b10 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 8008b10:	bd10      	pop	{r4, pc}

08008b12 <_ZN8touchgfx3HAL10initializeEv>:
 8008b12:	b510      	push	{r4, lr}
 8008b14:	4604      	mov	r4, r0
 8008b16:	f7f7 ffb3 	bl	8000a80 <_ZN8touchgfx10OSWrappers10initializeEv>
 8008b1a:	f7f7 feb7 	bl	800088c <_ZN8touchgfx4GPIO4initEv>
 8008b1e:	6860      	ldr	r0, [r4, #4]
 8008b20:	6803      	ldr	r3, [r0, #0]
 8008b22:	68db      	ldr	r3, [r3, #12]
 8008b24:	4798      	blx	r3
 8008b26:	68e0      	ldr	r0, [r4, #12]
 8008b28:	6803      	ldr	r3, [r0, #0]
 8008b2a:	689b      	ldr	r3, [r3, #8]
 8008b2c:	4798      	blx	r3
 8008b2e:	6823      	ldr	r3, [r4, #0]
 8008b30:	4620      	mov	r0, r4
 8008b32:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008b34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b38:	4718      	bx	r3
	...

08008b3c <_ZN8touchgfx3HAL4tickEv>:
 8008b3c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8008b3e:	6803      	ldr	r3, [r0, #0]
 8008b40:	4d62      	ldr	r5, [pc, #392]	@ (8008ccc <_ZN8touchgfx3HAL4tickEv+0x190>)
 8008b42:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008b46:	4604      	mov	r4, r0
 8008b48:	4798      	blx	r3
 8008b4a:	2800      	cmp	r0, #0
 8008b4c:	f000 809e 	beq.w	8008c8c <_ZN8touchgfx3HAL4tickEv+0x150>
 8008b50:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8008b54:	2b02      	cmp	r3, #2
 8008b56:	d002      	beq.n	8008b5e <_ZN8touchgfx3HAL4tickEv+0x22>
 8008b58:	2001      	movs	r0, #1
 8008b5a:	f7f7 fe15 	bl	8000788 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8008b5e:	f894 306a 	ldrb.w	r3, [r4, #106]	@ 0x6a
 8008b62:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 8008b66:	f894 3079 	ldrb.w	r3, [r4, #121]	@ 0x79
 8008b6a:	2600      	movs	r6, #0
 8008b6c:	f884 606a 	strb.w	r6, [r4, #106]	@ 0x6a
 8008b70:	f884 604b 	strb.w	r6, [r4, #75]	@ 0x4b
 8008b74:	b133      	cbz	r3, 8008b84 <_ZN8touchgfx3HAL4tickEv+0x48>
 8008b76:	6823      	ldr	r3, [r4, #0]
 8008b78:	4620      	mov	r0, r4
 8008b7a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8008b7e:	4798      	blx	r3
 8008b80:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 8008b84:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
 8008b88:	6862      	ldr	r2, [r4, #4]
 8008b8a:	f083 0301 	eor.w	r3, r3, #1
 8008b8e:	7253      	strb	r3, [r2, #9]
 8008b90:	2601      	movs	r6, #1
 8008b92:	702e      	strb	r6, [r5, #0]
 8008b94:	f003 f914 	bl	800bdc0 <_ZN8touchgfx11Application11getInstanceEv>
 8008b98:	6803      	ldr	r3, [r0, #0]
 8008b9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b9c:	4798      	blx	r3
 8008b9e:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 8008ba2:	b90b      	cbnz	r3, 8008ba8 <_ZN8touchgfx3HAL4tickEv+0x6c>
 8008ba4:	f884 606b 	strb.w	r6, [r4, #107]	@ 0x6b
 8008ba8:	f003 f90a 	bl	800bdc0 <_ZN8touchgfx11Application11getInstanceEv>
 8008bac:	6803      	ldr	r3, [r0, #0]
 8008bae:	695b      	ldr	r3, [r3, #20]
 8008bb0:	4798      	blx	r3
 8008bb2:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8008bb4:	6803      	ldr	r3, [r0, #0]
 8008bb6:	691b      	ldr	r3, [r3, #16]
 8008bb8:	4798      	blx	r3
 8008bba:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 8008bbe:	f894 206c 	ldrb.w	r2, [r4, #108]	@ 0x6c
 8008bc2:	3b01      	subs	r3, #1
 8008bc4:	b2db      	uxtb	r3, r3
 8008bc6:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 8008bca:	b10a      	cbz	r2, 8008bd0 <_ZN8touchgfx3HAL4tickEv+0x94>
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d1eb      	bne.n	8008ba8 <_ZN8touchgfx3HAL4tickEv+0x6c>
 8008bd0:	4a3f      	ldr	r2, [pc, #252]	@ (8008cd0 <_ZN8touchgfx3HAL4tickEv+0x194>)
 8008bd2:	f994 1068 	ldrsb.w	r1, [r4, #104]	@ 0x68
 8008bd6:	7813      	ldrb	r3, [r2, #0]
 8008bd8:	3301      	adds	r3, #1
 8008bda:	b25b      	sxtb	r3, r3
 8008bdc:	4299      	cmp	r1, r3
 8008bde:	7013      	strb	r3, [r2, #0]
 8008be0:	dc10      	bgt.n	8008c04 <_ZN8touchgfx3HAL4tickEv+0xc8>
 8008be2:	68e0      	ldr	r0, [r4, #12]
 8008be4:	2300      	movs	r3, #0
 8008be6:	7013      	strb	r3, [r2, #0]
 8008be8:	6803      	ldr	r3, [r0, #0]
 8008bea:	aa03      	add	r2, sp, #12
 8008bec:	68db      	ldr	r3, [r3, #12]
 8008bee:	a902      	add	r1, sp, #8
 8008bf0:	4798      	blx	r3
 8008bf2:	6823      	ldr	r3, [r4, #0]
 8008bf4:	2800      	cmp	r0, #0
 8008bf6:	d059      	beq.n	8008cac <_ZN8touchgfx3HAL4tickEv+0x170>
 8008bf8:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8008bfc:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8008c00:	4620      	mov	r0, r4
 8008c02:	4798      	blx	r3
 8008c04:	6960      	ldr	r0, [r4, #20]
 8008c06:	2300      	movs	r3, #0
 8008c08:	f88d 3007 	strb.w	r3, [sp, #7]
 8008c0c:	b158      	cbz	r0, 8008c26 <_ZN8touchgfx3HAL4tickEv+0xea>
 8008c0e:	6803      	ldr	r3, [r0, #0]
 8008c10:	f10d 0107 	add.w	r1, sp, #7
 8008c14:	68db      	ldr	r3, [r3, #12]
 8008c16:	4798      	blx	r3
 8008c18:	b128      	cbz	r0, 8008c26 <_ZN8touchgfx3HAL4tickEv+0xea>
 8008c1a:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8008c1c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8008c20:	6803      	ldr	r3, [r0, #0]
 8008c22:	68db      	ldr	r3, [r3, #12]
 8008c24:	4798      	blx	r3
 8008c26:	f104 001c 	add.w	r0, r4, #28
 8008c2a:	f009 f8e5 	bl	8011df8 <_ZN8touchgfx8Gestures4tickEv>
 8008c2e:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 8008c32:	b30b      	cbz	r3, 8008c78 <_ZN8touchgfx3HAL4tickEv+0x13c>
 8008c34:	6920      	ldr	r0, [r4, #16]
 8008c36:	6803      	ldr	r3, [r0, #0]
 8008c38:	691b      	ldr	r3, [r3, #16]
 8008c3a:	4798      	blx	r3
 8008c3c:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8008c3e:	4606      	mov	r6, r0
 8008c40:	b903      	cbnz	r3, 8008c44 <_ZN8touchgfx3HAL4tickEv+0x108>
 8008c42:	6760      	str	r0, [r4, #116]	@ 0x74
 8008c44:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8008c46:	4a23      	ldr	r2, [pc, #140]	@ (8008cd4 <_ZN8touchgfx3HAL4tickEv+0x198>)
 8008c48:	1af3      	subs	r3, r6, r3
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	d914      	bls.n	8008c78 <_ZN8touchgfx3HAL4tickEv+0x13c>
 8008c4e:	6920      	ldr	r0, [r4, #16]
 8008c50:	6803      	ldr	r3, [r0, #0]
 8008c52:	699b      	ldr	r3, [r3, #24]
 8008c54:	4798      	blx	r3
 8008c56:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8008c58:	2264      	movs	r2, #100	@ 0x64
 8008c5a:	1af3      	subs	r3, r6, r3
 8008c5c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008c60:	fbb0 f0f3 	udiv	r0, r0, r3
 8008c64:	2800      	cmp	r0, #0
 8008c66:	dc26      	bgt.n	8008cb6 <_ZN8touchgfx3HAL4tickEv+0x17a>
 8008c68:	f884 2069 	strb.w	r2, [r4, #105]	@ 0x69
 8008c6c:	6920      	ldr	r0, [r4, #16]
 8008c6e:	6803      	ldr	r3, [r0, #0]
 8008c70:	2100      	movs	r1, #0
 8008c72:	69db      	ldr	r3, [r3, #28]
 8008c74:	4798      	blx	r3
 8008c76:	6766      	str	r6, [r4, #116]	@ 0x74
 8008c78:	6823      	ldr	r3, [r4, #0]
 8008c7a:	4620      	mov	r0, r4
 8008c7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008c80:	4798      	blx	r3
 8008c82:	f003 f89d 	bl	800bdc0 <_ZN8touchgfx11Application11getInstanceEv>
 8008c86:	6803      	ldr	r3, [r0, #0]
 8008c88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c8a:	4798      	blx	r3
 8008c8c:	6823      	ldr	r3, [r4, #0]
 8008c8e:	4620      	mov	r0, r4
 8008c90:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8008c94:	4798      	blx	r3
 8008c96:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8008c9a:	2b02      	cmp	r3, #2
 8008c9c:	d002      	beq.n	8008ca4 <_ZN8touchgfx3HAL4tickEv+0x168>
 8008c9e:	2001      	movs	r0, #1
 8008ca0:	f7f7 fd9c 	bl	80007dc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	702b      	strb	r3, [r5, #0]
 8008ca8:	b004      	add	sp, #16
 8008caa:	bd70      	pop	{r4, r5, r6, pc}
 8008cac:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8008cb0:	4620      	mov	r0, r4
 8008cb2:	4798      	blx	r3
 8008cb4:	e7a6      	b.n	8008c04 <_ZN8touchgfx3HAL4tickEv+0xc8>
 8008cb6:	2863      	cmp	r0, #99	@ 0x63
 8008cb8:	bfcb      	itete	gt
 8008cba:	2300      	movgt	r3, #0
 8008cbc:	f1c0 0064 	rsble	r0, r0, #100	@ 0x64
 8008cc0:	f884 3069 	strbgt.w	r3, [r4, #105]	@ 0x69
 8008cc4:	f884 0069 	strble.w	r0, [r4, #105]	@ 0x69
 8008cc8:	e7d0      	b.n	8008c6c <_ZN8touchgfx3HAL4tickEv+0x130>
 8008cca:	bf00      	nop
 8008ccc:	2001263c 	.word	0x2001263c
 8008cd0:	2001263d 	.word	0x2001263d
 8008cd4:	05f5e100 	.word	0x05f5e100

08008cd8 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8008cd8:	b510      	push	{r4, lr}
 8008cda:	4604      	mov	r4, r0
 8008cdc:	f7f7 ff00 	bl	8000ae0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>
 8008ce0:	6863      	ldr	r3, [r4, #4]
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	729a      	strb	r2, [r3, #10]
 8008ce6:	bd10      	pop	{r4, pc}

08008ce8 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8008ce8:	65c1      	str	r1, [r0, #92]	@ 0x5c
 8008cea:	301c      	adds	r0, #28
 8008cec:	f009 b882 	b.w	8011df4 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08008cf0 <_ZN8touchgfx3HAL5touchEll>:
 8008cf0:	b530      	push	{r4, r5, lr}
 8008cf2:	b087      	sub	sp, #28
 8008cf4:	4604      	mov	r4, r0
 8008cf6:	a804      	add	r0, sp, #16
 8008cf8:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8008cfc:	f002 fe48 	bl	800b990 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8008d00:	9b04      	ldr	r3, [sp, #16]
 8008d02:	f8ad 300c 	strh.w	r3, [sp, #12]
 8008d06:	a906      	add	r1, sp, #24
 8008d08:	9b05      	ldr	r3, [sp, #20]
 8008d0a:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8008d0e:	a803      	add	r0, sp, #12
 8008d10:	f002 fe90 	bl	800ba34 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8008d14:	f894 106f 	ldrb.w	r1, [r4, #111]	@ 0x6f
 8008d18:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8008d1c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8008d20:	f104 001c 	add.w	r0, r4, #28
 8008d24:	b189      	cbz	r1, 8008d4a <_ZN8touchgfx3HAL5touchEll+0x5a>
 8008d26:	f8b4 5064 	ldrh.w	r5, [r4, #100]	@ 0x64
 8008d2a:	9300      	str	r3, [sp, #0]
 8008d2c:	f8b4 1060 	ldrh.w	r1, [r4, #96]	@ 0x60
 8008d30:	4613      	mov	r3, r2
 8008d32:	462a      	mov	r2, r5
 8008d34:	f009 f86e 	bl	8011e14 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8008d38:	b128      	cbz	r0, 8008d46 <_ZN8touchgfx3HAL5touchEll+0x56>
 8008d3a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8008d3e:	6623      	str	r3, [r4, #96]	@ 0x60
 8008d40:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8008d44:	6663      	str	r3, [r4, #100]	@ 0x64
 8008d46:	b007      	add	sp, #28
 8008d48:	bd30      	pop	{r4, r5, pc}
 8008d4a:	f009 f8a3 	bl	8011e94 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8008d4e:	2301      	movs	r3, #1
 8008d50:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 8008d54:	e7f1      	b.n	8008d3a <_ZN8touchgfx3HAL5touchEll+0x4a>

08008d56 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8008d56:	b510      	push	{r4, lr}
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d046      	beq.n	8008dea <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8008d5c:	ea81 0002 	eor.w	r0, r1, r2
 8008d60:	07c4      	lsls	r4, r0, #31
 8008d62:	d508      	bpl.n	8008d76 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8008d64:	440b      	add	r3, r1
 8008d66:	3a01      	subs	r2, #1
 8008d68:	428b      	cmp	r3, r1
 8008d6a:	d93e      	bls.n	8008dea <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8008d6c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8008d70:	f801 0b01 	strb.w	r0, [r1], #1
 8008d74:	e7f8      	b.n	8008d68 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8008d76:	07d0      	lsls	r0, r2, #31
 8008d78:	bf42      	ittt	mi
 8008d7a:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8008d7e:	f801 0b01 	strbmi.w	r0, [r1], #1
 8008d82:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8008d86:	2b01      	cmp	r3, #1
 8008d88:	d911      	bls.n	8008dae <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8008d8a:	ea81 0402 	eor.w	r4, r1, r2
 8008d8e:	07a4      	lsls	r4, r4, #30
 8008d90:	4610      	mov	r0, r2
 8008d92:	d022      	beq.n	8008dda <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 8008d94:	f023 0401 	bic.w	r4, r3, #1
 8008d98:	440c      	add	r4, r1
 8008d9a:	428c      	cmp	r4, r1
 8008d9c:	4602      	mov	r2, r0
 8008d9e:	d904      	bls.n	8008daa <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 8008da0:	8812      	ldrh	r2, [r2, #0]
 8008da2:	f821 2b02 	strh.w	r2, [r1], #2
 8008da6:	3002      	adds	r0, #2
 8008da8:	e7f7      	b.n	8008d9a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 8008daa:	f003 0301 	and.w	r3, r3, #1
 8008dae:	f023 0003 	bic.w	r0, r3, #3
 8008db2:	4408      	add	r0, r1
 8008db4:	4288      	cmp	r0, r1
 8008db6:	4614      	mov	r4, r2
 8008db8:	d904      	bls.n	8008dc4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 8008dba:	6824      	ldr	r4, [r4, #0]
 8008dbc:	f841 4b04 	str.w	r4, [r1], #4
 8008dc0:	3204      	adds	r2, #4
 8008dc2:	e7f7      	b.n	8008db4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 8008dc4:	f003 0303 	and.w	r3, r3, #3
 8008dc8:	440b      	add	r3, r1
 8008dca:	3a01      	subs	r2, #1
 8008dcc:	428b      	cmp	r3, r1
 8008dce:	d90c      	bls.n	8008dea <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8008dd0:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8008dd4:	f801 0b01 	strb.w	r0, [r1], #1
 8008dd8:	e7f8      	b.n	8008dcc <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 8008dda:	0790      	lsls	r0, r2, #30
 8008ddc:	d0e7      	beq.n	8008dae <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8008dde:	f832 0b02 	ldrh.w	r0, [r2], #2
 8008de2:	f821 0b02 	strh.w	r0, [r1], #2
 8008de6:	3b02      	subs	r3, #2
 8008de8:	e7e1      	b.n	8008dae <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8008dea:	2001      	movs	r0, #1
 8008dec:	bd10      	pop	{r4, pc}

08008dee <_ZN8touchgfx3HAL7noTouchEv>:
 8008dee:	b510      	push	{r4, lr}
 8008df0:	f890 306f 	ldrb.w	r3, [r0, #111]	@ 0x6f
 8008df4:	4604      	mov	r4, r0
 8008df6:	b153      	cbz	r3, 8008e0e <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8008df8:	f8b0 3064 	ldrh.w	r3, [r0, #100]	@ 0x64
 8008dfc:	f8b0 2060 	ldrh.w	r2, [r0, #96]	@ 0x60
 8008e00:	2101      	movs	r1, #1
 8008e02:	301c      	adds	r0, #28
 8008e04:	f009 f846 	bl	8011e94 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8008e08:	2300      	movs	r3, #0
 8008e0a:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 8008e0e:	bd10      	pop	{r4, pc}

08008e10 <_ZN8touchgfx3HAL3lcdEv>:
 8008e10:	4b04      	ldr	r3, [pc, #16]	@ (8008e24 <_ZN8touchgfx3HAL3lcdEv+0x14>)
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8008e18:	b10a      	cbz	r2, 8008e1e <_ZN8touchgfx3HAL3lcdEv+0xe>
 8008e1a:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8008e1c:	b900      	cbnz	r0, 8008e20 <_ZN8touchgfx3HAL3lcdEv+0x10>
 8008e1e:	6898      	ldr	r0, [r3, #8]
 8008e20:	4770      	bx	lr
 8008e22:	bf00      	nop
 8008e24:	20012638 	.word	0x20012638

08008e28 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8008e28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008e2c:	b085      	sub	sp, #20
 8008e2e:	ad04      	add	r5, sp, #16
 8008e30:	4604      	mov	r4, r0
 8008e32:	2000      	movs	r0, #0
 8008e34:	f845 0d04 	str.w	r0, [r5, #-4]!
 8008e38:	69a0      	ldr	r0, [r4, #24]
 8008e3a:	6806      	ldr	r6, [r0, #0]
 8008e3c:	9501      	str	r5, [sp, #4]
 8008e3e:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 8008e42:	9500      	str	r5, [sp, #0]
 8008e44:	6835      	ldr	r5, [r6, #0]
 8008e46:	4699      	mov	r9, r3
 8008e48:	460f      	mov	r7, r1
 8008e4a:	4690      	mov	r8, r2
 8008e4c:	47a8      	blx	r5
 8008e4e:	4d10      	ldr	r5, [pc, #64]	@ (8008e90 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 8008e50:	4606      	mov	r6, r0
 8008e52:	f8a5 9000 	strh.w	r9, [r5]
 8008e56:	f7ff ffdb 	bl	8008e10 <_ZN8touchgfx3HAL3lcdEv>
 8008e5a:	6803      	ldr	r3, [r0, #0]
 8008e5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e5e:	4798      	blx	r3
 8008e60:	b128      	cbz	r0, 8008e6e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 8008e62:	2801      	cmp	r0, #1
 8008e64:	d00b      	beq.n	8008e7e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 8008e66:	4630      	mov	r0, r6
 8008e68:	b005      	add	sp, #20
 8008e6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008e6e:	882b      	ldrh	r3, [r5, #0]
 8008e70:	fb08 7203 	mla	r2, r8, r3, r7
 8008e74:	9b03      	ldr	r3, [sp, #12]
 8008e76:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8008e7a:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8008e7c:	e7f3      	b.n	8008e66 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8008e7e:	882a      	ldrh	r2, [r5, #0]
 8008e80:	9b03      	ldr	r3, [sp, #12]
 8008e82:	fb08 7202 	mla	r2, r8, r2, r7
 8008e86:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8008e8a:	1a9a      	subs	r2, r3, r2
 8008e8c:	63e2      	str	r2, [r4, #60]	@ 0x3c
 8008e8e:	e7ea      	b.n	8008e66 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8008e90:	20012632 	.word	0x20012632

08008e94 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs>:
 8008e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e96:	4b15      	ldr	r3, [pc, #84]	@ (8008eec <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x58>)
 8008e98:	f890 407d 	ldrb.w	r4, [r0, #125]	@ 0x7d
 8008e9c:	881b      	ldrh	r3, [r3, #0]
 8008e9e:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
 8008ea0:	fb93 f4f4 	sdiv	r4, r3, r4
 8008ea4:	460f      	mov	r7, r1
 8008ea6:	4606      	mov	r6, r0
 8008ea8:	f7ff ffb2 	bl	8008e10 <_ZN8touchgfx3HAL3lcdEv>
 8008eac:	6803      	ldr	r3, [r0, #0]
 8008eae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008eb0:	4798      	blx	r3
 8008eb2:	2801      	cmp	r0, #1
 8008eb4:	d00b      	beq.n	8008ece <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x3a>
 8008eb6:	d303      	bcc.n	8008ec0 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x2c>
 8008eb8:	2802      	cmp	r0, #2
 8008eba:	d010      	beq.n	8008ede <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x4a>
 8008ebc:	63f5      	str	r5, [r6, #60]	@ 0x3c
 8008ebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ec0:	4b0b      	ldr	r3, [pc, #44]	@ (8008ef0 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x5c>)
 8008ec2:	8819      	ldrh	r1, [r3, #0]
 8008ec4:	437c      	muls	r4, r7
 8008ec6:	434c      	muls	r4, r1
 8008ec8:	eba5 0544 	sub.w	r5, r5, r4, lsl #1
 8008ecc:	e7f6      	b.n	8008ebc <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x28>
 8008ece:	4b08      	ldr	r3, [pc, #32]	@ (8008ef0 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x5c>)
 8008ed0:	8819      	ldrh	r1, [r3, #0]
 8008ed2:	437c      	muls	r4, r7
 8008ed4:	434c      	muls	r4, r1
 8008ed6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8008eda:	1b2d      	subs	r5, r5, r4
 8008edc:	e7ee      	b.n	8008ebc <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x28>
 8008ede:	4b04      	ldr	r3, [pc, #16]	@ (8008ef0 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x5c>)
 8008ee0:	8819      	ldrh	r1, [r3, #0]
 8008ee2:	437c      	muls	r4, r7
 8008ee4:	434c      	muls	r4, r1
 8008ee6:	eba5 0584 	sub.w	r5, r5, r4, lsl #2
 8008eea:	e7e7      	b.n	8008ebc <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x28>
 8008eec:	20012634 	.word	0x20012634
 8008ef0:	20012632 	.word	0x20012632

08008ef4 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 8008ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ef6:	b08b      	sub	sp, #44	@ 0x2c
 8008ef8:	4617      	mov	r7, r2
 8008efa:	4604      	mov	r4, r0
 8008efc:	460e      	mov	r6, r1
 8008efe:	461d      	mov	r5, r3
 8008f00:	f7ff ff86 	bl	8008e10 <_ZN8touchgfx3HAL3lcdEv>
 8008f04:	6803      	ldr	r3, [r0, #0]
 8008f06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f08:	4798      	blx	r3
 8008f0a:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 8008f0e:	9007      	str	r0, [sp, #28]
 8008f10:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8008f14:	4b0d      	ldr	r3, [pc, #52]	@ (8008f4c <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 8008f16:	6822      	ldr	r2, [r4, #0]
 8008f18:	881b      	ldrh	r3, [r3, #0]
 8008f1a:	9306      	str	r3, [sp, #24]
 8008f1c:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8008f20:	9305      	str	r3, [sp, #20]
 8008f22:	f89d 304c 	ldrb.w	r3, [sp, #76]	@ 0x4c
 8008f26:	9304      	str	r3, [sp, #16]
 8008f28:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8008f2c:	9303      	str	r3, [sp, #12]
 8008f2e:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8008f32:	9302      	str	r3, [sp, #8]
 8008f34:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8008f38:	e9cd 5300 	strd	r5, r3, [sp]
 8008f3c:	4631      	mov	r1, r6
 8008f3e:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 8008f40:	463b      	mov	r3, r7
 8008f42:	2200      	movs	r2, #0
 8008f44:	4620      	mov	r0, r4
 8008f46:	47a8      	blx	r5
 8008f48:	b00b      	add	sp, #44	@ 0x2c
 8008f4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f4c:	20012632 	.word	0x20012632

08008f50 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8008f50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008f54:	4698      	mov	r8, r3
 8008f56:	6803      	ldr	r3, [r0, #0]
 8008f58:	6c1d      	ldr	r5, [r3, #64]	@ 0x40
 8008f5a:	4b15      	ldr	r3, [pc, #84]	@ (8008fb0 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 8008f5c:	b08b      	sub	sp, #44	@ 0x2c
 8008f5e:	4617      	mov	r7, r2
 8008f60:	f8b3 9000 	ldrh.w	r9, [r3]
 8008f64:	460e      	mov	r6, r1
 8008f66:	4604      	mov	r4, r0
 8008f68:	f7ff ff52 	bl	8008e10 <_ZN8touchgfx3HAL3lcdEv>
 8008f6c:	6803      	ldr	r3, [r0, #0]
 8008f6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f70:	4798      	blx	r3
 8008f72:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 8008f76:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8008f7a:	2302      	movs	r3, #2
 8008f7c:	e9cd 9306 	strd	r9, r3, [sp, #24]
 8008f80:	2301      	movs	r3, #1
 8008f82:	9305      	str	r3, [sp, #20]
 8008f84:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 8008f88:	9304      	str	r3, [sp, #16]
 8008f8a:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 8008f8e:	9303      	str	r3, [sp, #12]
 8008f90:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8008f94:	9302      	str	r3, [sp, #8]
 8008f96:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	e9cd 8300 	strd	r8, r3, [sp]
 8008fa0:	4631      	mov	r1, r6
 8008fa2:	463b      	mov	r3, r7
 8008fa4:	4620      	mov	r0, r4
 8008fa6:	47a8      	blx	r5
 8008fa8:	b00b      	add	sp, #44	@ 0x2c
 8008faa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008fae:	bf00      	nop
 8008fb0:	20012632 	.word	0x20012632

08008fb4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 8008fb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008fb8:	4698      	mov	r8, r3
 8008fba:	6803      	ldr	r3, [r0, #0]
 8008fbc:	6ddd      	ldr	r5, [r3, #92]	@ 0x5c
 8008fbe:	4b11      	ldr	r3, [pc, #68]	@ (8009004 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 8008fc0:	b087      	sub	sp, #28
 8008fc2:	f8b3 9000 	ldrh.w	r9, [r3]
 8008fc6:	460e      	mov	r6, r1
 8008fc8:	4617      	mov	r7, r2
 8008fca:	4604      	mov	r4, r0
 8008fcc:	f7ff ff20 	bl	8008e10 <_ZN8touchgfx3HAL3lcdEv>
 8008fd0:	6803      	ldr	r3, [r0, #0]
 8008fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fd4:	4798      	blx	r3
 8008fd6:	f89d 3044 	ldrb.w	r3, [sp, #68]	@ 0x44
 8008fda:	f8cd 900c 	str.w	r9, [sp, #12]
 8008fde:	e9cd 0304 	strd	r0, r3, [sp, #16]
 8008fe2:	f89d 3040 	ldrb.w	r3, [sp, #64]	@ 0x40
 8008fe6:	9302      	str	r3, [sp, #8]
 8008fe8:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 8008fec:	9301      	str	r3, [sp, #4]
 8008fee:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8008ff2:	9300      	str	r3, [sp, #0]
 8008ff4:	463a      	mov	r2, r7
 8008ff6:	4643      	mov	r3, r8
 8008ff8:	4631      	mov	r1, r6
 8008ffa:	4620      	mov	r0, r4
 8008ffc:	47a8      	blx	r5
 8008ffe:	b007      	add	sp, #28
 8009000:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009004:	20012632 	.word	0x20012632

08009008 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8009008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800900c:	4604      	mov	r4, r0
 800900e:	b08f      	sub	sp, #60	@ 0x3c
 8009010:	4610      	mov	r0, r2
 8009012:	460d      	mov	r5, r1
 8009014:	4691      	mov	r9, r2
 8009016:	461e      	mov	r6, r3
 8009018:	f006 f85a 	bl	800f0d0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800901c:	2800      	cmp	r0, #0
 800901e:	f000 809d 	beq.w	800915c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 8009022:	6823      	ldr	r3, [r4, #0]
 8009024:	f8df b198 	ldr.w	fp, [pc, #408]	@ 80091c0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 8009028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800902a:	f8df a198 	ldr.w	sl, [pc, #408]	@ 80091c4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 800902e:	4f61      	ldr	r7, [pc, #388]	@ (80091b4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8009030:	4620      	mov	r0, r4
 8009032:	4798      	blx	r3
 8009034:	6823      	ldr	r3, [r4, #0]
 8009036:	4620      	mov	r0, r4
 8009038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800903a:	4798      	blx	r3
 800903c:	f8bb 3000 	ldrh.w	r3, [fp]
 8009040:	9301      	str	r3, [sp, #4]
 8009042:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 8009046:	f8ba 3000 	ldrh.w	r3, [sl]
 800904a:	9302      	str	r3, [sp, #8]
 800904c:	883b      	ldrh	r3, [r7, #0]
 800904e:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 8009052:	9303      	str	r3, [sp, #12]
 8009054:	4b58      	ldr	r3, [pc, #352]	@ (80091b8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8009056:	9305      	str	r3, [sp, #20]
 8009058:	881a      	ldrh	r2, [r3, #0]
 800905a:	9204      	str	r2, [sp, #16]
 800905c:	4640      	mov	r0, r8
 800905e:	f006 f8cb 	bl	800f1f8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8009062:	8038      	strh	r0, [r7, #0]
 8009064:	4640      	mov	r0, r8
 8009066:	f006 f8fb 	bl	800f260 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800906a:	9b05      	ldr	r3, [sp, #20]
 800906c:	b280      	uxth	r0, r0
 800906e:	8018      	strh	r0, [r3, #0]
 8009070:	4b52      	ldr	r3, [pc, #328]	@ (80091bc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 8009072:	781b      	ldrb	r3, [r3, #0]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d174      	bne.n	8009162 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 8009078:	883b      	ldrh	r3, [r7, #0]
 800907a:	f8ab 3000 	strh.w	r3, [fp]
 800907e:	f8aa 0000 	strh.w	r0, [sl]
 8009082:	4648      	mov	r0, r9
 8009084:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	@ 0x3c
 8009088:	f006 f822 	bl	800f0d0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800908c:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 8009090:	2200      	movs	r2, #0
 8009092:	4611      	mov	r1, r2
 8009094:	4628      	mov	r0, r5
 8009096:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 800909a:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 800909e:	f7f9 fc32 	bl	8002906 <_ZN8touchgfx8Drawable5setXYEss>
 80090a2:	2301      	movs	r3, #1
 80090a4:	f895 b025 	ldrb.w	fp, [r5, #37]	@ 0x25
 80090a8:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 80090ac:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	dd5c      	ble.n	800916e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 80090b4:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	dd58      	ble.n	800916e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 80090bc:	462a      	mov	r2, r5
 80090be:	ab0a      	add	r3, sp, #40	@ 0x28
 80090c0:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80090c4:	6851      	ldr	r1, [r2, #4]
 80090c6:	c303      	stmia	r3!, {r0, r1}
 80090c8:	4631      	mov	r1, r6
 80090ca:	a80a      	add	r0, sp, #40	@ 0x28
 80090cc:	f7ff fbbc 	bl	8008848 <_ZN8touchgfx4RectaNERKS0_>
 80090d0:	4b38      	ldr	r3, [pc, #224]	@ (80091b4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 80090d2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80090d6:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 80090da:	2100      	movs	r1, #0
 80090dc:	aa0a      	add	r2, sp, #40	@ 0x28
 80090de:	4b36      	ldr	r3, [pc, #216]	@ (80091b8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 80090e0:	910c      	str	r1, [sp, #48]	@ 0x30
 80090e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80090e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80090ea:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 80090ee:	ab08      	add	r3, sp, #32
 80090f0:	e883 0003 	stmia.w	r3, {r0, r1}
 80090f4:	4618      	mov	r0, r3
 80090f6:	a90c      	add	r1, sp, #48	@ 0x30
 80090f8:	f7ff fba6 	bl	8008848 <_ZN8touchgfx4RectaNERKS0_>
 80090fc:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d13c      	bne.n	800917c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 8009102:	2000      	movs	r0, #0
 8009104:	f884 0058 	strb.w	r0, [r4, #88]	@ 0x58
 8009108:	2600      	movs	r6, #0
 800910a:	682a      	ldr	r2, [r5, #0]
 800910c:	696b      	ldr	r3, [r5, #20]
 800910e:	616e      	str	r6, [r5, #20]
 8009110:	9305      	str	r3, [sp, #20]
 8009112:	6892      	ldr	r2, [r2, #8]
 8009114:	a908      	add	r1, sp, #32
 8009116:	4628      	mov	r0, r5
 8009118:	4790      	blx	r2
 800911a:	9b05      	ldr	r3, [sp, #20]
 800911c:	616b      	str	r3, [r5, #20]
 800911e:	4652      	mov	r2, sl
 8009120:	f884 6058 	strb.w	r6, [r4, #88]	@ 0x58
 8009124:	4649      	mov	r1, r9
 8009126:	4628      	mov	r0, r5
 8009128:	f885 b025 	strb.w	fp, [r5, #37]	@ 0x25
 800912c:	f7f9 fbeb 	bl	8002906 <_ZN8touchgfx8Drawable5setXYEss>
 8009130:	4b23      	ldr	r3, [pc, #140]	@ (80091c0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 8009132:	9a01      	ldr	r2, [sp, #4]
 8009134:	801a      	strh	r2, [r3, #0]
 8009136:	4b23      	ldr	r3, [pc, #140]	@ (80091c4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 8009138:	9a02      	ldr	r2, [sp, #8]
 800913a:	801a      	strh	r2, [r3, #0]
 800913c:	4b1d      	ldr	r3, [pc, #116]	@ (80091b4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800913e:	9a03      	ldr	r2, [sp, #12]
 8009140:	801a      	strh	r2, [r3, #0]
 8009142:	4b1d      	ldr	r3, [pc, #116]	@ (80091b8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8009144:	9a04      	ldr	r2, [sp, #16]
 8009146:	801a      	strh	r2, [r3, #0]
 8009148:	e9c4 870f 	strd	r8, r7, [r4, #60]	@ 0x3c
 800914c:	6823      	ldr	r3, [r4, #0]
 800914e:	4620      	mov	r0, r4
 8009150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009152:	4798      	blx	r3
 8009154:	6823      	ldr	r3, [r4, #0]
 8009156:	4620      	mov	r0, r4
 8009158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800915a:	4798      	blx	r3
 800915c:	b00f      	add	sp, #60	@ 0x3c
 800915e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009162:	883b      	ldrh	r3, [r7, #0]
 8009164:	f8ab 0000 	strh.w	r0, [fp]
 8009168:	f8aa 3000 	strh.w	r3, [sl]
 800916c:	e789      	b.n	8009082 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 800916e:	462a      	mov	r2, r5
 8009170:	ab0a      	add	r3, sp, #40	@ 0x28
 8009172:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8009176:	6851      	ldr	r1, [r2, #4]
 8009178:	c303      	stmia	r3!, {r0, r1}
 800917a:	e7a9      	b.n	80090d0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 800917c:	a807      	add	r0, sp, #28
 800917e:	f006 f9b1 	bl	800f4e4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8009182:	4606      	mov	r6, r0
 8009184:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8009186:	6803      	ldr	r3, [r0, #0]
 8009188:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800918a:	4798      	blx	r3
 800918c:	4286      	cmp	r6, r0
 800918e:	d1b8      	bne.n	8009102 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 8009190:	f7ff fe3e 	bl	8008e10 <_ZN8touchgfx3HAL3lcdEv>
 8009194:	6803      	ldr	r3, [r0, #0]
 8009196:	4606      	mov	r6, r0
 8009198:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800919a:	9305      	str	r3, [sp, #20]
 800919c:	a807      	add	r0, sp, #28
 800919e:	f006 f9a1 	bl	800f4e4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80091a2:	9b05      	ldr	r3, [sp, #20]
 80091a4:	4601      	mov	r1, r0
 80091a6:	4630      	mov	r0, r6
 80091a8:	4798      	blx	r3
 80091aa:	f080 0001 	eor.w	r0, r0, #1
 80091ae:	b2c0      	uxtb	r0, r0
 80091b0:	e7a8      	b.n	8009104 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 80091b2:	bf00      	nop
 80091b4:	2001262c 	.word	0x2001262c
 80091b8:	2001262e 	.word	0x2001262e
 80091bc:	20012630 	.word	0x20012630
 80091c0:	20012632 	.word	0x20012632
 80091c4:	20012634 	.word	0x20012634

080091c8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 80091c8:	b510      	push	{r4, lr}
 80091ca:	4b07      	ldr	r3, [pc, #28]	@ (80091e8 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 80091cc:	781b      	ldrb	r3, [r3, #0]
 80091ce:	4604      	mov	r4, r0
 80091d0:	b13b      	cbz	r3, 80091e2 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 80091d2:	6803      	ldr	r3, [r0, #0]
 80091d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091d6:	4798      	blx	r3
 80091d8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80091da:	4283      	cmp	r3, r0
 80091dc:	d101      	bne.n	80091e2 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 80091de:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 80091e0:	bd10      	pop	{r4, pc}
 80091e2:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80091e4:	e7fc      	b.n	80091e0 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 80091e6:	bf00      	nop
 80091e8:	20012636 	.word	0x20012636

080091ec <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 80091ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091f0:	b08a      	sub	sp, #40	@ 0x28
 80091f2:	461d      	mov	r5, r3
 80091f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80091f8:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80091fc:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8009200:	f8ad 3018 	strh.w	r3, [sp, #24]
 8009204:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8009208:	f8ad 301a 	strh.w	r3, [sp, #26]
 800920c:	2400      	movs	r4, #0
 800920e:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8009212:	f8bd 604c 	ldrh.w	r6, [sp, #76]	@ 0x4c
 8009216:	f8ad 301c 	strh.w	r3, [sp, #28]
 800921a:	4690      	mov	r8, r2
 800921c:	4607      	mov	r7, r0
 800921e:	9404      	str	r4, [sp, #16]
 8009220:	f88d 4020 	strb.w	r4, [sp, #32]
 8009224:	f7ff ffd0 	bl	80091c8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8009228:	fb06 8505 	mla	r5, r6, r5, r8
 800922c:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8009230:	6878      	ldr	r0, [r7, #4]
 8009232:	9505      	str	r5, [sp, #20]
 8009234:	f8ad 601e 	strh.w	r6, [sp, #30]
 8009238:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 800923c:	f88d 4021 	strb.w	r4, [sp, #33]	@ 0x21
 8009240:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 8009244:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 8009248:	6803      	ldr	r3, [r0, #0]
 800924a:	a901      	add	r1, sp, #4
 800924c:	685b      	ldr	r3, [r3, #4]
 800924e:	4798      	blx	r3
 8009250:	b00a      	add	sp, #40	@ 0x28
 8009252:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009256 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 8009256:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800925a:	b08b      	sub	sp, #44	@ 0x2c
 800925c:	2400      	movs	r4, #0
 800925e:	461d      	mov	r5, r3
 8009260:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009264:	4688      	mov	r8, r1
 8009266:	4691      	mov	r9, r2
 8009268:	f8bd 6050 	ldrh.w	r6, [sp, #80]	@ 0x50
 800926c:	9404      	str	r4, [sp, #16]
 800926e:	4607      	mov	r7, r0
 8009270:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009274:	f7ff ffa8 	bl	80091c8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8009278:	fb06 9505 	mla	r5, r6, r5, r9
 800927c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8009280:	f8ad 3018 	strh.w	r3, [sp, #24]
 8009284:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8009288:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 800928c:	6878      	ldr	r0, [r7, #4]
 800928e:	9505      	str	r5, [sp, #20]
 8009290:	f8ad 301a 	strh.w	r3, [sp, #26]
 8009294:	f8ad 401c 	strh.w	r4, [sp, #28]
 8009298:	f8ad 601e 	strh.w	r6, [sp, #30]
 800929c:	f8cd 8010 	str.w	r8, [sp, #16]
 80092a0:	f8ad 4020 	strh.w	r4, [sp, #32]
 80092a4:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 80092a8:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 80092ac:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 80092b0:	6803      	ldr	r3, [r0, #0]
 80092b2:	a901      	add	r1, sp, #4
 80092b4:	685b      	ldr	r3, [r3, #4]
 80092b6:	4798      	blx	r3
 80092b8:	b00b      	add	sp, #44	@ 0x2c
 80092ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

080092c0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 80092c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092c4:	b08a      	sub	sp, #40	@ 0x28
 80092c6:	4698      	mov	r8, r3
 80092c8:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 80092cc:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 80092d0:	f8bd 7058 	ldrh.w	r7, [sp, #88]	@ 0x58
 80092d4:	f89d 4060 	ldrb.w	r4, [sp, #96]	@ 0x60
 80092d8:	2300      	movs	r3, #0
 80092da:	2d0b      	cmp	r5, #11
 80092dc:	4606      	mov	r6, r0
 80092de:	9304      	str	r3, [sp, #16]
 80092e0:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 80092e4:	d138      	bne.n	8009358 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x98>
 80092e6:	2380      	movs	r3, #128	@ 0x80
 80092e8:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80092ec:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 80092f0:	f8ad 3018 	strh.w	r3, [sp, #24]
 80092f4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 80092f8:	f8ad 301a 	strh.w	r3, [sp, #26]
 80092fc:	f88d 0020 	strb.w	r0, [sp, #32]
 8009300:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8009304:	f8ad 301c 	strh.w	r3, [sp, #28]
 8009308:	4630      	mov	r0, r6
 800930a:	9203      	str	r2, [sp, #12]
 800930c:	f7ff ff5c 	bl	80091c8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8009310:	2c0b      	cmp	r4, #11
 8009312:	bf98      	it	ls
 8009314:	4b1b      	ldrls	r3, [pc, #108]	@ (8009384 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 8009316:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 800931a:	bf98      	it	ls
 800931c:	5d19      	ldrbls	r1, [r3, r4]
 800931e:	f8ad 701e 	strh.w	r7, [sp, #30]
 8009322:	bf88      	it	hi
 8009324:	2100      	movhi	r1, #0
 8009326:	fb02 8307 	mla	r3, r2, r7, r8
 800932a:	10c9      	asrs	r1, r1, #3
 800932c:	fb01 0003 	mla	r0, r1, r3, r0
 8009330:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 8009334:	9005      	str	r0, [sp, #20]
 8009336:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 800933a:	6870      	ldr	r0, [r6, #4]
 800933c:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
 8009340:	2300      	movs	r3, #0
 8009342:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 8009346:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800934a:	6803      	ldr	r3, [r0, #0]
 800934c:	a901      	add	r1, sp, #4
 800934e:	685b      	ldr	r3, [r3, #4]
 8009350:	4798      	blx	r3
 8009352:	b00a      	add	sp, #40	@ 0x28
 8009354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009358:	2d02      	cmp	r5, #2
 800935a:	d109      	bne.n	8009370 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xb0>
 800935c:	28ff      	cmp	r0, #255	@ 0xff
 800935e:	d105      	bne.n	800936c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xac>
 8009360:	f1bc 0f00 	cmp.w	ip, #0
 8009364:	bf14      	ite	ne
 8009366:	2340      	movne	r3, #64	@ 0x40
 8009368:	2320      	moveq	r3, #32
 800936a:	e7bd      	b.n	80092e8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800936c:	2340      	movs	r3, #64	@ 0x40
 800936e:	e7bb      	b.n	80092e8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8009370:	28ff      	cmp	r0, #255	@ 0xff
 8009372:	d105      	bne.n	8009380 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc0>
 8009374:	f1bc 0f00 	cmp.w	ip, #0
 8009378:	bf14      	ite	ne
 800937a:	2304      	movne	r3, #4
 800937c:	2301      	moveq	r3, #1
 800937e:	e7b3      	b.n	80092e8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8009380:	2304      	movs	r3, #4
 8009382:	e7b1      	b.n	80092e8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8009384:	080145b8 	.word	0x080145b8

08009388 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 8009388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800938c:	b08b      	sub	sp, #44	@ 0x2c
 800938e:	461d      	mov	r5, r3
 8009390:	f89d 9058 	ldrb.w	r9, [sp, #88]	@ 0x58
 8009394:	f89d 6060 	ldrb.w	r6, [sp, #96]	@ 0x60
 8009398:	f8bd a05c 	ldrh.w	sl, [sp, #92]	@ 0x5c
 800939c:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 80093a0:	bf14      	ite	ne
 80093a2:	2308      	movne	r3, #8
 80093a4:	2302      	moveq	r3, #2
 80093a6:	2400      	movs	r4, #0
 80093a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80093ac:	4688      	mov	r8, r1
 80093ae:	4693      	mov	fp, r2
 80093b0:	9404      	str	r4, [sp, #16]
 80093b2:	4607      	mov	r7, r0
 80093b4:	f7ff ff08 	bl	80091c8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80093b8:	2e0b      	cmp	r6, #11
 80093ba:	bf98      	it	ls
 80093bc:	4b15      	ldrls	r3, [pc, #84]	@ (8009414 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 80093be:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 80093c2:	bf98      	it	ls
 80093c4:	5d9c      	ldrbls	r4, [r3, r6]
 80093c6:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 80093ca:	f8ad 3018 	strh.w	r3, [sp, #24]
 80093ce:	fb05 b50a 	mla	r5, r5, sl, fp
 80093d2:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 80093d6:	f8ad 301a 	strh.w	r3, [sp, #26]
 80093da:	10e4      	asrs	r4, r4, #3
 80093dc:	fb04 0405 	mla	r4, r4, r5, r0
 80093e0:	2300      	movs	r3, #0
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	9405      	str	r4, [sp, #20]
 80093e6:	f8ad 301c 	strh.w	r3, [sp, #28]
 80093ea:	f8ad a01e 	strh.w	sl, [sp, #30]
 80093ee:	f8cd 8010 	str.w	r8, [sp, #16]
 80093f2:	f88d 9020 	strb.w	r9, [sp, #32]
 80093f6:	f88d 2023 	strb.w	r2, [sp, #35]	@ 0x23
 80093fa:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 80093fe:	f88d 6021 	strb.w	r6, [sp, #33]	@ 0x21
 8009402:	f88d 6022 	strb.w	r6, [sp, #34]	@ 0x22
 8009406:	6803      	ldr	r3, [r0, #0]
 8009408:	a901      	add	r1, sp, #4
 800940a:	685b      	ldr	r3, [r3, #4]
 800940c:	4798      	blx	r3
 800940e:	b00b      	add	sp, #44	@ 0x2c
 8009410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009414:	080145b8 	.word	0x080145b8

08009418 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8009418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800941c:	461e      	mov	r6, r3
 800941e:	4b0a      	ldr	r3, [pc, #40]	@ (8009448 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 8009420:	460f      	mov	r7, r1
 8009422:	881d      	ldrh	r5, [r3, #0]
 8009424:	4690      	mov	r8, r2
 8009426:	f7ff fcf3 	bl	8008e10 <_ZN8touchgfx3HAL3lcdEv>
 800942a:	6803      	ldr	r3, [r0, #0]
 800942c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800942e:	4798      	blx	r3
 8009430:	280b      	cmp	r0, #11
 8009432:	bf9a      	itte	ls
 8009434:	4b05      	ldrls	r3, [pc, #20]	@ (800944c <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8009436:	5c1c      	ldrbls	r4, [r3, r0]
 8009438:	2400      	movhi	r4, #0
 800943a:	fb08 7005 	mla	r0, r8, r5, r7
 800943e:	10e4      	asrs	r4, r4, #3
 8009440:	fb04 6000 	mla	r0, r4, r0, r6
 8009444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009448:	20012632 	.word	0x20012632
 800944c:	080145b8 	.word	0x080145b8

08009450 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8009450:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009452:	b08b      	sub	sp, #44	@ 0x2c
 8009454:	461f      	mov	r7, r3
 8009456:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 800945a:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800945e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8009462:	f8ad 3018 	strh.w	r3, [sp, #24]
 8009466:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 800946a:	f8ad 301a 	strh.w	r3, [sp, #26]
 800946e:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8009472:	f8ad 301c 	strh.w	r3, [sp, #28]
 8009476:	2500      	movs	r5, #0
 8009478:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 800947c:	f88d 3020 	strb.w	r3, [sp, #32]
 8009480:	4604      	mov	r4, r0
 8009482:	4616      	mov	r6, r2
 8009484:	9504      	str	r5, [sp, #16]
 8009486:	f7ff fe9f 	bl	80091c8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800948a:	463a      	mov	r2, r7
 800948c:	4631      	mov	r1, r6
 800948e:	4603      	mov	r3, r0
 8009490:	4620      	mov	r0, r4
 8009492:	f7ff ffc1 	bl	8009418 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8009496:	4b0e      	ldr	r3, [pc, #56]	@ (80094d0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 8009498:	9005      	str	r0, [sp, #20]
 800949a:	881b      	ldrh	r3, [r3, #0]
 800949c:	f8ad 301e 	strh.w	r3, [sp, #30]
 80094a0:	f7ff fcb6 	bl	8008e10 <_ZN8touchgfx3HAL3lcdEv>
 80094a4:	6803      	ldr	r3, [r0, #0]
 80094a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094a8:	4798      	blx	r3
 80094aa:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80094ac:	f88d 0022 	strb.w	r0, [sp, #34]	@ 0x22
 80094b0:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 80094b4:	9304      	str	r3, [sp, #16]
 80094b6:	6860      	ldr	r0, [r4, #4]
 80094b8:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 80094bc:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 80094c0:	f88d 5024 	strb.w	r5, [sp, #36]	@ 0x24
 80094c4:	6803      	ldr	r3, [r0, #0]
 80094c6:	a901      	add	r1, sp, #4
 80094c8:	685b      	ldr	r3, [r3, #4]
 80094ca:	4798      	blx	r3
 80094cc:	b00b      	add	sp, #44	@ 0x2c
 80094ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094d0:	20012632 	.word	0x20012632

080094d4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 80094d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80094d6:	b08d      	sub	sp, #52	@ 0x34
 80094d8:	466b      	mov	r3, sp
 80094da:	e883 0006 	stmia.w	r3, {r1, r2}
 80094de:	2300      	movs	r3, #0
 80094e0:	9306      	str	r3, [sp, #24]
 80094e2:	6803      	ldr	r3, [r0, #0]
 80094e4:	f8bd 6000 	ldrh.w	r6, [sp]
 80094e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094ea:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 80094ee:	2501      	movs	r5, #1
 80094f0:	9503      	str	r5, [sp, #12]
 80094f2:	4604      	mov	r4, r0
 80094f4:	4798      	blx	r3
 80094f6:	463a      	mov	r2, r7
 80094f8:	4631      	mov	r1, r6
 80094fa:	4603      	mov	r3, r0
 80094fc:	4620      	mov	r0, r4
 80094fe:	f7ff ff8b 	bl	8009418 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8009502:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8009504:	9307      	str	r3, [sp, #28]
 8009506:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800950a:	f8ad 3020 	strh.w	r3, [sp, #32]
 800950e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8009512:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8009516:	4b0f      	ldr	r3, [pc, #60]	@ (8009554 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 8009518:	9004      	str	r0, [sp, #16]
 800951a:	881b      	ldrh	r3, [r3, #0]
 800951c:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 8009520:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 8009524:	f7ff fc74 	bl	8008e10 <_ZN8touchgfx3HAL3lcdEv>
 8009528:	6803      	ldr	r3, [r0, #0]
 800952a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800952c:	4798      	blx	r3
 800952e:	23ff      	movs	r3, #255	@ 0xff
 8009530:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 8009534:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 8009538:	6860      	ldr	r0, [r4, #4]
 800953a:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 800953e:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 8009542:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 8009546:	6803      	ldr	r3, [r0, #0]
 8009548:	a903      	add	r1, sp, #12
 800954a:	685b      	ldr	r3, [r3, #4]
 800954c:	4798      	blx	r3
 800954e:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8009550:	b00d      	add	sp, #52	@ 0x34
 8009552:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009554:	20012632 	.word	0x20012632

08009558 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8009558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800955c:	b08c      	sub	sp, #48	@ 0x30
 800955e:	461e      	mov	r6, r3
 8009560:	466d      	mov	r5, sp
 8009562:	2300      	movs	r3, #0
 8009564:	e885 0006 	stmia.w	r5, {r1, r2}
 8009568:	9306      	str	r3, [sp, #24]
 800956a:	6803      	ldr	r3, [r0, #0]
 800956c:	f8bd 7000 	ldrh.w	r7, [sp]
 8009570:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009572:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 8009576:	2501      	movs	r5, #1
 8009578:	9503      	str	r5, [sp, #12]
 800957a:	4604      	mov	r4, r0
 800957c:	4798      	blx	r3
 800957e:	4642      	mov	r2, r8
 8009580:	4639      	mov	r1, r7
 8009582:	4603      	mov	r3, r0
 8009584:	4620      	mov	r0, r4
 8009586:	f7ff ff47 	bl	8009418 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800958a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800958e:	f8ad 3020 	strh.w	r3, [sp, #32]
 8009592:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8009596:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 800959a:	4b11      	ldr	r3, [pc, #68]	@ (80095e0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 800959c:	9004      	str	r0, [sp, #16]
 800959e:	881b      	ldrh	r3, [r3, #0]
 80095a0:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 80095a4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80095a6:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 80095aa:	9607      	str	r6, [sp, #28]
 80095ac:	f7ff fc30 	bl	8008e10 <_ZN8touchgfx3HAL3lcdEv>
 80095b0:	6803      	ldr	r3, [r0, #0]
 80095b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095b4:	4798      	blx	r3
 80095b6:	23ff      	movs	r3, #255	@ 0xff
 80095b8:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 80095bc:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 80095c0:	6860      	ldr	r0, [r4, #4]
 80095c2:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 80095c6:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 80095ca:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 80095ce:	6803      	ldr	r3, [r0, #0]
 80095d0:	a903      	add	r1, sp, #12
 80095d2:	685b      	ldr	r3, [r3, #4]
 80095d4:	4798      	blx	r3
 80095d6:	4630      	mov	r0, r6
 80095d8:	b00c      	add	sp, #48	@ 0x30
 80095da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095de:	bf00      	nop
 80095e0:	20012632 	.word	0x20012632

080095e4 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 80095e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095e6:	b085      	sub	sp, #20
 80095e8:	ac02      	add	r4, sp, #8
 80095ea:	e884 0006 	stmia.w	r4, {r1, r2}
 80095ee:	4605      	mov	r5, r0
 80095f0:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 80095f4:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 80095f8:	f7ff fde6 	bl	80091c8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80095fc:	463a      	mov	r2, r7
 80095fe:	4603      	mov	r3, r0
 8009600:	4631      	mov	r1, r6
 8009602:	4628      	mov	r0, r5
 8009604:	f7ff ff08 	bl	8009418 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8009608:	4a05      	ldr	r2, [pc, #20]	@ (8009620 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 800960a:	682b      	ldr	r3, [r5, #0]
 800960c:	8812      	ldrh	r2, [r2, #0]
 800960e:	9200      	str	r2, [sp, #0]
 8009610:	6f1e      	ldr	r6, [r3, #112]	@ 0x70
 8009612:	e894 0006 	ldmia.w	r4, {r1, r2}
 8009616:	4603      	mov	r3, r0
 8009618:	4628      	mov	r0, r5
 800961a:	47b0      	blx	r6
 800961c:	b005      	add	sp, #20
 800961e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009620:	20012632 	.word	0x20012632

08009624 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8009624:	b570      	push	{r4, r5, r6, lr}
 8009626:	f890 306e 	ldrb.w	r3, [r0, #110]	@ 0x6e
 800962a:	4604      	mov	r4, r0
 800962c:	b19b      	cbz	r3, 8009656 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 800962e:	2002      	movs	r0, #2
 8009630:	f7f7 f8fe 	bl	8000830 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8009634:	2300      	movs	r3, #0
 8009636:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 800963a:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 800963e:	6823      	ldr	r3, [r4, #0]
 8009640:	4620      	mov	r0, r4
 8009642:	f8d3 50c8 	ldr.w	r5, [r3, #200]	@ 0xc8
 8009646:	f7ff fdbf 	bl	80091c8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800964a:	462b      	mov	r3, r5
 800964c:	4601      	mov	r1, r0
 800964e:	4620      	mov	r0, r4
 8009650:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009654:	4718      	bx	r3
 8009656:	bd70      	pop	{r4, r5, r6, pc}

08009658 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8009658:	b538      	push	{r3, r4, r5, lr}
 800965a:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 800965e:	428b      	cmp	r3, r1
 8009660:	4604      	mov	r4, r0
 8009662:	460d      	mov	r5, r1
 8009664:	d006      	beq.n	8009674 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 8009666:	6803      	ldr	r3, [r0, #0]
 8009668:	b929      	cbnz	r1, 8009676 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 800966a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800966e:	4798      	blx	r3
 8009670:	f884 507b 	strb.w	r5, [r4, #123]	@ 0x7b
 8009674:	bd38      	pop	{r3, r4, r5, pc}
 8009676:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800967a:	e7f8      	b.n	800966e <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

0800967c <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 800967c:	b510      	push	{r4, lr}
 800967e:	4b0c      	ldr	r3, [pc, #48]	@ (80096b0 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x34>)
 8009680:	781b      	ldrb	r3, [r3, #0]
 8009682:	4604      	mov	r4, r0
 8009684:	b953      	cbnz	r3, 800969c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x20>
 8009686:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
 800968a:	b93b      	cbnz	r3, 800969c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x20>
 800968c:	6840      	ldr	r0, [r0, #4]
 800968e:	f000 f911 	bl	80098b4 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8009692:	b118      	cbz	r0, 800969c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x20>
 8009694:	6862      	ldr	r2, [r4, #4]
 8009696:	7a53      	ldrb	r3, [r2, #9]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d0fc      	beq.n	8009696 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1a>
 800969c:	f7f7 fa18 	bl	8000ad0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 80096a0:	4620      	mov	r0, r4
 80096a2:	2100      	movs	r1, #0
 80096a4:	f7ff ffd8 	bl	8009658 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 80096a8:	4620      	mov	r0, r4
 80096aa:	f7ff fd8d 	bl	80091c8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80096ae:	bd10      	pop	{r4, pc}
 80096b0:	20012636 	.word	0x20012636

080096b4 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 80096b4:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 80096b8:	1a13      	subs	r3, r2, r0
 80096ba:	4258      	negs	r0, r3
 80096bc:	4158      	adcs	r0, r3
 80096be:	4770      	bx	lr

080096c0 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 80096c0:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 80096c4:	1a9b      	subs	r3, r3, r2
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	bfdc      	itt	le
 80096ca:	6882      	ldrle	r2, [r0, #8]
 80096cc:	189b      	addle	r3, r3, r2
 80096ce:	2b01      	cmp	r3, #1
 80096d0:	bfcc      	ite	gt
 80096d2:	2000      	movgt	r0, #0
 80096d4:	2001      	movle	r0, #1
 80096d6:	4770      	bx	lr

080096d8 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 80096d8:	6902      	ldr	r2, [r0, #16]
 80096da:	6843      	ldr	r3, [r0, #4]
 80096dc:	2024      	movs	r0, #36	@ 0x24
 80096de:	fb00 3002 	mla	r0, r0, r2, r3
 80096e2:	4770      	bx	lr

080096e4 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 80096e4:	6803      	ldr	r3, [r0, #0]
 80096e6:	691b      	ldr	r3, [r3, #16]
 80096e8:	4718      	bx	r3

080096ea <_ZN8touchgfx13DMA_Interface7executeEv>:
 80096ea:	b570      	push	{r4, r5, r6, lr}
 80096ec:	2301      	movs	r3, #1
 80096ee:	7203      	strb	r3, [r0, #8]
 80096f0:	4604      	mov	r4, r0
 80096f2:	6840      	ldr	r0, [r0, #4]
 80096f4:	6803      	ldr	r3, [r0, #0]
 80096f6:	699b      	ldr	r3, [r3, #24]
 80096f8:	4798      	blx	r3
 80096fa:	6803      	ldr	r3, [r0, #0]
 80096fc:	2b40      	cmp	r3, #64	@ 0x40
 80096fe:	4605      	mov	r5, r0
 8009700:	d00c      	beq.n	800971c <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8009702:	d810      	bhi.n	8009726 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8009704:	2b04      	cmp	r3, #4
 8009706:	d01d      	beq.n	8009744 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 8009708:	d804      	bhi.n	8009714 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 800970a:	2b01      	cmp	r3, #1
 800970c:	d006      	beq.n	800971c <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800970e:	2b02      	cmp	r3, #2
 8009710:	d02c      	beq.n	800976c <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 8009712:	bd70      	pop	{r4, r5, r6, pc}
 8009714:	2b08      	cmp	r3, #8
 8009716:	d01d      	beq.n	8009754 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 8009718:	2b20      	cmp	r3, #32
 800971a:	d1fa      	bne.n	8009712 <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 800971c:	6823      	ldr	r3, [r4, #0]
 800971e:	4620      	mov	r0, r4
 8009720:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009722:	4798      	blx	r3
 8009724:	e013      	b.n	800974e <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8009726:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800972a:	d0f7      	beq.n	800971c <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800972c:	d804      	bhi.n	8009738 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 800972e:	2b80      	cmp	r3, #128	@ 0x80
 8009730:	d0f4      	beq.n	800971c <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8009732:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009736:	e7f0      	b.n	800971a <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 8009738:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800973c:	d0ee      	beq.n	800971c <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800973e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009742:	e7e5      	b.n	8009710 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 8009744:	6823      	ldr	r3, [r4, #0]
 8009746:	7f01      	ldrb	r1, [r0, #28]
 8009748:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800974a:	4620      	mov	r0, r4
 800974c:	4798      	blx	r3
 800974e:	6823      	ldr	r3, [r4, #0]
 8009750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009752:	e006      	b.n	8009762 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8009754:	6823      	ldr	r3, [r4, #0]
 8009756:	7f01      	ldrb	r1, [r0, #28]
 8009758:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800975a:	4620      	mov	r0, r4
 800975c:	4798      	blx	r3
 800975e:	6823      	ldr	r3, [r4, #0]
 8009760:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009762:	4629      	mov	r1, r5
 8009764:	4620      	mov	r0, r4
 8009766:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800976a:	4718      	bx	r3
 800976c:	6823      	ldr	r3, [r4, #0]
 800976e:	4620      	mov	r0, r4
 8009770:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009772:	4798      	blx	r3
 8009774:	e7f3      	b.n	800975e <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

08009776 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8009776:	4770      	bx	lr

08009778 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8009778:	4770      	bx	lr

0800977a <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 800977a:	4770      	bx	lr

0800977c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 800977c:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 8009780:	1ad2      	subs	r2, r2, r3
 8009782:	2a00      	cmp	r2, #0
 8009784:	b510      	push	{r4, lr}
 8009786:	bfdc      	itt	le
 8009788:	6884      	ldrle	r4, [r0, #8]
 800978a:	1912      	addle	r2, r2, r4
 800978c:	2a01      	cmp	r2, #1
 800978e:	dd16      	ble.n	80097be <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 8009790:	6842      	ldr	r2, [r0, #4]
 8009792:	2424      	movs	r4, #36	@ 0x24
 8009794:	fb04 2303 	mla	r3, r4, r3, r2
 8009798:	f101 0220 	add.w	r2, r1, #32
 800979c:	f851 4b04 	ldr.w	r4, [r1], #4
 80097a0:	f843 4b04 	str.w	r4, [r3], #4
 80097a4:	4291      	cmp	r1, r2
 80097a6:	d1f9      	bne.n	800979c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 80097a8:	780a      	ldrb	r2, [r1, #0]
 80097aa:	701a      	strb	r2, [r3, #0]
 80097ac:	68c3      	ldr	r3, [r0, #12]
 80097ae:	6882      	ldr	r2, [r0, #8]
 80097b0:	f3bf 8f5b 	dmb	ish
 80097b4:	3301      	adds	r3, #1
 80097b6:	429a      	cmp	r2, r3
 80097b8:	bfd8      	it	le
 80097ba:	1a9b      	suble	r3, r3, r2
 80097bc:	60c3      	str	r3, [r0, #12]
 80097be:	bd10      	pop	{r4, pc}

080097c0 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 80097c0:	6903      	ldr	r3, [r0, #16]
 80097c2:	6882      	ldr	r2, [r0, #8]
 80097c4:	f3bf 8f5b 	dmb	ish
 80097c8:	3301      	adds	r3, #1
 80097ca:	429a      	cmp	r2, r3
 80097cc:	bfd8      	it	le
 80097ce:	1a9b      	suble	r3, r3, r2
 80097d0:	6103      	str	r3, [r0, #16]
 80097d2:	4770      	bx	lr

080097d4 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 80097d4:	b570      	push	{r4, r5, r6, lr}
 80097d6:	4604      	mov	r4, r0
 80097d8:	460e      	mov	r6, r1
 80097da:	6860      	ldr	r0, [r4, #4]
 80097dc:	6803      	ldr	r3, [r0, #0]
 80097de:	685b      	ldr	r3, [r3, #4]
 80097e0:	4798      	blx	r3
 80097e2:	2800      	cmp	r0, #0
 80097e4:	d1f9      	bne.n	80097da <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 80097e6:	4d0d      	ldr	r5, [pc, #52]	@ (800981c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 80097e8:	6828      	ldr	r0, [r5, #0]
 80097ea:	6803      	ldr	r3, [r0, #0]
 80097ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80097f0:	4798      	blx	r3
 80097f2:	f7f7 f97b 	bl	8000aec <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 80097f6:	6828      	ldr	r0, [r5, #0]
 80097f8:	2101      	movs	r1, #1
 80097fa:	f7ff ff2d 	bl	8009658 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 80097fe:	6860      	ldr	r0, [r4, #4]
 8009800:	6803      	ldr	r3, [r0, #0]
 8009802:	4631      	mov	r1, r6
 8009804:	689b      	ldr	r3, [r3, #8]
 8009806:	4798      	blx	r3
 8009808:	6823      	ldr	r3, [r4, #0]
 800980a:	4620      	mov	r0, r4
 800980c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800980e:	4798      	blx	r3
 8009810:	6828      	ldr	r0, [r5, #0]
 8009812:	6803      	ldr	r3, [r0, #0]
 8009814:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009818:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800981a:	4718      	bx	r3
 800981c:	20012638 	.word	0x20012638

08009820 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8009820:	b508      	push	{r3, lr}
 8009822:	f7f7 f955 	bl	8000ad0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8009826:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800982a:	f7f7 b959 	b.w	8000ae0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0800982e <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 800982e:	b510      	push	{r4, lr}
 8009830:	2114      	movs	r1, #20
 8009832:	4604      	mov	r4, r0
 8009834:	f008 fbb4 	bl	8011fa0 <_ZdlPvj>
 8009838:	4620      	mov	r0, r4
 800983a:	bd10      	pop	{r4, pc}

0800983c <_ZN8touchgfx13DMA_Interface5startEv>:
 800983c:	b510      	push	{r4, lr}
 800983e:	4604      	mov	r4, r0
 8009840:	6840      	ldr	r0, [r0, #4]
 8009842:	6803      	ldr	r3, [r0, #0]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	4798      	blx	r3
 8009848:	b948      	cbnz	r0, 800985e <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800984a:	7a63      	ldrb	r3, [r4, #9]
 800984c:	b13b      	cbz	r3, 800985e <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800984e:	7a23      	ldrb	r3, [r4, #8]
 8009850:	b92b      	cbnz	r3, 800985e <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8009852:	6823      	ldr	r3, [r4, #0]
 8009854:	4620      	mov	r0, r4
 8009856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009858:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800985c:	4718      	bx	r3
 800985e:	bd10      	pop	{r4, pc}

08009860 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8009860:	b570      	push	{r4, r5, r6, lr}
 8009862:	4604      	mov	r4, r0
 8009864:	6840      	ldr	r0, [r0, #4]
 8009866:	6803      	ldr	r3, [r0, #0]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	4798      	blx	r3
 800986c:	4605      	mov	r5, r0
 800986e:	b930      	cbnz	r0, 800987e <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8009870:	7a23      	ldrb	r3, [r4, #8]
 8009872:	b123      	cbz	r3, 800987e <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8009874:	6860      	ldr	r0, [r4, #4]
 8009876:	6803      	ldr	r3, [r0, #0]
 8009878:	695b      	ldr	r3, [r3, #20]
 800987a:	4798      	blx	r3
 800987c:	7225      	strb	r5, [r4, #8]
 800987e:	6860      	ldr	r0, [r4, #4]
 8009880:	6803      	ldr	r3, [r0, #0]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	4798      	blx	r3
 8009886:	b928      	cbnz	r0, 8009894 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8009888:	6823      	ldr	r3, [r4, #0]
 800988a:	4620      	mov	r0, r4
 800988c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800988e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009892:	4718      	bx	r3
 8009894:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009898:	f7f7 b930 	b.w	8000afc <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

0800989c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 800989c:	b510      	push	{r4, lr}
 800989e:	4c04      	ldr	r4, [pc, #16]	@ (80098b0 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 80098a0:	6082      	str	r2, [r0, #8]
 80098a2:	2200      	movs	r2, #0
 80098a4:	e9c0 4100 	strd	r4, r1, [r0]
 80098a8:	e9c0 2203 	strd	r2, r2, [r0, #12]
 80098ac:	bd10      	pop	{r4, pc}
 80098ae:	bf00      	nop
 80098b0:	080145cc 	.word	0x080145cc

080098b4 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 80098b4:	6840      	ldr	r0, [r0, #4]
 80098b6:	6803      	ldr	r3, [r0, #0]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	4718      	bx	r3

080098bc <_ZNK8touchgfx8TextArea12getWildcard1Ev>:
 80098bc:	2000      	movs	r0, #0
 80098be:	4770      	bx	lr

080098c0 <_ZNK8touchgfx8TextArea12getAlignmentEv>:
 80098c0:	4b07      	ldr	r3, [pc, #28]	@ (80098e0 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
 80098c2:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 80098c4:	881b      	ldrh	r3, [r3, #0]
 80098c6:	4293      	cmp	r3, r2
 80098c8:	bf81      	itttt	hi
 80098ca:	4b06      	ldrhi	r3, [pc, #24]	@ (80098e4 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
 80098cc:	681b      	ldrhi	r3, [r3, #0]
 80098ce:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
 80098d2:	7858      	ldrbhi	r0, [r3, #1]
 80098d4:	bf8c      	ite	hi
 80098d6:	f000 0003 	andhi.w	r0, r0, #3
 80098da:	2000      	movls	r0, #0
 80098dc:	4770      	bx	lr
 80098de:	bf00      	nop
 80098e0:	2001268c 	.word	0x2001268c
 80098e4:	20012688 	.word	0x20012688

080098e8 <_ZN8touchgfx8TextAreaD1Ev>:
 80098e8:	4770      	bx	lr
	...

080098ec <_ZNK8touchgfx8TextArea13getTextHeightEv>:
 80098ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098f0:	4b10      	ldr	r3, [pc, #64]	@ (8009934 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
 80098f2:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 80098f4:	881b      	ldrh	r3, [r3, #0]
 80098f6:	428b      	cmp	r3, r1
 80098f8:	4604      	mov	r4, r0
 80098fa:	d918      	bls.n	800992e <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
 80098fc:	6803      	ldr	r3, [r0, #0]
 80098fe:	6f9d      	ldr	r5, [r3, #120]	@ 0x78
 8009900:	4b0d      	ldr	r3, [pc, #52]	@ (8009938 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
 8009902:	6818      	ldr	r0, [r3, #0]
 8009904:	f7f9 fe06 	bl	8003514 <_ZNK8touchgfx5Texts7getTextEt>
 8009908:	6823      	ldr	r3, [r4, #0]
 800990a:	4606      	mov	r6, r0
 800990c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800990e:	4620      	mov	r0, r4
 8009910:	4798      	blx	r3
 8009912:	6823      	ldr	r3, [r4, #0]
 8009914:	4607      	mov	r7, r0
 8009916:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800991a:	4620      	mov	r0, r4
 800991c:	4798      	blx	r3
 800991e:	463a      	mov	r2, r7
 8009920:	4603      	mov	r3, r0
 8009922:	4631      	mov	r1, r6
 8009924:	4620      	mov	r0, r4
 8009926:	46ac      	mov	ip, r5
 8009928:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800992c:	4760      	bx	ip
 800992e:	2000      	movs	r0, #0
 8009930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009934:	2001268c 	.word	0x2001268c
 8009938:	20012694 	.word	0x20012694

0800993c <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 800993c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009940:	4b17      	ldr	r3, [pc, #92]	@ (80099a0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 8009942:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8009944:	881b      	ldrh	r3, [r3, #0]
 8009946:	428b      	cmp	r3, r1
 8009948:	4604      	mov	r4, r0
 800994a:	d926      	bls.n	800999a <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
 800994c:	4b15      	ldr	r3, [pc, #84]	@ (80099a4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8009954:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8009958:	4b13      	ldr	r3, [pc, #76]	@ (80099a8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 800995a:	7855      	ldrb	r5, [r2, #1]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8009962:	6833      	ldr	r3, [r6, #0]
 8009964:	69df      	ldr	r7, [r3, #28]
 8009966:	4b11      	ldr	r3, [pc, #68]	@ (80099ac <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 8009968:	6818      	ldr	r0, [r3, #0]
 800996a:	f7f9 fdd3 	bl	8003514 <_ZNK8touchgfx5Texts7getTextEt>
 800996e:	6823      	ldr	r3, [r4, #0]
 8009970:	4680      	mov	r8, r0
 8009972:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009974:	4620      	mov	r0, r4
 8009976:	4798      	blx	r3
 8009978:	6823      	ldr	r3, [r4, #0]
 800997a:	4681      	mov	r9, r0
 800997c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009980:	4620      	mov	r0, r4
 8009982:	4798      	blx	r3
 8009984:	f3c5 0581 	ubfx	r5, r5, #2, #2
 8009988:	9000      	str	r0, [sp, #0]
 800998a:	464b      	mov	r3, r9
 800998c:	4642      	mov	r2, r8
 800998e:	4629      	mov	r1, r5
 8009990:	4630      	mov	r0, r6
 8009992:	47b8      	blx	r7
 8009994:	b003      	add	sp, #12
 8009996:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800999a:	2000      	movs	r0, #0
 800999c:	e7fa      	b.n	8009994 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
 800999e:	bf00      	nop
 80099a0:	2001268c 	.word	0x2001268c
 80099a4:	20012688 	.word	0x20012688
 80099a8:	20012690 	.word	0x20012690
 80099ac:	20012694 	.word	0x20012694

080099b0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 80099b0:	b40e      	push	{r1, r2, r3}
 80099b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099b6:	4b2f      	ldr	r3, [pc, #188]	@ (8009a74 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
 80099b8:	881a      	ldrh	r2, [r3, #0]
 80099ba:	8d83      	ldrh	r3, [r0, #44]	@ 0x2c
 80099bc:	429a      	cmp	r2, r3
 80099be:	b09d      	sub	sp, #116	@ 0x74
 80099c0:	4604      	mov	r4, r0
 80099c2:	d954      	bls.n	8009a6e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
 80099c4:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 8009a78 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 80099c8:	f8df 80b0 	ldr.w	r8, [pc, #176]	@ 8009a7c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
 80099cc:	aa26      	add	r2, sp, #152	@ 0x98
 80099ce:	9202      	str	r2, [sp, #8]
 80099d0:	f8d9 2000 	ldr.w	r2, [r9]
 80099d4:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 80099d8:	f8d8 3000 	ldr.w	r3, [r8]
 80099dc:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80099e0:	682b      	ldr	r3, [r5, #0]
 80099e2:	4628      	mov	r0, r5
 80099e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099e6:	4798      	blx	r3
 80099e8:	b207      	sxth	r7, r0
 80099ea:	4606      	mov	r6, r0
 80099ec:	a803      	add	r0, sp, #12
 80099ee:	f004 f84e 	bl	800da8e <_ZN8touchgfx12TextProviderC1Ev>
 80099f2:	682b      	ldr	r3, [r5, #0]
 80099f4:	4628      	mov	r0, r5
 80099f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80099f8:	4798      	blx	r3
 80099fa:	682b      	ldr	r3, [r5, #0]
 80099fc:	4682      	mov	sl, r0
 80099fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a00:	4628      	mov	r0, r5
 8009a02:	4798      	blx	r3
 8009a04:	4653      	mov	r3, sl
 8009a06:	9000      	str	r0, [sp, #0]
 8009a08:	9a02      	ldr	r2, [sp, #8]
 8009a0a:	9925      	ldr	r1, [sp, #148]	@ 0x94
 8009a0c:	a803      	add	r0, sp, #12
 8009a0e:	f004 f899 	bl	800db44 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8009a12:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8009a14:	f8d9 3000 	ldr.w	r3, [r9]
 8009a18:	f894 c037 	ldrb.w	ip, [r4, #55]	@ 0x37
 8009a1c:	8925      	ldrh	r5, [r4, #8]
 8009a1e:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 8009a22:	eb03 0142 	add.w	r1, r3, r2, lsl #1
 8009a26:	eba5 050c 	sub.w	r5, r5, ip
 8009a2a:	784a      	ldrb	r2, [r1, #1]
 8009a2c:	f8d8 3000 	ldr.w	r3, [r8]
 8009a30:	f894 1039 	ldrb.w	r1, [r4, #57]	@ 0x39
 8009a34:	b22d      	sxth	r5, r5
 8009a36:	9500      	str	r5, [sp, #0]
 8009a38:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8009a3c:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8009a40:	a803      	add	r0, sp, #12
 8009a42:	f001 fd2b 	bl	800b49c <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 8009a46:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	@ 0x34
 8009a4a:	18b9      	adds	r1, r7, r2
 8009a4c:	2900      	cmp	r1, #0
 8009a4e:	b203      	sxth	r3, r0
 8009a50:	dd0b      	ble.n	8009a6a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
 8009a52:	3b01      	subs	r3, #1
 8009a54:	fb13 f302 	smulbb	r3, r3, r2
 8009a58:	fb16 3300 	smlabb	r3, r6, r0, r3
 8009a5c:	b21f      	sxth	r7, r3
 8009a5e:	4638      	mov	r0, r7
 8009a60:	b01d      	add	sp, #116	@ 0x74
 8009a62:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a66:	b003      	add	sp, #12
 8009a68:	4770      	bx	lr
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	dcf7      	bgt.n	8009a5e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 8009a6e:	2700      	movs	r7, #0
 8009a70:	e7f5      	b.n	8009a5e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 8009a72:	bf00      	nop
 8009a74:	2001268c 	.word	0x2001268c
 8009a78:	20012688 	.word	0x20012688
 8009a7c:	20012690 	.word	0x20012690

08009a80 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>:
 8009a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a84:	4bbc      	ldr	r3, [pc, #752]	@ (8009d78 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f8>)
 8009a86:	460c      	mov	r4, r1
 8009a88:	881b      	ldrh	r3, [r3, #0]
 8009a8a:	8d89      	ldrh	r1, [r1, #44]	@ 0x2c
 8009a8c:	428b      	cmp	r3, r1
 8009a8e:	b0a9      	sub	sp, #164	@ 0xa4
 8009a90:	4680      	mov	r8, r0
 8009a92:	d809      	bhi.n	8009aa8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28>
 8009a94:	2300      	movs	r3, #0
 8009a96:	f04f 32ff 	mov.w	r2, #4294967295
 8009a9a:	e9c0 3200 	strd	r3, r2, [r0]
 8009a9e:	6083      	str	r3, [r0, #8]
 8009aa0:	4640      	mov	r0, r8
 8009aa2:	b029      	add	sp, #164	@ 0xa4
 8009aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009aa8:	4eb4      	ldr	r6, [pc, #720]	@ (8009d7c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>)
 8009aaa:	6833      	ldr	r3, [r6, #0]
 8009aac:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 8009ab0:	4bb3      	ldr	r3, [pc, #716]	@ (8009d80 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x300>)
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8009ab8:	4bb2      	ldr	r3, [pc, #712]	@ (8009d84 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 8009aba:	6818      	ldr	r0, [r3, #0]
 8009abc:	f7f9 fd2a 	bl	8003514 <_ZNK8touchgfx5Texts7getTextEt>
 8009ac0:	682b      	ldr	r3, [r5, #0]
 8009ac2:	4681      	mov	r9, r0
 8009ac4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ac6:	4628      	mov	r0, r5
 8009ac8:	4798      	blx	r3
 8009aca:	8ea7      	ldrh	r7, [r4, #52]	@ 0x34
 8009acc:	b203      	sxth	r3, r0
 8009ace:	4407      	add	r7, r0
 8009ad0:	9304      	str	r3, [sp, #16]
 8009ad2:	b2bb      	uxth	r3, r7
 8009ad4:	9303      	str	r3, [sp, #12]
 8009ad6:	f894 3039 	ldrb.w	r3, [r4, #57]	@ 0x39
 8009ada:	4682      	mov	sl, r0
 8009adc:	a80f      	add	r0, sp, #60	@ 0x3c
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	f040 80a6 	bne.w	8009c30 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1b0>
 8009ae4:	f003 ffd3 	bl	800da8e <_ZN8touchgfx12TextProviderC1Ev>
 8009ae8:	682b      	ldr	r3, [r5, #0]
 8009aea:	4628      	mov	r0, r5
 8009aec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009aee:	4798      	blx	r3
 8009af0:	682b      	ldr	r3, [r5, #0]
 8009af2:	4606      	mov	r6, r0
 8009af4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009af6:	4628      	mov	r0, r5
 8009af8:	4798      	blx	r3
 8009afa:	6823      	ldr	r3, [r4, #0]
 8009afc:	4607      	mov	r7, r0
 8009afe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009b00:	4620      	mov	r0, r4
 8009b02:	4798      	blx	r3
 8009b04:	6823      	ldr	r3, [r4, #0]
 8009b06:	4683      	mov	fp, r0
 8009b08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b0c:	4620      	mov	r0, r4
 8009b0e:	4798      	blx	r3
 8009b10:	463b      	mov	r3, r7
 8009b12:	e9cd b000 	strd	fp, r0, [sp]
 8009b16:	4649      	mov	r1, r9
 8009b18:	4632      	mov	r2, r6
 8009b1a:	a80f      	add	r0, sp, #60	@ 0x3c
 8009b1c:	f004 f827 	bl	800db6e <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 8009b20:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8009b24:	f8df b254 	ldr.w	fp, [pc, #596]	@ 8009d7c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>
 8009b28:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 8009b2c:	f04f 0600 	mov.w	r6, #0
 8009b30:	bf0c      	ite	eq
 8009b32:	f9b4 900a 	ldrsheq.w	r9, [r4, #10]
 8009b36:	f9b4 9008 	ldrshne.w	r9, [r4, #8]
 8009b3a:	4637      	mov	r7, r6
 8009b3c:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8009b3e:	f8db 3000 	ldr.w	r3, [fp]
 8009b42:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8009b46:	4629      	mov	r1, r5
 8009b48:	785b      	ldrb	r3, [r3, #1]
 8009b4a:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8009b4e:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8009b52:	a80f      	add	r0, sp, #60	@ 0x3c
 8009b54:	f001 f9a9 	bl	800aeaa <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8009b58:	9b03      	ldr	r3, [sp, #12]
 8009b5a:	4286      	cmp	r6, r0
 8009b5c:	bfb8      	it	lt
 8009b5e:	4606      	movlt	r6, r0
 8009b60:	3701      	adds	r7, #1
 8009b62:	eba9 0903 	sub.w	r9, r9, r3
 8009b66:	a80f      	add	r0, sp, #60	@ 0x3c
 8009b68:	b236      	sxth	r6, r6
 8009b6a:	b2bf      	uxth	r7, r7
 8009b6c:	fa0f f989 	sxth.w	r9, r9
 8009b70:	f003 ffb4 	bl	800dadc <_ZN8touchgfx12TextProvider11endOfStringEv>
 8009b74:	b918      	cbnz	r0, 8009b7e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfe>
 8009b76:	7a2b      	ldrb	r3, [r5, #8]
 8009b78:	444b      	add	r3, r9
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	dcde      	bgt.n	8009b3c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xbc>
 8009b7e:	9b03      	ldr	r3, [sp, #12]
 8009b80:	9a04      	ldr	r2, [sp, #16]
 8009b82:	f895 9009 	ldrb.w	r9, [r5, #9]
 8009b86:	fb13 f707 	smulbb	r7, r3, r7
 8009b8a:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8009b8c:	1aff      	subs	r7, r7, r3
 8009b8e:	b2bf      	uxth	r7, r7
 8009b90:	b23b      	sxth	r3, r7
 8009b92:	429a      	cmp	r2, r3
 8009b94:	bfa8      	it	ge
 8009b96:	4657      	movge	r7, sl
 8009b98:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8009b9c:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 8009ba0:	6823      	ldr	r3, [r4, #0]
 8009ba2:	bf08      	it	eq
 8009ba4:	f9b4 a008 	ldrsheq.w	sl, [r4, #8]
 8009ba8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009baa:	bf18      	it	ne
 8009bac:	f9b4 a00a 	ldrshne.w	sl, [r4, #10]
 8009bb0:	4620      	mov	r0, r4
 8009bb2:	4798      	blx	r3
 8009bb4:	444f      	add	r7, r9
 8009bb6:	fa1f f987 	uxth.w	r9, r7
 8009bba:	2801      	cmp	r0, #1
 8009bbc:	fa0f f789 	sxth.w	r7, r9
 8009bc0:	b2b3      	uxth	r3, r6
 8009bc2:	f000 80e1 	beq.w	8009d88 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x308>
 8009bc6:	2802      	cmp	r0, #2
 8009bc8:	f894 6037 	ldrb.w	r6, [r4, #55]	@ 0x37
 8009bcc:	f000 80e2 	beq.w	8009d94 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x314>
 8009bd0:	7aea      	ldrb	r2, [r5, #11]
 8009bd2:	7b2d      	ldrb	r5, [r5, #12]
 8009bd4:	b236      	sxth	r6, r6
 8009bd6:	1ab6      	subs	r6, r6, r2
 8009bd8:	442a      	add	r2, r5
 8009bda:	4413      	add	r3, r2
 8009bdc:	f894 2038 	ldrb.w	r2, [r4, #56]	@ 0x38
 8009be0:	fa1f fa86 	uxth.w	sl, r6
 8009be4:	b29b      	uxth	r3, r3
 8009be6:	2a02      	cmp	r2, #2
 8009be8:	fa0f fb8a 	sxth.w	fp, sl
 8009bec:	b21e      	sxth	r6, r3
 8009bee:	f000 80d5 	beq.w	8009d9c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x31c>
 8009bf2:	2a03      	cmp	r2, #3
 8009bf4:	f000 80dd 	beq.w	8009db2 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x332>
 8009bf8:	2a01      	cmp	r2, #1
 8009bfa:	f040 80e5 	bne.w	8009dc8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x348>
 8009bfe:	8925      	ldrh	r5, [r4, #8]
 8009c00:	4633      	mov	r3, r6
 8009c02:	eba5 0909 	sub.w	r9, r5, r9
 8009c06:	463e      	mov	r6, r7
 8009c08:	465d      	mov	r5, fp
 8009c0a:	461f      	mov	r7, r3
 8009c0c:	fa0f fb89 	sxth.w	fp, r9
 8009c10:	4b5c      	ldr	r3, [pc, #368]	@ (8009d84 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 8009c12:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8009c14:	6818      	ldr	r0, [r3, #0]
 8009c16:	f7f9 fc7d 	bl	8003514 <_ZNK8touchgfx5Texts7getTextEt>
 8009c1a:	f8a8 b000 	strh.w	fp, [r8]
 8009c1e:	f8a8 5002 	strh.w	r5, [r8, #2]
 8009c22:	f8a8 6004 	strh.w	r6, [r8, #4]
 8009c26:	f8a8 7006 	strh.w	r7, [r8, #6]
 8009c2a:	f8c8 0008 	str.w	r0, [r8, #8]
 8009c2e:	e737      	b.n	8009aa0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x20>
 8009c30:	f003 ff2d 	bl	800da8e <_ZN8touchgfx12TextProviderC1Ev>
 8009c34:	682b      	ldr	r3, [r5, #0]
 8009c36:	4628      	mov	r0, r5
 8009c38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009c3a:	4798      	blx	r3
 8009c3c:	682b      	ldr	r3, [r5, #0]
 8009c3e:	4607      	mov	r7, r0
 8009c40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c42:	4628      	mov	r0, r5
 8009c44:	4798      	blx	r3
 8009c46:	6823      	ldr	r3, [r4, #0]
 8009c48:	4683      	mov	fp, r0
 8009c4a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009c4c:	4620      	mov	r0, r4
 8009c4e:	4798      	blx	r3
 8009c50:	6822      	ldr	r2, [r4, #0]
 8009c52:	9005      	str	r0, [sp, #20]
 8009c54:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8009c58:	4620      	mov	r0, r4
 8009c5a:	4790      	blx	r2
 8009c5c:	9b05      	ldr	r3, [sp, #20]
 8009c5e:	9001      	str	r0, [sp, #4]
 8009c60:	463a      	mov	r2, r7
 8009c62:	4649      	mov	r1, r9
 8009c64:	9300      	str	r3, [sp, #0]
 8009c66:	a80f      	add	r0, sp, #60	@ 0x3c
 8009c68:	465b      	mov	r3, fp
 8009c6a:	f003 ff80 	bl	800db6e <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 8009c6e:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8009c72:	f9b4 9008 	ldrsh.w	r9, [r4, #8]
 8009c76:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8009c78:	f894 0039 	ldrb.w	r0, [r4, #57]	@ 0x39
 8009c7c:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 8009c80:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8009c84:	bf0a      	itet	eq
 8009c86:	464a      	moveq	r2, r9
 8009c88:	461a      	movne	r2, r3
 8009c8a:	4699      	moveq	r9, r3
 8009c8c:	f894 3037 	ldrb.w	r3, [r4, #55]	@ 0x37
 8009c90:	1ad2      	subs	r2, r2, r3
 8009c92:	6833      	ldr	r3, [r6, #0]
 8009c94:	f9b4 6034 	ldrsh.w	r6, [r4, #52]	@ 0x34
 8009c98:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8009c9c:	af0f      	add	r7, sp, #60	@ 0x3c
 8009c9e:	7859      	ldrb	r1, [r3, #1]
 8009ca0:	9707      	str	r7, [sp, #28]
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	f3c1 0181 	ubfx	r1, r1, #2, #2
 8009ca8:	f8ad 3018 	strh.w	r3, [sp, #24]
 8009cac:	f88d 1020 	strb.w	r1, [sp, #32]
 8009cb0:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 8009cb4:	9509      	str	r5, [sp, #36]	@ 0x24
 8009cb6:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8009cba:	f8ad 902a 	strh.w	r9, [sp, #42]	@ 0x2a
 8009cbe:	f8ad 602c 	strh.w	r6, [sp, #44]	@ 0x2c
 8009cc2:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 8009cc6:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 8009cca:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8009cce:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 8009cd2:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8009cd6:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 8009cda:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 8009cde:	b350      	cbz	r0, 8009d36 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b6>
 8009ce0:	682b      	ldr	r3, [r5, #0]
 8009ce2:	4628      	mov	r0, r5
 8009ce4:	695b      	ldr	r3, [r3, #20]
 8009ce6:	4798      	blx	r3
 8009ce8:	4607      	mov	r7, r0
 8009cea:	b320      	cbz	r0, 8009d36 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b6>
 8009cec:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009cee:	6803      	ldr	r3, [r0, #0]
 8009cf0:	4639      	mov	r1, r7
 8009cf2:	68db      	ldr	r3, [r3, #12]
 8009cf4:	4798      	blx	r3
 8009cf6:	4606      	mov	r6, r0
 8009cf8:	b1e8      	cbz	r0, 8009d36 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b6>
 8009cfa:	7b43      	ldrb	r3, [r0, #13]
 8009cfc:	7a82      	ldrb	r2, [r0, #10]
 8009cfe:	005b      	lsls	r3, r3, #1
 8009d00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009d04:	4313      	orrs	r3, r2
 8009d06:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 8009d0a:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 8009d0e:	2b06      	cmp	r3, #6
 8009d10:	d111      	bne.n	8009d36 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b6>
 8009d12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009d14:	6803      	ldr	r3, [r0, #0]
 8009d16:	4632      	mov	r2, r6
 8009d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d1a:	4639      	mov	r1, r7
 8009d1c:	4798      	blx	r3
 8009d1e:	7b73      	ldrb	r3, [r6, #13]
 8009d20:	005b      	lsls	r3, r3, #1
 8009d22:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8009d26:	7ab3      	ldrb	r3, [r6, #10]
 8009d28:	4313      	orrs	r3, r2
 8009d2a:	4418      	add	r0, r3
 8009d2c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8009d30:	4418      	add	r0, r3
 8009d32:	f8ad 0038 	strh.w	r0, [sp, #56]	@ 0x38
 8009d36:	2600      	movs	r6, #0
 8009d38:	4637      	mov	r7, r6
 8009d3a:	a806      	add	r0, sp, #24
 8009d3c:	f001 faaa 	bl	800b294 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8009d40:	f8bd 0036 	ldrh.w	r0, [sp, #54]	@ 0x36
 8009d44:	9b03      	ldr	r3, [sp, #12]
 8009d46:	4286      	cmp	r6, r0
 8009d48:	eba9 0903 	sub.w	r9, r9, r3
 8009d4c:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8009d50:	bfb8      	it	lt
 8009d52:	4606      	movlt	r6, r0
 8009d54:	3701      	adds	r7, #1
 8009d56:	b236      	sxth	r6, r6
 8009d58:	b2bf      	uxth	r7, r7
 8009d5a:	fa0f f989 	sxth.w	r9, r9
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	f43f af0d 	beq.w	8009b7e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfe>
 8009d64:	f89d 303a 	ldrb.w	r3, [sp, #58]	@ 0x3a
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	f47f af08 	bne.w	8009b7e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfe>
 8009d6e:	7a2b      	ldrb	r3, [r5, #8]
 8009d70:	444b      	add	r3, r9
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	dce1      	bgt.n	8009d3a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2ba>
 8009d76:	e702      	b.n	8009b7e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfe>
 8009d78:	2001268c 	.word	0x2001268c
 8009d7c:	20012688 	.word	0x20012688
 8009d80:	20012690 	.word	0x20012690
 8009d84:	20012694 	.word	0x20012694
 8009d88:	ebaa 0606 	sub.w	r6, sl, r6
 8009d8c:	2002      	movs	r0, #2
 8009d8e:	fb96 f6f0 	sdiv	r6, r6, r0
 8009d92:	e71d      	b.n	8009bd0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x150>
 8009d94:	441e      	add	r6, r3
 8009d96:	ebaa 0606 	sub.w	r6, sl, r6
 8009d9a:	e719      	b.n	8009bd0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x150>
 8009d9c:	8925      	ldrh	r5, [r4, #8]
 8009d9e:	1aed      	subs	r5, r5, r3
 8009da0:	eba5 050a 	sub.w	r5, r5, sl
 8009da4:	fa0f fb85 	sxth.w	fp, r5
 8009da8:	8965      	ldrh	r5, [r4, #10]
 8009daa:	eba5 0509 	sub.w	r5, r5, r9
 8009dae:	b22d      	sxth	r5, r5
 8009db0:	e72e      	b.n	8009c10 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x190>
 8009db2:	8965      	ldrh	r5, [r4, #10]
 8009db4:	1aed      	subs	r5, r5, r3
 8009db6:	eba5 050a 	sub.w	r5, r5, sl
 8009dba:	4633      	mov	r3, r6
 8009dbc:	b22d      	sxth	r5, r5
 8009dbe:	463e      	mov	r6, r7
 8009dc0:	f04f 0b00 	mov.w	fp, #0
 8009dc4:	461f      	mov	r7, r3
 8009dc6:	e723      	b.n	8009c10 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x190>
 8009dc8:	2500      	movs	r5, #0
 8009dca:	e721      	b.n	8009c10 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x190>

08009dcc <_ZN8touchgfx8TextAreaD0Ev>:
 8009dcc:	b510      	push	{r4, lr}
 8009dce:	2148      	movs	r1, #72	@ 0x48
 8009dd0:	4604      	mov	r4, r0
 8009dd2:	f008 f8e5 	bl	8011fa0 <_ZdlPvj>
 8009dd6:	4620      	mov	r0, r4
 8009dd8:	bd10      	pop	{r4, pc}
	...

08009ddc <_ZNK8touchgfx8TextArea17invalidateContentEv>:
 8009ddc:	b513      	push	{r0, r1, r4, lr}
 8009dde:	f890 3036 	ldrb.w	r3, [r0, #54]	@ 0x36
 8009de2:	4604      	mov	r4, r0
 8009de4:	b1fb      	cbz	r3, 8009e26 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8009de6:	4b16      	ldr	r3, [pc, #88]	@ (8009e40 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x64>)
 8009de8:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8009dea:	881b      	ldrh	r3, [r3, #0]
 8009dec:	428b      	cmp	r3, r1
 8009dee:	d91a      	bls.n	8009e26 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8009df0:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	dd16      	ble.n	8009e26 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8009df8:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	dd12      	ble.n	8009e26 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8009e00:	4b10      	ldr	r3, [pc, #64]	@ (8009e44 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x68>)
 8009e02:	6818      	ldr	r0, [r3, #0]
 8009e04:	f7f9 fb86 	bl	8003514 <_ZNK8touchgfx5Texts7getTextEt>
 8009e08:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	@ 0x42
 8009e0c:	6822      	ldr	r2, [r4, #0]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	db06      	blt.n	8009e20 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 8009e12:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	db02      	blt.n	8009e20 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 8009e1a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8009e1c:	4298      	cmp	r0, r3
 8009e1e:	d004      	beq.n	8009e2a <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4e>
 8009e20:	6953      	ldr	r3, [r2, #20]
 8009e22:	4620      	mov	r0, r4
 8009e24:	4798      	blx	r3
 8009e26:	b002      	add	sp, #8
 8009e28:	bd10      	pop	{r4, pc}
 8009e2a:	f104 013c 	add.w	r1, r4, #60	@ 0x3c
 8009e2e:	c903      	ldmia	r1, {r0, r1}
 8009e30:	466b      	mov	r3, sp
 8009e32:	e883 0003 	stmia.w	r3, {r0, r1}
 8009e36:	6912      	ldr	r2, [r2, #16]
 8009e38:	4619      	mov	r1, r3
 8009e3a:	4620      	mov	r0, r4
 8009e3c:	4790      	blx	r2
 8009e3e:	e7f2      	b.n	8009e26 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8009e40:	2001268c 	.word	0x2001268c
 8009e44:	20012694 	.word	0x20012694

08009e48 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 8009e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e4c:	4b44      	ldr	r3, [pc, #272]	@ (8009f60 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x118>)
 8009e4e:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 8009e50:	881b      	ldrh	r3, [r3, #0]
 8009e52:	4293      	cmp	r3, r2
 8009e54:	b08e      	sub	sp, #56	@ 0x38
 8009e56:	4604      	mov	r4, r0
 8009e58:	d97e      	bls.n	8009f58 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8009e5a:	6808      	ldr	r0, [r1, #0]
 8009e5c:	4d41      	ldr	r5, [pc, #260]	@ (8009f64 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x11c>)
 8009e5e:	6849      	ldr	r1, [r1, #4]
 8009e60:	ab05      	add	r3, sp, #20
 8009e62:	c303      	stmia	r3!, {r0, r1}
 8009e64:	4611      	mov	r1, r2
 8009e66:	6828      	ldr	r0, [r5, #0]
 8009e68:	f7f9 fb54 	bl	8003514 <_ZNK8touchgfx5Texts7getTextEt>
 8009e6c:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	@ 0x42
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	db11      	blt.n	8009e98 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8009e74:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	db0d      	blt.n	8009e98 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8009e7c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8009e7e:	4298      	cmp	r0, r3
 8009e80:	d10a      	bne.n	8009e98 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8009e82:	f104 023c 	add.w	r2, r4, #60	@ 0x3c
 8009e86:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009e8a:	ab09      	add	r3, sp, #36	@ 0x24
 8009e8c:	e883 0003 	stmia.w	r3, {r0, r1}
 8009e90:	4619      	mov	r1, r3
 8009e92:	a805      	add	r0, sp, #20
 8009e94:	f7fe fcd8 	bl	8008848 <_ZN8touchgfx4RectaNERKS0_>
 8009e98:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	dd5b      	ble.n	8009f58 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8009ea0:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	dd57      	ble.n	8009f58 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8009ea8:	4f2f      	ldr	r7, [pc, #188]	@ (8009f68 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x120>)
 8009eaa:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8009eb2:	4b2e      	ldr	r3, [pc, #184]	@ (8009f6c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x124>)
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8009eba:	2e00      	cmp	r6, #0
 8009ebc:	d04c      	beq.n	8009f58 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8009ebe:	6823      	ldr	r3, [r4, #0]
 8009ec0:	f894 8036 	ldrb.w	r8, [r4, #54]	@ 0x36
 8009ec4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009ec6:	4620      	mov	r0, r4
 8009ec8:	4798      	blx	r3
 8009eca:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	f9b4 c034 	ldrsh.w	ip, [r4, #52]	@ 0x34
 8009ed2:	f894 e038 	ldrb.w	lr, [r4, #56]	@ 0x38
 8009ed6:	f894 7037 	ldrb.w	r7, [r4, #55]	@ 0x37
 8009eda:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8009edc:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8009ee0:	f894 2039 	ldrb.w	r2, [r4, #57]	@ 0x39
 8009ee4:	785b      	ldrb	r3, [r3, #1]
 8009ee6:	9609      	str	r6, [sp, #36]	@ 0x24
 8009ee8:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8009eec:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009ef0:	4b1f      	ldr	r3, [pc, #124]	@ (8009f70 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x128>)
 8009ef2:	f88d 0028 	strb.w	r0, [sp, #40]	@ 0x28
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	f88d e02a 	strb.w	lr, [sp, #42]	@ 0x2a
 8009efc:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009efe:	f8ad c030 	strh.w	ip, [sp, #48]	@ 0x30
 8009f02:	f88d 8032 	strb.w	r8, [sp, #50]	@ 0x32
 8009f06:	f88d 7033 	strb.w	r7, [sp, #51]	@ 0x33
 8009f0a:	f88d 2034 	strb.w	r2, [sp, #52]	@ 0x34
 8009f0e:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8009f12:	b10a      	cbz	r2, 8009f18 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd0>
 8009f14:	6cde      	ldr	r6, [r3, #76]	@ 0x4c
 8009f16:	b906      	cbnz	r6, 8009f1a <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd2>
 8009f18:	689e      	ldr	r6, [r3, #8]
 8009f1a:	af07      	add	r7, sp, #28
 8009f1c:	4621      	mov	r1, r4
 8009f1e:	4638      	mov	r0, r7
 8009f20:	f003 f9c4 	bl	800d2ac <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8009f24:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8009f26:	6828      	ldr	r0, [r5, #0]
 8009f28:	f7f9 faf4 	bl	8003514 <_ZNK8touchgfx5Texts7getTextEt>
 8009f2c:	6823      	ldr	r3, [r4, #0]
 8009f2e:	4605      	mov	r5, r0
 8009f30:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009f32:	4620      	mov	r0, r4
 8009f34:	4798      	blx	r3
 8009f36:	6823      	ldr	r3, [r4, #0]
 8009f38:	4680      	mov	r8, r0
 8009f3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f3e:	4620      	mov	r0, r4
 8009f40:	4798      	blx	r3
 8009f42:	e9cd 8002 	strd	r8, r0, [sp, #8]
 8009f46:	ab09      	add	r3, sp, #36	@ 0x24
 8009f48:	9300      	str	r3, [sp, #0]
 8009f4a:	9501      	str	r5, [sp, #4]
 8009f4c:	ab05      	add	r3, sp, #20
 8009f4e:	e897 0006 	ldmia.w	r7, {r1, r2}
 8009f52:	4630      	mov	r0, r6
 8009f54:	f7f9 fa90 	bl	8003478 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8009f58:	b00e      	add	sp, #56	@ 0x38
 8009f5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f5e:	bf00      	nop
 8009f60:	2001268c 	.word	0x2001268c
 8009f64:	20012694 	.word	0x20012694
 8009f68:	20012688 	.word	0x20012688
 8009f6c:	20012690 	.word	0x20012690
 8009f70:	20012638 	.word	0x20012638

08009f74 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
 8009f74:	b570      	push	{r4, r5, r6, lr}
 8009f76:	6803      	ldr	r3, [r0, #0]
 8009f78:	4604      	mov	r4, r0
 8009f7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f7c:	4615      	mov	r5, r2
 8009f7e:	4798      	blx	r3
 8009f80:	6823      	ldr	r3, [r4, #0]
 8009f82:	4629      	mov	r1, r5
 8009f84:	4620      	mov	r0, r4
 8009f86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009f8c:	4718      	bx	r3
	...

08009f90 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 8009f90:	b538      	push	{r3, r4, r5, lr}
 8009f92:	4b0e      	ldr	r3, [pc, #56]	@ (8009fcc <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
 8009f94:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 8009f96:	881b      	ldrh	r3, [r3, #0]
 8009f98:	429a      	cmp	r2, r3
 8009f9a:	4604      	mov	r4, r0
 8009f9c:	d214      	bcs.n	8009fc8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 8009f9e:	6803      	ldr	r3, [r0, #0]
 8009fa0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009fa2:	4798      	blx	r3
 8009fa4:	6823      	ldr	r3, [r4, #0]
 8009fa6:	4605      	mov	r5, r0
 8009fa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009faa:	4620      	mov	r0, r4
 8009fac:	4798      	blx	r3
 8009fae:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8009fb2:	b22d      	sxth	r5, r5
 8009fb4:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 8009fb8:	4601      	mov	r1, r0
 8009fba:	bf06      	itte	eq
 8009fbc:	4602      	moveq	r2, r0
 8009fbe:	4629      	moveq	r1, r5
 8009fc0:	462a      	movne	r2, r5
 8009fc2:	4620      	mov	r0, r4
 8009fc4:	f7ff ffd6 	bl	8009f74 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8009fc8:	bd38      	pop	{r3, r4, r5, pc}
 8009fca:	bf00      	nop
 8009fcc:	2001268c 	.word	0x2001268c

08009fd0 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 8009fd0:	b530      	push	{r4, r5, lr}
 8009fd2:	888b      	ldrh	r3, [r1, #4]
 8009fd4:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8009fd6:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8009fda:	b085      	sub	sp, #20
 8009fdc:	4604      	mov	r4, r0
 8009fde:	b923      	cbnz	r3, 8009fea <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 8009fe0:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8009fe4:	b90b      	cbnz	r3, 8009fea <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 8009fe6:	f7ff ffd3 	bl	8009f90 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8009fea:	6823      	ldr	r3, [r4, #0]
 8009fec:	466d      	mov	r5, sp
 8009fee:	4621      	mov	r1, r4
 8009ff0:	4628      	mov	r0, r5
 8009ff2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009ff6:	4798      	blx	r3
 8009ff8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009ffc:	343c      	adds	r4, #60	@ 0x3c
 8009ffe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a002:	b005      	add	sp, #20
 800a004:	bd30      	pop	{r4, r5, pc}

0800a006 <_ZNK8touchgfx3Box12getSolidRectEv>:
 800a006:	2300      	movs	r3, #0
 800a008:	8083      	strh	r3, [r0, #4]
 800a00a:	80c3      	strh	r3, [r0, #6]
 800a00c:	8003      	strh	r3, [r0, #0]
 800a00e:	8043      	strh	r3, [r0, #2]
 800a010:	f891 3026 	ldrb.w	r3, [r1, #38]	@ 0x26
 800a014:	2bff      	cmp	r3, #255	@ 0xff
 800a016:	bf01      	itttt	eq
 800a018:	890b      	ldrheq	r3, [r1, #8]
 800a01a:	8083      	strheq	r3, [r0, #4]
 800a01c:	894b      	ldrheq	r3, [r1, #10]
 800a01e:	80c3      	strheq	r3, [r0, #6]
 800a020:	4770      	bx	lr
	...

0800a024 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 800a024:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a026:	4604      	mov	r4, r0
 800a028:	6808      	ldr	r0, [r1, #0]
 800a02a:	6849      	ldr	r1, [r1, #4]
 800a02c:	466b      	mov	r3, sp
 800a02e:	c303      	stmia	r3!, {r0, r1}
 800a030:	6823      	ldr	r3, [r4, #0]
 800a032:	4669      	mov	r1, sp
 800a034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a036:	4620      	mov	r0, r4
 800a038:	4798      	blx	r3
 800a03a:	4b08      	ldr	r3, [pc, #32]	@ (800a05c <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800a042:	b10a      	cbz	r2, 800a048 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 800a044:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800a046:	b900      	cbnz	r0, 800a04a <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 800a048:	6898      	ldr	r0, [r3, #8]
 800a04a:	6803      	ldr	r3, [r0, #0]
 800a04c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800a04e:	6a1d      	ldr	r5, [r3, #32]
 800a050:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 800a054:	4669      	mov	r1, sp
 800a056:	47a8      	blx	r5
 800a058:	b003      	add	sp, #12
 800a05a:	bd30      	pop	{r4, r5, pc}
 800a05c:	20012638 	.word	0x20012638

0800a060 <_ZN8touchgfx3BoxD1Ev>:
 800a060:	4770      	bx	lr

0800a062 <_ZN8touchgfx3BoxD0Ev>:
 800a062:	b510      	push	{r4, lr}
 800a064:	212c      	movs	r1, #44	@ 0x2c
 800a066:	4604      	mov	r4, r0
 800a068:	f007 ff9a 	bl	8011fa0 <_ZdlPvj>
 800a06c:	4620      	mov	r0, r4
 800a06e:	bd10      	pop	{r4, pc}

0800a070 <_ZNK8touchgfx3Box17invalidateContentEv>:
 800a070:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26
 800a074:	b12a      	cbz	r2, 800a082 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 800a076:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 800a07a:	b112      	cbz	r2, 800a082 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 800a07c:	6803      	ldr	r3, [r0, #0]
 800a07e:	695b      	ldr	r3, [r3, #20]
 800a080:	4718      	bx	r3
 800a082:	4770      	bx	lr

0800a084 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 800a084:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 800a088:	4770      	bx	lr

0800a08a <_ZN8touchgfx6ButtonD1Ev>:
 800a08a:	4770      	bx	lr

0800a08c <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 800a08c:	b570      	push	{r4, r5, r6, lr}
 800a08e:	880b      	ldrh	r3, [r1, #0]
 800a090:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 800a092:	4605      	mov	r5, r0
 800a094:	8813      	ldrh	r3, [r2, #0]
 800a096:	f825 3f30 	strh.w	r3, [r5, #48]!
 800a09a:	4604      	mov	r4, r0
 800a09c:	4628      	mov	r0, r5
 800a09e:	f005 f8ab 	bl	800f1f8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800a0a2:	4606      	mov	r6, r0
 800a0a4:	4628      	mov	r0, r5
 800a0a6:	f005 f8db 	bl	800f260 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800a0aa:	6823      	ldr	r3, [r4, #0]
 800a0ac:	4605      	mov	r5, r0
 800a0ae:	4631      	mov	r1, r6
 800a0b0:	4620      	mov	r0, r4
 800a0b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0b4:	4798      	blx	r3
 800a0b6:	6823      	ldr	r3, [r4, #0]
 800a0b8:	4629      	mov	r1, r5
 800a0ba:	4620      	mov	r0, r4
 800a0bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a0be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a0c2:	4718      	bx	r3

0800a0c4 <_ZN8touchgfx6ButtonD0Ev>:
 800a0c4:	b510      	push	{r4, lr}
 800a0c6:	2134      	movs	r1, #52	@ 0x34
 800a0c8:	4604      	mov	r4, r0
 800a0ca:	f007 ff69 	bl	8011fa0 <_ZdlPvj>
 800a0ce:	4620      	mov	r0, r4
 800a0d0:	bd10      	pop	{r4, pc}

0800a0d2 <_ZN8touchgfx14AbstractButton13executeActionEv>:
 800a0d2:	b510      	push	{r4, lr}
 800a0d4:	4604      	mov	r4, r0
 800a0d6:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 800a0d8:	b150      	cbz	r0, 800a0f0 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 800a0da:	6803      	ldr	r3, [r0, #0]
 800a0dc:	68db      	ldr	r3, [r3, #12]
 800a0de:	4798      	blx	r3
 800a0e0:	b130      	cbz	r0, 800a0f0 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 800a0e2:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800a0e4:	6803      	ldr	r3, [r0, #0]
 800a0e6:	4621      	mov	r1, r4
 800a0e8:	689b      	ldr	r3, [r3, #8]
 800a0ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a0ee:	4718      	bx	r3
 800a0f0:	bd10      	pop	{r4, pc}

0800a0f2 <_ZNK8touchgfx6Button12getSolidRectEv>:
 800a0f2:	b510      	push	{r4, lr}
 800a0f4:	f891 3032 	ldrb.w	r3, [r1, #50]	@ 0x32
 800a0f8:	2bff      	cmp	r3, #255	@ 0xff
 800a0fa:	4604      	mov	r4, r0
 800a0fc:	d006      	beq.n	800a10c <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 800a0fe:	2300      	movs	r3, #0
 800a100:	8003      	strh	r3, [r0, #0]
 800a102:	8043      	strh	r3, [r0, #2]
 800a104:	8083      	strh	r3, [r0, #4]
 800a106:	80c3      	strh	r3, [r0, #6]
 800a108:	4620      	mov	r0, r4
 800a10a:	bd10      	pop	{r4, pc}
 800a10c:	f891 302c 	ldrb.w	r3, [r1, #44]	@ 0x2c
 800a110:	b11b      	cbz	r3, 800a11a <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 800a112:	3130      	adds	r1, #48	@ 0x30
 800a114:	f005 f8d8 	bl	800f2c8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 800a118:	e7f6      	b.n	800a108 <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 800a11a:	312e      	adds	r1, #46	@ 0x2e
 800a11c:	e7fa      	b.n	800a114 <_ZNK8touchgfx6Button12getSolidRectEv+0x22>
	...

0800a120 <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 800a120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a124:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 800a128:	b08a      	sub	sp, #40	@ 0x28
 800a12a:	4604      	mov	r4, r0
 800a12c:	4688      	mov	r8, r1
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d066      	beq.n	800a200 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 800a132:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 800a134:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a138:	a805      	add	r0, sp, #20
 800a13a:	f005 f85d 	bl	800f1f8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800a13e:	4607      	mov	r7, r0
 800a140:	a805      	add	r0, sp, #20
 800a142:	f005 f88d 	bl	800f260 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800a146:	f9b8 6000 	ldrsh.w	r6, [r8]
 800a14a:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 800a14e:	4432      	add	r2, r6
 800a150:	b292      	uxth	r2, r2
 800a152:	2300      	movs	r3, #0
 800a154:	fa0f fc82 	sxth.w	ip, r2
 800a158:	459c      	cmp	ip, r3
 800a15a:	9306      	str	r3, [sp, #24]
 800a15c:	dd52      	ble.n	800a204 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 800a15e:	42b7      	cmp	r7, r6
 800a160:	dd50      	ble.n	800a204 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 800a162:	f9b8 5002 	ldrsh.w	r5, [r8, #2]
 800a166:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 800a16a:	442b      	add	r3, r5
 800a16c:	b29b      	uxth	r3, r3
 800a16e:	b219      	sxth	r1, r3
 800a170:	2900      	cmp	r1, #0
 800a172:	dd47      	ble.n	800a204 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 800a174:	42a8      	cmp	r0, r5
 800a176:	dd45      	ble.n	800a204 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 800a178:	4567      	cmp	r7, ip
 800a17a:	bfb8      	it	lt
 800a17c:	b2ba      	uxthlt	r2, r7
 800a17e:	4288      	cmp	r0, r1
 800a180:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 800a184:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 800a188:	bfb8      	it	lt
 800a18a:	b283      	uxthlt	r3, r0
 800a18c:	1b92      	subs	r2, r2, r6
 800a18e:	1b5b      	subs	r3, r3, r5
 800a190:	f8ad 201c 	strh.w	r2, [sp, #28]
 800a194:	f8ad 301e 	strh.w	r3, [sp, #30]
 800a198:	f8ad 6018 	strh.w	r6, [sp, #24]
 800a19c:	f8ad 501a 	strh.w	r5, [sp, #26]
 800a1a0:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 800a1a4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a1a8:	429a      	cmp	r2, r3
 800a1aa:	d026      	beq.n	800a1fa <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 800a1ac:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	dd22      	ble.n	800a1fa <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 800a1b4:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	dd1e      	ble.n	800a1fa <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 800a1bc:	2300      	movs	r3, #0
 800a1be:	e9cd 3308 	strd	r3, r3, [sp, #32]
 800a1c2:	6823      	ldr	r3, [r4, #0]
 800a1c4:	a908      	add	r1, sp, #32
 800a1c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1c8:	4620      	mov	r0, r4
 800a1ca:	4798      	blx	r3
 800a1cc:	4b0f      	ldr	r3, [pc, #60]	@ (800a20c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xec>)
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800a1d4:	b10a      	cbz	r2, 800a1da <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xba>
 800a1d6:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800a1d8:	b900      	cbnz	r0, 800a1dc <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xbc>
 800a1da:	6898      	ldr	r0, [r3, #8]
 800a1dc:	6801      	ldr	r1, [r0, #0]
 800a1de:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 800a1e2:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 800a1e6:	2501      	movs	r5, #1
 800a1e8:	9502      	str	r5, [sp, #8]
 800a1ea:	f894 4032 	ldrb.w	r4, [r4, #50]	@ 0x32
 800a1ee:	9401      	str	r4, [sp, #4]
 800a1f0:	ac06      	add	r4, sp, #24
 800a1f2:	9400      	str	r4, [sp, #0]
 800a1f4:	688c      	ldr	r4, [r1, #8]
 800a1f6:	a905      	add	r1, sp, #20
 800a1f8:	47a0      	blx	r4
 800a1fa:	b00a      	add	sp, #40	@ 0x28
 800a1fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a200:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 800a202:	e797      	b.n	800a134 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 800a204:	2300      	movs	r3, #0
 800a206:	9307      	str	r3, [sp, #28]
 800a208:	e7ca      	b.n	800a1a0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x80>
 800a20a:	bf00      	nop
 800a20c:	20012638 	.word	0x20012638

0800a210 <_ZNK8touchgfx6Button17invalidateContentEv>:
 800a210:	f890 2032 	ldrb.w	r2, [r0, #50]	@ 0x32
 800a214:	b12a      	cbz	r2, 800a222 <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 800a216:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 800a21a:	b112      	cbz	r2, 800a222 <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 800a21c:	6803      	ldr	r3, [r0, #0]
 800a21e:	695b      	ldr	r3, [r3, #20]
 800a220:	4718      	bx	r3
 800a222:	4770      	bx	lr

0800a224 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE>:
 800a224:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a228:	4b2f      	ldr	r3, [pc, #188]	@ (800a2e8 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc4>)
 800a22a:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 800a22c:	881b      	ldrh	r3, [r3, #0]
 800a22e:	4293      	cmp	r3, r2
 800a230:	b08d      	sub	sp, #52	@ 0x34
 800a232:	4604      	mov	r4, r0
 800a234:	460f      	mov	r7, r1
 800a236:	d954      	bls.n	800a2e2 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 800a238:	4b2c      	ldr	r3, [pc, #176]	@ (800a2ec <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc8>)
 800a23a:	6819      	ldr	r1, [r3, #0]
 800a23c:	eb01 0342 	add.w	r3, r1, r2, lsl #1
 800a240:	f811 1012 	ldrb.w	r1, [r1, r2, lsl #1]
 800a244:	4a2a      	ldr	r2, [pc, #168]	@ (800a2f0 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xcc>)
 800a246:	6812      	ldr	r2, [r2, #0]
 800a248:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800a24c:	2900      	cmp	r1, #0
 800a24e:	d048      	beq.n	800a2e2 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 800a250:	785a      	ldrb	r2, [r3, #1]
 800a252:	f894 3039 	ldrb.w	r3, [r4, #57]	@ 0x39
 800a256:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 800a25a:	4b26      	ldr	r3, [pc, #152]	@ (800a2f4 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd0>)
 800a25c:	f890 5036 	ldrb.w	r5, [r0, #54]	@ 0x36
 800a260:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	@ 0x34
 800a264:	f890 e038 	ldrb.w	lr, [r0, #56]	@ 0x38
 800a268:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 800a26a:	f890 0037 	ldrb.w	r0, [r0, #55]	@ 0x37
 800a26e:	9107      	str	r1, [sp, #28]
 800a270:	f3c2 0801 	ubfx	r8, r2, #0, #2
 800a274:	f3c2 0281 	ubfx	r2, r2, #2, #2
 800a278:	f88d 2021 	strb.w	r2, [sp, #33]	@ 0x21
 800a27c:	681a      	ldr	r2, [r3, #0]
 800a27e:	f88d 8020 	strb.w	r8, [sp, #32]
 800a282:	f892 3058 	ldrb.w	r3, [r2, #88]	@ 0x58
 800a286:	f88d e022 	strb.w	lr, [sp, #34]	@ 0x22
 800a28a:	9609      	str	r6, [sp, #36]	@ 0x24
 800a28c:	f8ad c028 	strh.w	ip, [sp, #40]	@ 0x28
 800a290:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800a294:	f88d 002b 	strb.w	r0, [sp, #43]	@ 0x2b
 800a298:	b10b      	cbz	r3, 800a29e <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7a>
 800a29a:	6cd5      	ldr	r5, [r2, #76]	@ 0x4c
 800a29c:	b905      	cbnz	r5, 800a2a0 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7c>
 800a29e:	6895      	ldr	r5, [r2, #8]
 800a2a0:	ae05      	add	r6, sp, #20
 800a2a2:	4621      	mov	r1, r4
 800a2a4:	4630      	mov	r0, r6
 800a2a6:	f003 f801 	bl	800d2ac <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800a2aa:	4b13      	ldr	r3, [pc, #76]	@ (800a2f8 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd4>)
 800a2ac:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 800a2ae:	6818      	ldr	r0, [r3, #0]
 800a2b0:	f7f9 f930 	bl	8003514 <_ZNK8touchgfx5Texts7getTextEt>
 800a2b4:	6823      	ldr	r3, [r4, #0]
 800a2b6:	4680      	mov	r8, r0
 800a2b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a2ba:	4620      	mov	r0, r4
 800a2bc:	4798      	blx	r3
 800a2be:	6823      	ldr	r3, [r4, #0]
 800a2c0:	4681      	mov	r9, r0
 800a2c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a2c6:	4620      	mov	r0, r4
 800a2c8:	4798      	blx	r3
 800a2ca:	e9cd 9002 	strd	r9, r0, [sp, #8]
 800a2ce:	ab07      	add	r3, sp, #28
 800a2d0:	9300      	str	r3, [sp, #0]
 800a2d2:	f8cd 8004 	str.w	r8, [sp, #4]
 800a2d6:	463b      	mov	r3, r7
 800a2d8:	e896 0006 	ldmia.w	r6, {r1, r2}
 800a2dc:	4628      	mov	r0, r5
 800a2de:	f7f9 f8cb 	bl	8003478 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 800a2e2:	b00d      	add	sp, #52	@ 0x34
 800a2e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a2e8:	2001268c 	.word	0x2001268c
 800a2ec:	20012688 	.word	0x20012688
 800a2f0:	20012690 	.word	0x20012690
 800a2f4:	20012638 	.word	0x20012638
 800a2f8:	20012694 	.word	0x20012694

0800a2fc <_ZN8touchgfx5ImageD1Ev>:
 800a2fc:	4770      	bx	lr

0800a2fe <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 800a2fe:	b570      	push	{r4, r5, r6, lr}
 800a300:	880b      	ldrh	r3, [r1, #0]
 800a302:	84c3      	strh	r3, [r0, #38]	@ 0x26
 800a304:	4604      	mov	r4, r0
 800a306:	4608      	mov	r0, r1
 800a308:	460d      	mov	r5, r1
 800a30a:	f004 ff75 	bl	800f1f8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800a30e:	4606      	mov	r6, r0
 800a310:	4628      	mov	r0, r5
 800a312:	f004 ffa5 	bl	800f260 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800a316:	6823      	ldr	r3, [r4, #0]
 800a318:	4605      	mov	r5, r0
 800a31a:	4631      	mov	r1, r6
 800a31c:	4620      	mov	r0, r4
 800a31e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a320:	4798      	blx	r3
 800a322:	6823      	ldr	r3, [r4, #0]
 800a324:	4629      	mov	r1, r5
 800a326:	4620      	mov	r0, r4
 800a328:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a32a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a32e:	4718      	bx	r3

0800a330 <_ZN8touchgfx5ImageD0Ev>:
 800a330:	b510      	push	{r4, lr}
 800a332:	212c      	movs	r1, #44	@ 0x2c
 800a334:	4604      	mov	r4, r0
 800a336:	f007 fe33 	bl	8011fa0 <_ZdlPvj>
 800a33a:	4620      	mov	r0, r4
 800a33c:	bd10      	pop	{r4, pc}

0800a33e <_ZNK8touchgfx5Image12getSolidRectEv>:
 800a33e:	b510      	push	{r4, lr}
 800a340:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 800a344:	2bff      	cmp	r3, #255	@ 0xff
 800a346:	4604      	mov	r4, r0
 800a348:	d006      	beq.n	800a358 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 800a34a:	2300      	movs	r3, #0
 800a34c:	8003      	strh	r3, [r0, #0]
 800a34e:	8043      	strh	r3, [r0, #2]
 800a350:	8083      	strh	r3, [r0, #4]
 800a352:	80c3      	strh	r3, [r0, #6]
 800a354:	4620      	mov	r0, r4
 800a356:	bd10      	pop	{r4, pc}
 800a358:	3126      	adds	r1, #38	@ 0x26
 800a35a:	f004 ffb5 	bl	800f2c8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 800a35e:	e7f9      	b.n	800a354 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

0800a360 <_ZNK8touchgfx5Image17invalidateContentEv>:
 800a360:	f890 2028 	ldrb.w	r2, [r0, #40]	@ 0x28
 800a364:	b12a      	cbz	r2, 800a372 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 800a366:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 800a36a:	b112      	cbz	r2, 800a372 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 800a36c:	6803      	ldr	r3, [r0, #0]
 800a36e:	695b      	ldr	r3, [r3, #20]
 800a370:	4718      	bx	r3
 800a372:	4770      	bx	lr

0800a374 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 800a374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a378:	4604      	mov	r4, r0
 800a37a:	b088      	sub	sp, #32
 800a37c:	f854 3b26 	ldr.w	r3, [r4], #38
 800a380:	2500      	movs	r5, #0
 800a382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a384:	460f      	mov	r7, r1
 800a386:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a38a:	a904      	add	r1, sp, #16
 800a38c:	4606      	mov	r6, r0
 800a38e:	4798      	blx	r3
 800a390:	4620      	mov	r0, r4
 800a392:	f004 ff31 	bl	800f1f8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800a396:	4680      	mov	r8, r0
 800a398:	4620      	mov	r0, r4
 800a39a:	f004 ff61 	bl	800f260 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800a39e:	9506      	str	r5, [sp, #24]
 800a3a0:	ad06      	add	r5, sp, #24
 800a3a2:	f8ad 001e 	strh.w	r0, [sp, #30]
 800a3a6:	4639      	mov	r1, r7
 800a3a8:	4628      	mov	r0, r5
 800a3aa:	f8ad 801c 	strh.w	r8, [sp, #28]
 800a3ae:	f7fe fa4b 	bl	8008848 <_ZN8touchgfx4RectaNERKS0_>
 800a3b2:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	dd19      	ble.n	800a3ee <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 800a3ba:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	dd15      	ble.n	800a3ee <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 800a3c2:	4b0c      	ldr	r3, [pc, #48]	@ (800a3f4 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800a3ca:	b10a      	cbz	r2, 800a3d0 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 800a3cc:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800a3ce:	b900      	cbnz	r0, 800a3d2 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 800a3d0:	6898      	ldr	r0, [r3, #8]
 800a3d2:	6801      	ldr	r1, [r0, #0]
 800a3d4:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 800a3d8:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 800a3dc:	2701      	movs	r7, #1
 800a3de:	9702      	str	r7, [sp, #8]
 800a3e0:	f896 6028 	ldrb.w	r6, [r6, #40]	@ 0x28
 800a3e4:	e9cd 5600 	strd	r5, r6, [sp]
 800a3e8:	688d      	ldr	r5, [r1, #8]
 800a3ea:	4621      	mov	r1, r4
 800a3ec:	47a8      	blx	r5
 800a3ee:	b008      	add	sp, #32
 800a3f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3f4:	20012638 	.word	0x20012638

0800a3f8 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 800a3f8:	b510      	push	{r4, lr}
 800a3fa:	6803      	ldr	r3, [r0, #0]
 800a3fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3fe:	460c      	mov	r4, r1
 800a400:	4798      	blx	r3
 800a402:	1b03      	subs	r3, r0, r4
 800a404:	4258      	negs	r0, r3
 800a406:	4158      	adcs	r0, r3
 800a408:	bd10      	pop	{r4, pc}
	...

0800a40c <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 800a40c:	4b01      	ldr	r3, [pc, #4]	@ (800a414 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 800a40e:	6019      	str	r1, [r3, #0]
 800a410:	4770      	bx	lr
 800a412:	bf00      	nop
 800a414:	20012640 	.word	0x20012640

0800a418 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 800a418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a41c:	4696      	mov	lr, r2
 800a41e:	4605      	mov	r5, r0
 800a420:	4614      	mov	r4, r2
 800a422:	460e      	mov	r6, r1
 800a424:	461f      	mov	r7, r3
 800a426:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800a42a:	b097      	sub	sp, #92	@ 0x5c
 800a42c:	f10d 0c1c 	add.w	ip, sp, #28
 800a430:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a434:	f8de 3000 	ldr.w	r3, [lr]
 800a438:	f8cc 3000 	str.w	r3, [ip]
 800a43c:	f104 0e14 	add.w	lr, r4, #20
 800a440:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800a444:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800a448:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a44c:	f8de 3000 	ldr.w	r3, [lr]
 800a450:	f8cc 3000 	str.w	r3, [ip]
 800a454:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 800a458:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800a45c:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 800a460:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a464:	f89d 908c 	ldrb.w	r9, [sp, #140]	@ 0x8c
 800a468:	f8bd a090 	ldrh.w	sl, [sp, #144]	@ 0x90
 800a46c:	f8bd 8088 	ldrh.w	r8, [sp, #136]	@ 0x88
 800a470:	f8de 3000 	ldr.w	r3, [lr]
 800a474:	f8cc 3000 	str.w	r3, [ip]
 800a478:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800a47a:	682b      	ldr	r3, [r5, #0]
 800a47c:	9201      	str	r2, [sp, #4]
 800a47e:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 800a482:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a484:	9200      	str	r2, [sp, #0]
 800a486:	f8cd 8008 	str.w	r8, [sp, #8]
 800a48a:	f8d3 b03c 	ldr.w	fp, [r3, #60]	@ 0x3c
 800a48e:	aa07      	add	r2, sp, #28
 800a490:	463b      	mov	r3, r7
 800a492:	4631      	mov	r1, r6
 800a494:	4628      	mov	r0, r5
 800a496:	47d8      	blx	fp
 800a498:	46a6      	mov	lr, r4
 800a49a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800a49e:	f10d 0c1c 	add.w	ip, sp, #28
 800a4a2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a4a6:	f8de 3000 	ldr.w	r3, [lr]
 800a4aa:	f8cc 3000 	str.w	r3, [ip]
 800a4ae:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 800a4b2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800a4b6:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800a4ba:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a4be:	343c      	adds	r4, #60	@ 0x3c
 800a4c0:	f8de 3000 	ldr.w	r3, [lr]
 800a4c4:	f8cc 3000 	str.w	r3, [ip]
 800a4c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a4ca:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 800a4ce:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a4d2:	6823      	ldr	r3, [r4, #0]
 800a4d4:	f8cc 3000 	str.w	r3, [ip]
 800a4d8:	682b      	ldr	r3, [r5, #0]
 800a4da:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 800a4de:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800a4e0:	9201      	str	r2, [sp, #4]
 800a4e2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a4e4:	9200      	str	r2, [sp, #0]
 800a4e6:	f8cd 8008 	str.w	r8, [sp, #8]
 800a4ea:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 800a4ec:	aa07      	add	r2, sp, #28
 800a4ee:	463b      	mov	r3, r7
 800a4f0:	4631      	mov	r1, r6
 800a4f2:	4628      	mov	r0, r5
 800a4f4:	47a0      	blx	r4
 800a4f6:	b017      	add	sp, #92	@ 0x5c
 800a4f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a4fc <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 800a4fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a500:	b08d      	sub	sp, #52	@ 0x34
 800a502:	4688      	mov	r8, r1
 800a504:	9916      	ldr	r1, [sp, #88]	@ 0x58
 800a506:	f8d3 c000 	ldr.w	ip, [r3]
 800a50a:	680f      	ldr	r7, [r1, #0]
 800a50c:	f8bd 4070 	ldrh.w	r4, [sp, #112]	@ 0x70
 800a510:	ed92 4a09 	vldr	s8, [r2, #36]	@ 0x24
 800a514:	edd2 4a0b 	vldr	s9, [r2, #44]	@ 0x2c
 800a518:	edd3 6a07 	vldr	s13, [r3, #28]
 800a51c:	9918      	ldr	r1, [sp, #96]	@ 0x60
 800a51e:	f8dd a064 	ldr.w	sl, [sp, #100]	@ 0x64
 800a522:	f9b1 9000 	ldrsh.w	r9, [r1]
 800a526:	f9ba 1000 	ldrsh.w	r1, [sl]
 800a52a:	edd3 1a0a 	vldr	s3, [r3, #40]	@ 0x28
 800a52e:	ed93 2a0d 	vldr	s4, [r3, #52]	@ 0x34
 800a532:	eba7 070c 	sub.w	r7, r7, ip
 800a536:	42bc      	cmp	r4, r7
 800a538:	bfa8      	it	ge
 800a53a:	463c      	movge	r4, r7
 800a53c:	ee07 4a90 	vmov	s15, r4
 800a540:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 800a544:	edd2 7a0d 	vldr	s15, [r2, #52]	@ 0x34
 800a548:	ee25 4a04 	vmul.f32	s8, s10, s8
 800a54c:	ee65 4a24 	vmul.f32	s9, s10, s9
 800a550:	ee25 5a27 	vmul.f32	s10, s10, s15
 800a554:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800a558:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800a55c:	eb09 0e0c 	add.w	lr, r9, ip
 800a560:	4571      	cmp	r1, lr
 800a562:	ee71 0aa4 	vadd.f32	s1, s3, s9
 800a566:	ee32 1a05 	vadd.f32	s2, s4, s10
 800a56a:	ee36 0a84 	vadd.f32	s0, s13, s8
 800a56e:	ee61 1a87 	vmul.f32	s3, s3, s14
 800a572:	ee22 2a07 	vmul.f32	s4, s4, s14
 800a576:	f340 808d 	ble.w	800a694 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x198>
 800a57a:	eba1 060e 	sub.w	r6, r1, lr
 800a57e:	fb96 f5f4 	sdiv	r5, r6, r4
 800a582:	ee07 5a10 	vmov	s14, r5
 800a586:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a58a:	2d00      	cmp	r5, #0
 800a58c:	fb04 6615 	mls	r6, r4, r5, r6
 800a590:	eea7 0a04 	vfma.f32	s0, s14, s8
 800a594:	eee7 0a24 	vfma.f32	s1, s14, s9
 800a598:	eea7 1a05 	vfma.f32	s2, s14, s10
 800a59c:	dd13      	ble.n	800a5c6 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xca>
 800a59e:	ee70 6a44 	vsub.f32	s13, s0, s8
 800a5a2:	ee70 1ae4 	vsub.f32	s3, s1, s9
 800a5a6:	eef5 6a40 	vcmp.f32	s13, #0.0
 800a5aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5ae:	bf18      	it	ne
 800a5b0:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 800a5b4:	ee31 2a45 	vsub.f32	s4, s2, s10
 800a5b8:	bf08      	it	eq
 800a5ba:	eeb0 7a67 	vmoveq.f32	s14, s15
 800a5be:	ee61 1a87 	vmul.f32	s3, s3, s14
 800a5c2:	ee22 2a07 	vmul.f32	s4, s4, s14
 800a5c6:	fb05 f204 	mul.w	r2, r5, r4
 800a5ca:	1abf      	subs	r7, r7, r2
 800a5cc:	4494      	add	ip, r2
 800a5ce:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 800a5d2:	4411      	add	r1, r2
 800a5d4:	eb09 020c 	add.w	r2, r9, ip
 800a5d8:	443a      	add	r2, r7
 800a5da:	b209      	sxth	r1, r1
 800a5dc:	428a      	cmp	r2, r1
 800a5de:	bfc4      	itt	gt
 800a5e0:	eba1 0209 	subgt.w	r2, r1, r9
 800a5e4:	eba2 070c 	subgt.w	r7, r2, ip
 800a5e8:	2f00      	cmp	r7, #0
 800a5ea:	dd50      	ble.n	800a68e <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x192>
 800a5ec:	fb97 f1f4 	sdiv	r1, r7, r4
 800a5f0:	fb04 7211 	mls	r2, r4, r1, r7
 800a5f4:	b90a      	cbnz	r2, 800a5fa <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfe>
 800a5f6:	3901      	subs	r1, #1
 800a5f8:	4622      	mov	r2, r4
 800a5fa:	eec7 3a80 	vdiv.f32	s7, s15, s0
 800a5fe:	6840      	ldr	r0, [r0, #4]
 800a600:	900b      	str	r0, [sp, #44]	@ 0x2c
 800a602:	f8d0 a000 	ldr.w	sl, [r0]
 800a606:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 800a608:	9008      	str	r0, [sp, #32]
 800a60a:	f89d b06c 	ldrb.w	fp, [sp, #108]	@ 0x6c
 800a60e:	9818      	ldr	r0, [sp, #96]	@ 0x60
 800a610:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800a614:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 800a618:	695b      	ldr	r3, [r3, #20]
 800a61a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800a61c:	445b      	add	r3, fp
 800a61e:	eef0 6a42 	vmov.f32	s13, s4
 800a622:	ee60 2aa3 	vmul.f32	s5, s1, s7
 800a626:	ee21 3a23 	vmul.f32	s6, s2, s7
 800a62a:	ee72 7ae1 	vsub.f32	s15, s5, s3
 800a62e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 800a632:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 800a636:	9307      	str	r3, [sp, #28]
 800a638:	ee17 7a90 	vmov	r7, s15
 800a63c:	ee73 7a42 	vsub.f32	s15, s6, s4
 800a640:	eeb0 7a61 	vmov.f32	s14, s3
 800a644:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 800a648:	ee16 3a90 	vmov	r3, s13
 800a64c:	fb97 f7f4 	sdiv	r7, r7, r4
 800a650:	ee17 ca90 	vmov	ip, s15
 800a654:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 800a658:	fb9c fcf4 	sdiv	ip, ip, r4
 800a65c:	fb0c 3306 	mla	r3, ip, r6, r3
 800a660:	9302      	str	r3, [sp, #8]
 800a662:	ee17 3a10 	vmov	r3, s14
 800a666:	44b6      	add	lr, r6
 800a668:	fb04 e505 	mla	r5, r4, r5, lr
 800a66c:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 800a670:	fb07 3706 	mla	r7, r7, r6, r3
 800a674:	e9cd 8505 	strd	r8, r5, [sp, #20]
 800a678:	e9cd 4700 	strd	r4, r7, [sp]
 800a67c:	2900      	cmp	r1, #0
 800a67e:	bfcc      	ite	gt
 800a680:	46a1      	movgt	r9, r4
 800a682:	4691      	movle	r9, r2
 800a684:	eba9 0306 	sub.w	r3, r9, r6
 800a688:	f8da 4008 	ldr.w	r4, [sl, #8]
 800a68c:	47a0      	blx	r4
 800a68e:	b00d      	add	sp, #52	@ 0x34
 800a690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a694:	2500      	movs	r5, #0
 800a696:	462e      	mov	r6, r5
 800a698:	e799      	b.n	800a5ce <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd2>
	...

0800a69c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 800a69c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6a0:	b0db      	sub	sp, #364	@ 0x16c
 800a6a2:	461d      	mov	r5, r3
 800a6a4:	f8bd 3198 	ldrh.w	r3, [sp, #408]	@ 0x198
 800a6a8:	930a      	str	r3, [sp, #40]	@ 0x28
 800a6aa:	f89d 319c 	ldrb.w	r3, [sp, #412]	@ 0x19c
 800a6ae:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a6b0:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	@ 0x1a0
 800a6b4:	9310      	str	r3, [sp, #64]	@ 0x40
 800a6b6:	6803      	ldr	r3, [r0, #0]
 800a6b8:	910f      	str	r1, [sp, #60]	@ 0x3c
 800a6ba:	6c5f      	ldr	r7, [r3, #68]	@ 0x44
 800a6bc:	9009      	str	r0, [sp, #36]	@ 0x24
 800a6be:	4614      	mov	r4, r2
 800a6c0:	4629      	mov	r1, r5
 800a6c2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 800a6c6:	f8dd b194 	ldr.w	fp, [sp, #404]	@ 0x194
 800a6ca:	47b8      	blx	r7
 800a6cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6ce:	6058      	str	r0, [r3, #4]
 800a6d0:	2800      	cmp	r0, #0
 800a6d2:	f000 83a1 	beq.w	800ae18 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800a6d6:	682b      	ldr	r3, [r5, #0]
 800a6d8:	9314      	str	r3, [sp, #80]	@ 0x50
 800a6da:	686b      	ldr	r3, [r5, #4]
 800a6dc:	9315      	str	r3, [sp, #84]	@ 0x54
 800a6de:	4bc4      	ldr	r3, [pc, #784]	@ (800a9f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 800a6e0:	ed94 7a02 	vldr	s14, [r4, #8]
 800a6e4:	7819      	ldrb	r1, [r3, #0]
 800a6e6:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 800a6ea:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 800a6ee:	2900      	cmp	r1, #0
 800a6f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a6f4:	bf16      	itet	ne
 800a6f6:	4619      	movne	r1, r3
 800a6f8:	4611      	moveq	r1, r2
 800a6fa:	4613      	movne	r3, r2
 800a6fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a700:	9116      	str	r1, [sp, #88]	@ 0x58
 800a702:	e9cd 3217 	strd	r3, r2, [sp, #92]	@ 0x5c
 800a706:	f240 8387 	bls.w	800ae18 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800a70a:	ed94 7a07 	vldr	s14, [r4, #28]
 800a70e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a716:	f240 837f 	bls.w	800ae18 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800a71a:	ed94 7a0c 	vldr	s14, [r4, #48]	@ 0x30
 800a71e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a726:	f240 8377 	bls.w	800ae18 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800a72a:	6822      	ldr	r2, [r4, #0]
 800a72c:	4bb1      	ldr	r3, [pc, #708]	@ (800a9f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 800a72e:	429a      	cmp	r2, r3
 800a730:	f2c0 8372 	blt.w	800ae18 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800a734:	49b0      	ldr	r1, [pc, #704]	@ (800a9f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 800a736:	6963      	ldr	r3, [r4, #20]
 800a738:	428a      	cmp	r2, r1
 800a73a:	f300 836d 	bgt.w	800ae18 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800a73e:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 800a742:	48ae      	ldr	r0, [pc, #696]	@ (800a9fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 800a744:	33ff      	adds	r3, #255	@ 0xff
 800a746:	4283      	cmp	r3, r0
 800a748:	f200 8366 	bhi.w	800ae18 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800a74c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800a74e:	4dac      	ldr	r5, [pc, #688]	@ (800aa00 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 800a750:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 800a754:	33ff      	adds	r3, #255	@ 0xff
 800a756:	42ab      	cmp	r3, r5
 800a758:	f200 835e 	bhi.w	800ae18 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800a75c:	6862      	ldr	r2, [r4, #4]
 800a75e:	f502 331c 	add.w	r3, r2, #159744	@ 0x27000
 800a762:	33ff      	adds	r3, #255	@ 0xff
 800a764:	4283      	cmp	r3, r0
 800a766:	f200 8357 	bhi.w	800ae18 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800a76a:	69a1      	ldr	r1, [r4, #24]
 800a76c:	f501 331c 	add.w	r3, r1, #159744	@ 0x27000
 800a770:	33ff      	adds	r3, #255	@ 0xff
 800a772:	4283      	cmp	r3, r0
 800a774:	f200 8350 	bhi.w	800ae18 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800a778:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800a77a:	f503 301c 	add.w	r0, r3, #159744	@ 0x27000
 800a77e:	30ff      	adds	r0, #255	@ 0xff
 800a780:	42a8      	cmp	r0, r5
 800a782:	f200 8349 	bhi.w	800ae18 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800a786:	428a      	cmp	r2, r1
 800a788:	f280 8110 	bge.w	800a9ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 800a78c:	429a      	cmp	r2, r3
 800a78e:	f300 8119 	bgt.w	800a9c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 800a792:	4299      	cmp	r1, r3
 800a794:	f280 811d 	bge.w	800a9d2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 800a798:	2502      	movs	r5, #2
 800a79a:	2701      	movs	r7, #1
 800a79c:	46a9      	mov	r9, r5
 800a79e:	46b8      	mov	r8, r7
 800a7a0:	f04f 0a00 	mov.w	sl, #0
 800a7a4:	4621      	mov	r1, r4
 800a7a6:	a849      	add	r0, sp, #292	@ 0x124
 800a7a8:	f003 fee2 	bl	800e570 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 800a7ac:	4622      	mov	r2, r4
 800a7ae:	4653      	mov	r3, sl
 800a7b0:	a949      	add	r1, sp, #292	@ 0x124
 800a7b2:	f8cd 9000 	str.w	r9, [sp]
 800a7b6:	a819      	add	r0, sp, #100	@ 0x64
 800a7b8:	f004 f80a 	bl	800e7d0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800a7bc:	4622      	mov	r2, r4
 800a7be:	4653      	mov	r3, sl
 800a7c0:	a949      	add	r1, sp, #292	@ 0x124
 800a7c2:	f8cd 8000 	str.w	r8, [sp]
 800a7c6:	a829      	add	r0, sp, #164	@ 0xa4
 800a7c8:	f004 f802 	bl	800e7d0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800a7cc:	4643      	mov	r3, r8
 800a7ce:	4622      	mov	r2, r4
 800a7d0:	a949      	add	r1, sp, #292	@ 0x124
 800a7d2:	f8cd 9000 	str.w	r9, [sp]
 800a7d6:	a839      	add	r0, sp, #228	@ 0xe4
 800a7d8:	f003 fffa 	bl	800e7d0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800a7dc:	42af      	cmp	r7, r5
 800a7de:	bfb5      	itete	lt
 800a7e0:	2300      	movlt	r3, #0
 800a7e2:	2301      	movge	r3, #1
 800a7e4:	930e      	strlt	r3, [sp, #56]	@ 0x38
 800a7e6:	930e      	strge	r3, [sp, #56]	@ 0x38
 800a7e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a7ea:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a7ee:	af12      	add	r7, sp, #72	@ 0x48
 800a7f0:	bfb9      	ittee	lt
 800a7f2:	ad29      	addlt	r5, sp, #164	@ 0xa4
 800a7f4:	ac19      	addlt	r4, sp, #100	@ 0x64
 800a7f6:	ad19      	addge	r5, sp, #100	@ 0x64
 800a7f8:	ac29      	addge	r4, sp, #164	@ 0xa4
 800a7fa:	e887 0003 	stmia.w	r7, {r0, r1}
 800a7fe:	b928      	cbnz	r0, 800a80c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 800a800:	4b80      	ldr	r3, [pc, #512]	@ (800aa04 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 800a802:	6818      	ldr	r0, [r3, #0]
 800a804:	6803      	ldr	r3, [r0, #0]
 800a806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a808:	4798      	blx	r3
 800a80a:	6038      	str	r0, [r7, #0]
 800a80c:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 800a80e:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 800a812:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800a816:	930c      	str	r3, [sp, #48]	@ 0x30
 800a818:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a81a:	6963      	ldr	r3, [r4, #20]
 800a81c:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 800a81e:	440b      	add	r3, r1
 800a820:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 800a824:	4408      	add	r0, r1
 800a826:	b200      	sxth	r0, r0
 800a828:	4283      	cmp	r3, r0
 800a82a:	900d      	str	r0, [sp, #52]	@ 0x34
 800a82c:	f280 80dd 	bge.w	800a9ea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 800a830:	428b      	cmp	r3, r1
 800a832:	da08      	bge.n	800a846 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800a834:	2a00      	cmp	r2, #0
 800a836:	dd06      	ble.n	800a846 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800a838:	1acb      	subs	r3, r1, r3
 800a83a:	429a      	cmp	r2, r3
 800a83c:	f2c0 80e4 	blt.w	800aa08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 800a840:	2b00      	cmp	r3, #0
 800a842:	f300 80e2 	bgt.w	800aa0a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 800a846:	6967      	ldr	r7, [r4, #20]
 800a848:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a84a:	443b      	add	r3, r7
 800a84c:	461f      	mov	r7, r3
 800a84e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a850:	1bdf      	subs	r7, r3, r7
 800a852:	4297      	cmp	r7, r2
 800a854:	bfa8      	it	ge
 800a856:	4617      	movge	r7, r2
 800a858:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 800a85c:	2f00      	cmp	r7, #0
 800a85e:	f340 8166 	ble.w	800ab2e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 800a862:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 800a864:	6829      	ldr	r1, [r5, #0]
 800a866:	f9b3 2000 	ldrsh.w	r2, [r3]
 800a86a:	f9bb 3000 	ldrsh.w	r3, [fp]
 800a86e:	6820      	ldr	r0, [r4, #0]
 800a870:	4411      	add	r1, r2
 800a872:	4299      	cmp	r1, r3
 800a874:	dd1a      	ble.n	800a8ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 800a876:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 800a87a:	440b      	add	r3, r1
 800a87c:	4402      	add	r2, r0
 800a87e:	b21b      	sxth	r3, r3
 800a880:	429a      	cmp	r2, r3
 800a882:	dc13      	bgt.n	800a8ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 800a884:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a886:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	9206      	str	r2, [sp, #24]
 800a88c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a88e:	9205      	str	r2, [sp, #20]
 800a890:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a892:	9500      	str	r5, [sp, #0]
 800a894:	e9cd b203 	strd	fp, r2, [sp, #12]
 800a898:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 800a89a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a89c:	e9cd 8201 	strd	r8, r2, [sp, #4]
 800a8a0:	a912      	add	r1, sp, #72	@ 0x48
 800a8a2:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 800a8a6:	aa49      	add	r2, sp, #292	@ 0x124
 800a8a8:	4623      	mov	r3, r4
 800a8aa:	47c8      	blx	r9
 800a8ac:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a8b0:	441a      	add	r2, r3
 800a8b2:	6963      	ldr	r3, [r4, #20]
 800a8b4:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 800a8b8:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 800a8bc:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 800a8c0:	68a1      	ldr	r1, [r4, #8]
 800a8c2:	ed94 6a08 	vldr	s12, [r4, #32]
 800a8c6:	6022      	str	r2, [r4, #0]
 800a8c8:	3301      	adds	r3, #1
 800a8ca:	6163      	str	r3, [r4, #20]
 800a8cc:	69a3      	ldr	r3, [r4, #24]
 800a8ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a8d2:	3b01      	subs	r3, #1
 800a8d4:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 800a8d8:	61a3      	str	r3, [r4, #24]
 800a8da:	6923      	ldr	r3, [r4, #16]
 800a8dc:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 800a8e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a8e4:	edd4 6a07 	vldr	s13, [r4, #28]
 800a8e8:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 800a8ec:	440b      	add	r3, r1
 800a8ee:	68e1      	ldr	r1, [r4, #12]
 800a8f0:	6123      	str	r3, [r4, #16]
 800a8f2:	ee76 6a86 	vadd.f32	s13, s13, s12
 800a8f6:	428b      	cmp	r3, r1
 800a8f8:	edc4 6a07 	vstr	s13, [r4, #28]
 800a8fc:	db15      	blt.n	800a92a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 800a8fe:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 800a902:	ee76 6a26 	vadd.f32	s13, s12, s13
 800a906:	3201      	adds	r2, #1
 800a908:	edc4 6a07 	vstr	s13, [r4, #28]
 800a90c:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 800a910:	6022      	str	r2, [r4, #0]
 800a912:	ee36 7a87 	vadd.f32	s14, s13, s14
 800a916:	1a5b      	subs	r3, r3, r1
 800a918:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 800a91c:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 800a920:	6123      	str	r3, [r4, #16]
 800a922:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a926:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 800a92a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a92e:	441a      	add	r2, r3
 800a930:	696b      	ldr	r3, [r5, #20]
 800a932:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 800a936:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 800a93a:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 800a93e:	68a9      	ldr	r1, [r5, #8]
 800a940:	ed95 6a08 	vldr	s12, [r5, #32]
 800a944:	602a      	str	r2, [r5, #0]
 800a946:	3301      	adds	r3, #1
 800a948:	616b      	str	r3, [r5, #20]
 800a94a:	69ab      	ldr	r3, [r5, #24]
 800a94c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a950:	3b01      	subs	r3, #1
 800a952:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 800a956:	61ab      	str	r3, [r5, #24]
 800a958:	692b      	ldr	r3, [r5, #16]
 800a95a:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 800a95e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a962:	edd5 6a07 	vldr	s13, [r5, #28]
 800a966:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 800a96a:	440b      	add	r3, r1
 800a96c:	68e9      	ldr	r1, [r5, #12]
 800a96e:	612b      	str	r3, [r5, #16]
 800a970:	ee76 6a86 	vadd.f32	s13, s13, s12
 800a974:	428b      	cmp	r3, r1
 800a976:	edc5 6a07 	vstr	s13, [r5, #28]
 800a97a:	db15      	blt.n	800a9a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 800a97c:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 800a980:	ee76 6a26 	vadd.f32	s13, s12, s13
 800a984:	3201      	adds	r2, #1
 800a986:	edc5 6a07 	vstr	s13, [r5, #28]
 800a98a:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 800a98e:	602a      	str	r2, [r5, #0]
 800a990:	ee36 7a87 	vadd.f32	s14, s13, s14
 800a994:	1a5b      	subs	r3, r3, r1
 800a996:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 800a99a:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 800a99e:	612b      	str	r3, [r5, #16]
 800a9a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a9a4:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 800a9a8:	3f01      	subs	r7, #1
 800a9aa:	e757      	b.n	800a85c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 800a9ac:	4299      	cmp	r1, r3
 800a9ae:	dc13      	bgt.n	800a9d8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 800a9b0:	429a      	cmp	r2, r3
 800a9b2:	da14      	bge.n	800a9de <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 800a9b4:	2502      	movs	r5, #2
 800a9b6:	2703      	movs	r7, #3
 800a9b8:	46a9      	mov	r9, r5
 800a9ba:	f04f 0800 	mov.w	r8, #0
 800a9be:	f04f 0a01 	mov.w	sl, #1
 800a9c2:	e6ef      	b.n	800a7a4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 800a9c4:	2501      	movs	r5, #1
 800a9c6:	2700      	movs	r7, #0
 800a9c8:	46a9      	mov	r9, r5
 800a9ca:	46b8      	mov	r8, r7
 800a9cc:	f04f 0a02 	mov.w	sl, #2
 800a9d0:	e6e8      	b.n	800a7a4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 800a9d2:	2501      	movs	r5, #1
 800a9d4:	2702      	movs	r7, #2
 800a9d6:	e6e1      	b.n	800a79c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 800a9d8:	2500      	movs	r5, #0
 800a9da:	2701      	movs	r7, #1
 800a9dc:	e7f4      	b.n	800a9c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 800a9de:	2702      	movs	r7, #2
 800a9e0:	2503      	movs	r5, #3
 800a9e2:	f04f 0900 	mov.w	r9, #0
 800a9e6:	46b8      	mov	r8, r7
 800a9e8:	e7e9      	b.n	800a9be <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 800a9ea:	4613      	mov	r3, r2
 800a9ec:	e728      	b.n	800a840 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 800a9ee:	bf00      	nop
 800a9f0:	20012630 	.word	0x20012630
 800a9f4:	fffd8f01 	.word	0xfffd8f01
 800a9f8:	00027100 	.word	0x00027100
 800a9fc:	0004e1ff 	.word	0x0004e1ff
 800aa00:	0004e1fe 	.word	0x0004e1fe
 800aa04:	20012638 	.word	0x20012638
 800aa08:	4613      	mov	r3, r2
 800aa0a:	992b      	ldr	r1, [sp, #172]	@ 0xac
 800aa0c:	9111      	str	r1, [sp, #68]	@ 0x44
 800aa0e:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	@ 0xa4
 800aa12:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	@ 0xb0
 800aa16:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 800aa18:	eddd 4a34 	vldr	s9, [sp, #208]	@ 0xd0
 800aa1c:	ed9d 7a33 	vldr	s14, [sp, #204]	@ 0xcc
 800aa20:	ed9d 4a37 	vldr	s8, [sp, #220]	@ 0xdc
 800aa24:	eddd 7a36 	vldr	s15, [sp, #216]	@ 0xd8
 800aa28:	eddd 3a31 	vldr	s7, [sp, #196]	@ 0xc4
 800aa2c:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800aa30:	ed9d 5a32 	vldr	s10, [sp, #200]	@ 0xc8
 800aa34:	eddd 5a35 	vldr	s11, [sp, #212]	@ 0xd4
 800aa38:	ed9d 6a38 	vldr	s12, [sp, #224]	@ 0xe0
 800aa3c:	469e      	mov	lr, r3
 800aa3e:	469c      	mov	ip, r3
 800aa40:	f04f 0900 	mov.w	r9, #0
 800aa44:	f1bc 0f00 	cmp.w	ip, #0
 800aa48:	d147      	bne.n	800aada <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 800aa4a:	eb03 0c07 	add.w	ip, r3, r7
 800aa4e:	1ad7      	subs	r7, r2, r3
 800aa50:	f1b9 0f00 	cmp.w	r9, #0
 800aa54:	d009      	beq.n	800aa6a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 800aa56:	e9cd c72e 	strd	ip, r7, [sp, #184]	@ 0xb8
 800aa5a:	9029      	str	r0, [sp, #164]	@ 0xa4
 800aa5c:	ed8d 7a33 	vstr	s14, [sp, #204]	@ 0xcc
 800aa60:	edcd 7a36 	vstr	s15, [sp, #216]	@ 0xd8
 800aa64:	edcd 6a30 	vstr	s13, [sp, #192]	@ 0xc0
 800aa68:	912d      	str	r1, [sp, #180]	@ 0xb4
 800aa6a:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 800aa6c:	9111      	str	r1, [sp, #68]	@ 0x44
 800aa6e:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 800aa72:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 800aa76:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 800aa7a:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 800aa7e:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 800aa82:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 800aa86:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 800aa8a:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 800aa8e:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 800aa92:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 800aa96:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 800aa9a:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 800aa9e:	f04f 0800 	mov.w	r8, #0
 800aaa2:	f1be 0f00 	cmp.w	lr, #0
 800aaa6:	d031      	beq.n	800ab0c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 800aaa8:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800aaaa:	4431      	add	r1, r6
 800aaac:	4549      	cmp	r1, r9
 800aaae:	4450      	add	r0, sl
 800aab0:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800aab4:	ee37 7a04 	vadd.f32	s14, s14, s8
 800aab8:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800aabc:	db08      	blt.n	800aad0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 800aabe:	ee77 7a85 	vadd.f32	s15, s15, s10
 800aac2:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800aac6:	ee37 7a06 	vadd.f32	s14, s14, s12
 800aaca:	3001      	adds	r0, #1
 800aacc:	eba1 0109 	sub.w	r1, r1, r9
 800aad0:	f10e 3eff 	add.w	lr, lr, #4294967295
 800aad4:	f04f 0801 	mov.w	r8, #1
 800aad8:	e7e3      	b.n	800aaa2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 800aada:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800aadc:	4431      	add	r1, r6
 800aade:	4541      	cmp	r1, r8
 800aae0:	4450      	add	r0, sl
 800aae2:	ee37 7a24 	vadd.f32	s14, s14, s9
 800aae6:	ee77 7a84 	vadd.f32	s15, s15, s8
 800aaea:	ee76 6aa3 	vadd.f32	s13, s13, s7
 800aaee:	db08      	blt.n	800ab02 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 800aaf0:	ee76 6a85 	vadd.f32	s13, s13, s10
 800aaf4:	ee37 7a25 	vadd.f32	s14, s14, s11
 800aaf8:	ee77 7a86 	vadd.f32	s15, s15, s12
 800aafc:	3001      	adds	r0, #1
 800aafe:	eba1 0108 	sub.w	r1, r1, r8
 800ab02:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ab06:	f04f 0901 	mov.w	r9, #1
 800ab0a:	e79b      	b.n	800aa44 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 800ab0c:	449c      	add	ip, r3
 800ab0e:	1aff      	subs	r7, r7, r3
 800ab10:	f1b8 0f00 	cmp.w	r8, #0
 800ab14:	d009      	beq.n	800ab2a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 800ab16:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 800ab1a:	9019      	str	r0, [sp, #100]	@ 0x64
 800ab1c:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 800ab20:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 800ab24:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 800ab28:	911d      	str	r1, [sp, #116]	@ 0x74
 800ab2a:	1ad2      	subs	r2, r2, r3
 800ab2c:	e68b      	b.n	800a846 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800ab2e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ab30:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	f000 80d1 	beq.w	800acda <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 800ab38:	ad19      	add	r5, sp, #100	@ 0x64
 800ab3a:	ac39      	add	r4, sp, #228	@ 0xe4
 800ab3c:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 800ab3e:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 800ab42:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ab46:	930c      	str	r3, [sp, #48]	@ 0x30
 800ab48:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ab4a:	6963      	ldr	r3, [r4, #20]
 800ab4c:	440b      	add	r3, r1
 800ab4e:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 800ab52:	4408      	add	r0, r1
 800ab54:	b200      	sxth	r0, r0
 800ab56:	4283      	cmp	r3, r0
 800ab58:	900d      	str	r0, [sp, #52]	@ 0x34
 800ab5a:	f280 80c1 	bge.w	800ace0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 800ab5e:	428b      	cmp	r3, r1
 800ab60:	da08      	bge.n	800ab74 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800ab62:	2a00      	cmp	r2, #0
 800ab64:	dd06      	ble.n	800ab74 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800ab66:	1acb      	subs	r3, r1, r3
 800ab68:	429a      	cmp	r2, r3
 800ab6a:	f2c0 80bb 	blt.w	800ace4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	f300 80b9 	bgt.w	800ace6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 800ab74:	6967      	ldr	r7, [r4, #20]
 800ab76:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ab78:	443b      	add	r3, r7
 800ab7a:	461f      	mov	r7, r3
 800ab7c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ab7e:	1bdf      	subs	r7, r3, r7
 800ab80:	4297      	cmp	r7, r2
 800ab82:	bfa8      	it	ge
 800ab84:	4617      	movge	r7, r2
 800ab86:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 800ab8a:	2f00      	cmp	r7, #0
 800ab8c:	f340 813c 	ble.w	800ae08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 800ab90:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 800ab92:	6829      	ldr	r1, [r5, #0]
 800ab94:	f9b3 2000 	ldrsh.w	r2, [r3]
 800ab98:	f9bb 3000 	ldrsh.w	r3, [fp]
 800ab9c:	6820      	ldr	r0, [r4, #0]
 800ab9e:	4411      	add	r1, r2
 800aba0:	4299      	cmp	r1, r3
 800aba2:	dd1a      	ble.n	800abda <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 800aba4:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 800aba8:	440b      	add	r3, r1
 800abaa:	4402      	add	r2, r0
 800abac:	b21b      	sxth	r3, r3
 800abae:	429a      	cmp	r2, r3
 800abb0:	dc13      	bgt.n	800abda <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 800abb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800abb4:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	9206      	str	r2, [sp, #24]
 800abba:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800abbc:	9205      	str	r2, [sp, #20]
 800abbe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800abc0:	9500      	str	r5, [sp, #0]
 800abc2:	e9cd b203 	strd	fp, r2, [sp, #12]
 800abc6:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 800abc8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800abca:	e9cd 8201 	strd	r8, r2, [sp, #4]
 800abce:	a912      	add	r1, sp, #72	@ 0x48
 800abd0:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 800abd4:	aa49      	add	r2, sp, #292	@ 0x124
 800abd6:	4623      	mov	r3, r4
 800abd8:	47c8      	blx	r9
 800abda:	e9d4 2300 	ldrd	r2, r3, [r4]
 800abde:	441a      	add	r2, r3
 800abe0:	6963      	ldr	r3, [r4, #20]
 800abe2:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 800abe6:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 800abea:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 800abee:	68a1      	ldr	r1, [r4, #8]
 800abf0:	ed94 6a08 	vldr	s12, [r4, #32]
 800abf4:	6022      	str	r2, [r4, #0]
 800abf6:	3301      	adds	r3, #1
 800abf8:	6163      	str	r3, [r4, #20]
 800abfa:	69a3      	ldr	r3, [r4, #24]
 800abfc:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ac00:	3b01      	subs	r3, #1
 800ac02:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 800ac06:	61a3      	str	r3, [r4, #24]
 800ac08:	6923      	ldr	r3, [r4, #16]
 800ac0a:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 800ac0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac12:	edd4 6a07 	vldr	s13, [r4, #28]
 800ac16:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 800ac1a:	440b      	add	r3, r1
 800ac1c:	68e1      	ldr	r1, [r4, #12]
 800ac1e:	6123      	str	r3, [r4, #16]
 800ac20:	ee76 6a86 	vadd.f32	s13, s13, s12
 800ac24:	428b      	cmp	r3, r1
 800ac26:	edc4 6a07 	vstr	s13, [r4, #28]
 800ac2a:	db15      	blt.n	800ac58 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 800ac2c:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 800ac30:	ee76 6a26 	vadd.f32	s13, s12, s13
 800ac34:	3201      	adds	r2, #1
 800ac36:	edc4 6a07 	vstr	s13, [r4, #28]
 800ac3a:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 800ac3e:	6022      	str	r2, [r4, #0]
 800ac40:	ee36 7a87 	vadd.f32	s14, s13, s14
 800ac44:	1a5b      	subs	r3, r3, r1
 800ac46:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 800ac4a:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 800ac4e:	6123      	str	r3, [r4, #16]
 800ac50:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ac54:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 800ac58:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ac5c:	441a      	add	r2, r3
 800ac5e:	696b      	ldr	r3, [r5, #20]
 800ac60:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 800ac64:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 800ac68:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 800ac6c:	68a9      	ldr	r1, [r5, #8]
 800ac6e:	ed95 6a08 	vldr	s12, [r5, #32]
 800ac72:	602a      	str	r2, [r5, #0]
 800ac74:	3301      	adds	r3, #1
 800ac76:	616b      	str	r3, [r5, #20]
 800ac78:	69ab      	ldr	r3, [r5, #24]
 800ac7a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ac7e:	3b01      	subs	r3, #1
 800ac80:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 800ac84:	61ab      	str	r3, [r5, #24]
 800ac86:	692b      	ldr	r3, [r5, #16]
 800ac88:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 800ac8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac90:	edd5 6a07 	vldr	s13, [r5, #28]
 800ac94:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 800ac98:	440b      	add	r3, r1
 800ac9a:	68e9      	ldr	r1, [r5, #12]
 800ac9c:	612b      	str	r3, [r5, #16]
 800ac9e:	ee76 6a86 	vadd.f32	s13, s13, s12
 800aca2:	428b      	cmp	r3, r1
 800aca4:	edc5 6a07 	vstr	s13, [r5, #28]
 800aca8:	db15      	blt.n	800acd6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 800acaa:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 800acae:	ee76 6a26 	vadd.f32	s13, s12, s13
 800acb2:	3201      	adds	r2, #1
 800acb4:	edc5 6a07 	vstr	s13, [r5, #28]
 800acb8:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 800acbc:	602a      	str	r2, [r5, #0]
 800acbe:	ee36 7a87 	vadd.f32	s14, s13, s14
 800acc2:	1a5b      	subs	r3, r3, r1
 800acc4:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 800acc8:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 800accc:	612b      	str	r3, [r5, #16]
 800acce:	ee77 7a27 	vadd.f32	s15, s14, s15
 800acd2:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 800acd6:	3f01      	subs	r7, #1
 800acd8:	e757      	b.n	800ab8a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 800acda:	ad39      	add	r5, sp, #228	@ 0xe4
 800acdc:	ac19      	add	r4, sp, #100	@ 0x64
 800acde:	e72d      	b.n	800ab3c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 800ace0:	4613      	mov	r3, r2
 800ace2:	e744      	b.n	800ab6e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 800ace4:	4613      	mov	r3, r2
 800ace6:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	@ 0xe4
 800acea:	9e3b      	ldr	r6, [sp, #236]	@ 0xec
 800acec:	f8dd c0f8 	ldr.w	ip, [sp, #248]	@ 0xf8
 800acf0:	ed9d 7a43 	vldr	s14, [sp, #268]	@ 0x10c
 800acf4:	eddd 4a44 	vldr	s9, [sp, #272]	@ 0x110
 800acf8:	eddd 7a46 	vldr	s15, [sp, #280]	@ 0x118
 800acfc:	ed9d 4a47 	vldr	s8, [sp, #284]	@ 0x11c
 800ad00:	eddd 6a40 	vldr	s13, [sp, #256]	@ 0x100
 800ad04:	eddd 3a41 	vldr	s7, [sp, #260]	@ 0x104
 800ad08:	993d      	ldr	r1, [sp, #244]	@ 0xf4
 800ad0a:	f8dd 80f0 	ldr.w	r8, [sp, #240]	@ 0xf0
 800ad0e:	ed9d 5a42 	vldr	s10, [sp, #264]	@ 0x108
 800ad12:	eddd 5a45 	vldr	s11, [sp, #276]	@ 0x114
 800ad16:	ed9d 6a48 	vldr	s12, [sp, #288]	@ 0x120
 800ad1a:	960e      	str	r6, [sp, #56]	@ 0x38
 800ad1c:	469e      	mov	lr, r3
 800ad1e:	461f      	mov	r7, r3
 800ad20:	f04f 0900 	mov.w	r9, #0
 800ad24:	2f00      	cmp	r7, #0
 800ad26:	d146      	bne.n	800adb6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 800ad28:	449c      	add	ip, r3
 800ad2a:	1ad7      	subs	r7, r2, r3
 800ad2c:	f1b9 0f00 	cmp.w	r9, #0
 800ad30:	d009      	beq.n	800ad46 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 800ad32:	e9cd c73e 	strd	ip, r7, [sp, #248]	@ 0xf8
 800ad36:	9039      	str	r0, [sp, #228]	@ 0xe4
 800ad38:	913d      	str	r1, [sp, #244]	@ 0xf4
 800ad3a:	edcd 6a40 	vstr	s13, [sp, #256]	@ 0x100
 800ad3e:	ed8d 7a43 	vstr	s14, [sp, #268]	@ 0x10c
 800ad42:	edcd 7a46 	vstr	s15, [sp, #280]	@ 0x118
 800ad46:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 800ad48:	910e      	str	r1, [sp, #56]	@ 0x38
 800ad4a:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 800ad4e:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 800ad52:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 800ad56:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 800ad5a:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 800ad5e:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 800ad62:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 800ad66:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 800ad6a:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 800ad6e:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 800ad72:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 800ad76:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 800ad7a:	f04f 0800 	mov.w	r8, #0
 800ad7e:	f1be 0f00 	cmp.w	lr, #0
 800ad82:	d030      	beq.n	800ade6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 800ad84:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 800ad86:	4431      	add	r1, r6
 800ad88:	4549      	cmp	r1, r9
 800ad8a:	4450      	add	r0, sl
 800ad8c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800ad90:	ee37 7a04 	vadd.f32	s14, s14, s8
 800ad94:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800ad98:	db08      	blt.n	800adac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 800ad9a:	ee77 7a85 	vadd.f32	s15, s15, s10
 800ad9e:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800ada2:	ee37 7a06 	vadd.f32	s14, s14, s12
 800ada6:	3001      	adds	r0, #1
 800ada8:	eba1 0109 	sub.w	r1, r1, r9
 800adac:	f10e 3eff 	add.w	lr, lr, #4294967295
 800adb0:	f04f 0801 	mov.w	r8, #1
 800adb4:	e7e3      	b.n	800ad7e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 800adb6:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 800adb8:	4431      	add	r1, r6
 800adba:	4541      	cmp	r1, r8
 800adbc:	4450      	add	r0, sl
 800adbe:	ee37 7a24 	vadd.f32	s14, s14, s9
 800adc2:	ee77 7a84 	vadd.f32	s15, s15, s8
 800adc6:	ee76 6aa3 	vadd.f32	s13, s13, s7
 800adca:	db08      	blt.n	800adde <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 800adcc:	ee76 6a85 	vadd.f32	s13, s13, s10
 800add0:	ee37 7a25 	vadd.f32	s14, s14, s11
 800add4:	ee77 7a86 	vadd.f32	s15, s15, s12
 800add8:	3001      	adds	r0, #1
 800adda:	eba1 0108 	sub.w	r1, r1, r8
 800adde:	3f01      	subs	r7, #1
 800ade0:	f04f 0901 	mov.w	r9, #1
 800ade4:	e79e      	b.n	800ad24 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 800ade6:	449c      	add	ip, r3
 800ade8:	1aff      	subs	r7, r7, r3
 800adea:	f1b8 0f00 	cmp.w	r8, #0
 800adee:	d009      	beq.n	800ae04 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 800adf0:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 800adf4:	9019      	str	r0, [sp, #100]	@ 0x64
 800adf6:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 800adfa:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 800adfe:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 800ae02:	911d      	str	r1, [sp, #116]	@ 0x74
 800ae04:	1ad2      	subs	r2, r2, r3
 800ae06:	e6b5      	b.n	800ab74 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800ae08:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	b923      	cbnz	r3, 800ae18 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800ae0e:	4b04      	ldr	r3, [pc, #16]	@ (800ae20 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 800ae10:	6818      	ldr	r0, [r3, #0]
 800ae12:	6803      	ldr	r3, [r0, #0]
 800ae14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae16:	4798      	blx	r3
 800ae18:	b05b      	add	sp, #364	@ 0x16c
 800ae1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae1e:	bf00      	nop
 800ae20:	20012638 	.word	0x20012638

0800ae24 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>:
 800ae24:	b570      	push	{r4, r5, r6, lr}
 800ae26:	4604      	mov	r4, r0
 800ae28:	f89d 601c 	ldrb.w	r6, [sp, #28]
 800ae2c:	9805      	ldr	r0, [sp, #20]
 800ae2e:	6061      	str	r1, [r4, #4]
 800ae30:	2500      	movs	r5, #0
 800ae32:	f89d 1010 	ldrb.w	r1, [sp, #16]
 800ae36:	8263      	strh	r3, [r4, #18]
 800ae38:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 800ae3c:	8025      	strh	r5, [r4, #0]
 800ae3e:	7221      	strb	r1, [r4, #8]
 800ae40:	7266      	strb	r6, [r4, #9]
 800ae42:	60e0      	str	r0, [r4, #12]
 800ae44:	8222      	strh	r2, [r4, #16]
 800ae46:	82a3      	strh	r3, [r4, #20]
 800ae48:	82e5      	strh	r5, [r4, #22]
 800ae4a:	8325      	strh	r5, [r4, #24]
 800ae4c:	8365      	strh	r5, [r4, #26]
 800ae4e:	83a5      	strh	r5, [r4, #28]
 800ae50:	83e5      	strh	r5, [r4, #30]
 800ae52:	8425      	strh	r5, [r4, #32]
 800ae54:	f884 5022 	strb.w	r5, [r4, #34]	@ 0x22
 800ae58:	b32e      	cbz	r6, 800aea6 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 800ae5a:	6803      	ldr	r3, [r0, #0]
 800ae5c:	695b      	ldr	r3, [r3, #20]
 800ae5e:	4798      	blx	r3
 800ae60:	4606      	mov	r6, r0
 800ae62:	b300      	cbz	r0, 800aea6 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 800ae64:	68e0      	ldr	r0, [r4, #12]
 800ae66:	6803      	ldr	r3, [r0, #0]
 800ae68:	4631      	mov	r1, r6
 800ae6a:	68db      	ldr	r3, [r3, #12]
 800ae6c:	4798      	blx	r3
 800ae6e:	4605      	mov	r5, r0
 800ae70:	b1c8      	cbz	r0, 800aea6 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 800ae72:	7b43      	ldrb	r3, [r0, #13]
 800ae74:	7a82      	ldrb	r2, [r0, #10]
 800ae76:	005b      	lsls	r3, r3, #1
 800ae78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ae7c:	4313      	orrs	r3, r2
 800ae7e:	8423      	strh	r3, [r4, #32]
 800ae80:	7a63      	ldrb	r3, [r4, #9]
 800ae82:	2b06      	cmp	r3, #6
 800ae84:	d10f      	bne.n	800aea6 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 800ae86:	68e0      	ldr	r0, [r4, #12]
 800ae88:	6803      	ldr	r3, [r0, #0]
 800ae8a:	462a      	mov	r2, r5
 800ae8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ae8e:	4631      	mov	r1, r6
 800ae90:	4798      	blx	r3
 800ae92:	7b6b      	ldrb	r3, [r5, #13]
 800ae94:	005b      	lsls	r3, r3, #1
 800ae96:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800ae9a:	7aab      	ldrb	r3, [r5, #10]
 800ae9c:	4313      	orrs	r3, r2
 800ae9e:	4418      	add	r0, r3
 800aea0:	8c23      	ldrh	r3, [r4, #32]
 800aea2:	4418      	add	r0, r3
 800aea4:	8420      	strh	r0, [r4, #32]
 800aea6:	4620      	mov	r0, r4
 800aea8:	bd70      	pop	{r4, r5, r6, pc}

0800aeaa <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 800aeaa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aeae:	2400      	movs	r4, #0
 800aeb0:	b085      	sub	sp, #20
 800aeb2:	4681      	mov	r9, r0
 800aeb4:	4688      	mov	r8, r1
 800aeb6:	4692      	mov	sl, r2
 800aeb8:	469b      	mov	fp, r3
 800aeba:	4627      	mov	r7, r4
 800aebc:	4625      	mov	r5, r4
 800aebe:	4626      	mov	r6, r4
 800aec0:	4554      	cmp	r4, sl
 800aec2:	da2a      	bge.n	800af1a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 800aec4:	2300      	movs	r3, #0
 800aec6:	9303      	str	r3, [sp, #12]
 800aec8:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 800aecc:	429d      	cmp	r5, r3
 800aece:	d004      	beq.n	800aeda <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 800aed0:	f242 030b 	movw	r3, #8203	@ 0x200b
 800aed4:	429d      	cmp	r5, r3
 800aed6:	bf18      	it	ne
 800aed8:	462f      	movne	r7, r5
 800aeda:	ab03      	add	r3, sp, #12
 800aedc:	4642      	mov	r2, r8
 800aede:	4659      	mov	r1, fp
 800aee0:	4648      	mov	r0, r9
 800aee2:	f003 f95b 	bl	800e19c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800aee6:	4605      	mov	r5, r0
 800aee8:	b1b8      	cbz	r0, 800af1a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 800aeea:	280a      	cmp	r0, #10
 800aeec:	d015      	beq.n	800af1a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 800aeee:	9a03      	ldr	r2, [sp, #12]
 800aef0:	b18a      	cbz	r2, 800af16 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 800aef2:	7b50      	ldrb	r0, [r2, #13]
 800aef4:	7a93      	ldrb	r3, [r2, #10]
 800aef6:	8895      	ldrh	r5, [r2, #4]
 800aef8:	0040      	lsls	r0, r0, #1
 800aefa:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 800aefe:	4303      	orrs	r3, r0
 800af00:	9301      	str	r3, [sp, #4]
 800af02:	f8d8 3000 	ldr.w	r3, [r8]
 800af06:	4639      	mov	r1, r7
 800af08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af0a:	4640      	mov	r0, r8
 800af0c:	4798      	blx	r3
 800af0e:	9b01      	ldr	r3, [sp, #4]
 800af10:	4418      	add	r0, r3
 800af12:	4406      	add	r6, r0
 800af14:	b2b6      	uxth	r6, r6
 800af16:	3401      	adds	r4, #1
 800af18:	e7d2      	b.n	800aec0 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 800af1a:	4630      	mov	r0, r6
 800af1c:	b005      	add	sp, #20
 800af1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800af22 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 800af22:	2a02      	cmp	r2, #2
 800af24:	b530      	push	{r4, r5, lr}
 800af26:	d011      	beq.n	800af4c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 800af28:	2a03      	cmp	r2, #3
 800af2a:	d01c      	beq.n	800af66 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 800af2c:	2a01      	cmp	r2, #1
 800af2e:	d10c      	bne.n	800af4a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 800af30:	888b      	ldrh	r3, [r1, #4]
 800af32:	8801      	ldrh	r1, [r0, #0]
 800af34:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 800af38:	8844      	ldrh	r4, [r0, #2]
 800af3a:	8004      	strh	r4, [r0, #0]
 800af3c:	1a5b      	subs	r3, r3, r1
 800af3e:	1a9b      	subs	r3, r3, r2
 800af40:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 800af44:	8043      	strh	r3, [r0, #2]
 800af46:	8081      	strh	r1, [r0, #4]
 800af48:	80c2      	strh	r2, [r0, #6]
 800af4a:	bd30      	pop	{r4, r5, pc}
 800af4c:	88cb      	ldrh	r3, [r1, #6]
 800af4e:	8842      	ldrh	r2, [r0, #2]
 800af50:	1a9b      	subs	r3, r3, r2
 800af52:	88c2      	ldrh	r2, [r0, #6]
 800af54:	1a9b      	subs	r3, r3, r2
 800af56:	888a      	ldrh	r2, [r1, #4]
 800af58:	8801      	ldrh	r1, [r0, #0]
 800af5a:	8043      	strh	r3, [r0, #2]
 800af5c:	1a52      	subs	r2, r2, r1
 800af5e:	8881      	ldrh	r1, [r0, #4]
 800af60:	1a52      	subs	r2, r2, r1
 800af62:	8002      	strh	r2, [r0, #0]
 800af64:	e7f1      	b.n	800af4a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 800af66:	88cb      	ldrh	r3, [r1, #6]
 800af68:	8841      	ldrh	r1, [r0, #2]
 800af6a:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 800af6e:	f9b0 5000 	ldrsh.w	r5, [r0]
 800af72:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 800af76:	8045      	strh	r5, [r0, #2]
 800af78:	1a5b      	subs	r3, r3, r1
 800af7a:	1a9b      	subs	r3, r3, r2
 800af7c:	8003      	strh	r3, [r0, #0]
 800af7e:	8082      	strh	r2, [r0, #4]
 800af80:	80c4      	strh	r4, [r0, #6]
 800af82:	e7e2      	b.n	800af4a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

0800af84 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 800af84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af88:	b09f      	sub	sp, #124	@ 0x7c
 800af8a:	920f      	str	r2, [sp, #60]	@ 0x3c
 800af8c:	9312      	str	r3, [sp, #72]	@ 0x48
 800af8e:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 800af90:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 800af92:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 800af94:	8812      	ldrh	r2, [r2, #0]
 800af96:	889b      	ldrh	r3, [r3, #4]
 800af98:	900e      	str	r0, [sp, #56]	@ 0x38
 800af9a:	4413      	add	r3, r2
 800af9c:	6828      	ldr	r0, [r5, #0]
 800af9e:	9117      	str	r1, [sp, #92]	@ 0x5c
 800afa0:	b21b      	sxth	r3, r3
 800afa2:	9311      	str	r3, [sp, #68]	@ 0x44
 800afa4:	6803      	ldr	r3, [r0, #0]
 800afa6:	f89d b0ac 	ldrb.w	fp, [sp, #172]	@ 0xac
 800afaa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800afac:	f89d 40b8 	ldrb.w	r4, [sp, #184]	@ 0xb8
 800afb0:	4798      	blx	r3
 800afb2:	682b      	ldr	r3, [r5, #0]
 800afb4:	9013      	str	r0, [sp, #76]	@ 0x4c
 800afb6:	7b1a      	ldrb	r2, [r3, #12]
 800afb8:	7adb      	ldrb	r3, [r3, #11]
 800afba:	9215      	str	r2, [sp, #84]	@ 0x54
 800afbc:	9316      	str	r3, [sp, #88]	@ 0x58
 800afbe:	f9bd 60a0 	ldrsh.w	r6, [sp, #160]	@ 0xa0
 800afc2:	2c00      	cmp	r4, #0
 800afc4:	d067      	beq.n	800b096 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 800afc6:	7c2b      	ldrb	r3, [r5, #16]
 800afc8:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 800afca:	2b06      	cmp	r3, #6
 800afcc:	bf14      	ite	ne
 800afce:	2301      	movne	r3, #1
 800afd0:	2302      	moveq	r3, #2
 800afd2:	4413      	add	r3, r2
 800afd4:	f04f 0900 	mov.w	r9, #0
 800afd8:	9310      	str	r3, [sp, #64]	@ 0x40
 800afda:	f8cd 9034 	str.w	r9, [sp, #52]	@ 0x34
 800afde:	464c      	mov	r4, r9
 800afe0:	f8cd 9030 	str.w	r9, [sp, #48]	@ 0x30
 800afe4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800afe6:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800afe8:	4293      	cmp	r3, r2
 800afea:	f280 808b 	bge.w	800b104 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 800afee:	2300      	movs	r3, #0
 800aff0:	e9cd 331c 	strd	r3, r3, [sp, #112]	@ 0x70
 800aff4:	f88d 306f 	strb.w	r3, [sp, #111]	@ 0x6f
 800aff8:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 800affc:	429c      	cmp	r4, r3
 800affe:	d006      	beq.n	800b00e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x8a>
 800b000:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b002:	f242 020b 	movw	r2, #8203	@ 0x200b
 800b006:	4294      	cmp	r4, r2
 800b008:	bf18      	it	ne
 800b00a:	4623      	movne	r3, r4
 800b00c:	930c      	str	r3, [sp, #48]	@ 0x30
 800b00e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b010:	992d      	ldr	r1, [sp, #180]	@ 0xb4
 800b012:	682a      	ldr	r2, [r5, #0]
 800b014:	428b      	cmp	r3, r1
 800b016:	db40      	blt.n	800b09a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
 800b018:	6813      	ldr	r3, [r2, #0]
 800b01a:	4610      	mov	r0, r2
 800b01c:	695b      	ldr	r3, [r3, #20]
 800b01e:	4798      	blx	r3
 800b020:	4604      	mov	r4, r0
 800b022:	6828      	ldr	r0, [r5, #0]
 800b024:	6803      	ldr	r3, [r0, #0]
 800b026:	aa1d      	add	r2, sp, #116	@ 0x74
 800b028:	689f      	ldr	r7, [r3, #8]
 800b02a:	4621      	mov	r1, r4
 800b02c:	f10d 036f 	add.w	r3, sp, #111	@ 0x6f
 800b030:	47b8      	blx	r7
 800b032:	901c      	str	r0, [sp, #112]	@ 0x70
 800b034:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 800b038:	429c      	cmp	r4, r3
 800b03a:	f000 80ea 	beq.w	800b212 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 800b03e:	f242 030b 	movw	r3, #8203	@ 0x200b
 800b042:	429c      	cmp	r4, r3
 800b044:	f000 80e5 	beq.w	800b212 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 800b048:	2c00      	cmp	r4, #0
 800b04a:	f000 810c 	beq.w	800b266 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e2>
 800b04e:	2c0a      	cmp	r4, #10
 800b050:	d05e      	beq.n	800b110 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 800b052:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800b054:	b36a      	cbz	r2, 800b0b2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
 800b056:	8894      	ldrh	r4, [r2, #4]
 800b058:	f1bb 0f00 	cmp.w	fp, #0
 800b05c:	d03a      	beq.n	800b0d4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 800b05e:	f892 900d 	ldrb.w	r9, [r2, #13]
 800b062:	ea4f 0949 	mov.w	r9, r9, lsl #1
 800b066:	f409 7380 	and.w	r3, r9, #256	@ 0x100
 800b06a:	f892 900a 	ldrb.w	r9, [r2, #10]
 800b06e:	f1bb 0f01 	cmp.w	fp, #1
 800b072:	ea49 0903 	orr.w	r9, r9, r3
 800b076:	d133      	bne.n	800b0e0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15c>
 800b078:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b07a:	eba6 0609 	sub.w	r6, r6, r9
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d14d      	bne.n	800b11e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 800b082:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800b084:	eb09 0306 	add.w	r3, r9, r6
 800b088:	4413      	add	r3, r2
 800b08a:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 800b08c:	f9b2 2000 	ldrsh.w	r2, [r2]
 800b090:	4293      	cmp	r3, r2
 800b092:	da4e      	bge.n	800b132 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>
 800b094:	e036      	b.n	800b104 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 800b096:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 800b098:	e79c      	b.n	800afd4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x50>
 800b09a:	f10d 036f 	add.w	r3, sp, #111	@ 0x6f
 800b09e:	9301      	str	r3, [sp, #4]
 800b0a0:	ab1d      	add	r3, sp, #116	@ 0x74
 800b0a2:	9300      	str	r3, [sp, #0]
 800b0a4:	4659      	mov	r1, fp
 800b0a6:	ab1c      	add	r3, sp, #112	@ 0x70
 800b0a8:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 800b0aa:	f003 f8c0 	bl	800e22e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 800b0ae:	4604      	mov	r4, r0
 800b0b0:	e7c0      	b.n	800b034 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
 800b0b2:	6828      	ldr	r0, [r5, #0]
 800b0b4:	6803      	ldr	r3, [r0, #0]
 800b0b6:	691b      	ldr	r3, [r3, #16]
 800b0b8:	4798      	blx	r3
 800b0ba:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 800b0be:	4298      	cmp	r0, r3
 800b0c0:	f000 80a7 	beq.w	800b212 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 800b0c4:	f242 030b 	movw	r3, #8203	@ 0x200b
 800b0c8:	4298      	cmp	r0, r3
 800b0ca:	f000 80a2 	beq.w	800b212 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 800b0ce:	f1bb 0f00 	cmp.w	fp, #0
 800b0d2:	d100      	bne.n	800b0d6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 800b0d4:	444e      	add	r6, r9
 800b0d6:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800b0d8:	2a00      	cmp	r2, #0
 800b0da:	d1c0      	bne.n	800b05e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 800b0dc:	4691      	mov	r9, r2
 800b0de:	e098      	b.n	800b212 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 800b0e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	f000 80c1 	beq.w	800b26a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e6>
 800b0e8:	f1bb 0f00 	cmp.w	fp, #0
 800b0ec:	d117      	bne.n	800b11e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 800b0ee:	6828      	ldr	r0, [r5, #0]
 800b0f0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b0f2:	6803      	ldr	r3, [r0, #0]
 800b0f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b0f6:	4798      	blx	r3
 800b0f8:	4406      	add	r6, r0
 800b0fa:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b0fc:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b0fe:	1af3      	subs	r3, r6, r3
 800b100:	4293      	cmp	r3, r2
 800b102:	dd16      	ble.n	800b132 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>
 800b104:	2c00      	cmp	r4, #0
 800b106:	f000 80ae 	beq.w	800b266 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e2>
 800b10a:	2c0a      	cmp	r4, #10
 800b10c:	f040 809c 	bne.w	800b248 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c4>
 800b110:	240a      	movs	r4, #10
 800b112:	fab4 f084 	clz	r0, r4
 800b116:	0940      	lsrs	r0, r0, #5
 800b118:	b01f      	add	sp, #124	@ 0x7c
 800b11a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b11e:	6828      	ldr	r0, [r5, #0]
 800b120:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b122:	6803      	ldr	r3, [r0, #0]
 800b124:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b126:	4798      	blx	r3
 800b128:	f1bb 0f01 	cmp.w	fp, #1
 800b12c:	eba6 0600 	sub.w	r6, r6, r0
 800b130:	d0a7      	beq.n	800b082 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
 800b132:	981c      	ldr	r0, [sp, #112]	@ 0x70
 800b134:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 800b136:	f990 1009 	ldrsb.w	r1, [r0, #9]
 800b13a:	f9b3 8000 	ldrsh.w	r8, [r3]
 800b13e:	7b43      	ldrb	r3, [r0, #13]
 800b140:	015b      	lsls	r3, r3, #5
 800b142:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800b146:	7983      	ldrb	r3, [r0, #6]
 800b148:	4431      	add	r1, r6
 800b14a:	4313      	orrs	r3, r2
 800b14c:	440b      	add	r3, r1
 800b14e:	4543      	cmp	r3, r8
 800b150:	db5f      	blt.n	800b212 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 800b152:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b154:	4299      	cmp	r1, r3
 800b156:	da5c      	bge.n	800b212 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 800b158:	6828      	ldr	r0, [r5, #0]
 800b15a:	6803      	ldr	r3, [r0, #0]
 800b15c:	45b0      	cmp	r8, r6
 800b15e:	bfc8      	it	gt
 800b160:	eba8 0806 	subgt.w	r8, r8, r6
 800b164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b166:	bfcc      	ite	gt
 800b168:	fa1f f888 	uxthgt.w	r8, r8
 800b16c:	f04f 0800 	movle.w	r8, #0
 800b170:	4798      	blx	r3
 800b172:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800b174:	7b53      	ldrb	r3, [r2, #13]
 800b176:	00d9      	lsls	r1, r3, #3
 800b178:	f401 7780 	and.w	r7, r1, #256	@ 0x100
 800b17c:	7a11      	ldrb	r1, [r2, #8]
 800b17e:	4339      	orrs	r1, r7
 800b180:	065f      	lsls	r7, r3, #25
 800b182:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 800b184:	bf44      	itt	mi
 800b186:	f5a1 7100 	submi.w	r1, r1, #512	@ 0x200
 800b18a:	b209      	sxthmi	r1, r1
 800b18c:	19c7      	adds	r7, r0, r7
 800b18e:	1a7f      	subs	r7, r7, r1
 800b190:	9929      	ldr	r1, [sp, #164]	@ 0xa4
 800b192:	b2bf      	uxth	r7, r7
 800b194:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 800b198:	fa0f fa87 	sxth.w	sl, r7
 800b19c:	4551      	cmp	r1, sl
 800b19e:	dd3c      	ble.n	800b21a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x296>
 800b1a0:	011b      	lsls	r3, r3, #4
 800b1a2:	79d0      	ldrb	r0, [r2, #7]
 800b1a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b1a8:	4303      	orrs	r3, r0
 800b1aa:	449a      	add	sl, r3
 800b1ac:	4551      	cmp	r1, sl
 800b1ae:	dc30      	bgt.n	800b212 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 800b1b0:	1bcf      	subs	r7, r1, r7
 800b1b2:	b23f      	sxth	r7, r7
 800b1b4:	468a      	mov	sl, r1
 800b1b6:	9219      	str	r2, [sp, #100]	@ 0x64
 800b1b8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b1ba:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b1bc:	6828      	ldr	r0, [r5, #0]
 800b1be:	2a00      	cmp	r2, #0
 800b1c0:	d12d      	bne.n	800b21e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29a>
 800b1c2:	9318      	str	r3, [sp, #96]	@ 0x60
 800b1c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b1c6:	6819      	ldr	r1, [r3, #0]
 800b1c8:	6ccb      	ldr	r3, [r1, #76]	@ 0x4c
 800b1ca:	6801      	ldr	r1, [r0, #0]
 800b1cc:	9314      	str	r3, [sp, #80]	@ 0x50
 800b1ce:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b1d0:	4788      	blx	r1
 800b1d2:	79a9      	ldrb	r1, [r5, #6]
 800b1d4:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b1d6:	7ba9      	ldrb	r1, [r5, #14]
 800b1d8:	910a      	str	r1, [sp, #40]	@ 0x28
 800b1da:	f89d 106f 	ldrb.w	r1, [sp, #111]	@ 0x6f
 800b1de:	9109      	str	r1, [sp, #36]	@ 0x24
 800b1e0:	68a9      	ldr	r1, [r5, #8]
 800b1e2:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800b1e4:	9306      	str	r3, [sp, #24]
 800b1e6:	b2bf      	uxth	r7, r7
 800b1e8:	e9cd 8702 	strd	r8, r7, [sp, #8]
 800b1ec:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 800b1ee:	9304      	str	r3, [sp, #16]
 800b1f0:	44b0      	add	r8, r6
 800b1f2:	e9cd 0107 	strd	r0, r1, [sp, #28]
 800b1f6:	fa0f f388 	sxth.w	r3, r8
 800b1fa:	9300      	str	r3, [sp, #0]
 800b1fc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b1fe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b200:	9205      	str	r2, [sp, #20]
 800b202:	f8cd a004 	str.w	sl, [sp, #4]
 800b206:	681a      	ldr	r2, [r3, #0]
 800b208:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800b20a:	685b      	ldr	r3, [r3, #4]
 800b20c:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800b20e:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 800b210:	47b8      	blx	r7
 800b212:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b214:	3301      	adds	r3, #1
 800b216:	930d      	str	r3, [sp, #52]	@ 0x34
 800b218:	e6e4      	b.n	800afe4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x60>
 800b21a:	2700      	movs	r7, #0
 800b21c:	e7cb      	b.n	800b1b6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x232>
 800b21e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b220:	f8d2 c008 	ldr.w	ip, [r2, #8]
 800b224:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b226:	f8dc 1000 	ldr.w	r1, [ip]
 800b22a:	e9cd 6204 	strd	r6, r2, [sp, #16]
 800b22e:	79aa      	ldrb	r2, [r5, #6]
 800b230:	9203      	str	r2, [sp, #12]
 800b232:	7baa      	ldrb	r2, [r5, #14]
 800b234:	9202      	str	r2, [sp, #8]
 800b236:	68aa      	ldr	r2, [r5, #8]
 800b238:	e9cd 0200 	strd	r0, r2, [sp]
 800b23c:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 800b23e:	688f      	ldr	r7, [r1, #8]
 800b240:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b242:	4660      	mov	r0, ip
 800b244:	47b8      	blx	r7
 800b246:	e7e4      	b.n	800b212 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 800b248:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800b24a:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 800b24c:	3501      	adds	r5, #1
 800b24e:	429d      	cmp	r5, r3
 800b250:	f6bf af5f 	bge.w	800b112 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 800b254:	4659      	mov	r1, fp
 800b256:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 800b258:	f7f8 f8ca 	bl	80033f0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800b25c:	4604      	mov	r4, r0
 800b25e:	b110      	cbz	r0, 800b266 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e2>
 800b260:	280a      	cmp	r0, #10
 800b262:	d1f2      	bne.n	800b24a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c6>
 800b264:	e754      	b.n	800b110 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 800b266:	2400      	movs	r4, #0
 800b268:	e753      	b.n	800b112 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 800b26a:	f1bb 0f00 	cmp.w	fp, #0
 800b26e:	f43f af44 	beq.w	800b0fa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 800b272:	e75e      	b.n	800b132 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>

0800b274 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 800b274:	b530      	push	{r4, r5, lr}
 800b276:	8ac4      	ldrh	r4, [r0, #22]
 800b278:	8b45      	ldrh	r5, [r0, #26]
 800b27a:	8343      	strh	r3, [r0, #26]
 800b27c:	442c      	add	r4, r5
 800b27e:	1ae4      	subs	r4, r4, r3
 800b280:	82c4      	strh	r4, [r0, #22]
 800b282:	8b83      	ldrh	r3, [r0, #28]
 800b284:	8b04      	ldrh	r4, [r0, #24]
 800b286:	4422      	add	r2, r4
 800b288:	440c      	add	r4, r1
 800b28a:	1a59      	subs	r1, r3, r1
 800b28c:	83c2      	strh	r2, [r0, #30]
 800b28e:	8304      	strh	r4, [r0, #24]
 800b290:	8381      	strh	r1, [r0, #28]
 800b292:	bd30      	pop	{r4, r5, pc}

0800b294 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>:
 800b294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b298:	4604      	mov	r4, r0
 800b29a:	8a47      	ldrh	r7, [r0, #18]
 800b29c:	68c0      	ldr	r0, [r0, #12]
 800b29e:	6803      	ldr	r3, [r0, #0]
 800b2a0:	b085      	sub	sp, #20
 800b2a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2a4:	4798      	blx	r3
 800b2a6:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 800b2aa:	7a63      	ldrb	r3, [r4, #9]
 800b2ac:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 800b2b0:	42b7      	cmp	r7, r6
 800b2b2:	f103 33ff 	add.w	r3, r3, #4294967295
 800b2b6:	bfac      	ite	ge
 800b2b8:	f04f 0900 	movge.w	r9, #0
 800b2bc:	f04f 0901 	movlt.w	r9, #1
 800b2c0:	2b05      	cmp	r3, #5
 800b2c2:	d804      	bhi.n	800b2ce <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3a>
 800b2c4:	e8df f003 	tbb	[pc, r3]
 800b2c8:	470e0854 	.word	0x470e0854
 800b2cc:	4c4c      	.short	0x4c4c
 800b2ce:	2500      	movs	r5, #0
 800b2d0:	46a9      	mov	r9, r5
 800b2d2:	462e      	mov	r6, r5
 800b2d4:	462f      	mov	r7, r5
 800b2d6:	e00d      	b.n	800b2f4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 800b2d8:	42b7      	cmp	r7, r6
 800b2da:	bfb4      	ite	lt
 800b2dc:	2600      	movlt	r6, #0
 800b2de:	2601      	movge	r6, #1
 800b2e0:	2500      	movs	r5, #0
 800b2e2:	e7f7      	b.n	800b2d4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x40>
 800b2e4:	42b7      	cmp	r7, r6
 800b2e6:	464d      	mov	r5, r9
 800b2e8:	f04f 0900 	mov.w	r9, #0
 800b2ec:	bfb4      	ite	lt
 800b2ee:	2600      	movlt	r6, #0
 800b2f0:	2601      	movge	r6, #1
 800b2f2:	464f      	mov	r7, r9
 800b2f4:	f04f 0800 	mov.w	r8, #0
 800b2f8:	f8a4 8016 	strh.w	r8, [r4, #22]
 800b2fc:	f8a4 8018 	strh.w	r8, [r4, #24]
 800b300:	f8cd 8004 	str.w	r8, [sp, #4]
 800b304:	2300      	movs	r3, #0
 800b306:	9303      	str	r3, [sp, #12]
 800b308:	8823      	ldrh	r3, [r4, #0]
 800b30a:	2b20      	cmp	r3, #32
 800b30c:	d034      	beq.n	800b378 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xe4>
 800b30e:	f242 010b 	movw	r1, #8203	@ 0x200b
 800b312:	1a5a      	subs	r2, r3, r1
 800b314:	f1d2 0a00 	rsbs	sl, r2, #0
 800b318:	eb4a 0a02 	adc.w	sl, sl, r2
 800b31c:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 800b320:	4293      	cmp	r3, r2
 800b322:	d009      	beq.n	800b338 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa4>
 800b324:	428b      	cmp	r3, r1
 800b326:	9a01      	ldr	r2, [sp, #4]
 800b328:	bf18      	it	ne
 800b32a:	461a      	movne	r2, r3
 800b32c:	9201      	str	r2, [sp, #4]
 800b32e:	bf0c      	ite	eq
 800b330:	f04f 0a01 	moveq.w	sl, #1
 800b334:	f04f 0a00 	movne.w	sl, #0
 800b338:	ab03      	add	r3, sp, #12
 800b33a:	68e2      	ldr	r2, [r4, #12]
 800b33c:	7a21      	ldrb	r1, [r4, #8]
 800b33e:	6860      	ldr	r0, [r4, #4]
 800b340:	f002 ff2c 	bl	800e19c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800b344:	8020      	strh	r0, [r4, #0]
 800b346:	b9d8      	cbnz	r0, 800b380 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xec>
 800b348:	8ba2      	ldrh	r2, [r4, #28]
 800b34a:	2300      	movs	r3, #0
 800b34c:	4611      	mov	r1, r2
 800b34e:	4620      	mov	r0, r4
 800b350:	f7ff ff90 	bl	800b274 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 800b354:	e06e      	b.n	800b434 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1a0>
 800b356:	2500      	movs	r5, #0
 800b358:	46a9      	mov	r9, r5
 800b35a:	462e      	mov	r6, r5
 800b35c:	2701      	movs	r7, #1
 800b35e:	e7c9      	b.n	800b2f4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 800b360:	42b7      	cmp	r7, r6
 800b362:	f04f 0500 	mov.w	r5, #0
 800b366:	bfb4      	ite	lt
 800b368:	2700      	movlt	r7, #0
 800b36a:	2701      	movge	r7, #1
 800b36c:	462e      	mov	r6, r5
 800b36e:	e7c1      	b.n	800b2f4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 800b370:	2500      	movs	r5, #0
 800b372:	46a9      	mov	r9, r5
 800b374:	2601      	movs	r6, #1
 800b376:	e7ad      	b.n	800b2d4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x40>
 800b378:	9301      	str	r3, [sp, #4]
 800b37a:	f04f 0a01 	mov.w	sl, #1
 800b37e:	e7db      	b.n	800b338 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa4>
 800b380:	8b63      	ldrh	r3, [r4, #26]
 800b382:	280a      	cmp	r0, #10
 800b384:	f103 0301 	add.w	r3, r3, #1
 800b388:	8363      	strh	r3, [r4, #26]
 800b38a:	d0dd      	beq.n	800b348 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb4>
 800b38c:	9a03      	ldr	r2, [sp, #12]
 800b38e:	bb62      	cbnz	r2, 800b3ea <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x156>
 800b390:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 800b394:	4298      	cmp	r0, r3
 800b396:	d003      	beq.n	800b3a0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10c>
 800b398:	f242 030b 	movw	r3, #8203	@ 0x200b
 800b39c:	4298      	cmp	r0, r3
 800b39e:	d1b1      	bne.n	800b304 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800b3a0:	8823      	ldrh	r3, [r4, #0]
 800b3a2:	8ba1      	ldrh	r1, [r4, #28]
 800b3a4:	2b20      	cmp	r3, #32
 800b3a6:	d003      	beq.n	800b3b0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x11c>
 800b3a8:	f242 000b 	movw	r0, #8203	@ 0x200b
 800b3ac:	4283      	cmp	r3, r0
 800b3ae:	d131      	bne.n	800b414 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x180>
 800b3b0:	f1ba 0f00 	cmp.w	sl, #0
 800b3b4:	bf0a      	itet	eq
 800b3b6:	4688      	moveq	r8, r1
 800b3b8:	4650      	movne	r0, sl
 800b3ba:	2001      	moveq	r0, #1
 800b3bc:	440a      	add	r2, r1
 800b3be:	8b23      	ldrh	r3, [r4, #24]
 800b3c0:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 800b3c4:	b292      	uxth	r2, r2
 800b3c6:	83a2      	strh	r2, [r4, #28]
 800b3c8:	4413      	add	r3, r2
 800b3ca:	f1b9 0f00 	cmp.w	r9, #0
 800b3ce:	d102      	bne.n	800b3d6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x142>
 800b3d0:	2d00      	cmp	r5, #0
 800b3d2:	d042      	beq.n	800b45a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1c6>
 800b3d4:	b300      	cbz	r0, 800b418 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x184>
 800b3d6:	8c21      	ldrh	r1, [r4, #32]
 800b3d8:	4419      	add	r1, r3
 800b3da:	458c      	cmp	ip, r1
 800b3dc:	da37      	bge.n	800b44e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1ba>
 800b3de:	8ae1      	ldrh	r1, [r4, #22]
 800b3e0:	2900      	cmp	r1, #0
 800b3e2:	d034      	beq.n	800b44e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1ba>
 800b3e4:	4563      	cmp	r3, ip
 800b3e6:	dd8d      	ble.n	800b304 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800b3e8:	e01d      	b.n	800b426 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x192>
 800b3ea:	8893      	ldrh	r3, [r2, #4]
 800b3ec:	8023      	strh	r3, [r4, #0]
 800b3ee:	f892 b00d 	ldrb.w	fp, [r2, #13]
 800b3f2:	9901      	ldr	r1, [sp, #4]
 800b3f4:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 800b3f8:	f40b 7080 	and.w	r0, fp, #256	@ 0x100
 800b3fc:	f892 b00a 	ldrb.w	fp, [r2, #10]
 800b400:	ea4b 0b00 	orr.w	fp, fp, r0
 800b404:	68e0      	ldr	r0, [r4, #12]
 800b406:	6803      	ldr	r3, [r0, #0]
 800b408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b40a:	4798      	blx	r3
 800b40c:	eb0b 0200 	add.w	r2, fp, r0
 800b410:	b292      	uxth	r2, r2
 800b412:	e7c5      	b.n	800b3a0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10c>
 800b414:	2000      	movs	r0, #0
 800b416:	e7d1      	b.n	800b3bc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x128>
 800b418:	4563      	cmp	r3, ip
 800b41a:	f77f af73 	ble.w	800b304 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800b41e:	8ae3      	ldrh	r3, [r4, #22]
 800b420:	2b00      	cmp	r3, #0
 800b422:	f43f af6f 	beq.w	800b304 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800b426:	2301      	movs	r3, #1
 800b428:	f884 3022 	strb.w	r3, [r4, #34]	@ 0x22
 800b42c:	8c22      	ldrh	r2, [r4, #32]
 800b42e:	8be3      	ldrh	r3, [r4, #30]
 800b430:	4413      	add	r3, r2
 800b432:	83e3      	strh	r3, [r4, #30]
 800b434:	68e0      	ldr	r0, [r4, #12]
 800b436:	6803      	ldr	r3, [r0, #0]
 800b438:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b43a:	4798      	blx	r3
 800b43c:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 800b440:	4418      	add	r0, r3
 800b442:	8a63      	ldrh	r3, [r4, #18]
 800b444:	1a18      	subs	r0, r3, r0
 800b446:	8260      	strh	r0, [r4, #18]
 800b448:	b005      	add	sp, #20
 800b44a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b44e:	2300      	movs	r3, #0
 800b450:	4611      	mov	r1, r2
 800b452:	4620      	mov	r0, r4
 800b454:	f7ff ff0e 	bl	800b274 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 800b458:	e754      	b.n	800b304 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800b45a:	4563      	cmp	r3, ip
 800b45c:	dd14      	ble.n	800b488 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1f4>
 800b45e:	b117      	cbz	r7, 800b466 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1d2>
 800b460:	2301      	movs	r3, #1
 800b462:	460a      	mov	r2, r1
 800b464:	e772      	b.n	800b34c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb8>
 800b466:	2e00      	cmp	r6, #0
 800b468:	f43f af4c 	beq.w	800b304 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800b46c:	2800      	cmp	r0, #0
 800b46e:	f47f af49 	bne.w	800b304 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800b472:	f1ba 0f00 	cmp.w	sl, #0
 800b476:	d002      	beq.n	800b47e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1ea>
 800b478:	2301      	movs	r3, #1
 800b47a:	4642      	mov	r2, r8
 800b47c:	e767      	b.n	800b34e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xba>
 800b47e:	8ae3      	ldrh	r3, [r4, #22]
 800b480:	2b00      	cmp	r3, #0
 800b482:	f43f af3f 	beq.w	800b304 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800b486:	e7d5      	b.n	800b434 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1a0>
 800b488:	2800      	cmp	r0, #0
 800b48a:	f47f af3b 	bne.w	800b304 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800b48e:	f1ba 0f00 	cmp.w	sl, #0
 800b492:	f43f af37 	beq.w	800b304 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800b496:	2301      	movs	r3, #1
 800b498:	4642      	mov	r2, r8
 800b49a:	e7da      	b.n	800b452 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1be>

0800b49c <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 800b49c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b49e:	4605      	mov	r5, r0
 800b4a0:	b08f      	sub	sp, #60	@ 0x3c
 800b4a2:	4617      	mov	r7, r2
 800b4a4:	461c      	mov	r4, r3
 800b4a6:	460e      	mov	r6, r1
 800b4a8:	b1d1      	cbz	r1, 800b4e0 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	4620      	mov	r0, r4
 800b4ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b4b0:	4798      	blx	r3
 800b4b2:	4240      	negs	r0, r0
 800b4b4:	b200      	sxth	r0, r0
 800b4b6:	e9cd 4001 	strd	r4, r0, [sp, #4]
 800b4ba:	9603      	str	r6, [sp, #12]
 800b4bc:	9700      	str	r7, [sp, #0]
 800b4be:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b4c2:	f8bd 2050 	ldrh.w	r2, [sp, #80]	@ 0x50
 800b4c6:	4629      	mov	r1, r5
 800b4c8:	a805      	add	r0, sp, #20
 800b4ca:	f7ff fcab 	bl	800ae24 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 800b4ce:	2401      	movs	r4, #1
 800b4d0:	a805      	add	r0, sp, #20
 800b4d2:	f7ff fedf 	bl	800b294 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 800b4d6:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800b4da:	b163      	cbz	r3, 800b4f6 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x5a>
 800b4dc:	3401      	adds	r4, #1
 800b4de:	e7f7      	b.n	800b4d0 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 800b4e0:	f002 ff2a 	bl	800e338 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800b4e4:	2401      	movs	r4, #1
 800b4e6:	280a      	cmp	r0, #10
 800b4e8:	4628      	mov	r0, r5
 800b4ea:	bf08      	it	eq
 800b4ec:	3401      	addeq	r4, #1
 800b4ee:	f002 ff23 	bl	800e338 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800b4f2:	2800      	cmp	r0, #0
 800b4f4:	d1f7      	bne.n	800b4e6 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 800b4f6:	b2a0      	uxth	r0, r4
 800b4f8:	b00f      	add	sp, #60	@ 0x3c
 800b4fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b4fc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 800b4fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b500:	b0e3      	sub	sp, #396	@ 0x18c
 800b502:	461c      	mov	r4, r3
 800b504:	9b6c      	ldr	r3, [sp, #432]	@ 0x1b0
 800b506:	4683      	mov	fp, r0
 800b508:	4688      	mov	r8, r1
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	f000 8112 	beq.w	800b734 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 800b510:	6823      	ldr	r3, [r4, #0]
 800b512:	2b00      	cmp	r3, #0
 800b514:	f000 810e 	beq.w	800b734 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 800b518:	7ba3      	ldrb	r3, [r4, #14]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	f000 810a 	beq.w	800b734 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 800b520:	6810      	ldr	r0, [r2, #0]
 800b522:	6851      	ldr	r1, [r2, #4]
 800b524:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
 800b528:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 800b52c:	ad0a      	add	r5, sp, #40	@ 0x28
 800b52e:	462b      	mov	r3, r5
 800b530:	c303      	stmia	r3!, {r0, r1}
 800b532:	2100      	movs	r1, #0
 800b534:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 800b538:	910c      	str	r1, [sp, #48]	@ 0x30
 800b53a:	79a2      	ldrb	r2, [r4, #6]
 800b53c:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 800b540:	a90c      	add	r1, sp, #48	@ 0x30
 800b542:	4628      	mov	r0, r5
 800b544:	f7ff fced 	bl	800af22 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 800b548:	a90c      	add	r1, sp, #48	@ 0x30
 800b54a:	4608      	mov	r0, r1
 800b54c:	79a2      	ldrb	r2, [r4, #6]
 800b54e:	f7ff fce8 	bl	800af22 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 800b552:	a817      	add	r0, sp, #92	@ 0x5c
 800b554:	f002 fa9b 	bl	800da8e <_ZN8touchgfx12TextProviderC1Ev>
 800b558:	6820      	ldr	r0, [r4, #0]
 800b55a:	6803      	ldr	r3, [r0, #0]
 800b55c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b55e:	4798      	blx	r3
 800b560:	4606      	mov	r6, r0
 800b562:	6820      	ldr	r0, [r4, #0]
 800b564:	6803      	ldr	r3, [r0, #0]
 800b566:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b568:	4798      	blx	r3
 800b56a:	4633      	mov	r3, r6
 800b56c:	9a6d      	ldr	r2, [sp, #436]	@ 0x1b4
 800b56e:	996c      	ldr	r1, [sp, #432]	@ 0x1b0
 800b570:	9000      	str	r0, [sp, #0]
 800b572:	a817      	add	r0, sp, #92	@ 0x5c
 800b574:	f002 fae6 	bl	800db44 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800b578:	6820      	ldr	r0, [r4, #0]
 800b57a:	f894 a004 	ldrb.w	sl, [r4, #4]
 800b57e:	6803      	ldr	r3, [r0, #0]
 800b580:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b582:	4798      	blx	r3
 800b584:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 800b588:	6823      	ldr	r3, [r4, #0]
 800b58a:	4607      	mov	r7, r0
 800b58c:	4406      	add	r6, r0
 800b58e:	a830      	add	r0, sp, #192	@ 0xc0
 800b590:	f893 9009 	ldrb.w	r9, [r3, #9]
 800b594:	f002 fa7b 	bl	800da8e <_ZN8touchgfx12TextProviderC1Ev>
 800b598:	7c23      	ldrb	r3, [r4, #16]
 800b59a:	b17b      	cbz	r3, 800b5bc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xc0>
 800b59c:	6820      	ldr	r0, [r4, #0]
 800b59e:	6803      	ldr	r3, [r0, #0]
 800b5a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b5a2:	4798      	blx	r3
 800b5a4:	9009      	str	r0, [sp, #36]	@ 0x24
 800b5a6:	6820      	ldr	r0, [r4, #0]
 800b5a8:	6802      	ldr	r2, [r0, #0]
 800b5aa:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800b5ac:	4790      	blx	r2
 800b5ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b5b0:	9000      	str	r0, [sp, #0]
 800b5b2:	9a6d      	ldr	r2, [sp, #436]	@ 0x1b4
 800b5b4:	996c      	ldr	r1, [sp, #432]	@ 0x1b0
 800b5b6:	a830      	add	r0, sp, #192	@ 0xc0
 800b5b8:	f002 fac4 	bl	800db44 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800b5bc:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 800b5c0:	7be2      	ldrb	r2, [r4, #15]
 800b5c2:	f8bd 3036 	ldrh.w	r3, [sp, #54]	@ 0x36
 800b5c6:	1a8a      	subs	r2, r1, r2
 800b5c8:	7c21      	ldrb	r1, [r4, #16]
 800b5ca:	9103      	str	r1, [sp, #12]
 800b5cc:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 800b5d0:	9102      	str	r1, [sp, #8]
 800b5d2:	6821      	ldr	r1, [r4, #0]
 800b5d4:	9101      	str	r1, [sp, #4]
 800b5d6:	7961      	ldrb	r1, [r4, #5]
 800b5d8:	9100      	str	r1, [sp, #0]
 800b5da:	b292      	uxth	r2, r2
 800b5dc:	a930      	add	r1, sp, #192	@ 0xc0
 800b5de:	a80e      	add	r0, sp, #56	@ 0x38
 800b5e0:	f7ff fc20 	bl	800ae24 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 800b5e4:	2e00      	cmp	r6, #0
 800b5e6:	dc5b      	bgt.n	800b6a0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 800b5e8:	af17      	add	r7, sp, #92	@ 0x5c
 800b5ea:	f04f 0900 	mov.w	r9, #0
 800b5ee:	7c23      	ldrb	r3, [r4, #16]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	f000 80b1 	beq.w	800b758 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 800b5f6:	a80e      	add	r0, sp, #56	@ 0x38
 800b5f8:	f7ff fe4c 	bl	800b294 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 800b5fc:	f1ba 0f00 	cmp.w	sl, #0
 800b600:	f000 80a5 	beq.w	800b74e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 800b604:	7c23      	ldrb	r3, [r4, #16]
 800b606:	9309      	str	r3, [sp, #36]	@ 0x24
 800b608:	2264      	movs	r2, #100	@ 0x64
 800b60a:	4639      	mov	r1, r7
 800b60c:	a849      	add	r0, sp, #292	@ 0x124
 800b60e:	f006 ffcc 	bl	80125aa <memcpy>
 800b612:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b614:	2b00      	cmp	r3, #0
 800b616:	f000 80a7 	beq.w	800b768 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 800b61a:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	@ 0x56
 800b61e:	7922      	ldrb	r2, [r4, #4]
 800b620:	2a01      	cmp	r2, #1
 800b622:	f040 808a 	bne.w	800b73a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 800b626:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	@ 0x34
 800b62a:	1ac0      	subs	r0, r0, r3
 800b62c:	2302      	movs	r3, #2
 800b62e:	fb90 f0f3 	sdiv	r0, r0, r3
 800b632:	b200      	sxth	r0, r0
 800b634:	7c23      	ldrb	r3, [r4, #16]
 800b636:	2b00      	cmp	r3, #0
 800b638:	f000 808b 	beq.w	800b752 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 800b63c:	f8bd 204e 	ldrh.w	r2, [sp, #78]	@ 0x4e
 800b640:	f89d 105a 	ldrb.w	r1, [sp, #90]	@ 0x5a
 800b644:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 800b648:	e9cd 2105 	strd	r2, r1, [sp, #20]
 800b64c:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 800b650:	4410      	add	r0, r2
 800b652:	b200      	sxth	r0, r0
 800b654:	9000      	str	r0, [sp, #0]
 800b656:	e9cd 9703 	strd	r9, r7, [sp, #12]
 800b65a:	e9cd 5401 	strd	r5, r4, [sp, #4]
 800b65e:	4642      	mov	r2, r8
 800b660:	2100      	movs	r1, #0
 800b662:	4658      	mov	r0, fp
 800b664:	f7ff fc8e 	bl	800af84 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 800b668:	2800      	cmp	r0, #0
 800b66a:	d163      	bne.n	800b734 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 800b66c:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 800b670:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 800b674:	b2b2      	uxth	r2, r6
 800b676:	4413      	add	r3, r2
 800b678:	1a8a      	subs	r2, r1, r2
 800b67a:	f8ad 2036 	strh.w	r2, [sp, #54]	@ 0x36
 800b67e:	f89d 205a 	ldrb.w	r2, [sp, #90]	@ 0x5a
 800b682:	b21b      	sxth	r3, r3
 800b684:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 800b688:	2a00      	cmp	r2, #0
 800b68a:	d153      	bne.n	800b734 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 800b68c:	6822      	ldr	r2, [r4, #0]
 800b68e:	8869      	ldrh	r1, [r5, #2]
 800b690:	7a12      	ldrb	r2, [r2, #8]
 800b692:	1a9b      	subs	r3, r3, r2
 800b694:	88ea      	ldrh	r2, [r5, #6]
 800b696:	440a      	add	r2, r1
 800b698:	b212      	sxth	r2, r2
 800b69a:	4293      	cmp	r3, r2
 800b69c:	dda7      	ble.n	800b5ee <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf2>
 800b69e:	e049      	b.n	800b734 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 800b6a0:	7c23      	ldrb	r3, [r4, #16]
 800b6a2:	444f      	add	r7, r9
 800b6a4:	b1c3      	cbz	r3, 800b6d8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>
 800b6a6:	f64f 79ff 	movw	r9, #65535	@ 0xffff
 800b6aa:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 800b6ae:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 800b6b2:	443b      	add	r3, r7
 800b6b4:	4293      	cmp	r3, r2
 800b6b6:	da97      	bge.n	800b5e8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 800b6b8:	a80e      	add	r0, sp, #56	@ 0x38
 800b6ba:	f7ff fdeb 	bl	800b294 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 800b6be:	f8bd 304e 	ldrh.w	r3, [sp, #78]	@ 0x4e
 800b6c2:	3b01      	subs	r3, #1
 800b6c4:	b29b      	uxth	r3, r3
 800b6c6:	454b      	cmp	r3, r9
 800b6c8:	9309      	str	r3, [sp, #36]	@ 0x24
 800b6ca:	d021      	beq.n	800b710 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x214>
 800b6cc:	7961      	ldrb	r1, [r4, #5]
 800b6ce:	a817      	add	r0, sp, #92	@ 0x5c
 800b6d0:	f7f7 fe8e 	bl	80033f0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800b6d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b6d6:	e7f4      	b.n	800b6c2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>
 800b6d8:	fa1f f986 	uxth.w	r9, r6
 800b6dc:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 800b6e0:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 800b6e4:	443b      	add	r3, r7
 800b6e6:	4293      	cmp	r3, r2
 800b6e8:	f6bf af7e 	bge.w	800b5e8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 800b6ec:	a817      	add	r0, sp, #92	@ 0x5c
 800b6ee:	f002 fe23 	bl	800e338 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800b6f2:	b1f8      	cbz	r0, 800b734 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 800b6f4:	280a      	cmp	r0, #10
 800b6f6:	d1f1      	bne.n	800b6dc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 800b6f8:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 800b6fc:	444b      	add	r3, r9
 800b6fe:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 800b702:	f8bd 3036 	ldrh.w	r3, [sp, #54]	@ 0x36
 800b706:	eba3 0309 	sub.w	r3, r3, r9
 800b70a:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 800b70e:	e7e5      	b.n	800b6dc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 800b710:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 800b714:	b2b3      	uxth	r3, r6
 800b716:	441a      	add	r2, r3
 800b718:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 800b71c:	f8bd 2036 	ldrh.w	r2, [sp, #54]	@ 0x36
 800b720:	1ad3      	subs	r3, r2, r3
 800b722:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 800b726:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 800b72a:	b11b      	cbz	r3, 800b734 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 800b72c:	f89d 305a 	ldrb.w	r3, [sp, #90]	@ 0x5a
 800b730:	2b00      	cmp	r3, #0
 800b732:	d0ba      	beq.n	800b6aa <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ae>
 800b734:	b063      	add	sp, #396	@ 0x18c
 800b736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b73a:	2a02      	cmp	r2, #2
 800b73c:	d105      	bne.n	800b74a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24e>
 800b73e:	7be2      	ldrb	r2, [r4, #15]
 800b740:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 800b744:	1a80      	subs	r0, r0, r2
 800b746:	1ac0      	subs	r0, r0, r3
 800b748:	e773      	b.n	800b632 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x136>
 800b74a:	2000      	movs	r0, #0
 800b74c:	e772      	b.n	800b634 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 800b74e:	7be0      	ldrb	r0, [r4, #15]
 800b750:	e770      	b.n	800b634 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 800b752:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800b756:	e773      	b.n	800b640 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x144>
 800b758:	f1ba 0f00 	cmp.w	sl, #0
 800b75c:	d0f7      	beq.n	800b74e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 800b75e:	2264      	movs	r2, #100	@ 0x64
 800b760:	4639      	mov	r1, r7
 800b762:	a849      	add	r0, sp, #292	@ 0x124
 800b764:	f006 ff21 	bl	80125aa <memcpy>
 800b768:	2300      	movs	r3, #0
 800b76a:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800b76e:	6821      	ldr	r1, [r4, #0]
 800b770:	a849      	add	r0, sp, #292	@ 0x124
 800b772:	f7ff fb9a 	bl	800aeaa <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 800b776:	b203      	sxth	r3, r0
 800b778:	e751      	b.n	800b61e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>

0800b77a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 800b77a:	2b03      	cmp	r3, #3
 800b77c:	d818      	bhi.n	800b7b0 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 800b77e:	e8df f003 	tbb	[pc, r3]
 800b782:	0602      	.short	0x0602
 800b784:	130d      	.short	0x130d
 800b786:	f9b0 2000 	ldrsh.w	r2, [r0]
 800b78a:	1850      	adds	r0, r2, r1
 800b78c:	4770      	bx	lr
 800b78e:	8803      	ldrh	r3, [r0, #0]
 800b790:	8880      	ldrh	r0, [r0, #4]
 800b792:	4418      	add	r0, r3
 800b794:	b200      	sxth	r0, r0
 800b796:	1a80      	subs	r0, r0, r2
 800b798:	3801      	subs	r0, #1
 800b79a:	4770      	bx	lr
 800b79c:	8803      	ldrh	r3, [r0, #0]
 800b79e:	8880      	ldrh	r0, [r0, #4]
 800b7a0:	4418      	add	r0, r3
 800b7a2:	b200      	sxth	r0, r0
 800b7a4:	1a40      	subs	r0, r0, r1
 800b7a6:	e7f7      	b.n	800b798 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 800b7a8:	f9b0 0000 	ldrsh.w	r0, [r0]
 800b7ac:	4410      	add	r0, r2
 800b7ae:	4770      	bx	lr
 800b7b0:	2000      	movs	r0, #0
 800b7b2:	4770      	bx	lr

0800b7b4 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 800b7b4:	2b03      	cmp	r3, #3
 800b7b6:	d817      	bhi.n	800b7e8 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 800b7b8:	e8df f003 	tbb	[pc, r3]
 800b7bc:	10090602 	.word	0x10090602
 800b7c0:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 800b7c4:	1850      	adds	r0, r2, r1
 800b7c6:	4770      	bx	lr
 800b7c8:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800b7cc:	e7fa      	b.n	800b7c4 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 800b7ce:	8843      	ldrh	r3, [r0, #2]
 800b7d0:	88c0      	ldrh	r0, [r0, #6]
 800b7d2:	4418      	add	r0, r3
 800b7d4:	b200      	sxth	r0, r0
 800b7d6:	1a80      	subs	r0, r0, r2
 800b7d8:	3801      	subs	r0, #1
 800b7da:	4770      	bx	lr
 800b7dc:	8843      	ldrh	r3, [r0, #2]
 800b7de:	88c0      	ldrh	r0, [r0, #6]
 800b7e0:	4418      	add	r0, r3
 800b7e2:	b200      	sxth	r0, r0
 800b7e4:	1a40      	subs	r0, r0, r1
 800b7e6:	e7f7      	b.n	800b7d8 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 800b7e8:	2000      	movs	r0, #0
 800b7ea:	4770      	bx	lr

0800b7ec <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 800b7ec:	4b01      	ldr	r3, [pc, #4]	@ (800b7f4 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	601a      	str	r2, [r3, #0]
 800b7f2:	4770      	bx	lr
 800b7f4:	20012640 	.word	0x20012640

0800b7f8 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 800b7f8:	4603      	mov	r3, r0
 800b7fa:	b1c8      	cbz	r0, 800b830 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 800b7fc:	0c02      	lsrs	r2, r0, #16
 800b7fe:	0412      	lsls	r2, r2, #16
 800b800:	b9a2      	cbnz	r2, 800b82c <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 800b802:	0403      	lsls	r3, r0, #16
 800b804:	2010      	movs	r0, #16
 800b806:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
 800b80a:	bf04      	itt	eq
 800b80c:	021b      	lsleq	r3, r3, #8
 800b80e:	3008      	addeq	r0, #8
 800b810:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
 800b814:	bf04      	itt	eq
 800b816:	011b      	lsleq	r3, r3, #4
 800b818:	3004      	addeq	r0, #4
 800b81a:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
 800b81e:	bf04      	itt	eq
 800b820:	009b      	lsleq	r3, r3, #2
 800b822:	3002      	addeq	r0, #2
 800b824:	2b00      	cmp	r3, #0
 800b826:	db04      	blt.n	800b832 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 800b828:	3001      	adds	r0, #1
 800b82a:	4770      	bx	lr
 800b82c:	2000      	movs	r0, #0
 800b82e:	e7ea      	b.n	800b806 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 800b830:	2020      	movs	r0, #32
 800b832:	4770      	bx	lr

0800b834 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 800b834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b838:	b087      	sub	sp, #28
 800b83a:	460d      	mov	r5, r1
 800b83c:	4616      	mov	r6, r2
 800b83e:	4698      	mov	r8, r3
 800b840:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	@ 0x40
 800b844:	4601      	mov	r1, r0
 800b846:	b120      	cbz	r0, 800b852 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 800b848:	b11a      	cbz	r2, 800b852 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 800b84a:	2d1f      	cmp	r5, #31
 800b84c:	d801      	bhi.n	800b852 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 800b84e:	2b1f      	cmp	r3, #31
 800b850:	d904      	bls.n	800b85c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x28>
 800b852:	2000      	movs	r0, #0
 800b854:	6038      	str	r0, [r7, #0]
 800b856:	b007      	add	sp, #28
 800b858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b85c:	b97d      	cbnz	r5, 800b87e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4a>
 800b85e:	b143      	cbz	r3, 800b872 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x3e>
 800b860:	4602      	mov	r2, r0
 800b862:	e9cd 4700 	strd	r4, r7, [sp]
 800b866:	462b      	mov	r3, r5
 800b868:	4641      	mov	r1, r8
 800b86a:	4630      	mov	r0, r6
 800b86c:	f7ff ffe2 	bl	800b834 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800b870:	e7f1      	b.n	800b856 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 800b872:	f04f 33ff 	mov.w	r3, #4294967295
 800b876:	603b      	str	r3, [r7, #0]
 800b878:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 800b87c:	e7eb      	b.n	800b856 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 800b87e:	fa32 fa05 	lsrs.w	sl, r2, r5
 800b882:	d106      	bne.n	800b892 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x5e>
 800b884:	4346      	muls	r6, r0
 800b886:	fbb6 f0f4 	udiv	r0, r6, r4
 800b88a:	fb04 6610 	mls	r6, r4, r0, r6
 800b88e:	603e      	str	r6, [r7, #0]
 800b890:	e7e1      	b.n	800b856 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 800b892:	2201      	movs	r2, #1
 800b894:	40aa      	lsls	r2, r5
 800b896:	3a01      	subs	r2, #1
 800b898:	4016      	ands	r6, r2
 800b89a:	fa00 fb05 	lsl.w	fp, r0, r5
 800b89e:	4630      	mov	r0, r6
 800b8a0:	fbbb f9f4 	udiv	r9, fp, r4
 800b8a4:	fb0a f309 	mul.w	r3, sl, r9
 800b8a8:	9303      	str	r3, [sp, #12]
 800b8aa:	f7ff ffa5 	bl	800b7f8 <_ZN8touchgfx16TouchCalibration4clzuEm>
 800b8ae:	462b      	mov	r3, r5
 800b8b0:	460a      	mov	r2, r1
 800b8b2:	e9cd 4700 	strd	r4, r7, [sp]
 800b8b6:	4601      	mov	r1, r0
 800b8b8:	4630      	mov	r0, r6
 800b8ba:	f7ff ffbb 	bl	800b834 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800b8be:	fb04 b919 	mls	r9, r4, r9, fp
 800b8c2:	4606      	mov	r6, r0
 800b8c4:	4648      	mov	r0, r9
 800b8c6:	eb05 0108 	add.w	r1, r5, r8
 800b8ca:	f7ff ff95 	bl	800b7f8 <_ZN8touchgfx16TouchCalibration4clzuEm>
 800b8ce:	ab05      	add	r3, sp, #20
 800b8d0:	e9cd 4300 	strd	r4, r3, [sp]
 800b8d4:	464a      	mov	r2, r9
 800b8d6:	4603      	mov	r3, r0
 800b8d8:	4650      	mov	r0, sl
 800b8da:	f7ff ffab 	bl	800b834 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800b8de:	6839      	ldr	r1, [r7, #0]
 800b8e0:	9a05      	ldr	r2, [sp, #20]
 800b8e2:	9b03      	ldr	r3, [sp, #12]
 800b8e4:	4411      	add	r1, r2
 800b8e6:	fbb1 f2f4 	udiv	r2, r1, r4
 800b8ea:	18d3      	adds	r3, r2, r3
 800b8ec:	441e      	add	r6, r3
 800b8ee:	fb04 1412 	mls	r4, r4, r2, r1
 800b8f2:	4430      	add	r0, r6
 800b8f4:	603c      	str	r4, [r7, #0]
 800b8f6:	e7ae      	b.n	800b856 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>

0800b8f8 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 800b8f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b8fc:	b085      	sub	sp, #20
 800b8fe:	f1b0 0900 	subs.w	r9, r0, #0
 800b902:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800b904:	461d      	mov	r5, r3
 800b906:	bfbf      	itttt	lt
 800b908:	6823      	ldrlt	r3, [r4, #0]
 800b90a:	425b      	neglt	r3, r3
 800b90c:	f1c9 0900 	rsblt	r9, r9, #0
 800b910:	6023      	strlt	r3, [r4, #0]
 800b912:	bfb4      	ite	lt
 800b914:	f04f 36ff 	movlt.w	r6, #4294967295
 800b918:	2601      	movge	r6, #1
 800b91a:	2a00      	cmp	r2, #0
 800b91c:	4617      	mov	r7, r2
 800b91e:	da04      	bge.n	800b92a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 800b920:	6823      	ldr	r3, [r4, #0]
 800b922:	425b      	negs	r3, r3
 800b924:	4257      	negs	r7, r2
 800b926:	4276      	negs	r6, r6
 800b928:	6023      	str	r3, [r4, #0]
 800b92a:	2d00      	cmp	r5, #0
 800b92c:	4638      	mov	r0, r7
 800b92e:	bfba      	itte	lt
 800b930:	426d      	neglt	r5, r5
 800b932:	f04f 38ff 	movlt.w	r8, #4294967295
 800b936:	f04f 0801 	movge.w	r8, #1
 800b93a:	f7ff ff5d 	bl	800b7f8 <_ZN8touchgfx16TouchCalibration4clzuEm>
 800b93e:	ab03      	add	r3, sp, #12
 800b940:	e9cd 5300 	strd	r5, r3, [sp]
 800b944:	463a      	mov	r2, r7
 800b946:	4603      	mov	r3, r0
 800b948:	4648      	mov	r0, r9
 800b94a:	f7ff ff73 	bl	800b834 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800b94e:	6823      	ldr	r3, [r4, #0]
 800b950:	9a03      	ldr	r2, [sp, #12]
 800b952:	4546      	cmp	r6, r8
 800b954:	441a      	add	r2, r3
 800b956:	fb92 f3f5 	sdiv	r3, r2, r5
 800b95a:	4418      	add	r0, r3
 800b95c:	bf18      	it	ne
 800b95e:	4240      	negne	r0, r0
 800b960:	fb05 2313 	mls	r3, r5, r3, r2
 800b964:	1c72      	adds	r2, r6, #1
 800b966:	6023      	str	r3, [r4, #0]
 800b968:	d105      	bne.n	800b976 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	f1c3 0200 	rsb	r2, r3, #0
 800b970:	db0b      	blt.n	800b98a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 800b972:	6022      	str	r2, [r4, #0]
 800b974:	e006      	b.n	800b984 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 800b976:	2e01      	cmp	r6, #1
 800b978:	d104      	bne.n	800b984 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	da02      	bge.n	800b984 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 800b97e:	442b      	add	r3, r5
 800b980:	3801      	subs	r0, #1
 800b982:	6023      	str	r3, [r4, #0]
 800b984:	b005      	add	sp, #20
 800b986:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b98a:	3801      	subs	r0, #1
 800b98c:	1b52      	subs	r2, r2, r5
 800b98e:	e7f0      	b.n	800b972 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>

0800b990 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 800b990:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800b994:	4c1c      	ldr	r4, [pc, #112]	@ (800ba08 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 800b996:	6807      	ldr	r7, [r0, #0]
 800b998:	69a3      	ldr	r3, [r4, #24]
 800b99a:	4605      	mov	r5, r0
 800b99c:	b92b      	cbnz	r3, 800b9aa <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 800b99e:	6840      	ldr	r0, [r0, #4]
 800b9a0:	e9c5 7000 	strd	r7, r0, [r5]
 800b9a4:	b004      	add	sp, #16
 800b9a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9aa:	68a2      	ldr	r2, [r4, #8]
 800b9ac:	6820      	ldr	r0, [r4, #0]
 800b9ae:	ae04      	add	r6, sp, #16
 800b9b0:	f04f 0802 	mov.w	r8, #2
 800b9b4:	fb93 f1f8 	sdiv	r1, r3, r8
 800b9b8:	440a      	add	r2, r1
 800b9ba:	f846 2d04 	str.w	r2, [r6, #-4]!
 800b9be:	69e1      	ldr	r1, [r4, #28]
 800b9c0:	9600      	str	r6, [sp, #0]
 800b9c2:	463a      	mov	r2, r7
 800b9c4:	f7ff ff98 	bl	800b8f8 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800b9c8:	69a3      	ldr	r3, [r4, #24]
 800b9ca:	686a      	ldr	r2, [r5, #4]
 800b9cc:	6a21      	ldr	r1, [r4, #32]
 800b9ce:	9600      	str	r6, [sp, #0]
 800b9d0:	4607      	mov	r7, r0
 800b9d2:	6860      	ldr	r0, [r4, #4]
 800b9d4:	f7ff ff90 	bl	800b8f8 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800b9d8:	6962      	ldr	r2, [r4, #20]
 800b9da:	69a3      	ldr	r3, [r4, #24]
 800b9dc:	fb93 f8f8 	sdiv	r8, r3, r8
 800b9e0:	4442      	add	r2, r8
 800b9e2:	9203      	str	r2, [sp, #12]
 800b9e4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800b9e6:	682a      	ldr	r2, [r5, #0]
 800b9e8:	9600      	str	r6, [sp, #0]
 800b9ea:	4407      	add	r7, r0
 800b9ec:	68e0      	ldr	r0, [r4, #12]
 800b9ee:	f7ff ff83 	bl	800b8f8 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800b9f2:	9600      	str	r6, [sp, #0]
 800b9f4:	4680      	mov	r8, r0
 800b9f6:	69a3      	ldr	r3, [r4, #24]
 800b9f8:	686a      	ldr	r2, [r5, #4]
 800b9fa:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800b9fc:	6920      	ldr	r0, [r4, #16]
 800b9fe:	f7ff ff7b 	bl	800b8f8 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800ba02:	4440      	add	r0, r8
 800ba04:	e7cc      	b.n	800b9a0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 800ba06:	bf00      	nop
 800ba08:	20012644 	.word	0x20012644

0800ba0c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 800ba0c:	4b07      	ldr	r3, [pc, #28]	@ (800ba2c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 800ba0e:	781b      	ldrb	r3, [r3, #0]
 800ba10:	2b01      	cmp	r3, #1
 800ba12:	d109      	bne.n	800ba28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 800ba14:	f9b1 3000 	ldrsh.w	r3, [r1]
 800ba18:	f9b0 2000 	ldrsh.w	r2, [r0]
 800ba1c:	8003      	strh	r3, [r0, #0]
 800ba1e:	4b04      	ldr	r3, [pc, #16]	@ (800ba30 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 800ba20:	881b      	ldrh	r3, [r3, #0]
 800ba22:	3b01      	subs	r3, #1
 800ba24:	1a9b      	subs	r3, r3, r2
 800ba26:	800b      	strh	r3, [r1, #0]
 800ba28:	4770      	bx	lr
 800ba2a:	bf00      	nop
 800ba2c:	20012630 	.word	0x20012630
 800ba30:	2001262c 	.word	0x2001262c

0800ba34 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 800ba34:	b510      	push	{r4, lr}
 800ba36:	4b07      	ldr	r3, [pc, #28]	@ (800ba54 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 800ba38:	781b      	ldrb	r3, [r3, #0]
 800ba3a:	2b01      	cmp	r3, #1
 800ba3c:	d108      	bne.n	800ba50 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 800ba3e:	4b06      	ldr	r3, [pc, #24]	@ (800ba58 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 800ba40:	880c      	ldrh	r4, [r1, #0]
 800ba42:	881b      	ldrh	r3, [r3, #0]
 800ba44:	f9b0 2000 	ldrsh.w	r2, [r0]
 800ba48:	3b01      	subs	r3, #1
 800ba4a:	1b1b      	subs	r3, r3, r4
 800ba4c:	8003      	strh	r3, [r0, #0]
 800ba4e:	800a      	strh	r2, [r1, #0]
 800ba50:	bd10      	pop	{r4, pc}
 800ba52:	bf00      	nop
 800ba54:	20012630 	.word	0x20012630
 800ba58:	2001262c 	.word	0x2001262c

0800ba5c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 800ba5c:	b510      	push	{r4, lr}
 800ba5e:	4b0a      	ldr	r3, [pc, #40]	@ (800ba88 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 800ba60:	781b      	ldrb	r3, [r3, #0]
 800ba62:	2b01      	cmp	r3, #1
 800ba64:	d10e      	bne.n	800ba84 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 800ba66:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 800ba6a:	8843      	ldrh	r3, [r0, #2]
 800ba6c:	f9b0 4000 	ldrsh.w	r4, [r0]
 800ba70:	8044      	strh	r4, [r0, #2]
 800ba72:	18ca      	adds	r2, r1, r3
 800ba74:	4b05      	ldr	r3, [pc, #20]	@ (800ba8c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 800ba76:	881b      	ldrh	r3, [r3, #0]
 800ba78:	1a9b      	subs	r3, r3, r2
 800ba7a:	8003      	strh	r3, [r0, #0]
 800ba7c:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800ba80:	80c3      	strh	r3, [r0, #6]
 800ba82:	8081      	strh	r1, [r0, #4]
 800ba84:	bd10      	pop	{r4, pc}
 800ba86:	bf00      	nop
 800ba88:	20012630 	.word	0x20012630
 800ba8c:	2001262c 	.word	0x2001262c

0800ba90 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 800ba90:	4b08      	ldr	r3, [pc, #32]	@ (800bab4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 800ba92:	781b      	ldrb	r3, [r3, #0]
 800ba94:	2b01      	cmp	r3, #1
 800ba96:	d10c      	bne.n	800bab2 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 800ba98:	8803      	ldrh	r3, [r0, #0]
 800ba9a:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 800ba9e:	8842      	ldrh	r2, [r0, #2]
 800baa0:	8002      	strh	r2, [r0, #0]
 800baa2:	185a      	adds	r2, r3, r1
 800baa4:	4b04      	ldr	r3, [pc, #16]	@ (800bab8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 800baa6:	881b      	ldrh	r3, [r3, #0]
 800baa8:	1a9b      	subs	r3, r3, r2
 800baaa:	8043      	strh	r3, [r0, #2]
 800baac:	88c3      	ldrh	r3, [r0, #6]
 800baae:	8083      	strh	r3, [r0, #4]
 800bab0:	80c1      	strh	r1, [r0, #6]
 800bab2:	4770      	bx	lr
 800bab4:	20012630 	.word	0x20012630
 800bab8:	2001262c 	.word	0x2001262c

0800babc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 800babc:	b510      	push	{r4, lr}
 800babe:	4b07      	ldr	r3, [pc, #28]	@ (800badc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 800bac0:	781b      	ldrb	r3, [r3, #0]
 800bac2:	2b01      	cmp	r3, #1
 800bac4:	d108      	bne.n	800bad8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 800bac6:	f9b1 3000 	ldrsh.w	r3, [r1]
 800baca:	f9b0 4000 	ldrsh.w	r4, [r0]
 800bace:	8003      	strh	r3, [r0, #0]
 800bad0:	8893      	ldrh	r3, [r2, #4]
 800bad2:	3b01      	subs	r3, #1
 800bad4:	1b1b      	subs	r3, r3, r4
 800bad6:	800b      	strh	r3, [r1, #0]
 800bad8:	bd10      	pop	{r4, pc}
 800bada:	bf00      	nop
 800badc:	20012630 	.word	0x20012630

0800bae0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 800bae0:	b510      	push	{r4, lr}
 800bae2:	4b0a      	ldr	r3, [pc, #40]	@ (800bb0c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 800bae4:	781b      	ldrb	r3, [r3, #0]
 800bae6:	2b01      	cmp	r3, #1
 800bae8:	460a      	mov	r2, r1
 800baea:	d10d      	bne.n	800bb08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 800baec:	8881      	ldrh	r1, [r0, #4]
 800baee:	8803      	ldrh	r3, [r0, #0]
 800baf0:	440b      	add	r3, r1
 800baf2:	4601      	mov	r1, r0
 800baf4:	3b01      	subs	r3, #1
 800baf6:	f821 3b02 	strh.w	r3, [r1], #2
 800bafa:	f7ff ffdf 	bl	800babc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 800bafe:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800bb02:	88c2      	ldrh	r2, [r0, #6]
 800bb04:	8082      	strh	r2, [r0, #4]
 800bb06:	80c3      	strh	r3, [r0, #6]
 800bb08:	bd10      	pop	{r4, pc}
 800bb0a:	bf00      	nop
 800bb0c:	20012630 	.word	0x20012630

0800bb10 <_ZN8touchgfx11Application13requestRedrawEv>:
 800bb10:	4b06      	ldr	r3, [pc, #24]	@ (800bb2c <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 800bb12:	f9b3 2000 	ldrsh.w	r2, [r3]
 800bb16:	4b06      	ldr	r3, [pc, #24]	@ (800bb30 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 800bb18:	f8a0 2134 	strh.w	r2, [r0, #308]	@ 0x134
 800bb1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bb20:	f8a0 3136 	strh.w	r3, [r0, #310]	@ 0x136
 800bb24:	2100      	movs	r1, #0
 800bb26:	f8c0 1130 	str.w	r1, [r0, #304]	@ 0x130
 800bb2a:	4770      	bx	lr
 800bb2c:	2001262c 	.word	0x2001262c
 800bb30:	2001262e 	.word	0x2001262e

0800bb34 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 800bb34:	4b03      	ldr	r3, [pc, #12]	@ (800bb44 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 800bb36:	6818      	ldr	r0, [r3, #0]
 800bb38:	b110      	cbz	r0, 800bb40 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 800bb3a:	6803      	ldr	r3, [r0, #0]
 800bb3c:	699b      	ldr	r3, [r3, #24]
 800bb3e:	4718      	bx	r3
 800bb40:	4770      	bx	lr
 800bb42:	bf00      	nop
 800bb44:	20012674 	.word	0x20012674

0800bb48 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 800bb48:	4770      	bx	lr
	...

0800bb4c <_ZN8touchgfx11Application4drawEv>:
 800bb4c:	b507      	push	{r0, r1, r2, lr}
 800bb4e:	4b09      	ldr	r3, [pc, #36]	@ (800bb74 <_ZN8touchgfx11Application4drawEv+0x28>)
 800bb50:	f9b3 2000 	ldrsh.w	r2, [r3]
 800bb54:	4b08      	ldr	r3, [pc, #32]	@ (800bb78 <_ZN8touchgfx11Application4drawEv+0x2c>)
 800bb56:	f8ad 2004 	strh.w	r2, [sp, #4]
 800bb5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bb5e:	f8ad 3006 	strh.w	r3, [sp, #6]
 800bb62:	6803      	ldr	r3, [r0, #0]
 800bb64:	2100      	movs	r1, #0
 800bb66:	9100      	str	r1, [sp, #0]
 800bb68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bb6a:	4669      	mov	r1, sp
 800bb6c:	4798      	blx	r3
 800bb6e:	b003      	add	sp, #12
 800bb70:	f85d fb04 	ldr.w	pc, [sp], #4
 800bb74:	2001262c 	.word	0x2001262c
 800bb78:	2001262e 	.word	0x2001262e

0800bb7c <_ZN8touchgfx11Application10invalidateEv>:
 800bb7c:	4b09      	ldr	r3, [pc, #36]	@ (800bba4 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 800bb7e:	f9b3 2000 	ldrsh.w	r2, [r3]
 800bb82:	4b09      	ldr	r3, [pc, #36]	@ (800bba8 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 800bb84:	b082      	sub	sp, #8
 800bb86:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bb8a:	f8ad 2004 	strh.w	r2, [sp, #4]
 800bb8e:	2100      	movs	r1, #0
 800bb90:	f8ad 3006 	strh.w	r3, [sp, #6]
 800bb94:	9100      	str	r1, [sp, #0]
 800bb96:	6803      	ldr	r3, [r0, #0]
 800bb98:	aa02      	add	r2, sp, #8
 800bb9a:	e912 0006 	ldmdb	r2, {r1, r2}
 800bb9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bba0:	b002      	add	sp, #8
 800bba2:	4718      	bx	r3
 800bba4:	2001262c 	.word	0x2001262c
 800bba8:	2001262e 	.word	0x2001262e

0800bbac <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 800bbac:	4b03      	ldr	r3, [pc, #12]	@ (800bbbc <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 800bbae:	6818      	ldr	r0, [r3, #0]
 800bbb0:	b110      	cbz	r0, 800bbb8 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 800bbb2:	6803      	ldr	r3, [r0, #0]
 800bbb4:	69db      	ldr	r3, [r3, #28]
 800bbb6:	4718      	bx	r3
 800bbb8:	4770      	bx	lr
 800bbba:	bf00      	nop
 800bbbc:	20012674 	.word	0x20012674

0800bbc0 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 800bbc0:	4b03      	ldr	r3, [pc, #12]	@ (800bbd0 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 800bbc2:	6818      	ldr	r0, [r3, #0]
 800bbc4:	b110      	cbz	r0, 800bbcc <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 800bbc6:	6803      	ldr	r3, [r0, #0]
 800bbc8:	6a1b      	ldr	r3, [r3, #32]
 800bbca:	4718      	bx	r3
 800bbcc:	4770      	bx	lr
 800bbce:	bf00      	nop
 800bbd0:	20012674 	.word	0x20012674

0800bbd4 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	f8a0 30ec 	strh.w	r3, [r0, #236]	@ 0xec
 800bbda:	4770      	bx	lr

0800bbdc <_ZN8touchgfx11Application14handleKeyEventEh>:
 800bbdc:	4b03      	ldr	r3, [pc, #12]	@ (800bbec <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 800bbde:	6818      	ldr	r0, [r3, #0]
 800bbe0:	b110      	cbz	r0, 800bbe8 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 800bbe2:	6803      	ldr	r3, [r0, #0]
 800bbe4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bbe6:	4718      	bx	r3
 800bbe8:	4770      	bx	lr
 800bbea:	bf00      	nop
 800bbec:	20012674 	.word	0x20012674

0800bbf0 <_ZN8touchgfx11ApplicationD1Ev>:
 800bbf0:	4770      	bx	lr

0800bbf2 <_ZN8touchgfx11ApplicationD0Ev>:
 800bbf2:	b510      	push	{r4, lr}
 800bbf4:	f44f 719e 	mov.w	r1, #316	@ 0x13c
 800bbf8:	4604      	mov	r4, r0
 800bbfa:	f006 f9d1 	bl	8011fa0 <_ZdlPvj>
 800bbfe:	4620      	mov	r0, r4
 800bc00:	bd10      	pop	{r4, pc}

0800bc02 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 800bc02:	b510      	push	{r4, lr}
 800bc04:	f9b1 4000 	ldrsh.w	r4, [r1]
 800bc08:	888a      	ldrh	r2, [r1, #4]
 800bc0a:	f9b0 3000 	ldrsh.w	r3, [r0]
 800bc0e:	4422      	add	r2, r4
 800bc10:	b212      	sxth	r2, r2
 800bc12:	4293      	cmp	r3, r2
 800bc14:	da15      	bge.n	800bc42 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800bc16:	8882      	ldrh	r2, [r0, #4]
 800bc18:	4413      	add	r3, r2
 800bc1a:	b21b      	sxth	r3, r3
 800bc1c:	429c      	cmp	r4, r3
 800bc1e:	da10      	bge.n	800bc42 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800bc20:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 800bc24:	88c9      	ldrh	r1, [r1, #6]
 800bc26:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800bc2a:	4419      	add	r1, r3
 800bc2c:	b209      	sxth	r1, r1
 800bc2e:	428a      	cmp	r2, r1
 800bc30:	da07      	bge.n	800bc42 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800bc32:	88c0      	ldrh	r0, [r0, #6]
 800bc34:	4410      	add	r0, r2
 800bc36:	b200      	sxth	r0, r0
 800bc38:	4283      	cmp	r3, r0
 800bc3a:	bfac      	ite	ge
 800bc3c:	2000      	movge	r0, #0
 800bc3e:	2001      	movlt	r0, #1
 800bc40:	bd10      	pop	{r4, pc}
 800bc42:	2000      	movs	r0, #0
 800bc44:	e7fc      	b.n	800bc40 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0800bc46 <_ZN8touchgfx4Rect10restrictToEss>:
 800bc46:	f9b0 3000 	ldrsh.w	r3, [r0]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	b510      	push	{r4, lr}
 800bc4e:	da04      	bge.n	800bc5a <_ZN8touchgfx4Rect10restrictToEss+0x14>
 800bc50:	8884      	ldrh	r4, [r0, #4]
 800bc52:	4423      	add	r3, r4
 800bc54:	8083      	strh	r3, [r0, #4]
 800bc56:	2300      	movs	r3, #0
 800bc58:	8003      	strh	r3, [r0, #0]
 800bc5a:	f9b0 4000 	ldrsh.w	r4, [r0]
 800bc5e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800bc62:	1b09      	subs	r1, r1, r4
 800bc64:	428b      	cmp	r3, r1
 800bc66:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800bc6a:	bfc8      	it	gt
 800bc6c:	8081      	strhgt	r1, [r0, #4]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	da04      	bge.n	800bc7c <_ZN8touchgfx4Rect10restrictToEss+0x36>
 800bc72:	88c1      	ldrh	r1, [r0, #6]
 800bc74:	440b      	add	r3, r1
 800bc76:	80c3      	strh	r3, [r0, #6]
 800bc78:	2300      	movs	r3, #0
 800bc7a:	8043      	strh	r3, [r0, #2]
 800bc7c:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 800bc80:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800bc84:	1a52      	subs	r2, r2, r1
 800bc86:	4293      	cmp	r3, r2
 800bc88:	bfc8      	it	gt
 800bc8a:	80c2      	strhgt	r2, [r0, #6]
 800bc8c:	bd10      	pop	{r4, pc}
	...

0800bc90 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 800bc90:	b510      	push	{r4, lr}
 800bc92:	4b10      	ldr	r3, [pc, #64]	@ (800bcd4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 800bc94:	f9b3 2000 	ldrsh.w	r2, [r3]
 800bc98:	4b0f      	ldr	r3, [pc, #60]	@ (800bcd8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 800bc9a:	460c      	mov	r4, r1
 800bc9c:	4620      	mov	r0, r4
 800bc9e:	f9b3 1000 	ldrsh.w	r1, [r3]
 800bca2:	f7ff ffd0 	bl	800bc46 <_ZN8touchgfx4Rect10restrictToEss>
 800bca6:	4b0d      	ldr	r3, [pc, #52]	@ (800bcdc <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 800bca8:	6818      	ldr	r0, [r3, #0]
 800bcaa:	b190      	cbz	r0, 800bcd2 <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 800bcac:	6803      	ldr	r3, [r0, #0]
 800bcae:	4621      	mov	r1, r4
 800bcb0:	689b      	ldr	r3, [r3, #8]
 800bcb2:	4798      	blx	r3
 800bcb4:	4b0a      	ldr	r3, [pc, #40]	@ (800bce0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 800bcb6:	6818      	ldr	r0, [r3, #0]
 800bcb8:	b118      	cbz	r0, 800bcc2 <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 800bcba:	6803      	ldr	r3, [r0, #0]
 800bcbc:	4621      	mov	r1, r4
 800bcbe:	689b      	ldr	r3, [r3, #8]
 800bcc0:	4798      	blx	r3
 800bcc2:	4b08      	ldr	r3, [pc, #32]	@ (800bce4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 800bcc4:	6818      	ldr	r0, [r3, #0]
 800bcc6:	6803      	ldr	r3, [r0, #0]
 800bcc8:	4621      	mov	r1, r4
 800bcca:	69db      	ldr	r3, [r3, #28]
 800bccc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bcd0:	4718      	bx	r3
 800bcd2:	bd10      	pop	{r4, pc}
 800bcd4:	2001262e 	.word	0x2001262e
 800bcd8:	2001262c 	.word	0x2001262c
 800bcdc:	20012674 	.word	0x20012674
 800bce0:	20012670 	.word	0x20012670
 800bce4:	20012638 	.word	0x20012638

0800bce8 <_ZNK8touchgfx4Rect8includesERKS0_>:
 800bce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcea:	4606      	mov	r6, r0
 800bcec:	4608      	mov	r0, r1
 800bcee:	460f      	mov	r7, r1
 800bcf0:	f7fc fded 	bl	80088ce <_ZNK8touchgfx4Rect7isEmptyEv>
 800bcf4:	b9e8      	cbnz	r0, 800bd32 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 800bcf6:	f9b7 5000 	ldrsh.w	r5, [r7]
 800bcfa:	f9b6 4000 	ldrsh.w	r4, [r6]
 800bcfe:	42a5      	cmp	r5, r4
 800bd00:	db17      	blt.n	800bd32 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 800bd02:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800bd06:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 800bd0a:	429a      	cmp	r2, r3
 800bd0c:	db11      	blt.n	800bd32 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 800bd0e:	88b9      	ldrh	r1, [r7, #4]
 800bd10:	440d      	add	r5, r1
 800bd12:	88b1      	ldrh	r1, [r6, #4]
 800bd14:	440c      	add	r4, r1
 800bd16:	b22d      	sxth	r5, r5
 800bd18:	b224      	sxth	r4, r4
 800bd1a:	42a5      	cmp	r5, r4
 800bd1c:	dc09      	bgt.n	800bd32 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 800bd1e:	88f8      	ldrh	r0, [r7, #6]
 800bd20:	4410      	add	r0, r2
 800bd22:	88f2      	ldrh	r2, [r6, #6]
 800bd24:	4413      	add	r3, r2
 800bd26:	b200      	sxth	r0, r0
 800bd28:	b21b      	sxth	r3, r3
 800bd2a:	4298      	cmp	r0, r3
 800bd2c:	bfcc      	ite	gt
 800bd2e:	2000      	movgt	r0, #0
 800bd30:	2001      	movle	r0, #1
 800bd32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bd34 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 800bd34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd36:	4604      	mov	r4, r0
 800bd38:	4608      	mov	r0, r1
 800bd3a:	460d      	mov	r5, r1
 800bd3c:	f7fc fdc7 	bl	80088ce <_ZNK8touchgfx4Rect7isEmptyEv>
 800bd40:	b978      	cbnz	r0, 800bd62 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 800bd42:	4620      	mov	r0, r4
 800bd44:	f7fc fdc3 	bl	80088ce <_ZNK8touchgfx4Rect7isEmptyEv>
 800bd48:	f9b5 6000 	ldrsh.w	r6, [r5]
 800bd4c:	b150      	cbz	r0, 800bd64 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 800bd4e:	8026      	strh	r6, [r4, #0]
 800bd50:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 800bd54:	8063      	strh	r3, [r4, #2]
 800bd56:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800bd5a:	80a3      	strh	r3, [r4, #4]
 800bd5c:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800bd60:	80e3      	strh	r3, [r4, #6]
 800bd62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd64:	f9b4 1000 	ldrsh.w	r1, [r4]
 800bd68:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 800bd6c:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 800bd70:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 800bd74:	88ed      	ldrh	r5, [r5, #6]
 800bd76:	42b1      	cmp	r1, r6
 800bd78:	460f      	mov	r7, r1
 800bd7a:	bfa8      	it	ge
 800bd7c:	4637      	movge	r7, r6
 800bd7e:	4293      	cmp	r3, r2
 800bd80:	4618      	mov	r0, r3
 800bd82:	4466      	add	r6, ip
 800bd84:	bfa8      	it	ge
 800bd86:	4610      	movge	r0, r2
 800bd88:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 800bd8c:	8027      	strh	r7, [r4, #0]
 800bd8e:	442a      	add	r2, r5
 800bd90:	88e5      	ldrh	r5, [r4, #6]
 800bd92:	8060      	strh	r0, [r4, #2]
 800bd94:	4461      	add	r1, ip
 800bd96:	442b      	add	r3, r5
 800bd98:	b236      	sxth	r6, r6
 800bd9a:	b209      	sxth	r1, r1
 800bd9c:	b212      	sxth	r2, r2
 800bd9e:	b21b      	sxth	r3, r3
 800bda0:	428e      	cmp	r6, r1
 800bda2:	bfac      	ite	ge
 800bda4:	ebc7 0106 	rsbge	r1, r7, r6
 800bda8:	ebc7 0101 	rsblt	r1, r7, r1
 800bdac:	429a      	cmp	r2, r3
 800bdae:	bfac      	ite	ge
 800bdb0:	ebc0 0202 	rsbge	r2, r0, r2
 800bdb4:	ebc0 0203 	rsblt	r2, r0, r3
 800bdb8:	80a1      	strh	r1, [r4, #4]
 800bdba:	80e2      	strh	r2, [r4, #6]
 800bdbc:	e7d1      	b.n	800bd62 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

0800bdc0 <_ZN8touchgfx11Application11getInstanceEv>:
 800bdc0:	4b01      	ldr	r3, [pc, #4]	@ (800bdc8 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 800bdc2:	6818      	ldr	r0, [r3, #0]
 800bdc4:	4770      	bx	lr
 800bdc6:	bf00      	nop
 800bdc8:	20012684 	.word	0x20012684

0800bdcc <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv>:
 800bdcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdce:	4b10      	ldr	r3, [pc, #64]	@ (800be10 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x44>)
 800bdd0:	781b      	ldrb	r3, [r3, #0]
 800bdd2:	4605      	mov	r5, r0
 800bdd4:	b1d3      	cbz	r3, 800be0c <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x40>
 800bdd6:	4b0f      	ldr	r3, [pc, #60]	@ (800be14 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x48>)
 800bdd8:	4f0f      	ldr	r7, [pc, #60]	@ (800be18 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x4c>)
 800bdda:	881c      	ldrh	r4, [r3, #0]
 800bddc:	f100 06ee 	add.w	r6, r0, #238	@ 0xee
 800bde0:	f8b5 312e 	ldrh.w	r3, [r5, #302]	@ 0x12e
 800bde4:	42a3      	cmp	r3, r4
 800bde6:	d90e      	bls.n	800be06 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x3a>
 800bde8:	683b      	ldr	r3, [r7, #0]
 800bdea:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800bdee:	b10a      	cbz	r2, 800bdf4 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x28>
 800bdf0:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800bdf2:	b900      	cbnz	r0, 800bdf6 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x2a>
 800bdf4:	6898      	ldr	r0, [r3, #8]
 800bdf6:	6803      	ldr	r3, [r0, #0]
 800bdf8:	eb06 01c4 	add.w	r1, r6, r4, lsl #3
 800bdfc:	69db      	ldr	r3, [r3, #28]
 800bdfe:	3401      	adds	r4, #1
 800be00:	4798      	blx	r3
 800be02:	b2a4      	uxth	r4, r4
 800be04:	e7ec      	b.n	800bde0 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x14>
 800be06:	2300      	movs	r3, #0
 800be08:	f8a5 312e 	strh.w	r3, [r5, #302]	@ 0x12e
 800be0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be0e:	bf00      	nop
 800be10:	20012636 	.word	0x20012636
 800be14:	20000084 	.word	0x20000084
 800be18:	20012638 	.word	0x20012638

0800be1c <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 800be1c:	b510      	push	{r4, lr}
 800be1e:	2300      	movs	r3, #0
 800be20:	f8a0 30a4 	strh.w	r3, [r0, #164]	@ 0xa4
 800be24:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 800be28:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 800be2c:	4604      	mov	r4, r0
 800be2e:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 800be32:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	@ 0xa6
 800be36:	429a      	cmp	r2, r3
 800be38:	d90e      	bls.n	800be58 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 800be3a:	18e2      	adds	r2, r4, r3
 800be3c:	f892 2084 	ldrb.w	r2, [r2, #132]	@ 0x84
 800be40:	b122      	cbz	r2, 800be4c <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 800be42:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 800be46:	6803      	ldr	r3, [r0, #0]
 800be48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800be4a:	4798      	blx	r3
 800be4c:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 800be50:	3301      	adds	r3, #1
 800be52:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 800be56:	e7ea      	b.n	800be2e <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 800be58:	bd10      	pop	{r4, pc}

0800be5a <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 800be5a:	2300      	movs	r3, #0
 800be5c:	f8a0 3080 	strh.w	r3, [r0, #128]	@ 0x80
 800be60:	f100 0284 	add.w	r2, r0, #132	@ 0x84
 800be64:	30a4      	adds	r0, #164	@ 0xa4
 800be66:	f802 3b01 	strb.w	r3, [r2], #1
 800be6a:	4282      	cmp	r2, r0
 800be6c:	d1fb      	bne.n	800be66 <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 800be6e:	4770      	bx	lr

0800be70 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 800be70:	b570      	push	{r4, r5, r6, lr}
 800be72:	4c0b      	ldr	r4, [pc, #44]	@ (800bea0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 800be74:	4605      	mov	r5, r0
 800be76:	6820      	ldr	r0, [r4, #0]
 800be78:	460e      	mov	r6, r1
 800be7a:	b110      	cbz	r0, 800be82 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 800be7c:	6803      	ldr	r3, [r0, #0]
 800be7e:	695b      	ldr	r3, [r3, #20]
 800be80:	4798      	blx	r3
 800be82:	1d28      	adds	r0, r5, #4
 800be84:	f7ff ffe9 	bl	800be5a <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 800be88:	6026      	str	r6, [r4, #0]
 800be8a:	6833      	ldr	r3, [r6, #0]
 800be8c:	4630      	mov	r0, r6
 800be8e:	68db      	ldr	r3, [r3, #12]
 800be90:	4798      	blx	r3
 800be92:	682b      	ldr	r3, [r5, #0]
 800be94:	4628      	mov	r0, r5
 800be96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800be98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800be9c:	4718      	bx	r3
 800be9e:	bf00      	nop
 800bea0:	20012674 	.word	0x20012674

0800bea4 <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 800bea4:	2300      	movs	r3, #0
 800bea6:	f8b0 c080 	ldrh.w	ip, [r0, #128]	@ 0x80
 800beaa:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	@ 0xa4
 800beae:	b5f0      	push	{r4, r5, r6, r7, lr}
 800beb0:	461a      	mov	r2, r3
 800beb2:	461c      	mov	r4, r3
 800beb4:	461d      	mov	r5, r3
 800beb6:	459c      	cmp	ip, r3
 800beb8:	dd1a      	ble.n	800bef0 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 800beba:	18c6      	adds	r6, r0, r3
 800bebc:	f896 6084 	ldrb.w	r6, [r6, #132]	@ 0x84
 800bec0:	b16e      	cbz	r6, 800bede <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 800bec2:	429a      	cmp	r2, r3
 800bec4:	d008      	beq.n	800bed8 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 800bec6:	fa1f fe82 	uxth.w	lr, r2
 800beca:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 800bece:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 800bed2:	1887      	adds	r7, r0, r2
 800bed4:	f887 6084 	strb.w	r6, [r7, #132]	@ 0x84
 800bed8:	3201      	adds	r2, #1
 800beda:	3301      	adds	r3, #1
 800bedc:	e7eb      	b.n	800beb6 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 800bede:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	@ 0xa6
 800bee2:	4299      	cmp	r1, r3
 800bee4:	bfa8      	it	ge
 800bee6:	3501      	addge	r5, #1
 800bee8:	429e      	cmp	r6, r3
 800beea:	bfc8      	it	gt
 800beec:	3401      	addgt	r4, #1
 800beee:	e7f4      	b.n	800beda <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 800bef0:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	@ 0xa6
 800bef4:	1b49      	subs	r1, r1, r5
 800bef6:	1b1b      	subs	r3, r3, r4
 800bef8:	f8a0 10a4 	strh.w	r1, [r0, #164]	@ 0xa4
 800befc:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 800bf00:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 800bf04:	4293      	cmp	r3, r2
 800bf06:	dd03      	ble.n	800bf10 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 800bf08:	3b01      	subs	r3, #1
 800bf0a:	f8a0 3080 	strh.w	r3, [r0, #128]	@ 0x80
 800bf0e:	e7f7      	b.n	800bf00 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 800bf10:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800bf14 <_ZN8touchgfx11Application15handleTickEventEv>:
 800bf14:	b570      	push	{r4, r5, r6, lr}
 800bf16:	4d16      	ldr	r5, [pc, #88]	@ (800bf70 <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 800bf18:	4604      	mov	r4, r0
 800bf1a:	6828      	ldr	r0, [r5, #0]
 800bf1c:	b140      	cbz	r0, 800bf30 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 800bf1e:	7a03      	ldrb	r3, [r0, #8]
 800bf20:	b933      	cbnz	r3, 800bf30 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 800bf22:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 800bf26:	6803      	ldr	r3, [r0, #0]
 800bf28:	689b      	ldr	r3, [r3, #8]
 800bf2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bf2e:	4718      	bx	r3
 800bf30:	f894 3138 	ldrb.w	r3, [r4, #312]	@ 0x138
 800bf34:	4e0f      	ldr	r6, [pc, #60]	@ (800bf74 <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 800bf36:	b973      	cbnz	r3, 800bf56 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 800bf38:	b168      	cbz	r0, 800bf56 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 800bf3a:	7a03      	ldrb	r3, [r0, #8]
 800bf3c:	b15b      	cbz	r3, 800bf56 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 800bf3e:	6830      	ldr	r0, [r6, #0]
 800bf40:	b110      	cbz	r0, 800bf48 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 800bf42:	6803      	ldr	r3, [r0, #0]
 800bf44:	691b      	ldr	r3, [r3, #16]
 800bf46:	4798      	blx	r3
 800bf48:	6828      	ldr	r0, [r5, #0]
 800bf4a:	6803      	ldr	r3, [r0, #0]
 800bf4c:	68db      	ldr	r3, [r3, #12]
 800bf4e:	4798      	blx	r3
 800bf50:	2301      	movs	r3, #1
 800bf52:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 800bf56:	3404      	adds	r4, #4
 800bf58:	4620      	mov	r0, r4
 800bf5a:	f7ff ff5f 	bl	800be1c <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 800bf5e:	4620      	mov	r0, r4
 800bf60:	f7ff ffa0 	bl	800bea4 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 800bf64:	6830      	ldr	r0, [r6, #0]
 800bf66:	b110      	cbz	r0, 800bf6e <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 800bf68:	6803      	ldr	r3, [r0, #0]
 800bf6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf6c:	e7dd      	b.n	800bf2a <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 800bf6e:	bd70      	pop	{r4, r5, r6, pc}
 800bf70:	20012678 	.word	0x20012678
 800bf74:	20012674 	.word	0x20012674

0800bf78 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 800bf78:	4603      	mov	r3, r0
 800bf7a:	f100 0140 	add.w	r1, r0, #64	@ 0x40
 800bf7e:	2200      	movs	r2, #0
 800bf80:	801a      	strh	r2, [r3, #0]
 800bf82:	805a      	strh	r2, [r3, #2]
 800bf84:	809a      	strh	r2, [r3, #4]
 800bf86:	80da      	strh	r2, [r3, #6]
 800bf88:	3308      	adds	r3, #8
 800bf8a:	428b      	cmp	r3, r1
 800bf8c:	d1f8      	bne.n	800bf80 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 800bf8e:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
 800bf92:	4770      	bx	lr

0800bf94 <_ZN8touchgfx11ApplicationC1Ev>:
 800bf94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf96:	4606      	mov	r6, r0
 800bf98:	4b1c      	ldr	r3, [pc, #112]	@ (800c00c <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 800bf9a:	f846 3b04 	str.w	r3, [r6], #4
 800bf9e:	4604      	mov	r4, r0
 800bfa0:	2500      	movs	r5, #0
 800bfa2:	22a8      	movs	r2, #168	@ 0xa8
 800bfa4:	2100      	movs	r1, #0
 800bfa6:	4630      	mov	r0, r6
 800bfa8:	f006 fa2f 	bl	801240a <memset>
 800bfac:	f8a4 5084 	strh.w	r5, [r4, #132]	@ 0x84
 800bfb0:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 800bfb4:	f7ff ffe0 	bl	800bf78 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 800bfb8:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 800bfbc:	f7ff ffdc 	bl	800bf78 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 800bfc0:	f8a4 5130 	strh.w	r5, [r4, #304]	@ 0x130
 800bfc4:	f8a4 5132 	strh.w	r5, [r4, #306]	@ 0x132
 800bfc8:	f8a4 5134 	strh.w	r5, [r4, #308]	@ 0x134
 800bfcc:	f8a4 5136 	strh.w	r5, [r4, #310]	@ 0x136
 800bfd0:	f884 5138 	strb.w	r5, [r4, #312]	@ 0x138
 800bfd4:	490e      	ldr	r1, [pc, #56]	@ (800c010 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 800bfd6:	480f      	ldr	r0, [pc, #60]	@ (800c014 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 800bfd8:	4f0f      	ldr	r7, [pc, #60]	@ (800c018 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 800bfda:	f005 fe99 	bl	8011d10 <CRC_Lock>
 800bfde:	4b0f      	ldr	r3, [pc, #60]	@ (800c01c <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 800bfe0:	b158      	cbz	r0, 800bffa <_ZN8touchgfx11ApplicationC1Ev+0x66>
 800bfe2:	801d      	strh	r5, [r3, #0]
 800bfe4:	4a0e      	ldr	r2, [pc, #56]	@ (800c020 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	6013      	str	r3, [r2, #0]
 800bfea:	4a0e      	ldr	r2, [pc, #56]	@ (800c024 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 800bfec:	603b      	str	r3, [r7, #0]
 800bfee:	4630      	mov	r0, r6
 800bff0:	6013      	str	r3, [r2, #0]
 800bff2:	f7ff ff32 	bl	800be5a <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 800bff6:	4620      	mov	r0, r4
 800bff8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bffa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800bffe:	2002      	movs	r0, #2
 800c000:	801a      	strh	r2, [r3, #0]
 800c002:	6038      	str	r0, [r7, #0]
 800c004:	f001 fb96 	bl	800d734 <_ZN8touchgfx6Screen4drawEv>
 800c008:	e7ec      	b.n	800bfe4 <_ZN8touchgfx11ApplicationC1Ev+0x50>
 800c00a:	bf00      	nop
 800c00c:	080147c8 	.word	0x080147c8
 800c010:	b5e8b5cd 	.word	0xb5e8b5cd
 800c014:	f407a5c2 	.word	0xf407a5c2
 800c018:	20012674 	.word	0x20012674
 800c01c:	20000084 	.word	0x20000084
 800c020:	20012684 	.word	0x20012684
 800c024:	20012678 	.word	0x20012678

0800c028 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 800c028:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 800c02c:	3b01      	subs	r3, #1
 800c02e:	b29b      	uxth	r3, r3
 800c030:	428b      	cmp	r3, r1
 800c032:	b510      	push	{r4, lr}
 800c034:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40
 800c038:	d908      	bls.n	800c04c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 800c03a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800c03e:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 800c042:	681a      	ldr	r2, [r3, #0]
 800c044:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 800c048:	685a      	ldr	r2, [r3, #4]
 800c04a:	6062      	str	r2, [r4, #4]
 800c04c:	bd10      	pop	{r4, pc}
	...

0800c050 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 800c050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c054:	4b92      	ldr	r3, [pc, #584]	@ (800c2a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x250>)
 800c056:	b08f      	sub	sp, #60	@ 0x3c
 800c058:	ac0a      	add	r4, sp, #40	@ 0x28
 800c05a:	e884 0006 	stmia.w	r4, {r1, r2}
 800c05e:	f9b3 2000 	ldrsh.w	r2, [r3]
 800c062:	4b90      	ldr	r3, [pc, #576]	@ (800c2a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x254>)
 800c064:	4683      	mov	fp, r0
 800c066:	f9b3 1000 	ldrsh.w	r1, [r3]
 800c06a:	4620      	mov	r0, r4
 800c06c:	f7ff fdeb 	bl	800bc46 <_ZN8touchgfx4Rect10restrictToEss>
 800c070:	4620      	mov	r0, r4
 800c072:	f7fc fc2c 	bl	80088ce <_ZNK8touchgfx4Rect7isEmptyEv>
 800c076:	2800      	cmp	r0, #0
 800c078:	d170      	bne.n	800c15c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x10c>
 800c07a:	4b8b      	ldr	r3, [pc, #556]	@ (800c2a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>)
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800c082:	2b02      	cmp	r3, #2
 800c084:	d06a      	beq.n	800c15c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x10c>
 800c086:	9403      	str	r4, [sp, #12]
 800c088:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 800c08c:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 800c090:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 800c094:	35a4      	adds	r5, #164	@ 0xa4
 800c096:	9301      	str	r3, [sp, #4]
 800c098:	b15c      	cbz	r4, 800c0b2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62>
 800c09a:	4629      	mov	r1, r5
 800c09c:	9803      	ldr	r0, [sp, #12]
 800c09e:	f7ff fe23 	bl	800bce8 <_ZNK8touchgfx4Rect8includesERKS0_>
 800c0a2:	3c01      	subs	r4, #1
 800c0a4:	b118      	cbz	r0, 800c0ae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5e>
 800c0a6:	b2a1      	uxth	r1, r4
 800c0a8:	9801      	ldr	r0, [sp, #4]
 800c0aa:	f7ff ffbd 	bl	800c028 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800c0ae:	3d08      	subs	r5, #8
 800c0b0:	e7f2      	b.n	800c098 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x48>
 800c0b2:	f8bb a0ec 	ldrh.w	sl, [fp, #236]	@ 0xec
 800c0b6:	f8cd a010 	str.w	sl, [sp, #16]
 800c0ba:	f10a 33ff 	add.w	r3, sl, #4294967295
 800c0be:	9302      	str	r3, [sp, #8]
 800c0c0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800c0c4:	f103 04a4 	add.w	r4, r3, #164	@ 0xa4
 800c0c8:	9306      	str	r3, [sp, #24]
 800c0ca:	445c      	add	r4, fp
 800c0cc:	2500      	movs	r5, #0
 800c0ce:	4626      	mov	r6, r4
 800c0d0:	f8cd a014 	str.w	sl, [sp, #20]
 800c0d4:	462f      	mov	r7, r5
 800c0d6:	9b05      	ldr	r3, [sp, #20]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d073      	beq.n	800c1c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x174>
 800c0dc:	9903      	ldr	r1, [sp, #12]
 800c0de:	4630      	mov	r0, r6
 800c0e0:	f7ff fd8f 	bl	800bc02 <_ZNK8touchgfx4Rect9intersectERKS0_>
 800c0e4:	b350      	cbz	r0, 800c13c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xec>
 800c0e6:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 800c0ea:	f9b6 c000 	ldrsh.w	ip, [r6]
 800c0ee:	f9bd 802a 	ldrsh.w	r8, [sp, #42]	@ 0x2a
 800c0f2:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 800c0f6:	45e6      	cmp	lr, ip
 800c0f8:	db33      	blt.n	800c162 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x112>
 800c0fa:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 800c0fe:	88b3      	ldrh	r3, [r6, #4]
 800c100:	4472      	add	r2, lr
 800c102:	4463      	add	r3, ip
 800c104:	b212      	sxth	r2, r2
 800c106:	b21b      	sxth	r3, r3
 800c108:	429a      	cmp	r2, r3
 800c10a:	dc2a      	bgt.n	800c162 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x112>
 800c10c:	88f3      	ldrh	r3, [r6, #6]
 800c10e:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 800c112:	fa1f f289 	uxth.w	r2, r9
 800c116:	4413      	add	r3, r2
 800c118:	b29b      	uxth	r3, r3
 800c11a:	45c8      	cmp	r8, r9
 800c11c:	fa1f fc88 	uxth.w	ip, r8
 800c120:	fa0f fe83 	sxth.w	lr, r3
 800c124:	db0f      	blt.n	800c146 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf6>
 800c126:	eba3 030c 	sub.w	r3, r3, ip
 800c12a:	1ac9      	subs	r1, r1, r3
 800c12c:	b209      	sxth	r1, r1
 800c12e:	2900      	cmp	r1, #0
 800c130:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 800c134:	dd12      	ble.n	800c15c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x10c>
 800c136:	f8ad e02a 	strh.w	lr, [sp, #42]	@ 0x2a
 800c13a:	4605      	mov	r5, r0
 800c13c:	9b05      	ldr	r3, [sp, #20]
 800c13e:	3b01      	subs	r3, #1
 800c140:	9305      	str	r3, [sp, #20]
 800c142:	3e08      	subs	r6, #8
 800c144:	e7c7      	b.n	800c0d6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x86>
 800c146:	4461      	add	r1, ip
 800c148:	b209      	sxth	r1, r1
 800c14a:	4571      	cmp	r1, lr
 800c14c:	dc38      	bgt.n	800c1c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x170>
 800c14e:	eba2 020c 	sub.w	r2, r2, ip
 800c152:	b212      	sxth	r2, r2
 800c154:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 800c158:	2a00      	cmp	r2, #0
 800c15a:	dcee      	bgt.n	800c13a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 800c15c:	b00f      	add	sp, #60	@ 0x3c
 800c15e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c162:	45c8      	cmp	r8, r9
 800c164:	db2c      	blt.n	800c1c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x170>
 800c166:	88f3      	ldrh	r3, [r6, #6]
 800c168:	4499      	add	r9, r3
 800c16a:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 800c16e:	4498      	add	r8, r3
 800c170:	fa0f f989 	sxth.w	r9, r9
 800c174:	fa0f f888 	sxth.w	r8, r8
 800c178:	45c1      	cmp	r9, r8
 800c17a:	db21      	blt.n	800c1c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x170>
 800c17c:	88b3      	ldrh	r3, [r6, #4]
 800c17e:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 800c182:	fa1f f28c 	uxth.w	r2, ip
 800c186:	4413      	add	r3, r2
 800c188:	b29b      	uxth	r3, r3
 800c18a:	45e6      	cmp	lr, ip
 800c18c:	fa1f f88e 	uxth.w	r8, lr
 800c190:	fa0f f983 	sxth.w	r9, r3
 800c194:	db0a      	blt.n	800c1ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x15c>
 800c196:	eba3 0308 	sub.w	r3, r3, r8
 800c19a:	1ac9      	subs	r1, r1, r3
 800c19c:	b209      	sxth	r1, r1
 800c19e:	2900      	cmp	r1, #0
 800c1a0:	f8ad 102c 	strh.w	r1, [sp, #44]	@ 0x2c
 800c1a4:	ddda      	ble.n	800c15c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x10c>
 800c1a6:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 800c1aa:	e7c6      	b.n	800c13a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 800c1ac:	4441      	add	r1, r8
 800c1ae:	b209      	sxth	r1, r1
 800c1b0:	4549      	cmp	r1, r9
 800c1b2:	dc05      	bgt.n	800c1c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x170>
 800c1b4:	eba2 0208 	sub.w	r2, r2, r8
 800c1b8:	b212      	sxth	r2, r2
 800c1ba:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 800c1be:	e7cb      	b.n	800c158 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x108>
 800c1c0:	4607      	mov	r7, r0
 800c1c2:	e7bb      	b.n	800c13c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xec>
 800c1c4:	2d00      	cmp	r5, #0
 800c1c6:	d181      	bne.n	800c0cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7c>
 800c1c8:	2f00      	cmp	r7, #0
 800c1ca:	f000 81df 	beq.w	800c58c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 800c1ce:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	@ 0x28
 800c1d2:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	@ 0x2a
 800c1d6:	f8bd a02e 	ldrh.w	sl, [sp, #46]	@ 0x2e
 800c1da:	b2b3      	uxth	r3, r6
 800c1dc:	9305      	str	r3, [sp, #20]
 800c1de:	9a05      	ldr	r2, [sp, #20]
 800c1e0:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 800c1e4:	4413      	add	r3, r2
 800c1e6:	b2ba      	uxth	r2, r7
 800c1e8:	4492      	add	sl, r2
 800c1ea:	b29b      	uxth	r3, r3
 800c1ec:	fa1f fa8a 	uxth.w	sl, sl
 800c1f0:	fa0f f883 	sxth.w	r8, r3
 800c1f4:	fa0f f98a 	sxth.w	r9, sl
 800c1f8:	e9cd 2307 	strd	r2, r3, [sp, #28]
 800c1fc:	9b04      	ldr	r3, [sp, #16]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d054      	beq.n	800c2ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x25c>
 800c202:	9903      	ldr	r1, [sp, #12]
 800c204:	4620      	mov	r0, r4
 800c206:	f7ff fcfc 	bl	800bc02 <_ZNK8touchgfx4Rect9intersectERKS0_>
 800c20a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800c20e:	b1c0      	cbz	r0, 800c242 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 800c210:	f9b4 e000 	ldrsh.w	lr, [r4]
 800c214:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800c218:	4576      	cmp	r6, lr
 800c21a:	dc22      	bgt.n	800c262 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x212>
 800c21c:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 800c220:	44f4      	add	ip, lr
 800c222:	fa0f fc8c 	sxth.w	ip, ip
 800c226:	45e0      	cmp	r8, ip
 800c228:	db1b      	blt.n	800c262 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x212>
 800c22a:	428f      	cmp	r7, r1
 800c22c:	fa1f fc81 	uxth.w	ip, r1
 800c230:	88e1      	ldrh	r1, [r4, #6]
 800c232:	dc0d      	bgt.n	800c250 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x200>
 800c234:	ebaa 0c0c 	sub.w	ip, sl, ip
 800c238:	eba1 010c 	sub.w	r1, r1, ip
 800c23c:	f8a4 9002 	strh.w	r9, [r4, #2]
 800c240:	80e1      	strh	r1, [r4, #6]
 800c242:	4628      	mov	r0, r5
 800c244:	9904      	ldr	r1, [sp, #16]
 800c246:	3901      	subs	r1, #1
 800c248:	9104      	str	r1, [sp, #16]
 800c24a:	3c08      	subs	r4, #8
 800c24c:	4605      	mov	r5, r0
 800c24e:	e7d3      	b.n	800c1f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a8>
 800c250:	4461      	add	r1, ip
 800c252:	b209      	sxth	r1, r1
 800c254:	4549      	cmp	r1, r9
 800c256:	dcf5      	bgt.n	800c244 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 800c258:	eba2 0c0c 	sub.w	ip, r2, ip
 800c25c:	f8a4 c006 	strh.w	ip, [r4, #6]
 800c260:	e7ef      	b.n	800c242 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 800c262:	428f      	cmp	r7, r1
 800c264:	dcee      	bgt.n	800c244 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 800c266:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 800c26a:	4461      	add	r1, ip
 800c26c:	b209      	sxth	r1, r1
 800c26e:	4589      	cmp	r9, r1
 800c270:	dbe8      	blt.n	800c244 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 800c272:	4576      	cmp	r6, lr
 800c274:	fa1f fc8e 	uxth.w	ip, lr
 800c278:	88a1      	ldrh	r1, [r4, #4]
 800c27a:	dc07      	bgt.n	800c28c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x23c>
 800c27c:	eba3 0c0c 	sub.w	ip, r3, ip
 800c280:	eba1 010c 	sub.w	r1, r1, ip
 800c284:	f8a4 8000 	strh.w	r8, [r4]
 800c288:	80a1      	strh	r1, [r4, #4]
 800c28a:	e7da      	b.n	800c242 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 800c28c:	4461      	add	r1, ip
 800c28e:	b209      	sxth	r1, r1
 800c290:	4588      	cmp	r8, r1
 800c292:	dbd7      	blt.n	800c244 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 800c294:	9905      	ldr	r1, [sp, #20]
 800c296:	eba1 0c0c 	sub.w	ip, r1, ip
 800c29a:	f8a4 c004 	strh.w	ip, [r4, #4]
 800c29e:	e7d0      	b.n	800c242 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 800c2a0:	2001262e 	.word	0x2001262e
 800c2a4:	2001262c 	.word	0x2001262c
 800c2a8:	20012638 	.word	0x20012638
 800c2ac:	2d00      	cmp	r5, #0
 800c2ae:	f000 816d 	beq.w	800c58c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 800c2b2:	9b06      	ldr	r3, [sp, #24]
 800c2b4:	445b      	add	r3, fp
 800c2b6:	461c      	mov	r4, r3
 800c2b8:	9b02      	ldr	r3, [sp, #8]
 800c2ba:	3301      	adds	r3, #1
 800c2bc:	f000 8166 	beq.w	800c58c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 800c2c0:	f104 05a4 	add.w	r5, r4, #164	@ 0xa4
 800c2c4:	4629      	mov	r1, r5
 800c2c6:	9803      	ldr	r0, [sp, #12]
 800c2c8:	f7ff fd0e 	bl	800bce8 <_ZNK8touchgfx4Rect8includesERKS0_>
 800c2cc:	b120      	cbz	r0, 800c2d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x288>
 800c2ce:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 800c2d2:	9801      	ldr	r0, [sp, #4]
 800c2d4:	f7ff fea8 	bl	800c028 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800c2d8:	9903      	ldr	r1, [sp, #12]
 800c2da:	4628      	mov	r0, r5
 800c2dc:	f7ff fc91 	bl	800bc02 <_ZNK8touchgfx4Rect9intersectERKS0_>
 800c2e0:	2800      	cmp	r0, #0
 800c2e2:	f000 809c 	beq.w	800c41e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ce>
 800c2e6:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	@ 0xa4
 800c2ea:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 800c2ee:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 800c2f2:	9309      	str	r3, [sp, #36]	@ 0x24
 800c2f4:	fa1f f189 	uxth.w	r1, r9
 800c2f8:	eb01 0c03 	add.w	ip, r1, r3
 800c2fc:	fa1f fa8c 	uxth.w	sl, ip
 800c300:	f8bd c02c 	ldrh.w	ip, [sp, #44]	@ 0x2c
 800c304:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	@ 0x2a
 800c308:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	@ 0xa6
 800c30c:	b283      	uxth	r3, r0
 800c30e:	eb03 050c 	add.w	r5, r3, ip
 800c312:	b2ad      	uxth	r5, r5
 800c314:	9505      	str	r5, [sp, #20]
 800c316:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 800c31a:	9504      	str	r5, [sp, #16]
 800c31c:	4548      	cmp	r0, r9
 800c31e:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	@ 0xec
 800c322:	f340 8099 	ble.w	800c458 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x408>
 800c326:	1a5b      	subs	r3, r3, r1
 800c328:	b29b      	uxth	r3, r3
 800c32a:	4596      	cmp	lr, r2
 800c32c:	fa0f f08a 	sxth.w	r0, sl
 800c330:	b21e      	sxth	r6, r3
 800c332:	dd2e      	ble.n	800c392 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x342>
 800c334:	9f02      	ldr	r7, [sp, #8]
 800c336:	f8bd 402e 	ldrh.w	r4, [sp, #46]	@ 0x2e
 800c33a:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 800c33e:	9f04      	ldr	r7, [sp, #16]
 800c340:	1a3f      	subs	r7, r7, r0
 800c342:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	@ 0xb2
 800c346:	fa1f fe8e 	uxth.w	lr, lr
 800c34a:	b292      	uxth	r2, r2
 800c34c:	ebae 0102 	sub.w	r1, lr, r2
 800c350:	44a6      	add	lr, r4
 800c352:	4402      	add	r2, r0
 800c354:	b289      	uxth	r1, r1
 800c356:	fa0f fe8e 	sxth.w	lr, lr
 800c35a:	b212      	sxth	r2, r2
 800c35c:	b20d      	sxth	r5, r1
 800c35e:	ebae 0202 	sub.w	r2, lr, r2
 800c362:	436f      	muls	r7, r5
 800c364:	4372      	muls	r2, r6
 800c366:	4297      	cmp	r7, r2
 800c368:	db09      	blt.n	800c37e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x32e>
 800c36a:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	@ 0xac
 800c36e:	f8a8 50b2 	strh.w	r5, [r8, #178]	@ 0xb2
 800c372:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 800c376:	449c      	add	ip, r3
 800c378:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 800c37c:	e684      	b.n	800c088 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 800c37e:	4421      	add	r1, r4
 800c380:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	@ 0xae
 800c384:	f8a8 60b0 	strh.w	r6, [r8, #176]	@ 0xb0
 800c388:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 800c38c:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 800c390:	e67a      	b.n	800c088 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 800c392:	9f04      	ldr	r7, [sp, #16]
 800c394:	42b8      	cmp	r0, r7
 800c396:	da27      	bge.n	800c3e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x398>
 800c398:	9902      	ldr	r1, [sp, #8]
 800c39a:	f8bd 502e 	ldrh.w	r5, [sp, #46]	@ 0x2e
 800c39e:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 800c3a2:	eb05 010e 	add.w	r1, r5, lr
 800c3a6:	fa1f f881 	uxth.w	r8, r1
 800c3aa:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	@ 0xb2
 800c3ae:	4411      	add	r1, r2
 800c3b0:	eba1 0108 	sub.w	r1, r1, r8
 800c3b4:	b289      	uxth	r1, r1
 800c3b6:	fa0f f988 	sxth.w	r9, r8
 800c3ba:	eba2 020e 	sub.w	r2, r2, lr
 800c3be:	fa0f f881 	sxth.w	r8, r1
 800c3c2:	1a3f      	subs	r7, r7, r0
 800c3c4:	4372      	muls	r2, r6
 800c3c6:	fb08 f707 	mul.w	r7, r8, r7
 800c3ca:	42ba      	cmp	r2, r7
 800c3cc:	dc06      	bgt.n	800c3dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38c>
 800c3ce:	f8a4 90ae 	strh.w	r9, [r4, #174]	@ 0xae
 800c3d2:	f8a4 80b2 	strh.w	r8, [r4, #178]	@ 0xb2
 800c3d6:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	@ 0xac
 800c3da:	e7ca      	b.n	800c372 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x322>
 800c3dc:	f8a4 60b0 	strh.w	r6, [r4, #176]	@ 0xb0
 800c3e0:	4429      	add	r1, r5
 800c3e2:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 800c3e6:	e64f      	b.n	800c088 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 800c3e8:	9805      	ldr	r0, [sp, #20]
 800c3ea:	ebaa 0000 	sub.w	r0, sl, r0
 800c3ee:	b280      	uxth	r0, r0
 800c3f0:	2d06      	cmp	r5, #6
 800c3f2:	fa0f fe80 	sxth.w	lr, r0
 800c3f6:	d817      	bhi.n	800c428 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3d8>
 800c3f8:	9b04      	ldr	r3, [sp, #16]
 800c3fa:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 800c3fe:	1c6b      	adds	r3, r5, #1
 800c400:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	@ 0xaa
 800c404:	f8a4 e0a8 	strh.w	lr, [r4, #168]	@ 0xa8
 800c408:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 800c40c:	9b01      	ldr	r3, [sp, #4]
 800c40e:	9801      	ldr	r0, [sp, #4]
 800c410:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800c414:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 800c418:	805a      	strh	r2, [r3, #2]
 800c41a:	809e      	strh	r6, [r3, #4]
 800c41c:	80d9      	strh	r1, [r3, #6]
 800c41e:	9b02      	ldr	r3, [sp, #8]
 800c420:	3b01      	subs	r3, #1
 800c422:	9302      	str	r3, [sp, #8]
 800c424:	3c08      	subs	r4, #8
 800c426:	e747      	b.n	800c2b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x268>
 800c428:	9a02      	ldr	r2, [sp, #8]
 800c42a:	45b6      	cmp	lr, r6
 800c42c:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800c430:	db0d      	blt.n	800c44e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3fe>
 800c432:	449c      	add	ip, r3
 800c434:	fa1f fc8c 	uxth.w	ip, ip
 800c438:	445a      	add	r2, fp
 800c43a:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 800c43e:	448c      	add	ip, r1
 800c440:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 800c444:	f8a2 c0ac 	strh.w	ip, [r2, #172]	@ 0xac
 800c448:	f8a2 e0b0 	strh.w	lr, [r2, #176]	@ 0xb0
 800c44c:	e61c      	b.n	800c088 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 800c44e:	445a      	add	r2, fp
 800c450:	4484      	add	ip, r0
 800c452:	f8a2 60b0 	strh.w	r6, [r2, #176]	@ 0xb0
 800c456:	e78f      	b.n	800c378 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x328>
 800c458:	f8bd 602e 	ldrh.w	r6, [sp, #46]	@ 0x2e
 800c45c:	fa1f f18e 	uxth.w	r1, lr
 800c460:	eb01 0806 	add.w	r8, r1, r6
 800c464:	b293      	uxth	r3, r2
 800c466:	fa1f f888 	uxth.w	r8, r8
 800c46a:	9306      	str	r3, [sp, #24]
 800c46c:	fa0f f388 	sxth.w	r3, r8
 800c470:	9307      	str	r3, [sp, #28]
 800c472:	9f06      	ldr	r7, [sp, #24]
 800c474:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 800c478:	443b      	add	r3, r7
 800c47a:	b29b      	uxth	r3, r3
 800c47c:	4596      	cmp	lr, r2
 800c47e:	9308      	str	r3, [sp, #32]
 800c480:	da24      	bge.n	800c4cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x47c>
 800c482:	9905      	ldr	r1, [sp, #20]
 800c484:	eba3 0308 	sub.w	r3, r3, r8
 800c488:	ebaa 0401 	sub.w	r4, sl, r1
 800c48c:	b2a4      	uxth	r4, r4
 800c48e:	b29b      	uxth	r3, r3
 800c490:	b225      	sxth	r5, r4
 800c492:	b219      	sxth	r1, r3
 800c494:	eba2 020e 	sub.w	r2, r2, lr
 800c498:	eba9 0000 	sub.w	r0, r9, r0
 800c49c:	436a      	muls	r2, r5
 800c49e:	4348      	muls	r0, r1
 800c4a0:	4282      	cmp	r2, r0
 800c4a2:	9a02      	ldr	r2, [sp, #8]
 800c4a4:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800c4a8:	445a      	add	r2, fp
 800c4aa:	dc06      	bgt.n	800c4ba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46a>
 800c4ac:	9b07      	ldr	r3, [sp, #28]
 800c4ae:	f8a2 10b2 	strh.w	r1, [r2, #178]	@ 0xb2
 800c4b2:	f8a2 30ae 	strh.w	r3, [r2, #174]	@ 0xae
 800c4b6:	44a4      	add	ip, r4
 800c4b8:	e75e      	b.n	800c378 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x328>
 800c4ba:	9904      	ldr	r1, [sp, #16]
 800c4bc:	f8a2 50b0 	strh.w	r5, [r2, #176]	@ 0xb0
 800c4c0:	f8a2 10ac 	strh.w	r1, [r2, #172]	@ 0xac
 800c4c4:	4433      	add	r3, r6
 800c4c6:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 800c4ca:	e5dd      	b.n	800c088 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 800c4cc:	9f06      	ldr	r7, [sp, #24]
 800c4ce:	9b04      	ldr	r3, [sp, #16]
 800c4d0:	1bc9      	subs	r1, r1, r7
 800c4d2:	fa0f f78a 	sxth.w	r7, sl
 800c4d6:	b289      	uxth	r1, r1
 800c4d8:	429f      	cmp	r7, r3
 800c4da:	fa0f fe81 	sxth.w	lr, r1
 800c4de:	dd23      	ble.n	800c528 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4d8>
 800c4e0:	9a05      	ldr	r2, [sp, #20]
 800c4e2:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 800c4e6:	9d07      	ldr	r5, [sp, #28]
 800c4e8:	ebaa 0202 	sub.w	r2, sl, r2
 800c4ec:	b292      	uxth	r2, r2
 800c4ee:	eba5 0a03 	sub.w	sl, r5, r3
 800c4f2:	b214      	sxth	r4, r2
 800c4f4:	eba9 0000 	sub.w	r0, r9, r0
 800c4f8:	9b02      	ldr	r3, [sp, #8]
 800c4fa:	fb0e f000 	mul.w	r0, lr, r0
 800c4fe:	fb04 fa0a 	mul.w	sl, r4, sl
 800c502:	00db      	lsls	r3, r3, #3
 800c504:	4550      	cmp	r0, sl
 800c506:	445b      	add	r3, fp
 800c508:	db03      	blt.n	800c512 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c2>
 800c50a:	f8a3 e0b2 	strh.w	lr, [r3, #178]	@ 0xb2
 800c50e:	4494      	add	ip, r2
 800c510:	e732      	b.n	800c378 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x328>
 800c512:	9a04      	ldr	r2, [sp, #16]
 800c514:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 800c518:	f8a3 40b0 	strh.w	r4, [r3, #176]	@ 0xb0
 800c51c:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	@ 0xae
 800c520:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 800c524:	4431      	add	r1, r6
 800c526:	e75c      	b.n	800c3e2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x392>
 800c528:	9b08      	ldr	r3, [sp, #32]
 800c52a:	eba3 0308 	sub.w	r3, r3, r8
 800c52e:	b29b      	uxth	r3, r3
 800c530:	2d06      	cmp	r5, #6
 800c532:	b218      	sxth	r0, r3
 800c534:	d813      	bhi.n	800c55e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x50e>
 800c536:	9b07      	ldr	r3, [sp, #28]
 800c538:	f8a4 30a6 	strh.w	r3, [r4, #166]	@ 0xa6
 800c53c:	1c6b      	adds	r3, r5, #1
 800c53e:	f8a4 00aa 	strh.w	r0, [r4, #170]	@ 0xaa
 800c542:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 800c546:	9b01      	ldr	r3, [sp, #4]
 800c548:	9901      	ldr	r1, [sp, #4]
 800c54a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800c54e:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 800c552:	805a      	strh	r2, [r3, #2]
 800c554:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c556:	809a      	strh	r2, [r3, #4]
 800c558:	f8a3 e006 	strh.w	lr, [r3, #6]
 800c55c:	e75f      	b.n	800c41e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ce>
 800c55e:	9c02      	ldr	r4, [sp, #8]
 800c560:	4570      	cmp	r0, lr
 800c562:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 800c566:	db0d      	blt.n	800c584 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x534>
 800c568:	4431      	add	r1, r6
 800c56a:	9b06      	ldr	r3, [sp, #24]
 800c56c:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 800c570:	b289      	uxth	r1, r1
 800c572:	445c      	add	r4, fp
 800c574:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 800c578:	4419      	add	r1, r3
 800c57a:	f8a4 10ae 	strh.w	r1, [r4, #174]	@ 0xae
 800c57e:	f8a4 00b2 	strh.w	r0, [r4, #178]	@ 0xb2
 800c582:	e581      	b.n	800c088 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 800c584:	445c      	add	r4, fp
 800c586:	f8a4 e0b2 	strh.w	lr, [r4, #178]	@ 0xb2
 800c58a:	e79b      	b.n	800c4c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x474>
 800c58c:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 800c590:	1e65      	subs	r5, r4, #1
 800c592:	b2ad      	uxth	r5, r5
 800c594:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 800c598:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 800c59c:	42b5      	cmp	r5, r6
 800c59e:	d044      	beq.n	800c62a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5da>
 800c5a0:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 800c5a4:	f9b4 00a6 	ldrsh.w	r0, [r4, #166]	@ 0xa6
 800c5a8:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 800c5ac:	f9b4 70a4 	ldrsh.w	r7, [r4, #164]	@ 0xa4
 800c5b0:	4282      	cmp	r2, r0
 800c5b2:	d11f      	bne.n	800c5f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a4>
 800c5b4:	f9bd c02e 	ldrsh.w	ip, [sp, #46]	@ 0x2e
 800c5b8:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 800c5bc:	459c      	cmp	ip, r3
 800c5be:	d119      	bne.n	800c5f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a4>
 800c5c0:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	@ 0xa8
 800c5c4:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 800c5c8:	19d8      	adds	r0, r3, r7
 800c5ca:	b200      	sxth	r0, r0
 800c5cc:	4288      	cmp	r0, r1
 800c5ce:	d109      	bne.n	800c5e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 800c5d0:	f8ad 7028 	strh.w	r7, [sp, #40]	@ 0x28
 800c5d4:	4413      	add	r3, r2
 800c5d6:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 800c5da:	4629      	mov	r1, r5
 800c5dc:	9801      	ldr	r0, [sp, #4]
 800c5de:	f7ff fd23 	bl	800c028 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800c5e2:	e003      	b.n	800c5ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x59c>
 800c5e4:	4411      	add	r1, r2
 800c5e6:	b209      	sxth	r1, r1
 800c5e8:	42b9      	cmp	r1, r7
 800c5ea:	d0f3      	beq.n	800c5d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x584>
 800c5ec:	3d01      	subs	r5, #1
 800c5ee:	b2ad      	uxth	r5, r5
 800c5f0:	3c08      	subs	r4, #8
 800c5f2:	e7d3      	b.n	800c59c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x54c>
 800c5f4:	42b9      	cmp	r1, r7
 800c5f6:	d1f9      	bne.n	800c5ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x59c>
 800c5f8:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	@ 0x2c
 800c5fc:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 800c600:	4299      	cmp	r1, r3
 800c602:	d1f3      	bne.n	800c5ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x59c>
 800c604:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 800c608:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 800c60c:	181f      	adds	r7, r3, r0
 800c60e:	b23f      	sxth	r7, r7
 800c610:	42ba      	cmp	r2, r7
 800c612:	d105      	bne.n	800c620 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5d0>
 800c614:	f8ad 002a 	strh.w	r0, [sp, #42]	@ 0x2a
 800c618:	440b      	add	r3, r1
 800c61a:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 800c61e:	e7dc      	b.n	800c5da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58a>
 800c620:	440a      	add	r2, r1
 800c622:	b212      	sxth	r2, r2
 800c624:	4290      	cmp	r0, r2
 800c626:	d1e1      	bne.n	800c5ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x59c>
 800c628:	e7f6      	b.n	800c618 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c8>
 800c62a:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	@ 0xec
 800c62e:	2e07      	cmp	r6, #7
 800c630:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 800c634:	d812      	bhi.n	800c65c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x60c>
 800c636:	1c75      	adds	r5, r6, #1
 800c638:	f8ab 50ec 	strh.w	r5, [fp, #236]	@ 0xec
 800c63c:	9d01      	ldr	r5, [sp, #4]
 800c63e:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 800c642:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 800c646:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 800c64a:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 800c64e:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 800c652:	442c      	add	r4, r5
 800c654:	8061      	strh	r1, [r4, #2]
 800c656:	80a2      	strh	r2, [r4, #4]
 800c658:	80e3      	strh	r3, [r4, #6]
 800c65a:	e57f      	b.n	800c15c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x10c>
 800c65c:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 800c660:	3e01      	subs	r6, #1
 800c662:	445c      	add	r4, fp
 800c664:	f06f 4a00 	mvn.w	sl, #2147483648	@ 0x80000000
 800c668:	f04f 37ff 	mov.w	r7, #4294967295
 800c66c:	2500      	movs	r5, #0
 800c66e:	9305      	str	r3, [sp, #20]
 800c670:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 800c674:	9302      	str	r3, [sp, #8]
 800c676:	1e72      	subs	r2, r6, #1
 800c678:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 800c67c:	9304      	str	r3, [sp, #16]
 800c67e:	4691      	mov	r9, r2
 800c680:	f104 03a4 	add.w	r3, r4, #164	@ 0xa4
 800c684:	f1b9 3fff 	cmp.w	r9, #4294967295
 800c688:	bf14      	ite	ne
 800c68a:	9905      	ldrne	r1, [sp, #20]
 800c68c:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 800c690:	6818      	ldr	r0, [r3, #0]
 800c692:	9207      	str	r2, [sp, #28]
 800c694:	bf18      	it	ne
 800c696:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 800c69a:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800c69e:	f8be 1006 	ldrh.w	r1, [lr, #6]
 800c6a2:	f8be 8004 	ldrh.w	r8, [lr, #4]
 800c6a6:	9306      	str	r3, [sp, #24]
 800c6a8:	fb18 f801 	smulbb	r8, r8, r1
 800c6ac:	6859      	ldr	r1, [r3, #4]
 800c6ae:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 800c6b2:	4671      	mov	r1, lr
 800c6b4:	a80c      	add	r0, sp, #48	@ 0x30
 800c6b6:	f7ff fb3d 	bl	800bd34 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800c6ba:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 800c6be:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 800c6c2:	9b04      	ldr	r3, [sp, #16]
 800c6c4:	9a02      	ldr	r2, [sp, #8]
 800c6c6:	fb10 f001 	smulbb	r0, r0, r1
 800c6ca:	fb02 8803 	mla	r8, r2, r3, r8
 800c6ce:	eba0 0108 	sub.w	r1, r0, r8
 800c6d2:	f04f 0c08 	mov.w	ip, #8
 800c6d6:	fb90 f0fc 	sdiv	r0, r0, ip
 800c6da:	4288      	cmp	r0, r1
 800c6dc:	dc20      	bgt.n	800c720 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6d0>
 800c6de:	4551      	cmp	r1, sl
 800c6e0:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800c6e4:	da03      	bge.n	800c6ee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x69e>
 800c6e6:	b1d9      	cbz	r1, 800c720 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6d0>
 800c6e8:	468a      	mov	sl, r1
 800c6ea:	464f      	mov	r7, r9
 800c6ec:	4635      	mov	r5, r6
 800c6ee:	f109 39ff 	add.w	r9, r9, #4294967295
 800c6f2:	f119 0f02 	cmn.w	r9, #2
 800c6f6:	d1c5      	bne.n	800c684 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x634>
 800c6f8:	4616      	mov	r6, r2
 800c6fa:	3201      	adds	r2, #1
 800c6fc:	f1a4 0408 	sub.w	r4, r4, #8
 800c700:	d1b6      	bne.n	800c670 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x620>
 800c702:	9b01      	ldr	r3, [sp, #4]
 800c704:	b2ac      	uxth	r4, r5
 800c706:	00ed      	lsls	r5, r5, #3
 800c708:	1958      	adds	r0, r3, r5
 800c70a:	1c7b      	adds	r3, r7, #1
 800c70c:	d10b      	bne.n	800c726 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6d6>
 800c70e:	4601      	mov	r1, r0
 800c710:	9803      	ldr	r0, [sp, #12]
 800c712:	f7ff fb0f 	bl	800bd34 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800c716:	4621      	mov	r1, r4
 800c718:	9801      	ldr	r0, [sp, #4]
 800c71a:	f7ff fc85 	bl	800c028 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800c71e:	e4b3      	b.n	800c088 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 800c720:	464f      	mov	r7, r9
 800c722:	4635      	mov	r5, r6
 800c724:	e7ed      	b.n	800c702 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6b2>
 800c726:	9b01      	ldr	r3, [sp, #4]
 800c728:	00ff      	lsls	r7, r7, #3
 800c72a:	19d9      	adds	r1, r3, r7
 800c72c:	f7ff fb02 	bl	800bd34 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800c730:	9b03      	ldr	r3, [sp, #12]
 800c732:	cb03      	ldmia	r3!, {r0, r1}
 800c734:	445f      	add	r7, fp
 800c736:	445d      	add	r5, fp
 800c738:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
 800c73c:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 800c740:	f855 0fac 	ldr.w	r0, [r5, #172]!
 800c744:	9b03      	ldr	r3, [sp, #12]
 800c746:	6869      	ldr	r1, [r5, #4]
 800c748:	c303      	stmia	r3!, {r0, r1}
 800c74a:	e7e4      	b.n	800c716 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c6>

0800c74c <_ZN8touchgfx11Application15drawCachedAreasEv>:
 800c74c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c750:	f500 7698 	add.w	r6, r0, #304	@ 0x130
 800c754:	b0a1      	sub	sp, #132	@ 0x84
 800c756:	4604      	mov	r4, r0
 800c758:	4630      	mov	r0, r6
 800c75a:	f7fc f8b8 	bl	80088ce <_ZNK8touchgfx4Rect7isEmptyEv>
 800c75e:	4605      	mov	r5, r0
 800c760:	b948      	cbnz	r0, 800c776 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a>
 800c762:	6823      	ldr	r3, [r4, #0]
 800c764:	e896 0006 	ldmia.w	r6, {r1, r2}
 800c768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c76a:	4620      	mov	r0, r4
 800c76c:	4798      	blx	r3
 800c76e:	f8c4 5130 	str.w	r5, [r4, #304]	@ 0x130
 800c772:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
 800c776:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d149      	bne.n	800c812 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc6>
 800c77e:	4bb1      	ldr	r3, [pc, #708]	@ (800ca44 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f8>)
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	f893 7048 	ldrb.w	r7, [r3, #72]	@ 0x48
 800c786:	1ebb      	subs	r3, r7, #2
 800c788:	425f      	negs	r7, r3
 800c78a:	415f      	adcs	r7, r3
 800c78c:	4bae      	ldr	r3, [pc, #696]	@ (800ca48 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2fc>)
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	2b00      	cmp	r3, #0
 800c792:	d040      	beq.n	800c816 <_ZN8touchgfx11Application15drawCachedAreasEv+0xca>
 800c794:	4dad      	ldr	r5, [pc, #692]	@ (800ca4c <_ZN8touchgfx11Application15drawCachedAreasEv+0x300>)
 800c796:	4628      	mov	r0, r5
 800c798:	f7fc f899 	bl	80088ce <_ZNK8touchgfx4Rect7isEmptyEv>
 800c79c:	4606      	mov	r6, r0
 800c79e:	2800      	cmp	r0, #0
 800c7a0:	d139      	bne.n	800c816 <_ZN8touchgfx11Application15drawCachedAreasEv+0xca>
 800c7a2:	4628      	mov	r0, r5
 800c7a4:	f7ff f95a 	bl	800ba5c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 800c7a8:	6823      	ldr	r3, [r4, #0]
 800c7aa:	6829      	ldr	r1, [r5, #0]
 800c7ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c7ae:	686a      	ldr	r2, [r5, #4]
 800c7b0:	4620      	mov	r0, r4
 800c7b2:	4798      	blx	r3
 800c7b4:	802e      	strh	r6, [r5, #0]
 800c7b6:	806e      	strh	r6, [r5, #2]
 800c7b8:	80ae      	strh	r6, [r5, #4]
 800c7ba:	80ee      	strh	r6, [r5, #6]
 800c7bc:	af0f      	add	r7, sp, #60	@ 0x3c
 800c7be:	4ea4      	ldr	r6, [pc, #656]	@ (800ca50 <_ZN8touchgfx11Application15drawCachedAreasEv+0x304>)
 800c7c0:	4638      	mov	r0, r7
 800c7c2:	f7ff fbd9 	bl	800bf78 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 800c7c6:	8835      	ldrh	r5, [r6, #0]
 800c7c8:	f8b4 c0ec 	ldrh.w	ip, [r4, #236]	@ 0xec
 800c7cc:	462b      	mov	r3, r5
 800c7ce:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 800c7d2:	4563      	cmp	r3, ip
 800c7d4:	d224      	bcs.n	800c820 <_ZN8touchgfx11Application15drawCachedAreasEv+0xd4>
 800c7d6:	f8bd 107c 	ldrh.w	r1, [sp, #124]	@ 0x7c
 800c7da:	2907      	cmp	r1, #7
 800c7dc:	d816      	bhi.n	800c80c <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 800c7de:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 800c7e2:	f930 9033 	ldrsh.w	r9, [r0, r3, lsl #3]
 800c7e6:	f9b2 a002 	ldrsh.w	sl, [r2, #2]
 800c7ea:	f9b2 8004 	ldrsh.w	r8, [r2, #4]
 800c7ee:	f9b2 e006 	ldrsh.w	lr, [r2, #6]
 800c7f2:	1c4a      	adds	r2, r1, #1
 800c7f4:	f8ad 207c 	strh.w	r2, [sp, #124]	@ 0x7c
 800c7f8:	eb07 02c1 	add.w	r2, r7, r1, lsl #3
 800c7fc:	f827 9031 	strh.w	r9, [r7, r1, lsl #3]
 800c800:	f8a2 a002 	strh.w	sl, [r2, #2]
 800c804:	f8a2 8004 	strh.w	r8, [r2, #4]
 800c808:	f8a2 e006 	strh.w	lr, [r2, #6]
 800c80c:	3301      	adds	r3, #1
 800c80e:	b29b      	uxth	r3, r3
 800c810:	e7df      	b.n	800c7d2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x86>
 800c812:	2701      	movs	r7, #1
 800c814:	e7ba      	b.n	800c78c <_ZN8touchgfx11Application15drawCachedAreasEv+0x40>
 800c816:	2f00      	cmp	r7, #0
 800c818:	d1d0      	bne.n	800c7bc <_ZN8touchgfx11Application15drawCachedAreasEv+0x70>
 800c81a:	b021      	add	sp, #132	@ 0x84
 800c81c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c820:	f8b4 312e 	ldrh.w	r3, [r4, #302]	@ 0x12e
 800c824:	42ab      	cmp	r3, r5
 800c826:	d90c      	bls.n	800c842 <_ZN8touchgfx11Application15drawCachedAreasEv+0xf6>
 800c828:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 800c82c:	6822      	ldr	r2, [r4, #0]
 800c82e:	f8d3 10ee 	ldr.w	r1, [r3, #238]	@ 0xee
 800c832:	6c17      	ldr	r7, [r2, #64]	@ 0x40
 800c834:	f8d3 20f2 	ldr.w	r2, [r3, #242]	@ 0xf2
 800c838:	4620      	mov	r0, r4
 800c83a:	3501      	adds	r5, #1
 800c83c:	47b8      	blx	r7
 800c83e:	b2ad      	uxth	r5, r5
 800c840:	e7ee      	b.n	800c820 <_ZN8touchgfx11Application15drawCachedAreasEv+0xd4>
 800c842:	4d80      	ldr	r5, [pc, #512]	@ (800ca44 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f8>)
 800c844:	6828      	ldr	r0, [r5, #0]
 800c846:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
 800c84a:	2b01      	cmp	r3, #1
 800c84c:	f040 813b 	bne.w	800cac6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x37a>
 800c850:	4a80      	ldr	r2, [pc, #512]	@ (800ca54 <_ZN8touchgfx11Application15drawCachedAreasEv+0x308>)
 800c852:	8833      	ldrh	r3, [r6, #0]
 800c854:	7812      	ldrb	r2, [r2, #0]
 800c856:	f8b4 00ec 	ldrh.w	r0, [r4, #236]	@ 0xec
 800c85a:	2a01      	cmp	r2, #1
 800c85c:	d014      	beq.n	800c888 <_ZN8touchgfx11Application15drawCachedAreasEv+0x13c>
 800c85e:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
 800c862:	32ae      	adds	r2, #174	@ 0xae
 800c864:	f04f 0900 	mov.w	r9, #0
 800c868:	4283      	cmp	r3, r0
 800c86a:	f102 0208 	add.w	r2, r2, #8
 800c86e:	f280 8082 	bge.w	800c976 <_ZN8touchgfx11Application15drawCachedAreasEv+0x22a>
 800c872:	f832 1c04 	ldrh.w	r1, [r2, #-4]
 800c876:	f832 7c08 	ldrh.w	r7, [r2, #-8]
 800c87a:	4439      	add	r1, r7
 800c87c:	b209      	sxth	r1, r1
 800c87e:	4589      	cmp	r9, r1
 800c880:	bfb8      	it	lt
 800c882:	4689      	movlt	r9, r1
 800c884:	3301      	adds	r3, #1
 800c886:	e7ef      	b.n	800c868 <_ZN8touchgfx11Application15drawCachedAreasEv+0x11c>
 800c888:	4f73      	ldr	r7, [pc, #460]	@ (800ca58 <_ZN8touchgfx11Application15drawCachedAreasEv+0x30c>)
 800c88a:	883a      	ldrh	r2, [r7, #0]
 800c88c:	4693      	mov	fp, r2
 800c88e:	4283      	cmp	r3, r0
 800c890:	da08      	bge.n	800c8a4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x158>
 800c892:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
 800c896:	3301      	adds	r3, #1
 800c898:	f9b1 10ac 	ldrsh.w	r1, [r1, #172]	@ 0xac
 800c89c:	458b      	cmp	fp, r1
 800c89e:	bfa8      	it	ge
 800c8a0:	468b      	movge	fp, r1
 800c8a2:	e7f4      	b.n	800c88e <_ZN8touchgfx11Application15drawCachedAreasEv+0x142>
 800c8a4:	2300      	movs	r3, #0
 800c8a6:	2a0f      	cmp	r2, #15
 800c8a8:	f8df 91b0 	ldr.w	r9, [pc, #432]	@ 800ca5c <_ZN8touchgfx11Application15drawCachedAreasEv+0x310>
 800c8ac:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 800c8b0:	bf8c      	ite	hi
 800c8b2:	ea4f 08d2 	movhi.w	r8, r2, lsr #3
 800c8b6:	f04f 0801 	movls.w	r8, #1
 800c8ba:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 800c8be:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 800c8c2:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 800c8c6:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 800c8ca:	6828      	ldr	r0, [r5, #0]
 800c8cc:	455b      	cmp	r3, fp
 800c8ce:	f340 80c7 	ble.w	800ca60 <_ZN8touchgfx11Application15drawCachedAreasEv+0x314>
 800c8d2:	6803      	ldr	r3, [r0, #0]
 800c8d4:	f8b7 a000 	ldrh.w	sl, [r7]
 800c8d8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800c8dc:	4798      	blx	r3
 800c8de:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	@ 0x2c
 800c8e2:	682b      	ldr	r3, [r5, #0]
 800c8e4:	ebaa 0000 	sub.w	r0, sl, r0
 800c8e8:	b280      	uxth	r0, r0
 800c8ea:	ebac 0e08 	sub.w	lr, ip, r8
 800c8ee:	4570      	cmp	r0, lr
 800c8f0:	f893 107c 	ldrb.w	r1, [r3, #124]	@ 0x7c
 800c8f4:	f893 206a 	ldrb.w	r2, [r3, #106]	@ 0x6a
 800c8f8:	dd05      	ble.n	800c906 <_ZN8touchgfx11Application15drawCachedAreasEv+0x1ba>
 800c8fa:	4558      	cmp	r0, fp
 800c8fc:	dd03      	ble.n	800c906 <_ZN8touchgfx11Application15drawCachedAreasEv+0x1ba>
 800c8fe:	b901      	cbnz	r1, 800c902 <_ZN8touchgfx11Application15drawCachedAreasEv+0x1b6>
 800c900:	b392      	cbz	r2, 800c968 <_ZN8touchgfx11Application15drawCachedAreasEv+0x21c>
 800c902:	4658      	mov	r0, fp
 800c904:	e006      	b.n	800c914 <_ZN8touchgfx11Application15drawCachedAreasEv+0x1c8>
 800c906:	2900      	cmp	r1, #0
 800c908:	d1fb      	bne.n	800c902 <_ZN8touchgfx11Application15drawCachedAreasEv+0x1b6>
 800c90a:	2a00      	cmp	r2, #0
 800c90c:	d1f9      	bne.n	800c902 <_ZN8touchgfx11Application15drawCachedAreasEv+0x1b6>
 800c90e:	4558      	cmp	r0, fp
 800c910:	bfb8      	it	lt
 800c912:	4658      	movlt	r0, fp
 800c914:	f9b9 3000 	ldrsh.w	r3, [r9]
 800c918:	f8ad 002c 	strh.w	r0, [sp, #44]	@ 0x2c
 800c91c:	2200      	movs	r2, #0
 800c91e:	ebac 0000 	sub.w	r0, ip, r0
 800c922:	f8b6 a000 	ldrh.w	sl, [r6]
 800c926:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 800c92a:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 800c92e:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 800c932:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 800c936:	4553      	cmp	r3, sl
 800c938:	ddc5      	ble.n	800c8c6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x17a>
 800c93a:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 800c93e:	ab0d      	add	r3, sp, #52	@ 0x34
 800c940:	f852 0fac 	ldr.w	r0, [r2, #172]!
 800c944:	6851      	ldr	r1, [r2, #4]
 800c946:	c303      	stmia	r3!, {r0, r1}
 800c948:	a80d      	add	r0, sp, #52	@ 0x34
 800c94a:	a90b      	add	r1, sp, #44	@ 0x2c
 800c94c:	f7fb ff7c 	bl	8008848 <_ZN8touchgfx4RectaNERKS0_>
 800c950:	a80d      	add	r0, sp, #52	@ 0x34
 800c952:	f7fb ffbc 	bl	80088ce <_ZNK8touchgfx4Rect7isEmptyEv>
 800c956:	b920      	cbnz	r0, 800c962 <_ZN8touchgfx11Application15drawCachedAreasEv+0x216>
 800c958:	6823      	ldr	r3, [r4, #0]
 800c95a:	a90d      	add	r1, sp, #52	@ 0x34
 800c95c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c95e:	4620      	mov	r0, r4
 800c960:	4798      	blx	r3
 800c962:	f10a 0a01 	add.w	sl, sl, #1
 800c966:	e7e4      	b.n	800c932 <_ZN8touchgfx11Application15drawCachedAreasEv+0x1e6>
 800c968:	681a      	ldr	r2, [r3, #0]
 800c96a:	2101      	movs	r1, #1
 800c96c:	f8d2 20a4 	ldr.w	r2, [r2, #164]	@ 0xa4
 800c970:	4618      	mov	r0, r3
 800c972:	4790      	blx	r2
 800c974:	e7a7      	b.n	800c8c6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x17a>
 800c976:	4b39      	ldr	r3, [pc, #228]	@ (800ca5c <_ZN8touchgfx11Application15drawCachedAreasEv+0x310>)
 800c978:	f8df 80dc 	ldr.w	r8, [pc, #220]	@ 800ca58 <_ZN8touchgfx11Application15drawCachedAreasEv+0x30c>
 800c97c:	881f      	ldrh	r7, [r3, #0]
 800c97e:	2300      	movs	r3, #0
 800c980:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
 800c984:	2f0f      	cmp	r7, #15
 800c986:	bf8c      	ite	hi
 800c988:	08ff      	lsrhi	r7, r7, #3
 800c98a:	2701      	movls	r7, #1
 800c98c:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 800c990:	f8bd 202e 	ldrh.w	r2, [sp, #46]	@ 0x2e
 800c994:	6828      	ldr	r0, [r5, #0]
 800c996:	4413      	add	r3, r2
 800c998:	b21b      	sxth	r3, r3
 800c99a:	454b      	cmp	r3, r9
 800c99c:	da60      	bge.n	800ca60 <_ZN8touchgfx11Application15drawCachedAreasEv+0x314>
 800c99e:	6803      	ldr	r3, [r0, #0]
 800c9a0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800c9a4:	4798      	blx	r3
 800c9a6:	f8bd e02e 	ldrh.w	lr, [sp, #46]	@ 0x2e
 800c9aa:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 800c9ae:	682a      	ldr	r2, [r5, #0]
 800c9b0:	4473      	add	r3, lr
 800c9b2:	b21b      	sxth	r3, r3
 800c9b4:	eb03 0e07 	add.w	lr, r3, r7
 800c9b8:	4570      	cmp	r0, lr
 800c9ba:	f892 c07c 	ldrb.w	ip, [r2, #124]	@ 0x7c
 800c9be:	f892 106a 	ldrb.w	r1, [r2, #106]	@ 0x6a
 800c9c2:	da0d      	bge.n	800c9e0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x294>
 800c9c4:	4548      	cmp	r0, r9
 800c9c6:	da0b      	bge.n	800c9e0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x294>
 800c9c8:	f1bc 0f00 	cmp.w	ip, #0
 800c9cc:	d138      	bne.n	800ca40 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f4>
 800c9ce:	2900      	cmp	r1, #0
 800c9d0:	d136      	bne.n	800ca40 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f4>
 800c9d2:	6813      	ldr	r3, [r2, #0]
 800c9d4:	2101      	movs	r1, #1
 800c9d6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c9da:	4610      	mov	r0, r2
 800c9dc:	4798      	blx	r3
 800c9de:	e7d5      	b.n	800c98c <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 800c9e0:	f1bc 0f00 	cmp.w	ip, #0
 800c9e4:	d12c      	bne.n	800ca40 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f4>
 800c9e6:	bb59      	cbnz	r1, 800ca40 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f4>
 800c9e8:	4548      	cmp	r0, r9
 800c9ea:	bfa8      	it	ge
 800c9ec:	4648      	movge	r0, r9
 800c9ee:	f9b8 2000 	ldrsh.w	r2, [r8]
 800c9f2:	f8b6 a000 	ldrh.w	sl, [r6]
 800c9f6:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 800c9fa:	2100      	movs	r1, #0
 800c9fc:	1ac0      	subs	r0, r0, r3
 800c9fe:	f8ad 102c 	strh.w	r1, [sp, #44]	@ 0x2c
 800ca02:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 800ca06:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 800ca0a:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 800ca0e:	4553      	cmp	r3, sl
 800ca10:	ddbc      	ble.n	800c98c <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 800ca12:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 800ca16:	ab0d      	add	r3, sp, #52	@ 0x34
 800ca18:	f852 0fac 	ldr.w	r0, [r2, #172]!
 800ca1c:	6851      	ldr	r1, [r2, #4]
 800ca1e:	c303      	stmia	r3!, {r0, r1}
 800ca20:	a80d      	add	r0, sp, #52	@ 0x34
 800ca22:	a90b      	add	r1, sp, #44	@ 0x2c
 800ca24:	f7fb ff10 	bl	8008848 <_ZN8touchgfx4RectaNERKS0_>
 800ca28:	a80d      	add	r0, sp, #52	@ 0x34
 800ca2a:	f7fb ff50 	bl	80088ce <_ZNK8touchgfx4Rect7isEmptyEv>
 800ca2e:	b920      	cbnz	r0, 800ca3a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ee>
 800ca30:	6823      	ldr	r3, [r4, #0]
 800ca32:	a90d      	add	r1, sp, #52	@ 0x34
 800ca34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ca36:	4620      	mov	r0, r4
 800ca38:	4798      	blx	r3
 800ca3a:	f10a 0a01 	add.w	sl, sl, #1
 800ca3e:	e7e4      	b.n	800ca0a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2be>
 800ca40:	4648      	mov	r0, r9
 800ca42:	e7d4      	b.n	800c9ee <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a2>
 800ca44:	20012638 	.word	0x20012638
 800ca48:	20012670 	.word	0x20012670
 800ca4c:	2001267c 	.word	0x2001267c
 800ca50:	20000084 	.word	0x20000084
 800ca54:	20012630 	.word	0x20012630
 800ca58:	2001262c 	.word	0x2001262c
 800ca5c:	2001262e 	.word	0x2001262e
 800ca60:	6828      	ldr	r0, [r5, #0]
 800ca62:	6803      	ldr	r3, [r0, #0]
 800ca64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca66:	4798      	blx	r3
 800ca68:	4ba5      	ldr	r3, [pc, #660]	@ (800cd00 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5b4>)
 800ca6a:	781b      	ldrb	r3, [r3, #0]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	f43f aed4 	beq.w	800c81a <_ZN8touchgfx11Application15drawCachedAreasEv+0xce>
 800ca72:	2300      	movs	r3, #0
 800ca74:	f8a4 312e 	strh.w	r3, [r4, #302]	@ 0x12e
 800ca78:	4ba2      	ldr	r3, [pc, #648]	@ (800cd04 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5b8>)
 800ca7a:	f8bd 607c 	ldrh.w	r6, [sp, #124]	@ 0x7c
 800ca7e:	881b      	ldrh	r3, [r3, #0]
 800ca80:	a80f      	add	r0, sp, #60	@ 0x3c
 800ca82:	f104 05ee 	add.w	r5, r4, #238	@ 0xee
 800ca86:	42b3      	cmp	r3, r6
 800ca88:	f4bf aec7 	bcs.w	800c81a <_ZN8touchgfx11Application15drawCachedAreasEv+0xce>
 800ca8c:	f8b4 112e 	ldrh.w	r1, [r4, #302]	@ 0x12e
 800ca90:	2907      	cmp	r1, #7
 800ca92:	d815      	bhi.n	800cac0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x374>
 800ca94:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 800ca98:	f930 8033 	ldrsh.w	r8, [r0, r3, lsl #3]
 800ca9c:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 800caa0:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 800caa4:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 800caa8:	1c4a      	adds	r2, r1, #1
 800caaa:	f8a4 212e 	strh.w	r2, [r4, #302]	@ 0x12e
 800caae:	eb05 02c1 	add.w	r2, r5, r1, lsl #3
 800cab2:	f825 8031 	strh.w	r8, [r5, r1, lsl #3]
 800cab6:	f8a2 e002 	strh.w	lr, [r2, #2]
 800caba:	f8a2 c004 	strh.w	ip, [r2, #4]
 800cabe:	80d7      	strh	r7, [r2, #6]
 800cac0:	3301      	adds	r3, #1
 800cac2:	b29b      	uxth	r3, r3
 800cac4:	e7df      	b.n	800ca86 <_ZN8touchgfx11Application15drawCachedAreasEv+0x33a>
 800cac6:	2b02      	cmp	r3, #2
 800cac8:	f040 80d1 	bne.w	800cc6e <_ZN8touchgfx11Application15drawCachedAreasEv+0x522>
 800cacc:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 800cad0:	9308      	str	r3, [sp, #32]
 800cad2:	f8b0 307e 	ldrh.w	r3, [r0, #126]	@ 0x7e
 800cad6:	9307      	str	r3, [sp, #28]
 800cad8:	6803      	ldr	r3, [r0, #0]
 800cada:	f890 b07d 	ldrb.w	fp, [r0, #125]	@ 0x7d
 800cade:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800cae2:	4798      	blx	r3
 800cae4:	4b88      	ldr	r3, [pc, #544]	@ (800cd08 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5bc>)
 800cae6:	881b      	ldrh	r3, [r3, #0]
 800cae8:	9302      	str	r3, [sp, #8]
 800caea:	4b88      	ldr	r3, [pc, #544]	@ (800cd0c <_ZN8touchgfx11Application15drawCachedAreasEv+0x5c0>)
 800caec:	881e      	ldrh	r6, [r3, #0]
 800caee:	4b88      	ldr	r3, [pc, #544]	@ (800cd10 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5c4>)
 800caf0:	781b      	ldrb	r3, [r3, #0]
 800caf2:	f10b 37ff 	add.w	r7, fp, #4294967295
 800caf6:	2b01      	cmp	r3, #1
 800caf8:	bf1c      	itt	ne
 800cafa:	9b02      	ldrne	r3, [sp, #8]
 800cafc:	9602      	strne	r6, [sp, #8]
 800cafe:	b2bf      	uxth	r7, r7
 800cb00:	fa0f f887 	sxth.w	r8, r7
 800cb04:	4682      	mov	sl, r0
 800cb06:	f04f 0000 	mov.w	r0, #0
 800cb0a:	bf18      	it	ne
 800cb0c:	461e      	movne	r6, r3
 800cb0e:	f7f3 fe3b 	bl	8000788 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800cb12:	fb96 fbfb 	sdiv	fp, r6, fp
 800cb16:	fb0b f808 	mul.w	r8, fp, r8
 800cb1a:	45c2      	cmp	sl, r8
 800cb1c:	da0c      	bge.n	800cb38 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3ec>
 800cb1e:	6828      	ldr	r0, [r5, #0]
 800cb20:	6803      	ldr	r3, [r0, #0]
 800cb22:	210a      	movs	r1, #10
 800cb24:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800cb28:	4798      	blx	r3
 800cb2a:	6828      	ldr	r0, [r5, #0]
 800cb2c:	6803      	ldr	r3, [r0, #0]
 800cb2e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800cb32:	4798      	blx	r3
 800cb34:	4682      	mov	sl, r0
 800cb36:	e7f0      	b.n	800cb1a <_ZN8touchgfx11Application15drawCachedAreasEv+0x3ce>
 800cb38:	2000      	movs	r0, #0
 800cb3a:	f7f3 fe4f 	bl	80007dc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800cb3e:	fa1f f38b 	uxth.w	r3, fp
 800cb42:	fb17 f703 	smulbb	r7, r7, r3
 800cb46:	9304      	str	r3, [sp, #16]
 800cb48:	b2bb      	uxth	r3, r7
 800cb4a:	9305      	str	r3, [sp, #20]
 800cb4c:	f04f 0800 	mov.w	r8, #0
 800cb50:	0973      	lsrs	r3, r6, #5
 800cb52:	4f70      	ldr	r7, [pc, #448]	@ (800cd14 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5c8>)
 800cb54:	9306      	str	r3, [sp, #24]
 800cb56:	4645      	mov	r5, r8
 800cb58:	42b5      	cmp	r5, r6
 800cb5a:	d085      	beq.n	800ca68 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 800cb5c:	6838      	ldr	r0, [r7, #0]
 800cb5e:	6803      	ldr	r3, [r0, #0]
 800cb60:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800cb64:	4798      	blx	r3
 800cb66:	4582      	cmp	sl, r0
 800cb68:	4681      	mov	r9, r0
 800cb6a:	d907      	bls.n	800cb7c <_ZN8touchgfx11Application15drawCachedAreasEv+0x430>
 800cb6c:	f1b8 0f00 	cmp.w	r8, #0
 800cb70:	d007      	beq.n	800cb82 <_ZN8touchgfx11Application15drawCachedAreasEv+0x436>
 800cb72:	6838      	ldr	r0, [r7, #0]
 800cb74:	6803      	ldr	r3, [r0, #0]
 800cb76:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800cb7a:	e774      	b.n	800ca66 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31a>
 800cb7c:	f1b8 0f00 	cmp.w	r8, #0
 800cb80:	d003      	beq.n	800cb8a <_ZN8touchgfx11Application15drawCachedAreasEv+0x43e>
 800cb82:	454d      	cmp	r5, r9
 800cb84:	d3f5      	bcc.n	800cb72 <_ZN8touchgfx11Application15drawCachedAreasEv+0x426>
 800cb86:	f04f 0801 	mov.w	r8, #1
 800cb8a:	9a04      	ldr	r2, [sp, #16]
 800cb8c:	fb95 f3fb 	sdiv	r3, r5, fp
 800cb90:	9303      	str	r3, [sp, #12]
 800cb92:	3301      	adds	r3, #1
 800cb94:	fb13 f302 	smulbb	r3, r3, r2
 800cb98:	b299      	uxth	r1, r3
 800cb9a:	f1b8 0f00 	cmp.w	r8, #0
 800cb9e:	d04e      	beq.n	800cc3e <_ZN8touchgfx11Application15drawCachedAreasEv+0x4f2>
 800cba0:	eb09 030b 	add.w	r3, r9, fp
 800cba4:	42b3      	cmp	r3, r6
 800cba6:	bfa8      	it	ge
 800cba8:	4633      	movge	r3, r6
 800cbaa:	9807      	ldr	r0, [sp, #28]
 800cbac:	b29b      	uxth	r3, r3
 800cbae:	428b      	cmp	r3, r1
 800cbb0:	bf94      	ite	ls
 800cbb2:	ebc5 0203 	rsbls	r2, r5, r3
 800cbb6:	ebc5 0201 	rsbhi	r2, r5, r1
 800cbba:	4282      	cmp	r2, r0
 800cbbc:	bfa8      	it	ge
 800cbbe:	4602      	movge	r2, r0
 800cbc0:	9808      	ldr	r0, [sp, #32]
 800cbc2:	fa1f fa82 	uxth.w	sl, r2
 800cbc6:	4582      	cmp	sl, r0
 800cbc8:	d205      	bcs.n	800cbd6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x48a>
 800cbca:	fa15 f082 	uxtah	r0, r5, r2
 800cbce:	4286      	cmp	r6, r0
 800cbd0:	d001      	beq.n	800cbd6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x48a>
 800cbd2:	4299      	cmp	r1, r3
 800cbd4:	d240      	bcs.n	800cc58 <_ZN8touchgfx11Application15drawCachedAreasEv+0x50c>
 800cbd6:	2001      	movs	r0, #1
 800cbd8:	9209      	str	r2, [sp, #36]	@ 0x24
 800cbda:	f7f3 fdd5 	bl	8000788 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800cbde:	6838      	ldr	r0, [r7, #0]
 800cbe0:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
 800cbe4:	6803      	ldr	r3, [r0, #0]
 800cbe6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800cbea:	4798      	blx	r3
 800cbec:	4b48      	ldr	r3, [pc, #288]	@ (800cd10 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5c4>)
 800cbee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cbf0:	781b      	ldrb	r3, [r3, #0]
 800cbf2:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 800cbf6:	2b01      	cmp	r3, #1
 800cbf8:	b212      	sxth	r2, r2
 800cbfa:	f04f 0000 	mov.w	r0, #0
 800cbfe:	d122      	bne.n	800cc46 <_ZN8touchgfx11Application15drawCachedAreasEv+0x4fa>
 800cc00:	1b73      	subs	r3, r6, r5
 800cc02:	eba3 030a 	sub.w	r3, r3, sl
 800cc06:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 800cc0a:	f8ad 0036 	strh.w	r0, [sp, #54]	@ 0x36
 800cc0e:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 800cc12:	f8ad 103a 	strh.w	r1, [sp, #58]	@ 0x3a
 800cc16:	6823      	ldr	r3, [r4, #0]
 800cc18:	a90d      	add	r1, sp, #52	@ 0x34
 800cc1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cc1c:	4620      	mov	r0, r4
 800cc1e:	4798      	blx	r3
 800cc20:	6838      	ldr	r0, [r7, #0]
 800cc22:	9b03      	ldr	r3, [sp, #12]
 800cc24:	4259      	negs	r1, r3
 800cc26:	6803      	ldr	r3, [r0, #0]
 800cc28:	b209      	sxth	r1, r1
 800cc2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800cc2e:	4798      	blx	r3
 800cc30:	4455      	add	r5, sl
 800cc32:	2001      	movs	r0, #1
 800cc34:	b2ad      	uxth	r5, r5
 800cc36:	f7f3 fdd1 	bl	80007dc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800cc3a:	46ca      	mov	sl, r9
 800cc3c:	e78c      	b.n	800cb58 <_ZN8touchgfx11Application15drawCachedAreasEv+0x40c>
 800cc3e:	9b05      	ldr	r3, [sp, #20]
 800cc40:	eba9 0303 	sub.w	r3, r9, r3
 800cc44:	e7b1      	b.n	800cbaa <_ZN8touchgfx11Application15drawCachedAreasEv+0x45e>
 800cc46:	f8ad 0034 	strh.w	r0, [sp, #52]	@ 0x34
 800cc4a:	f8ad 5036 	strh.w	r5, [sp, #54]	@ 0x36
 800cc4e:	f8ad 1038 	strh.w	r1, [sp, #56]	@ 0x38
 800cc52:	f8ad 203a 	strh.w	r2, [sp, #58]	@ 0x3a
 800cc56:	e7de      	b.n	800cc16 <_ZN8touchgfx11Application15drawCachedAreasEv+0x4ca>
 800cc58:	6838      	ldr	r0, [r7, #0]
 800cc5a:	6803      	ldr	r3, [r0, #0]
 800cc5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc5e:	4798      	blx	r3
 800cc60:	6838      	ldr	r0, [r7, #0]
 800cc62:	9906      	ldr	r1, [sp, #24]
 800cc64:	6803      	ldr	r3, [r0, #0]
 800cc66:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800cc6a:	4798      	blx	r3
 800cc6c:	e7e5      	b.n	800cc3a <_ZN8touchgfx11Application15drawCachedAreasEv+0x4ee>
 800cc6e:	2b03      	cmp	r3, #3
 800cc70:	f040 8130 	bne.w	800ced4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x788>
 800cc74:	4b26      	ldr	r3, [pc, #152]	@ (800cd10 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5c4>)
 800cc76:	f9b0 9082 	ldrsh.w	r9, [r0, #130]	@ 0x82
 800cc7a:	781b      	ldrb	r3, [r3, #0]
 800cc7c:	2b01      	cmp	r3, #1
 800cc7e:	f104 0aac 	add.w	sl, r4, #172	@ 0xac
 800cc82:	f000 8093 	beq.w	800cdac <_ZN8touchgfx11Application15drawCachedAreasEv+0x660>
 800cc86:	8832      	ldrh	r2, [r6, #0]
 800cc88:	f8b4 10ec 	ldrh.w	r1, [r4, #236]	@ 0xec
 800cc8c:	3201      	adds	r2, #1
 800cc8e:	b292      	uxth	r2, r2
 800cc90:	2900      	cmp	r1, #0
 800cc92:	f43f aee9 	beq.w	800ca68 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 800cc96:	f8b4 50b2 	ldrh.w	r5, [r4, #178]	@ 0xb2
 800cc9a:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	@ 0xae
 800cc9e:	441d      	add	r5, r3
 800cca0:	b22d      	sxth	r5, r5
 800cca2:	4694      	mov	ip, r2
 800cca4:	f04f 0800 	mov.w	r8, #0
 800cca8:	fa1f f38c 	uxth.w	r3, ip
 800ccac:	4299      	cmp	r1, r3
 800ccae:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 800ccb2:	f240 80ba 	bls.w	800ce2a <_ZN8touchgfx11Application15drawCachedAreasEv+0x6de>
 800ccb6:	4427      	add	r7, r4
 800ccb8:	eb04 0ecc 	add.w	lr, r4, ip, lsl #3
 800ccbc:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 800ccc0:	f9be 00ae 	ldrsh.w	r0, [lr, #174]	@ 0xae
 800ccc4:	4283      	cmp	r3, r0
 800ccc6:	f340 809c 	ble.w	800ce02 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6b6>
 800ccca:	f8be 50b2 	ldrh.w	r5, [lr, #178]	@ 0xb2
 800ccce:	4405      	add	r5, r0
 800ccd0:	b22d      	sxth	r5, r5
 800ccd2:	429d      	cmp	r5, r3
 800ccd4:	bfa8      	it	ge
 800ccd6:	461d      	movge	r5, r3
 800ccd8:	46e0      	mov	r8, ip
 800ccda:	f10c 0c01 	add.w	ip, ip, #1
 800ccde:	e7e3      	b.n	800cca8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x55c>
 800cce0:	d10a      	bne.n	800ccf8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5ac>
 800cce2:	f9b7 00b2 	ldrsh.w	r0, [r7, #178]	@ 0xb2
 800cce6:	f9be 10b2 	ldrsh.w	r1, [lr, #178]	@ 0xb2
 800ccea:	4562      	cmp	r2, ip
 800ccec:	bfb8      	it	lt
 800ccee:	4662      	movlt	r2, ip
 800ccf0:	4288      	cmp	r0, r1
 800ccf2:	bfb8      	it	lt
 800ccf4:	4698      	movlt	r8, r3
 800ccf6:	e082      	b.n	800cdfe <_ZN8touchgfx11Application15drawCachedAreasEv+0x6b2>
 800ccf8:	428a      	cmp	r2, r1
 800ccfa:	bfb8      	it	lt
 800ccfc:	460a      	movlt	r2, r1
 800ccfe:	e07e      	b.n	800cdfe <_ZN8touchgfx11Application15drawCachedAreasEv+0x6b2>
 800cd00:	20012636 	.word	0x20012636
 800cd04:	20000084 	.word	0x20000084
 800cd08:	2001262e 	.word	0x2001262e
 800cd0c:	2001262c 	.word	0x2001262c
 800cd10:	20012630 	.word	0x20012630
 800cd14:	20012638 	.word	0x20012638
 800cd18:	19e1      	adds	r1, r4, r7
 800cd1a:	ab0d      	add	r3, sp, #52	@ 0x34
 800cd1c:	f851 0fac 	ldr.w	r0, [r1, #172]!
 800cd20:	6849      	ldr	r1, [r1, #4]
 800cd22:	c303      	stmia	r3!, {r0, r1}
 800cd24:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	@ 0x38
 800cd28:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 800cd2c:	454b      	cmp	r3, r9
 800cd2e:	bfb8      	it	lt
 800cd30:	f9bd 2034 	ldrshlt.w	r2, [sp, #52]	@ 0x34
 800cd34:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 800cd38:	440b      	add	r3, r1
 800cd3a:	1a9b      	subs	r3, r3, r2
 800cd3c:	a80d      	add	r0, sp, #52	@ 0x34
 800cd3e:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 800cd42:	f7fe fea5 	bl	800ba90 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800cd46:	a80d      	add	r0, sp, #52	@ 0x34
 800cd48:	f7fb fdc1 	bl	80088ce <_ZNK8touchgfx4Rect7isEmptyEv>
 800cd4c:	bb70      	cbnz	r0, 800cdac <_ZN8touchgfx11Application15drawCachedAreasEv+0x660>
 800cd4e:	f9bd c03a 	ldrsh.w	ip, [sp, #58]	@ 0x3a
 800cd52:	6828      	ldr	r0, [r5, #0]
 800cd54:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 800cd58:	f8d0 e000 	ldr.w	lr, [r0]
 800cd5c:	f8bd 2036 	ldrh.w	r2, [sp, #54]	@ 0x36
 800cd60:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 800cd64:	45cc      	cmp	ip, r9
 800cd66:	bfd4      	ite	le
 800cd68:	fa1f fc8c 	uxthle.w	ip, ip
 800cd6c:	fa1f fc89 	uxthgt.w	ip, r9
 800cd70:	f8cd c000 	str.w	ip, [sp]
 800cd74:	f8de b094 	ldr.w	fp, [lr, #148]	@ 0x94
 800cd78:	47d8      	blx	fp
 800cd7a:	4683      	mov	fp, r0
 800cd7c:	f8ad 003a 	strh.w	r0, [sp, #58]	@ 0x3a
 800cd80:	a80d      	add	r0, sp, #52	@ 0x34
 800cd82:	f7fe fe6b 	bl	800ba5c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 800cd86:	6823      	ldr	r3, [r4, #0]
 800cd88:	4427      	add	r7, r4
 800cd8a:	4620      	mov	r0, r4
 800cd8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cd8e:	a90d      	add	r1, sp, #52	@ 0x34
 800cd90:	4798      	blx	r3
 800cd92:	f8b7 00b0 	ldrh.w	r0, [r7, #176]	@ 0xb0
 800cd96:	eba0 000b 	sub.w	r0, r0, fp
 800cd9a:	b200      	sxth	r0, r0
 800cd9c:	f8a7 00b0 	strh.w	r0, [r7, #176]	@ 0xb0
 800cda0:	b920      	cbnz	r0, 800cdac <_ZN8touchgfx11Application15drawCachedAreasEv+0x660>
 800cda2:	fa1f f188 	uxth.w	r1, r8
 800cda6:	4650      	mov	r0, sl
 800cda8:	f7ff f93e 	bl	800c028 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800cdac:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	@ 0xec
 800cdb0:	f1bb 0f00 	cmp.w	fp, #0
 800cdb4:	f43f ae58 	beq.w	800ca68 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 800cdb8:	8833      	ldrh	r3, [r6, #0]
 800cdba:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	@ 0xac
 800cdbe:	3301      	adds	r3, #1
 800cdc0:	b29b      	uxth	r3, r3
 800cdc2:	f04f 0800 	mov.w	r8, #0
 800cdc6:	b299      	uxth	r1, r3
 800cdc8:	458b      	cmp	fp, r1
 800cdca:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 800cdce:	d9a3      	bls.n	800cd18 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5cc>
 800cdd0:	4427      	add	r7, r4
 800cdd2:	eb04 0ec3 	add.w	lr, r4, r3, lsl #3
 800cdd6:	f8b7 10b0 	ldrh.w	r1, [r7, #176]	@ 0xb0
 800cdda:	f8b7 00ac 	ldrh.w	r0, [r7, #172]	@ 0xac
 800cdde:	f9be c0ac 	ldrsh.w	ip, [lr, #172]	@ 0xac
 800cde2:	4408      	add	r0, r1
 800cde4:	f8be 10b0 	ldrh.w	r1, [lr, #176]	@ 0xb0
 800cde8:	4461      	add	r1, ip
 800cdea:	b200      	sxth	r0, r0
 800cdec:	b209      	sxth	r1, r1
 800cdee:	4288      	cmp	r0, r1
 800cdf0:	f6bf af76 	bge.w	800cce0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x594>
 800cdf4:	4584      	cmp	ip, r0
 800cdf6:	4662      	mov	r2, ip
 800cdf8:	4698      	mov	r8, r3
 800cdfa:	bfb8      	it	lt
 800cdfc:	4602      	movlt	r2, r0
 800cdfe:	3301      	adds	r3, #1
 800ce00:	e7e1      	b.n	800cdc6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x67a>
 800ce02:	d10e      	bne.n	800ce22 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6d6>
 800ce04:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	@ 0xb0
 800ce08:	f8be e0b2 	ldrh.w	lr, [lr, #178]	@ 0xb2
 800ce0c:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	@ 0xb0
 800ce10:	4473      	add	r3, lr
 800ce12:	b21b      	sxth	r3, r3
 800ce14:	429d      	cmp	r5, r3
 800ce16:	bfa8      	it	ge
 800ce18:	461d      	movge	r5, r3
 800ce1a:	4287      	cmp	r7, r0
 800ce1c:	bfb8      	it	lt
 800ce1e:	46e0      	movlt	r8, ip
 800ce20:	e75b      	b.n	800ccda <_ZN8touchgfx11Application15drawCachedAreasEv+0x58e>
 800ce22:	4285      	cmp	r5, r0
 800ce24:	bfa8      	it	ge
 800ce26:	4605      	movge	r5, r0
 800ce28:	e757      	b.n	800ccda <_ZN8touchgfx11Application15drawCachedAreasEv+0x58e>
 800ce2a:	eb0a 0007 	add.w	r0, sl, r7
 800ce2e:	4427      	add	r7, r4
 800ce30:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800ce34:	f9b7 b0b2 	ldrsh.w	fp, [r7, #178]	@ 0xb2
 800ce38:	45cb      	cmp	fp, r9
 800ce3a:	bfbe      	ittt	lt
 800ce3c:	f8b7 50ae 	ldrhlt.w	r5, [r7, #174]	@ 0xae
 800ce40:	445d      	addlt	r5, fp
 800ce42:	b22d      	sxthlt	r5, r5
 800ce44:	f7fb fd43 	bl	80088ce <_ZNK8touchgfx4Rect7isEmptyEv>
 800ce48:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800ce4c:	2800      	cmp	r0, #0
 800ce4e:	f47f af1f 	bne.w	800cc90 <_ZN8touchgfx11Application15drawCachedAreasEv+0x544>
 800ce52:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	@ 0xae
 800ce56:	f8ad 003a 	strh.w	r0, [sp, #58]	@ 0x3a
 800ce5a:	482b      	ldr	r0, [pc, #172]	@ (800cf08 <_ZN8touchgfx11Application15drawCachedAreasEv+0x7bc>)
 800ce5c:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	@ 0xac
 800ce60:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 800ce64:	6800      	ldr	r0, [r0, #0]
 800ce66:	f8ad 1034 	strh.w	r1, [sp, #52]	@ 0x34
 800ce6a:	1aad      	subs	r5, r5, r2
 800ce6c:	454d      	cmp	r5, r9
 800ce6e:	f8ad 2036 	strh.w	r2, [sp, #54]	@ 0x36
 800ce72:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 800ce76:	bfa8      	it	ge
 800ce78:	464d      	movge	r5, r9
 800ce7a:	f8d0 c000 	ldr.w	ip, [r0]
 800ce7e:	b2ad      	uxth	r5, r5
 800ce80:	fa1f fb8b 	uxth.w	fp, fp
 800ce84:	455d      	cmp	r5, fp
 800ce86:	bf94      	ite	ls
 800ce88:	9500      	strls	r5, [sp, #0]
 800ce8a:	f8cd b000 	strhi.w	fp, [sp]
 800ce8e:	b292      	uxth	r2, r2
 800ce90:	f8dc 5094 	ldr.w	r5, [ip, #148]	@ 0x94
 800ce94:	b29b      	uxth	r3, r3
 800ce96:	b289      	uxth	r1, r1
 800ce98:	47a8      	blx	r5
 800ce9a:	6823      	ldr	r3, [r4, #0]
 800ce9c:	f8ad 003a 	strh.w	r0, [sp, #58]	@ 0x3a
 800cea0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cea2:	a90d      	add	r1, sp, #52	@ 0x34
 800cea4:	4620      	mov	r0, r4
 800cea6:	4798      	blx	r3
 800cea8:	f8bd 103a 	ldrh.w	r1, [sp, #58]	@ 0x3a
 800ceac:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800ceb0:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	@ 0xae
 800ceb4:	1a5b      	subs	r3, r3, r1
 800ceb6:	440a      	add	r2, r1
 800ceb8:	b21b      	sxth	r3, r3
 800ceba:	f8a7 20ae 	strh.w	r2, [r7, #174]	@ 0xae
 800cebe:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	f47f aedf 	bne.w	800cc86 <_ZN8touchgfx11Application15drawCachedAreasEv+0x53a>
 800cec8:	fa1f f188 	uxth.w	r1, r8
 800cecc:	4650      	mov	r0, sl
 800cece:	f7ff f8ab 	bl	800c028 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800ced2:	e6d8      	b.n	800cc86 <_ZN8touchgfx11Application15drawCachedAreasEv+0x53a>
 800ced4:	8835      	ldrh	r5, [r6, #0]
 800ced6:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 800ceda:	42ab      	cmp	r3, r5
 800cedc:	f67f adc4 	bls.w	800ca68 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 800cee0:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 800cee4:	ab0d      	add	r3, sp, #52	@ 0x34
 800cee6:	f852 0fac 	ldr.w	r0, [r2, #172]!
 800ceea:	6851      	ldr	r1, [r2, #4]
 800ceec:	c303      	stmia	r3!, {r0, r1}
 800ceee:	a80d      	add	r0, sp, #52	@ 0x34
 800cef0:	f7fb fced 	bl	80088ce <_ZNK8touchgfx4Rect7isEmptyEv>
 800cef4:	b920      	cbnz	r0, 800cf00 <_ZN8touchgfx11Application15drawCachedAreasEv+0x7b4>
 800cef6:	6823      	ldr	r3, [r4, #0]
 800cef8:	a90d      	add	r1, sp, #52	@ 0x34
 800cefa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cefc:	4620      	mov	r0, r4
 800cefe:	4798      	blx	r3
 800cf00:	3501      	adds	r5, #1
 800cf02:	b2ad      	uxth	r5, r5
 800cf04:	e7e7      	b.n	800ced6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x78a>
 800cf06:	bf00      	nop
 800cf08:	20012638 	.word	0x20012638

0800cf0c <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 800cf0c:	4b03      	ldr	r3, [pc, #12]	@ (800cf1c <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 800cf0e:	2200      	movs	r2, #0
 800cf10:	801a      	strh	r2, [r3, #0]
 800cf12:	805a      	strh	r2, [r3, #2]
 800cf14:	809a      	strh	r2, [r3, #4]
 800cf16:	80da      	strh	r2, [r3, #6]
 800cf18:	4770      	bx	lr
 800cf1a:	bf00      	nop
 800cf1c:	2001267c 	.word	0x2001267c

0800cf20 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 800cf20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf24:	4606      	mov	r6, r0
 800cf26:	b09d      	sub	sp, #116	@ 0x74
 800cf28:	a803      	add	r0, sp, #12
 800cf2a:	4614      	mov	r4, r2
 800cf2c:	468a      	mov	sl, r1
 800cf2e:	461d      	mov	r5, r3
 800cf30:	f000 fdad 	bl	800da8e <_ZN8touchgfx12TextProviderC1Ev>
 800cf34:	6833      	ldr	r3, [r6, #0]
 800cf36:	4630      	mov	r0, r6
 800cf38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cf3a:	4798      	blx	r3
 800cf3c:	6833      	ldr	r3, [r6, #0]
 800cf3e:	4607      	mov	r7, r0
 800cf40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cf42:	4630      	mov	r0, r6
 800cf44:	4798      	blx	r3
 800cf46:	462a      	mov	r2, r5
 800cf48:	9000      	str	r0, [sp, #0]
 800cf4a:	4621      	mov	r1, r4
 800cf4c:	463b      	mov	r3, r7
 800cf4e:	a803      	add	r0, sp, #12
 800cf50:	f000 fdf8 	bl	800db44 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800cf54:	2500      	movs	r5, #0
 800cf56:	462c      	mov	r4, r5
 800cf58:	46a9      	mov	r9, r5
 800cf5a:	46a8      	mov	r8, r5
 800cf5c:	f242 0b0b 	movw	fp, #8203	@ 0x200b
 800cf60:	2300      	movs	r3, #0
 800cf62:	9302      	str	r3, [sp, #8]
 800cf64:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 800cf68:	429c      	cmp	r4, r3
 800cf6a:	d002      	beq.n	800cf72 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 800cf6c:	455c      	cmp	r4, fp
 800cf6e:	bf18      	it	ne
 800cf70:	4625      	movne	r5, r4
 800cf72:	ab02      	add	r3, sp, #8
 800cf74:	4632      	mov	r2, r6
 800cf76:	4651      	mov	r1, sl
 800cf78:	a803      	add	r0, sp, #12
 800cf7a:	f001 f90f 	bl	800e19c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800cf7e:	4604      	mov	r4, r0
 800cf80:	b108      	cbz	r0, 800cf86 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 800cf82:	280a      	cmp	r0, #10
 800cf84:	d10a      	bne.n	800cf9c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 800cf86:	45c1      	cmp	r9, r8
 800cf88:	bf38      	it	cc
 800cf8a:	46c1      	movcc	r9, r8
 800cf8c:	f04f 0800 	mov.w	r8, #0
 800cf90:	2c00      	cmp	r4, #0
 800cf92:	d1e5      	bne.n	800cf60 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 800cf94:	4648      	mov	r0, r9
 800cf96:	b01d      	add	sp, #116	@ 0x74
 800cf98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf9c:	9a02      	ldr	r2, [sp, #8]
 800cf9e:	2a00      	cmp	r2, #0
 800cfa0:	d0de      	beq.n	800cf60 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 800cfa2:	7b57      	ldrb	r7, [r2, #13]
 800cfa4:	6833      	ldr	r3, [r6, #0]
 800cfa6:	8894      	ldrh	r4, [r2, #4]
 800cfa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cfaa:	007f      	lsls	r7, r7, #1
 800cfac:	f407 7080 	and.w	r0, r7, #256	@ 0x100
 800cfb0:	7a97      	ldrb	r7, [r2, #10]
 800cfb2:	4629      	mov	r1, r5
 800cfb4:	4307      	orrs	r7, r0
 800cfb6:	4630      	mov	r0, r6
 800cfb8:	4798      	blx	r3
 800cfba:	4438      	add	r0, r7
 800cfbc:	4480      	add	r8, r0
 800cfbe:	fa1f f888 	uxth.w	r8, r8
 800cfc2:	e7e5      	b.n	800cf90 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0800cfc4 <_ZNK8touchgfx4Font12getCharWidthEt>:
 800cfc4:	b508      	push	{r3, lr}
 800cfc6:	6803      	ldr	r3, [r0, #0]
 800cfc8:	68db      	ldr	r3, [r3, #12]
 800cfca:	4798      	blx	r3
 800cfcc:	b128      	cbz	r0, 800cfda <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 800cfce:	7b43      	ldrb	r3, [r0, #13]
 800cfd0:	7a80      	ldrb	r0, [r0, #10]
 800cfd2:	005b      	lsls	r3, r3, #1
 800cfd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cfd8:	4318      	orrs	r0, r3
 800cfda:	bd08      	pop	{r3, pc}

0800cfdc <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 800cfdc:	b40e      	push	{r1, r2, r3}
 800cfde:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cfe0:	b09e      	sub	sp, #120	@ 0x78
 800cfe2:	ab23      	add	r3, sp, #140	@ 0x8c
 800cfe4:	4605      	mov	r5, r0
 800cfe6:	f853 4b04 	ldr.w	r4, [r3], #4
 800cfea:	9303      	str	r3, [sp, #12]
 800cfec:	a805      	add	r0, sp, #20
 800cfee:	f000 fd4e 	bl	800da8e <_ZN8touchgfx12TextProviderC1Ev>
 800cff2:	682b      	ldr	r3, [r5, #0]
 800cff4:	4628      	mov	r0, r5
 800cff6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cff8:	4798      	blx	r3
 800cffa:	682b      	ldr	r3, [r5, #0]
 800cffc:	4606      	mov	r6, r0
 800cffe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d000:	4628      	mov	r0, r5
 800d002:	4798      	blx	r3
 800d004:	4633      	mov	r3, r6
 800d006:	ae1e      	add	r6, sp, #120	@ 0x78
 800d008:	4621      	mov	r1, r4
 800d00a:	9000      	str	r0, [sp, #0]
 800d00c:	9a03      	ldr	r2, [sp, #12]
 800d00e:	2400      	movs	r4, #0
 800d010:	a805      	add	r0, sp, #20
 800d012:	f000 fd97 	bl	800db44 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800d016:	f846 4d68 	str.w	r4, [r6, #-104]!
 800d01a:	462a      	mov	r2, r5
 800d01c:	4633      	mov	r3, r6
 800d01e:	4621      	mov	r1, r4
 800d020:	a805      	add	r0, sp, #20
 800d022:	f001 f8bb 	bl	800e19c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800d026:	b1f0      	cbz	r0, 800d066 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8a>
 800d028:	280a      	cmp	r0, #10
 800d02a:	d018      	beq.n	800d05e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 800d02c:	9f04      	ldr	r7, [sp, #16]
 800d02e:	b1b7      	cbz	r7, 800d05e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 800d030:	7b78      	ldrb	r0, [r7, #13]
 800d032:	7a3b      	ldrb	r3, [r7, #8]
 800d034:	88ea      	ldrh	r2, [r5, #6]
 800d036:	00c1      	lsls	r1, r0, #3
 800d038:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 800d03c:	4319      	orrs	r1, r3
 800d03e:	0643      	lsls	r3, r0, #25
 800d040:	bf44      	itt	mi
 800d042:	f5a1 7300 	submi.w	r3, r1, #512	@ 0x200
 800d046:	b219      	sxthmi	r1, r3
 800d048:	0100      	lsls	r0, r0, #4
 800d04a:	79fb      	ldrb	r3, [r7, #7]
 800d04c:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 800d050:	4303      	orrs	r3, r0
 800d052:	4413      	add	r3, r2
 800d054:	1a5b      	subs	r3, r3, r1
 800d056:	b21b      	sxth	r3, r3
 800d058:	429c      	cmp	r4, r3
 800d05a:	bfb8      	it	lt
 800d05c:	461c      	movlt	r4, r3
 800d05e:	4633      	mov	r3, r6
 800d060:	462a      	mov	r2, r5
 800d062:	2100      	movs	r1, #0
 800d064:	e7dc      	b.n	800d020 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 800d066:	b2a0      	uxth	r0, r4
 800d068:	b01e      	add	sp, #120	@ 0x78
 800d06a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d06e:	b003      	add	sp, #12
 800d070:	4770      	bx	lr

0800d072 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 800d072:	7a43      	ldrb	r3, [r0, #9]
 800d074:	8880      	ldrh	r0, [r0, #4]
 800d076:	4418      	add	r0, r3
 800d078:	b280      	uxth	r0, r0
 800d07a:	4770      	bx	lr

0800d07c <_ZNK8touchgfx4Font13getFontHeightEv>:
 800d07c:	6803      	ldr	r3, [r0, #0]
 800d07e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d080:	4718      	bx	r3

0800d082 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 800d082:	b40e      	push	{r1, r2, r3}
 800d084:	b570      	push	{r4, r5, r6, lr}
 800d086:	b09d      	sub	sp, #116	@ 0x74
 800d088:	ab21      	add	r3, sp, #132	@ 0x84
 800d08a:	4604      	mov	r4, r0
 800d08c:	f853 5b04 	ldr.w	r5, [r3], #4
 800d090:	9302      	str	r3, [sp, #8]
 800d092:	a803      	add	r0, sp, #12
 800d094:	f000 fcfb 	bl	800da8e <_ZN8touchgfx12TextProviderC1Ev>
 800d098:	6823      	ldr	r3, [r4, #0]
 800d09a:	4620      	mov	r0, r4
 800d09c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d09e:	4798      	blx	r3
 800d0a0:	6823      	ldr	r3, [r4, #0]
 800d0a2:	4606      	mov	r6, r0
 800d0a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d0a6:	4620      	mov	r0, r4
 800d0a8:	4798      	blx	r3
 800d0aa:	4633      	mov	r3, r6
 800d0ac:	9000      	str	r0, [sp, #0]
 800d0ae:	9a02      	ldr	r2, [sp, #8]
 800d0b0:	4629      	mov	r1, r5
 800d0b2:	a803      	add	r0, sp, #12
 800d0b4:	f000 fd46 	bl	800db44 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800d0b8:	a803      	add	r0, sp, #12
 800d0ba:	f001 f93d 	bl	800e338 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800d0be:	2401      	movs	r4, #1
 800d0c0:	b2a3      	uxth	r3, r4
 800d0c2:	b140      	cbz	r0, 800d0d6 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x54>
 800d0c4:	280a      	cmp	r0, #10
 800d0c6:	bf08      	it	eq
 800d0c8:	3301      	addeq	r3, #1
 800d0ca:	a803      	add	r0, sp, #12
 800d0cc:	bf08      	it	eq
 800d0ce:	b21c      	sxtheq	r4, r3
 800d0d0:	f001 f932 	bl	800e338 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800d0d4:	e7f4      	b.n	800d0c0 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 800d0d6:	4618      	mov	r0, r3
 800d0d8:	b01d      	add	sp, #116	@ 0x74
 800d0da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d0de:	b003      	add	sp, #12
 800d0e0:	4770      	bx	lr

0800d0e2 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 800d0e2:	b40e      	push	{r1, r2, r3}
 800d0e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d0e6:	b09e      	sub	sp, #120	@ 0x78
 800d0e8:	ab23      	add	r3, sp, #140	@ 0x8c
 800d0ea:	4604      	mov	r4, r0
 800d0ec:	f853 5b04 	ldr.w	r5, [r3], #4
 800d0f0:	9303      	str	r3, [sp, #12]
 800d0f2:	a805      	add	r0, sp, #20
 800d0f4:	f000 fccb 	bl	800da8e <_ZN8touchgfx12TextProviderC1Ev>
 800d0f8:	6823      	ldr	r3, [r4, #0]
 800d0fa:	4620      	mov	r0, r4
 800d0fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d0fe:	4798      	blx	r3
 800d100:	6823      	ldr	r3, [r4, #0]
 800d102:	4606      	mov	r6, r0
 800d104:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d106:	4620      	mov	r0, r4
 800d108:	4798      	blx	r3
 800d10a:	4633      	mov	r3, r6
 800d10c:	4629      	mov	r1, r5
 800d10e:	9000      	str	r0, [sp, #0]
 800d110:	9a03      	ldr	r2, [sp, #12]
 800d112:	a805      	add	r0, sp, #20
 800d114:	ad1e      	add	r5, sp, #120	@ 0x78
 800d116:	f000 fd15 	bl	800db44 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800d11a:	2100      	movs	r1, #0
 800d11c:	f845 1d68 	str.w	r1, [r5, #-104]!
 800d120:	4622      	mov	r2, r4
 800d122:	462b      	mov	r3, r5
 800d124:	a805      	add	r0, sp, #20
 800d126:	f001 f839 	bl	800e19c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800d12a:	f647 76ff 	movw	r6, #32767	@ 0x7fff
 800d12e:	b1d8      	cbz	r0, 800d168 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 800d130:	280a      	cmp	r0, #10
 800d132:	d012      	beq.n	800d15a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 800d134:	9804      	ldr	r0, [sp, #16]
 800d136:	b180      	cbz	r0, 800d15a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 800d138:	7b47      	ldrb	r7, [r0, #13]
 800d13a:	88e2      	ldrh	r2, [r4, #6]
 800d13c:	00fb      	lsls	r3, r7, #3
 800d13e:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 800d142:	7a03      	ldrb	r3, [r0, #8]
 800d144:	430b      	orrs	r3, r1
 800d146:	0679      	lsls	r1, r7, #25
 800d148:	bf44      	itt	mi
 800d14a:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800d14e:	b21b      	sxthmi	r3, r3
 800d150:	1ad3      	subs	r3, r2, r3
 800d152:	b21b      	sxth	r3, r3
 800d154:	429e      	cmp	r6, r3
 800d156:	bfa8      	it	ge
 800d158:	461e      	movge	r6, r3
 800d15a:	462b      	mov	r3, r5
 800d15c:	4622      	mov	r2, r4
 800d15e:	2100      	movs	r1, #0
 800d160:	a805      	add	r0, sp, #20
 800d162:	f001 f81b 	bl	800e19c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800d166:	e7e2      	b.n	800d12e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 800d168:	4630      	mov	r0, r6
 800d16a:	b01e      	add	sp, #120	@ 0x78
 800d16c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d170:	b003      	add	sp, #12
 800d172:	4770      	bx	lr

0800d174 <_ZNK8touchgfx8Drawable10invalidateEv>:
 800d174:	b513      	push	{r0, r1, r4, lr}
 800d176:	6803      	ldr	r3, [r0, #0]
 800d178:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 800d17c:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800d180:	f8ad 1004 	strh.w	r1, [sp, #4]
 800d184:	2400      	movs	r4, #0
 800d186:	9400      	str	r4, [sp, #0]
 800d188:	f8ad 2006 	strh.w	r2, [sp, #6]
 800d18c:	691b      	ldr	r3, [r3, #16]
 800d18e:	4669      	mov	r1, sp
 800d190:	4798      	blx	r3
 800d192:	b002      	add	sp, #8
 800d194:	bd10      	pop	{r4, pc}

0800d196 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 800d196:	b538      	push	{r3, r4, r5, lr}
 800d198:	680b      	ldr	r3, [r1, #0]
 800d19a:	460c      	mov	r4, r1
 800d19c:	68db      	ldr	r3, [r3, #12]
 800d19e:	4605      	mov	r5, r0
 800d1a0:	4798      	blx	r3
 800d1a2:	6823      	ldr	r3, [r4, #0]
 800d1a4:	4620      	mov	r0, r4
 800d1a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d1a8:	4629      	mov	r1, r5
 800d1aa:	4798      	blx	r3
 800d1ac:	4628      	mov	r0, r5
 800d1ae:	bd38      	pop	{r3, r4, r5, pc}

0800d1b0 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 800d1b0:	b410      	push	{r4}
 800d1b2:	880a      	ldrh	r2, [r1, #0]
 800d1b4:	8884      	ldrh	r4, [r0, #4]
 800d1b6:	4422      	add	r2, r4
 800d1b8:	800a      	strh	r2, [r1, #0]
 800d1ba:	88c4      	ldrh	r4, [r0, #6]
 800d1bc:	884a      	ldrh	r2, [r1, #2]
 800d1be:	4422      	add	r2, r4
 800d1c0:	804a      	strh	r2, [r1, #2]
 800d1c2:	6940      	ldr	r0, [r0, #20]
 800d1c4:	b120      	cbz	r0, 800d1d0 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 800d1c6:	6803      	ldr	r3, [r0, #0]
 800d1c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d1cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d1ce:	4718      	bx	r3
 800d1d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d1d4:	4770      	bx	lr

0800d1d6 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 800d1d6:	b570      	push	{r4, r5, r6, lr}
 800d1d8:	8882      	ldrh	r2, [r0, #4]
 800d1da:	880b      	ldrh	r3, [r1, #0]
 800d1dc:	4413      	add	r3, r2
 800d1de:	800b      	strh	r3, [r1, #0]
 800d1e0:	88c2      	ldrh	r2, [r0, #6]
 800d1e2:	884b      	ldrh	r3, [r1, #2]
 800d1e4:	460c      	mov	r4, r1
 800d1e6:	4413      	add	r3, r2
 800d1e8:	804b      	strh	r3, [r1, #2]
 800d1ea:	4605      	mov	r5, r0
 800d1ec:	1d01      	adds	r1, r0, #4
 800d1ee:	4620      	mov	r0, r4
 800d1f0:	f7fb fb2a 	bl	8008848 <_ZN8touchgfx4RectaNERKS0_>
 800d1f4:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	dd0b      	ble.n	800d214 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 800d1fc:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800d200:	2b00      	cmp	r3, #0
 800d202:	dd07      	ble.n	800d214 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 800d204:	6968      	ldr	r0, [r5, #20]
 800d206:	b128      	cbz	r0, 800d214 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 800d208:	6803      	ldr	r3, [r0, #0]
 800d20a:	4621      	mov	r1, r4
 800d20c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d20e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d212:	4718      	bx	r3
 800d214:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d218 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 800d218:	b570      	push	{r4, r5, r6, lr}
 800d21a:	8882      	ldrh	r2, [r0, #4]
 800d21c:	880b      	ldrh	r3, [r1, #0]
 800d21e:	4413      	add	r3, r2
 800d220:	800b      	strh	r3, [r1, #0]
 800d222:	88c2      	ldrh	r2, [r0, #6]
 800d224:	884b      	ldrh	r3, [r1, #2]
 800d226:	460c      	mov	r4, r1
 800d228:	4413      	add	r3, r2
 800d22a:	804b      	strh	r3, [r1, #2]
 800d22c:	4605      	mov	r5, r0
 800d22e:	1d01      	adds	r1, r0, #4
 800d230:	4620      	mov	r0, r4
 800d232:	f7fb fb09 	bl	8008848 <_ZN8touchgfx4RectaNERKS0_>
 800d236:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	dd19      	ble.n	800d272 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 800d23e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800d242:	2b00      	cmp	r3, #0
 800d244:	dd15      	ble.n	800d272 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 800d246:	6968      	ldr	r0, [r5, #20]
 800d248:	b128      	cbz	r0, 800d256 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 800d24a:	6803      	ldr	r3, [r0, #0]
 800d24c:	4621      	mov	r1, r4
 800d24e:	691b      	ldr	r3, [r3, #16]
 800d250:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d254:	4718      	bx	r3
 800d256:	4b07      	ldr	r3, [pc, #28]	@ (800d274 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	3304      	adds	r3, #4
 800d25c:	429d      	cmp	r5, r3
 800d25e:	d108      	bne.n	800d272 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 800d260:	f7fe fdae 	bl	800bdc0 <_ZN8touchgfx11Application11getInstanceEv>
 800d264:	6803      	ldr	r3, [r0, #0]
 800d266:	6821      	ldr	r1, [r4, #0]
 800d268:	6862      	ldr	r2, [r4, #4]
 800d26a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d26c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d270:	4718      	bx	r3
 800d272:	bd70      	pop	{r4, r5, r6, pc}
 800d274:	20012674 	.word	0x20012674

0800d278 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 800d278:	b570      	push	{r4, r5, r6, lr}
 800d27a:	4604      	mov	r4, r0
 800d27c:	4616      	mov	r6, r2
 800d27e:	460d      	mov	r5, r1
 800d280:	b901      	cbnz	r1, 800d284 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 800d282:	b192      	cbz	r2, 800d2aa <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 800d284:	6823      	ldr	r3, [r4, #0]
 800d286:	4620      	mov	r0, r4
 800d288:	699b      	ldr	r3, [r3, #24]
 800d28a:	4798      	blx	r3
 800d28c:	88e2      	ldrh	r2, [r4, #6]
 800d28e:	88a1      	ldrh	r1, [r4, #4]
 800d290:	4432      	add	r2, r6
 800d292:	4429      	add	r1, r5
 800d294:	4620      	mov	r0, r4
 800d296:	b212      	sxth	r2, r2
 800d298:	b209      	sxth	r1, r1
 800d29a:	f7f5 fb34 	bl	8002906 <_ZN8touchgfx8Drawable5setXYEss>
 800d29e:	6823      	ldr	r3, [r4, #0]
 800d2a0:	4620      	mov	r0, r4
 800d2a2:	699b      	ldr	r3, [r3, #24]
 800d2a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d2a8:	4718      	bx	r3
 800d2aa:	bd70      	pop	{r4, r5, r6, pc}

0800d2ac <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 800d2ac:	b510      	push	{r4, lr}
 800d2ae:	4604      	mov	r4, r0
 800d2b0:	4608      	mov	r0, r1
 800d2b2:	2300      	movs	r3, #0
 800d2b4:	8023      	strh	r3, [r4, #0]
 800d2b6:	8063      	strh	r3, [r4, #2]
 800d2b8:	6803      	ldr	r3, [r0, #0]
 800d2ba:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800d2be:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 800d2c2:	80a1      	strh	r1, [r4, #4]
 800d2c4:	80e2      	strh	r2, [r4, #6]
 800d2c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2c8:	4621      	mov	r1, r4
 800d2ca:	4798      	blx	r3
 800d2cc:	4620      	mov	r0, r4
 800d2ce:	bd10      	pop	{r4, pc}

0800d2d0 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 800d2d0:	b530      	push	{r4, r5, lr}
 800d2d2:	8083      	strh	r3, [r0, #4]
 800d2d4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800d2d8:	80c3      	strh	r3, [r0, #6]
 800d2da:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800d2de:	7203      	strb	r3, [r0, #8]
 800d2e0:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800d2e4:	f89d 5018 	ldrb.w	r5, [sp, #24]
 800d2e8:	7243      	strb	r3, [r0, #9]
 800d2ea:	7a83      	ldrb	r3, [r0, #10]
 800d2ec:	6141      	str	r1, [r0, #20]
 800d2ee:	f365 0306 	bfi	r3, r5, #0, #7
 800d2f2:	f89d 501c 	ldrb.w	r5, [sp, #28]
 800d2f6:	8302      	strh	r2, [r0, #24]
 800d2f8:	f365 13c7 	bfi	r3, r5, #7, #1
 800d2fc:	7283      	strb	r3, [r0, #10]
 800d2fe:	f89d 3020 	ldrb.w	r3, [sp, #32]
 800d302:	72c3      	strb	r3, [r0, #11]
 800d304:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800d308:	7303      	strb	r3, [r0, #12]
 800d30a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 800d30e:	81c3      	strh	r3, [r0, #14]
 800d310:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 800d314:	8203      	strh	r3, [r0, #16]
 800d316:	4b01      	ldr	r3, [pc, #4]	@ (800d31c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 800d318:	6003      	str	r3, [r0, #0]
 800d31a:	bd30      	pop	{r4, r5, pc}
 800d31c:	0801481c 	.word	0x0801481c

0800d320 <_ZNK8touchgfx9ConstFont4findEt>:
 800d320:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d322:	6944      	ldr	r4, [r0, #20]
 800d324:	b3bc      	cbz	r4, 800d396 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800d326:	88a3      	ldrh	r3, [r4, #4]
 800d328:	8b02      	ldrh	r2, [r0, #24]
 800d32a:	1acb      	subs	r3, r1, r3
 800d32c:	f102 32ff 	add.w	r2, r2, #4294967295
 800d330:	d431      	bmi.n	800d396 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800d332:	4293      	cmp	r3, r2
 800d334:	dd0c      	ble.n	800d350 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 800d336:	230e      	movs	r3, #14
 800d338:	fb03 4302 	mla	r3, r3, r2, r4
 800d33c:	889b      	ldrh	r3, [r3, #4]
 800d33e:	1a5b      	subs	r3, r3, r1
 800d340:	1ad3      	subs	r3, r2, r3
 800d342:	429a      	cmp	r2, r3
 800d344:	db27      	blt.n	800d396 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800d346:	2b00      	cmp	r3, #0
 800d348:	bfbc      	itt	lt
 800d34a:	2302      	movlt	r3, #2
 800d34c:	fb92 f3f3 	sdivlt	r3, r2, r3
 800d350:	2500      	movs	r5, #0
 800d352:	260e      	movs	r6, #14
 800d354:	4295      	cmp	r5, r2
 800d356:	dc1e      	bgt.n	800d396 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800d358:	fb06 4003 	mla	r0, r6, r3, r4
 800d35c:	8887      	ldrh	r7, [r0, #4]
 800d35e:	42b9      	cmp	r1, r7
 800d360:	d01a      	beq.n	800d398 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 800d362:	d20d      	bcs.n	800d380 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 800d364:	1e5a      	subs	r2, r3, #1
 800d366:	4295      	cmp	r5, r2
 800d368:	dc15      	bgt.n	800d396 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800d36a:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 800d36e:	1a5b      	subs	r3, r3, r1
 800d370:	1ad3      	subs	r3, r2, r3
 800d372:	429a      	cmp	r2, r3
 800d374:	db0f      	blt.n	800d396 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800d376:	429d      	cmp	r5, r3
 800d378:	ddec      	ble.n	800d354 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 800d37a:	1953      	adds	r3, r2, r5
 800d37c:	105b      	asrs	r3, r3, #1
 800d37e:	e7e9      	b.n	800d354 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 800d380:	1c5d      	adds	r5, r3, #1
 800d382:	42aa      	cmp	r2, r5
 800d384:	db07      	blt.n	800d396 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800d386:	8a43      	ldrh	r3, [r0, #18]
 800d388:	1acb      	subs	r3, r1, r3
 800d38a:	442b      	add	r3, r5
 800d38c:	429d      	cmp	r5, r3
 800d38e:	dc02      	bgt.n	800d396 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800d390:	429a      	cmp	r2, r3
 800d392:	dadf      	bge.n	800d354 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 800d394:	e7f1      	b.n	800d37a <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 800d396:	2000      	movs	r0, #0
 800d398:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d39a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 800d39a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d39c:	4604      	mov	r4, r0
 800d39e:	4617      	mov	r7, r2
 800d3a0:	461e      	mov	r6, r3
 800d3a2:	b911      	cbnz	r1, 800d3aa <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 800d3a4:	2500      	movs	r5, #0
 800d3a6:	4628      	mov	r0, r5
 800d3a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d3aa:	290a      	cmp	r1, #10
 800d3ac:	d0fa      	beq.n	800d3a4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800d3ae:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 800d3b2:	4291      	cmp	r1, r2
 800d3b4:	d0f6      	beq.n	800d3a4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800d3b6:	f242 020b 	movw	r2, #8203	@ 0x200b
 800d3ba:	4291      	cmp	r1, r2
 800d3bc:	d0f2      	beq.n	800d3a4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800d3be:	f7ff ffaf 	bl	800d320 <_ZNK8touchgfx9ConstFont4findEt>
 800d3c2:	4605      	mov	r5, r0
 800d3c4:	b950      	cbnz	r0, 800d3dc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 800d3c6:	6823      	ldr	r3, [r4, #0]
 800d3c8:	4620      	mov	r0, r4
 800d3ca:	691b      	ldr	r3, [r3, #16]
 800d3cc:	4798      	blx	r3
 800d3ce:	4601      	mov	r1, r0
 800d3d0:	4620      	mov	r0, r4
 800d3d2:	f7ff ffa5 	bl	800d320 <_ZNK8touchgfx9ConstFont4findEt>
 800d3d6:	4605      	mov	r5, r0
 800d3d8:	2800      	cmp	r0, #0
 800d3da:	d0e3      	beq.n	800d3a4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800d3dc:	6823      	ldr	r3, [r4, #0]
 800d3de:	4629      	mov	r1, r5
 800d3e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d3e2:	4620      	mov	r0, r4
 800d3e4:	4798      	blx	r3
 800d3e6:	6038      	str	r0, [r7, #0]
 800d3e8:	6823      	ldr	r3, [r4, #0]
 800d3ea:	4620      	mov	r0, r4
 800d3ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d3ee:	4798      	blx	r3
 800d3f0:	7030      	strb	r0, [r6, #0]
 800d3f2:	e7d8      	b.n	800d3a6 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0800d3f4 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 800d3f4:	2000      	movs	r0, #0
 800d3f6:	4770      	bx	lr

0800d3f8 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 800d3f8:	2001      	movs	r0, #1
 800d3fa:	4770      	bx	lr

0800d3fc <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 800d3fc:	2002      	movs	r0, #2
 800d3fe:	4770      	bx	lr

0800d400 <_ZN8touchgfx6ScreenD1Ev>:
 800d400:	4770      	bx	lr

0800d402 <_ZN8touchgfx12GestureEventD1Ev>:
 800d402:	4770      	bx	lr

0800d404 <_ZN8touchgfx9DragEventD1Ev>:
 800d404:	4770      	bx	lr

0800d406 <_ZN8touchgfx10ClickEventD1Ev>:
 800d406:	4770      	bx	lr

0800d408 <_ZN8touchgfx10ClickEventD0Ev>:
 800d408:	b510      	push	{r4, lr}
 800d40a:	210c      	movs	r1, #12
 800d40c:	4604      	mov	r4, r0
 800d40e:	f004 fdc7 	bl	8011fa0 <_ZdlPvj>
 800d412:	4620      	mov	r0, r4
 800d414:	bd10      	pop	{r4, pc}

0800d416 <_ZN8touchgfx9DragEventD0Ev>:
 800d416:	b510      	push	{r4, lr}
 800d418:	2110      	movs	r1, #16
 800d41a:	4604      	mov	r4, r0
 800d41c:	f004 fdc0 	bl	8011fa0 <_ZdlPvj>
 800d420:	4620      	mov	r0, r4
 800d422:	bd10      	pop	{r4, pc}

0800d424 <_ZN8touchgfx12GestureEventD0Ev>:
 800d424:	b510      	push	{r4, lr}
 800d426:	210c      	movs	r1, #12
 800d428:	4604      	mov	r4, r0
 800d42a:	f004 fdb9 	bl	8011fa0 <_ZdlPvj>
 800d42e:	4620      	mov	r0, r4
 800d430:	bd10      	pop	{r4, pc}

0800d432 <_ZN8touchgfx6ScreenD0Ev>:
 800d432:	b510      	push	{r4, lr}
 800d434:	213c      	movs	r1, #60	@ 0x3c
 800d436:	4604      	mov	r4, r0
 800d438:	f004 fdb2 	bl	8011fa0 <_ZdlPvj>
 800d43c:	4620      	mov	r0, r4
 800d43e:	bd10      	pop	{r4, pc}

0800d440 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 800d440:	b530      	push	{r4, r5, lr}
 800d442:	460d      	mov	r5, r1
 800d444:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 800d446:	b087      	sub	sp, #28
 800d448:	4604      	mov	r4, r0
 800d44a:	b301      	cbz	r1, 800d48e <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 800d44c:	a801      	add	r0, sp, #4
 800d44e:	f7ff ff2d 	bl	800d2ac <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800d452:	892a      	ldrh	r2, [r5, #8]
 800d454:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800d458:	7928      	ldrb	r0, [r5, #4]
 800d45a:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 800d45e:	f88d 0010 	strb.w	r0, [sp, #16]
 800d462:	1ad2      	subs	r2, r2, r3
 800d464:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 800d466:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800d468:	f8ad 1012 	strh.w	r1, [sp, #18]
 800d46c:	441a      	add	r2, r3
 800d46e:	896b      	ldrh	r3, [r5, #10]
 800d470:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 800d474:	f8ad 2014 	strh.w	r2, [sp, #20]
 800d478:	1b5b      	subs	r3, r3, r5
 800d47a:	8ee5      	ldrh	r5, [r4, #54]	@ 0x36
 800d47c:	442b      	add	r3, r5
 800d47e:	4d05      	ldr	r5, [pc, #20]	@ (800d494 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 800d480:	9503      	str	r5, [sp, #12]
 800d482:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d486:	6803      	ldr	r3, [r0, #0]
 800d488:	a903      	add	r1, sp, #12
 800d48a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d48c:	4798      	blx	r3
 800d48e:	b007      	add	sp, #28
 800d490:	bd30      	pop	{r4, r5, pc}
 800d492:	bf00      	nop
 800d494:	080148ac 	.word	0x080148ac

0800d498 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 800d498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d49c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800d49e:	b08a      	sub	sp, #40	@ 0x28
 800d4a0:	4604      	mov	r4, r0
 800d4a2:	460d      	mov	r5, r1
 800d4a4:	b113      	cbz	r3, 800d4ac <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 800d4a6:	790b      	ldrb	r3, [r1, #4]
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d044      	beq.n	800d536 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 800d4ac:	f104 0804 	add.w	r8, r4, #4
 800d4b0:	4641      	mov	r1, r8
 800d4b2:	a803      	add	r0, sp, #12
 800d4b4:	f7ff fefa 	bl	800d2ac <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800d4b8:	792b      	ldrb	r3, [r5, #4]
 800d4ba:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 800d4be:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 800d4c2:	b983      	cbnz	r3, 800d4e6 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 800d4c4:	892a      	ldrh	r2, [r5, #8]
 800d4c6:	88e9      	ldrh	r1, [r5, #6]
 800d4c8:	f104 0336 	add.w	r3, r4, #54	@ 0x36
 800d4cc:	1b92      	subs	r2, r2, r6
 800d4ce:	1bc9      	subs	r1, r1, r7
 800d4d0:	9301      	str	r3, [sp, #4]
 800d4d2:	f104 0334 	add.w	r3, r4, #52	@ 0x34
 800d4d6:	9300      	str	r3, [sp, #0]
 800d4d8:	b212      	sxth	r2, r2
 800d4da:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 800d4de:	b209      	sxth	r1, r1
 800d4e0:	4640      	mov	r0, r8
 800d4e2:	f7fb f8cd 	bl	8008680 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 800d4e6:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800d4e8:	b329      	cbz	r1, 800d536 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 800d4ea:	a805      	add	r0, sp, #20
 800d4ec:	f7ff fede 	bl	800d2ac <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800d4f0:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 800d4f4:	792b      	ldrb	r3, [r5, #4]
 800d4f6:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800d4f8:	f88d 3020 	strb.w	r3, [sp, #32]
 800d4fc:	1abf      	subs	r7, r7, r2
 800d4fe:	88ea      	ldrh	r2, [r5, #6]
 800d500:	4417      	add	r7, r2
 800d502:	8ea2      	ldrh	r2, [r4, #52]	@ 0x34
 800d504:	4417      	add	r7, r2
 800d506:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 800d50a:	f8ad 7022 	strh.w	r7, [sp, #34]	@ 0x22
 800d50e:	1ab6      	subs	r6, r6, r2
 800d510:	892a      	ldrh	r2, [r5, #8]
 800d512:	4416      	add	r6, r2
 800d514:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 800d516:	4416      	add	r6, r2
 800d518:	f8ad 6024 	strh.w	r6, [sp, #36]	@ 0x24
 800d51c:	4a07      	ldr	r2, [pc, #28]	@ (800d53c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 800d51e:	9207      	str	r2, [sp, #28]
 800d520:	2600      	movs	r6, #0
 800d522:	f8ad 6026 	strh.w	r6, [sp, #38]	@ 0x26
 800d526:	6803      	ldr	r3, [r0, #0]
 800d528:	a907      	add	r1, sp, #28
 800d52a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d52c:	4798      	blx	r3
 800d52e:	792b      	ldrb	r3, [r5, #4]
 800d530:	b10b      	cbz	r3, 800d536 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 800d532:	e9c4 660c 	strd	r6, r6, [r4, #48]	@ 0x30
 800d536:	b00a      	add	sp, #40	@ 0x28
 800d538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d53c:	08014884 	.word	0x08014884

0800d540 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 800d540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d544:	460c      	mov	r4, r1
 800d546:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 800d548:	b088      	sub	sp, #32
 800d54a:	4605      	mov	r5, r0
 800d54c:	2900      	cmp	r1, #0
 800d54e:	d06d      	beq.n	800d62c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 800d550:	4668      	mov	r0, sp
 800d552:	f7ff feab 	bl	800d2ac <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800d556:	8ea9      	ldrh	r1, [r5, #52]	@ 0x34
 800d558:	88e3      	ldrh	r3, [r4, #6]
 800d55a:	f9bd 8000 	ldrsh.w	r8, [sp]
 800d55e:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 800d562:	440b      	add	r3, r1
 800d564:	b21b      	sxth	r3, r3
 800d566:	4543      	cmp	r3, r8
 800d568:	db31      	blt.n	800d5ce <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800d56a:	f8bd c004 	ldrh.w	ip, [sp, #4]
 800d56e:	44c4      	add	ip, r8
 800d570:	fa0f fc8c 	sxth.w	ip, ip
 800d574:	4563      	cmp	r3, ip
 800d576:	da2a      	bge.n	800d5ce <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800d578:	8eea      	ldrh	r2, [r5, #54]	@ 0x36
 800d57a:	8926      	ldrh	r6, [r4, #8]
 800d57c:	4416      	add	r6, r2
 800d57e:	b236      	sxth	r6, r6
 800d580:	42be      	cmp	r6, r7
 800d582:	db24      	blt.n	800d5ce <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800d584:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 800d588:	4438      	add	r0, r7
 800d58a:	b200      	sxth	r0, r0
 800d58c:	4286      	cmp	r6, r0
 800d58e:	da1e      	bge.n	800d5ce <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800d590:	8963      	ldrh	r3, [r4, #10]
 800d592:	4419      	add	r1, r3
 800d594:	b209      	sxth	r1, r1
 800d596:	4541      	cmp	r1, r8
 800d598:	db08      	blt.n	800d5ac <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 800d59a:	4561      	cmp	r1, ip
 800d59c:	da06      	bge.n	800d5ac <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 800d59e:	89a3      	ldrh	r3, [r4, #12]
 800d5a0:	441a      	add	r2, r3
 800d5a2:	b212      	sxth	r2, r2
 800d5a4:	42ba      	cmp	r2, r7
 800d5a6:	db01      	blt.n	800d5ac <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 800d5a8:	4282      	cmp	r2, r0
 800d5aa:	db10      	blt.n	800d5ce <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800d5ac:	4b21      	ldr	r3, [pc, #132]	@ (800d634 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 800d5ae:	9304      	str	r3, [sp, #16]
 800d5b0:	2302      	movs	r3, #2
 800d5b2:	f88d 3014 	strb.w	r3, [sp, #20]
 800d5b6:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 800d5b8:	2300      	movs	r3, #0
 800d5ba:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d5be:	f8ad 3018 	strh.w	r3, [sp, #24]
 800d5c2:	f8ad 301a 	strh.w	r3, [sp, #26]
 800d5c6:	6803      	ldr	r3, [r0, #0]
 800d5c8:	a904      	add	r1, sp, #16
 800d5ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d5cc:	4798      	blx	r3
 800d5ce:	1d29      	adds	r1, r5, #4
 800d5d0:	a802      	add	r0, sp, #8
 800d5d2:	f7ff fe6b 	bl	800d2ac <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800d5d6:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800d5da:	88e0      	ldrh	r0, [r4, #6]
 800d5dc:	7921      	ldrb	r1, [r4, #4]
 800d5de:	f8b5 c034 	ldrh.w	ip, [r5, #52]	@ 0x34
 800d5e2:	8922      	ldrh	r2, [r4, #8]
 800d5e4:	8eee      	ldrh	r6, [r5, #54]	@ 0x36
 800d5e6:	f88d 1014 	strb.w	r1, [sp, #20]
 800d5ea:	eba3 0808 	sub.w	r8, r3, r8
 800d5ee:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800d5f2:	1bdf      	subs	r7, r3, r7
 800d5f4:	b2bb      	uxth	r3, r7
 800d5f6:	fa1f f888 	uxth.w	r8, r8
 800d5fa:	8967      	ldrh	r7, [r4, #10]
 800d5fc:	89a4      	ldrh	r4, [r4, #12]
 800d5fe:	4440      	add	r0, r8
 800d600:	4460      	add	r0, ip
 800d602:	441a      	add	r2, r3
 800d604:	44b8      	add	r8, r7
 800d606:	4423      	add	r3, r4
 800d608:	f8ad 0016 	strh.w	r0, [sp, #22]
 800d60c:	4433      	add	r3, r6
 800d60e:	4432      	add	r2, r6
 800d610:	44e0      	add	r8, ip
 800d612:	4c09      	ldr	r4, [pc, #36]	@ (800d638 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 800d614:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 800d616:	9404      	str	r4, [sp, #16]
 800d618:	f8ad 2018 	strh.w	r2, [sp, #24]
 800d61c:	f8ad 801a 	strh.w	r8, [sp, #26]
 800d620:	f8ad 301c 	strh.w	r3, [sp, #28]
 800d624:	6803      	ldr	r3, [r0, #0]
 800d626:	a904      	add	r1, sp, #16
 800d628:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d62a:	4798      	blx	r3
 800d62c:	b008      	add	sp, #32
 800d62e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d632:	bf00      	nop
 800d634:	08014884 	.word	0x08014884
 800d638:	08014898 	.word	0x08014898

0800d63c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 800d63c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d63e:	4604      	mov	r4, r0
 800d640:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 800d644:	3201      	adds	r2, #1
 800d646:	d112      	bne.n	800d66e <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 800d648:	6803      	ldr	r3, [r0, #0]
 800d64a:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 800d64e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800d652:	f8ad 1004 	strh.w	r1, [sp, #4]
 800d656:	2500      	movs	r5, #0
 800d658:	9500      	str	r5, [sp, #0]
 800d65a:	466d      	mov	r5, sp
 800d65c:	4629      	mov	r1, r5
 800d65e:	f8ad 2006 	strh.w	r2, [sp, #6]
 800d662:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d664:	4798      	blx	r3
 800d666:	e895 0003 	ldmia.w	r5, {r0, r1}
 800d66a:	e884 0003 	stmia.w	r4, {r0, r1}
 800d66e:	4620      	mov	r0, r4
 800d670:	b003      	add	sp, #12
 800d672:	bd30      	pop	{r4, r5, pc}

0800d674 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 800d674:	b513      	push	{r0, r1, r4, lr}
 800d676:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 800d67a:	3301      	adds	r3, #1
 800d67c:	4604      	mov	r4, r0
 800d67e:	d109      	bne.n	800d694 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 800d680:	4601      	mov	r1, r0
 800d682:	4668      	mov	r0, sp
 800d684:	f7ff fe12 	bl	800d2ac <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800d688:	f8bd 3000 	ldrh.w	r3, [sp]
 800d68c:	8423      	strh	r3, [r4, #32]
 800d68e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800d692:	8463      	strh	r3, [r4, #34]	@ 0x22
 800d694:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 800d698:	b002      	add	sp, #8
 800d69a:	bd10      	pop	{r4, pc}

0800d69c <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 800d69c:	b513      	push	{r0, r1, r4, lr}
 800d69e:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
 800d6a2:	3301      	adds	r3, #1
 800d6a4:	4604      	mov	r4, r0
 800d6a6:	d109      	bne.n	800d6bc <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 800d6a8:	4601      	mov	r1, r0
 800d6aa:	4668      	mov	r0, sp
 800d6ac:	f7ff fdfe 	bl	800d2ac <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800d6b0:	f8bd 3000 	ldrh.w	r3, [sp]
 800d6b4:	8423      	strh	r3, [r4, #32]
 800d6b6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800d6ba:	8463      	strh	r3, [r4, #34]	@ 0x22
 800d6bc:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	@ 0x22
 800d6c0:	b002      	add	sp, #8
 800d6c2:	bd10      	pop	{r4, pc}

0800d6c4 <_ZN8touchgfx6ScreenC1Ev>:
 800d6c4:	b570      	push	{r4, r5, r6, lr}
 800d6c6:	4605      	mov	r5, r0
 800d6c8:	4b16      	ldr	r3, [pc, #88]	@ (800d724 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 800d6ca:	f845 3b04 	str.w	r3, [r5], #4
 800d6ce:	2300      	movs	r3, #0
 800d6d0:	8103      	strh	r3, [r0, #8]
 800d6d2:	8143      	strh	r3, [r0, #10]
 800d6d4:	8183      	strh	r3, [r0, #12]
 800d6d6:	81c3      	strh	r3, [r0, #14]
 800d6d8:	8203      	strh	r3, [r0, #16]
 800d6da:	8243      	strh	r3, [r0, #18]
 800d6dc:	8283      	strh	r3, [r0, #20]
 800d6de:	82c3      	strh	r3, [r0, #22]
 800d6e0:	e9c0 3306 	strd	r3, r3, [r0, #24]
 800d6e4:	6203      	str	r3, [r0, #32]
 800d6e6:	8483      	strh	r3, [r0, #36]	@ 0x24
 800d6e8:	84c3      	strh	r3, [r0, #38]	@ 0x26
 800d6ea:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
 800d6ee:	4a0e      	ldr	r2, [pc, #56]	@ (800d728 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 800d6f0:	6343      	str	r3, [r0, #52]	@ 0x34
 800d6f2:	e9c0 330b 	strd	r3, r3, [r0, #44]	@ 0x2c
 800d6f6:	4b0d      	ldr	r3, [pc, #52]	@ (800d72c <_ZN8touchgfx6ScreenC1Ev+0x68>)
 800d6f8:	6042      	str	r2, [r0, #4]
 800d6fa:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d6fe:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800d700:	4a0b      	ldr	r2, [pc, #44]	@ (800d730 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 800d702:	4604      	mov	r4, r0
 800d704:	2101      	movs	r1, #1
 800d706:	f880 1029 	strb.w	r1, [r0, #41]	@ 0x29
 800d70a:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 800d70e:	f9b2 1000 	ldrsh.w	r1, [r2]
 800d712:	4628      	mov	r0, r5
 800d714:	4798      	blx	r3
 800d716:	6863      	ldr	r3, [r4, #4]
 800d718:	4628      	mov	r0, r5
 800d71a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d71c:	4631      	mov	r1, r6
 800d71e:	4798      	blx	r3
 800d720:	4620      	mov	r0, r4
 800d722:	bd70      	pop	{r4, r5, r6, pc}
 800d724:	080148c0 	.word	0x080148c0
 800d728:	08014530 	.word	0x08014530
 800d72c:	2001262e 	.word	0x2001262e
 800d730:	2001262c 	.word	0x2001262c

0800d734 <_ZN8touchgfx6Screen4drawEv>:
 800d734:	b507      	push	{r0, r1, r2, lr}
 800d736:	4b09      	ldr	r3, [pc, #36]	@ (800d75c <_ZN8touchgfx6Screen4drawEv+0x28>)
 800d738:	f9b3 2000 	ldrsh.w	r2, [r3]
 800d73c:	4b08      	ldr	r3, [pc, #32]	@ (800d760 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 800d73e:	f8ad 2004 	strh.w	r2, [sp, #4]
 800d742:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d746:	f8ad 3006 	strh.w	r3, [sp, #6]
 800d74a:	6803      	ldr	r3, [r0, #0]
 800d74c:	2100      	movs	r1, #0
 800d74e:	9100      	str	r1, [sp, #0]
 800d750:	689b      	ldr	r3, [r3, #8]
 800d752:	4669      	mov	r1, sp
 800d754:	4798      	blx	r3
 800d756:	b003      	add	sp, #12
 800d758:	f85d fb04 	ldr.w	pc, [sp], #4
 800d75c:	2001262c 	.word	0x2001262c
 800d760:	2001262e 	.word	0x2001262e

0800d764 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 800d764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d768:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	b089      	sub	sp, #36	@ 0x24
 800d770:	4680      	mov	r8, r0
 800d772:	460c      	mov	r4, r1
 800d774:	4615      	mov	r5, r2
 800d776:	dd0e      	ble.n	800d796 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 800d778:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	dd0a      	ble.n	800d796 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 800d780:	4628      	mov	r0, r5
 800d782:	f7ff ff5b 	bl	800d63c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 800d786:	4621      	mov	r1, r4
 800d788:	f7fe fa3b 	bl	800bc02 <_ZNK8touchgfx4Rect9intersectERKS0_>
 800d78c:	69eb      	ldr	r3, [r5, #28]
 800d78e:	b928      	cbnz	r0, 800d79c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 800d790:	461d      	mov	r5, r3
 800d792:	2b00      	cmp	r3, #0
 800d794:	d1f4      	bne.n	800d780 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 800d796:	b009      	add	sp, #36	@ 0x24
 800d798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d79c:	ae04      	add	r6, sp, #16
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	f000 80b5 	beq.w	800d90e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 800d7a4:	682b      	ldr	r3, [r5, #0]
 800d7a6:	4629      	mov	r1, r5
 800d7a8:	68db      	ldr	r3, [r3, #12]
 800d7aa:	a802      	add	r0, sp, #8
 800d7ac:	4798      	blx	r3
 800d7ae:	4628      	mov	r0, r5
 800d7b0:	f7ff ff60 	bl	800d674 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 800d7b4:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 800d7b8:	4407      	add	r7, r0
 800d7ba:	4628      	mov	r0, r5
 800d7bc:	f7ff ff6e 	bl	800d69c <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 800d7c0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800d7c4:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 800d7c8:	f8ad 2014 	strh.w	r2, [sp, #20]
 800d7cc:	4418      	add	r0, r3
 800d7ce:	4621      	mov	r1, r4
 800d7d0:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800d7d4:	f8ad 0012 	strh.w	r0, [sp, #18]
 800d7d8:	b23f      	sxth	r7, r7
 800d7da:	4630      	mov	r0, r6
 800d7dc:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d7e0:	f8ad 7010 	strh.w	r7, [sp, #16]
 800d7e4:	f7fb f830 	bl	8008848 <_ZN8touchgfx4RectaNERKS0_>
 800d7e8:	4628      	mov	r0, r5
 800d7ea:	f7ff ff27 	bl	800d63c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 800d7ee:	4602      	mov	r2, r0
 800d7f0:	e896 0003 	ldmia.w	r6, {r0, r1}
 800d7f4:	ab06      	add	r3, sp, #24
 800d7f6:	e883 0003 	stmia.w	r3, {r0, r1}
 800d7fa:	4611      	mov	r1, r2
 800d7fc:	4618      	mov	r0, r3
 800d7fe:	f7fb f823 	bl	8008848 <_ZN8touchgfx4RectaNERKS0_>
 800d802:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 800d806:	f9b4 1000 	ldrsh.w	r1, [r4]
 800d80a:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 800d80e:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 800d812:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 800d816:	4299      	cmp	r1, r3
 800d818:	d10b      	bne.n	800d832 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 800d81a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 800d81e:	4552      	cmp	r2, sl
 800d820:	d107      	bne.n	800d832 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 800d822:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 800d826:	455a      	cmp	r2, fp
 800d828:	d103      	bne.n	800d832 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 800d82a:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800d82e:	454a      	cmp	r2, r9
 800d830:	d06d      	beq.n	800d90e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 800d832:	f1bb 0f00 	cmp.w	fp, #0
 800d836:	dd65      	ble.n	800d904 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 800d838:	f1b9 0f00 	cmp.w	r9, #0
 800d83c:	dd62      	ble.n	800d904 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 800d83e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 800d842:	fa1f f08a 	uxth.w	r0, sl
 800d846:	4552      	cmp	r2, sl
 800d848:	9000      	str	r0, [sp, #0]
 800d84a:	da12      	bge.n	800d872 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 800d84c:	9301      	str	r3, [sp, #4]
 800d84e:	9b00      	ldr	r3, [sp, #0]
 800d850:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 800d854:	f8ad 2012 	strh.w	r2, [sp, #18]
 800d858:	1a9a      	subs	r2, r3, r2
 800d85a:	f8ad 1010 	strh.w	r1, [sp, #16]
 800d85e:	f8ad 0014 	strh.w	r0, [sp, #20]
 800d862:	f8ad 2016 	strh.w	r2, [sp, #22]
 800d866:	69ea      	ldr	r2, [r5, #28]
 800d868:	4631      	mov	r1, r6
 800d86a:	4640      	mov	r0, r8
 800d86c:	f7ff ff7a 	bl	800d764 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800d870:	9b01      	ldr	r3, [sp, #4]
 800d872:	f9b4 2000 	ldrsh.w	r2, [r4]
 800d876:	429a      	cmp	r2, r3
 800d878:	b29f      	uxth	r7, r3
 800d87a:	da0d      	bge.n	800d898 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 800d87c:	f8ad 2010 	strh.w	r2, [sp, #16]
 800d880:	1aba      	subs	r2, r7, r2
 800d882:	f8ad a012 	strh.w	sl, [sp, #18]
 800d886:	f8ad 2014 	strh.w	r2, [sp, #20]
 800d88a:	f8ad 9016 	strh.w	r9, [sp, #22]
 800d88e:	69ea      	ldr	r2, [r5, #28]
 800d890:	4631      	mov	r1, r6
 800d892:	4640      	mov	r0, r8
 800d894:	f7ff ff66 	bl	800d764 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800d898:	8822      	ldrh	r2, [r4, #0]
 800d89a:	88a3      	ldrh	r3, [r4, #4]
 800d89c:	445f      	add	r7, fp
 800d89e:	4413      	add	r3, r2
 800d8a0:	b29b      	uxth	r3, r3
 800d8a2:	b2bf      	uxth	r7, r7
 800d8a4:	b23a      	sxth	r2, r7
 800d8a6:	b219      	sxth	r1, r3
 800d8a8:	4291      	cmp	r1, r2
 800d8aa:	dd0d      	ble.n	800d8c8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 800d8ac:	1bdb      	subs	r3, r3, r7
 800d8ae:	f8ad 2010 	strh.w	r2, [sp, #16]
 800d8b2:	f8ad a012 	strh.w	sl, [sp, #18]
 800d8b6:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d8ba:	f8ad 9016 	strh.w	r9, [sp, #22]
 800d8be:	69ea      	ldr	r2, [r5, #28]
 800d8c0:	4631      	mov	r1, r6
 800d8c2:	4640      	mov	r0, r8
 800d8c4:	f7ff ff4e 	bl	800d764 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800d8c8:	88e2      	ldrh	r2, [r4, #6]
 800d8ca:	8863      	ldrh	r3, [r4, #2]
 800d8cc:	4413      	add	r3, r2
 800d8ce:	9a00      	ldr	r2, [sp, #0]
 800d8d0:	444a      	add	r2, r9
 800d8d2:	b29b      	uxth	r3, r3
 800d8d4:	fa1f f982 	uxth.w	r9, r2
 800d8d8:	fa0f f289 	sxth.w	r2, r9
 800d8dc:	b219      	sxth	r1, r3
 800d8de:	428a      	cmp	r2, r1
 800d8e0:	da15      	bge.n	800d90e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 800d8e2:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800d8e6:	f9b4 0000 	ldrsh.w	r0, [r4]
 800d8ea:	f8ad 1014 	strh.w	r1, [sp, #20]
 800d8ee:	eba3 0309 	sub.w	r3, r3, r9
 800d8f2:	f8ad 0010 	strh.w	r0, [sp, #16]
 800d8f6:	f8ad 2012 	strh.w	r2, [sp, #18]
 800d8fa:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d8fe:	69ea      	ldr	r2, [r5, #28]
 800d900:	4631      	mov	r1, r6
 800d902:	e001      	b.n	800d908 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 800d904:	69ea      	ldr	r2, [r5, #28]
 800d906:	4621      	mov	r1, r4
 800d908:	4640      	mov	r0, r8
 800d90a:	f7ff ff2b 	bl	800d764 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800d90e:	4628      	mov	r0, r5
 800d910:	f7ff fe94 	bl	800d63c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 800d914:	6861      	ldr	r1, [r4, #4]
 800d916:	4602      	mov	r2, r0
 800d918:	6820      	ldr	r0, [r4, #0]
 800d91a:	4633      	mov	r3, r6
 800d91c:	c303      	stmia	r3!, {r0, r1}
 800d91e:	4611      	mov	r1, r2
 800d920:	4630      	mov	r0, r6
 800d922:	f7fa ff91 	bl	8008848 <_ZN8touchgfx4RectaNERKS0_>
 800d926:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	f77f af33 	ble.w	800d796 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 800d930:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 800d934:	2b00      	cmp	r3, #0
 800d936:	f77f af2e 	ble.w	800d796 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 800d93a:	4628      	mov	r0, r5
 800d93c:	f7ff fe9a 	bl	800d674 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 800d940:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 800d944:	1a18      	subs	r0, r3, r0
 800d946:	f8ad 0010 	strh.w	r0, [sp, #16]
 800d94a:	4628      	mov	r0, r5
 800d94c:	f7ff fea6 	bl	800d69c <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 800d950:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800d954:	1a18      	subs	r0, r3, r0
 800d956:	f8ad 0012 	strh.w	r0, [sp, #18]
 800d95a:	682b      	ldr	r3, [r5, #0]
 800d95c:	4631      	mov	r1, r6
 800d95e:	689b      	ldr	r3, [r3, #8]
 800d960:	4628      	mov	r0, r5
 800d962:	4798      	blx	r3
 800d964:	e717      	b.n	800d796 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0800d966 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 800d966:	b570      	push	{r4, r5, r6, lr}
 800d968:	460c      	mov	r4, r1
 800d96a:	b086      	sub	sp, #24
 800d96c:	1d06      	adds	r6, r0, #4
 800d96e:	2300      	movs	r3, #0
 800d970:	4631      	mov	r1, r6
 800d972:	4605      	mov	r5, r0
 800d974:	a802      	add	r0, sp, #8
 800d976:	9301      	str	r3, [sp, #4]
 800d978:	f7ff fc98 	bl	800d2ac <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800d97c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800d980:	8822      	ldrh	r2, [r4, #0]
 800d982:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 800d986:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 800d98a:	f8ad 0014 	strh.w	r0, [sp, #20]
 800d98e:	1ad2      	subs	r2, r2, r3
 800d990:	8863      	ldrh	r3, [r4, #2]
 800d992:	f8ad 2010 	strh.w	r2, [sp, #16]
 800d996:	1a5b      	subs	r3, r3, r1
 800d998:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 800d99c:	f8ad 1016 	strh.w	r1, [sp, #22]
 800d9a0:	aa01      	add	r2, sp, #4
 800d9a2:	a904      	add	r1, sp, #16
 800d9a4:	4630      	mov	r0, r6
 800d9a6:	f8ad 3012 	strh.w	r3, [sp, #18]
 800d9aa:	f7fb f825 	bl	80089f8 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 800d9ae:	9a01      	ldr	r2, [sp, #4]
 800d9b0:	b11a      	cbz	r2, 800d9ba <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 800d9b2:	4621      	mov	r1, r4
 800d9b4:	4628      	mov	r0, r5
 800d9b6:	f7ff fed5 	bl	800d764 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800d9ba:	b006      	add	sp, #24
 800d9bc:	bd70      	pop	{r4, r5, r6, pc}

0800d9be <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 800d9be:	b530      	push	{r4, r5, lr}
 800d9c0:	4602      	mov	r2, r0
 800d9c2:	4604      	mov	r4, r0
 800d9c4:	f852 0f08 	ldr.w	r0, [r2, #8]!
 800d9c8:	b085      	sub	sp, #20
 800d9ca:	460d      	mov	r5, r1
 800d9cc:	6851      	ldr	r1, [r2, #4]
 800d9ce:	466b      	mov	r3, sp
 800d9d0:	c303      	stmia	r3!, {r0, r1}
 800d9d2:	4629      	mov	r1, r5
 800d9d4:	4668      	mov	r0, sp
 800d9d6:	f7fa ff37 	bl	8008848 <_ZN8touchgfx4RectaNERKS0_>
 800d9da:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 800d9de:	b12b      	cbz	r3, 800d9ec <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 800d9e0:	4669      	mov	r1, sp
 800d9e2:	4620      	mov	r0, r4
 800d9e4:	f7ff ffbf 	bl	800d966 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 800d9e8:	b005      	add	sp, #20
 800d9ea:	bd30      	pop	{r4, r5, pc}
 800d9ec:	3404      	adds	r4, #4
 800d9ee:	4621      	mov	r1, r4
 800d9f0:	a802      	add	r0, sp, #8
 800d9f2:	f7ff fc5b 	bl	800d2ac <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800d9f6:	f8bd 3000 	ldrh.w	r3, [sp]
 800d9fa:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 800d9fe:	1a9b      	subs	r3, r3, r2
 800da00:	f8ad 3000 	strh.w	r3, [sp]
 800da04:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 800da08:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800da0c:	4669      	mov	r1, sp
 800da0e:	1a9b      	subs	r3, r3, r2
 800da10:	4620      	mov	r0, r4
 800da12:	f8ad 3002 	strh.w	r3, [sp, #2]
 800da16:	f7fa ffb6 	bl	8008986 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 800da1a:	e7e5      	b.n	800d9e8 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0800da1c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 800da1c:	680a      	ldr	r2, [r1, #0]
 800da1e:	460b      	mov	r3, r1
 800da20:	6992      	ldr	r2, [r2, #24]
 800da22:	1d01      	adds	r1, r0, #4
 800da24:	4618      	mov	r0, r3
 800da26:	4710      	bx	r2

0800da28 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
 800da28:	4298      	cmp	r0, r3
 800da2a:	d200      	bcs.n	800da2e <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x6>
 800da2c:	b913      	cbnz	r3, 800da34 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0xc>
 800da2e:	440a      	add	r2, r1
 800da30:	b210      	sxth	r0, r2
 800da32:	4770      	bx	lr
 800da34:	ee07 0a90 	vmov	s15, r0
 800da38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800da3c:	ee07 3a90 	vmov	s15, r3
 800da40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800da44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800da48:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800da4c:	ee37 7a66 	vsub.f32	s14, s14, s13
 800da50:	ee07 2a90 	vmov	s15, r2
 800da54:	ee67 5a07 	vmul.f32	s11, s14, s14
 800da58:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800da5c:	eee5 6a87 	vfma.f32	s13, s11, s14
 800da60:	ee07 1a90 	vmov	s15, r1
 800da64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800da68:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800da6c:	eee6 7a26 	vfma.f32	s15, s12, s13
 800da70:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800da74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da78:	bfcc      	ite	gt
 800da7a:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 800da7e:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 800da82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800da86:	ee17 3a90 	vmov	r3, s15
 800da8a:	b218      	sxth	r0, r3
 800da8c:	4770      	bx	lr

0800da8e <_ZN8touchgfx12TextProviderC1Ev>:
 800da8e:	b538      	push	{r3, r4, r5, lr}
 800da90:	2500      	movs	r5, #0
 800da92:	2302      	movs	r3, #2
 800da94:	4604      	mov	r4, r0
 800da96:	e9c0 5500 	strd	r5, r5, [r0]
 800da9a:	7403      	strb	r3, [r0, #16]
 800da9c:	6145      	str	r5, [r0, #20]
 800da9e:	7605      	strb	r5, [r0, #24]
 800daa0:	83c5      	strh	r5, [r0, #30]
 800daa2:	8405      	strh	r5, [r0, #32]
 800daa4:	86c5      	strh	r5, [r0, #54]	@ 0x36
 800daa6:	8705      	strh	r5, [r0, #56]	@ 0x38
 800daa8:	87c5      	strh	r5, [r0, #62]	@ 0x3e
 800daaa:	f8a0 5040 	strh.w	r5, [r0, #64]	@ 0x40
 800daae:	e9c0 5511 	strd	r5, r5, [r0, #68]	@ 0x44
 800dab2:	220e      	movs	r2, #14
 800dab4:	4629      	mov	r1, r5
 800dab6:	304c      	adds	r0, #76	@ 0x4c
 800dab8:	f004 fca7 	bl	801240a <memset>
 800dabc:	2301      	movs	r3, #1
 800dabe:	4620      	mov	r0, r4
 800dac0:	f8a4 505a 	strh.w	r5, [r4, #90]	@ 0x5a
 800dac4:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 800dac8:	f8a4 505e 	strh.w	r5, [r4, #94]	@ 0x5e
 800dacc:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
 800dad0:	f884 5061 	strb.w	r5, [r4, #97]	@ 0x61
 800dad4:	f7f5 fcce 	bl	8003474 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 800dad8:	4620      	mov	r0, r4
 800dada:	bd38      	pop	{r3, r4, r5, pc}

0800dadc <_ZN8touchgfx12TextProvider11endOfStringEv>:
 800dadc:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 800dade:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800dae2:	8c40      	ldrh	r0, [r0, #34]	@ 0x22
 800dae4:	fab0 f080 	clz	r0, r0
 800dae8:	0940      	lsrs	r0, r0, #5
 800daea:	4770      	bx	lr

0800daec <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 800daec:	b530      	push	{r4, r5, lr}
 800daee:	2500      	movs	r5, #0
 800daf0:	2401      	movs	r4, #1
 800daf2:	6843      	ldr	r3, [r0, #4]
 800daf4:	b913      	cbnz	r3, 800dafc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 800daf6:	6803      	ldr	r3, [r0, #0]
 800daf8:	b313      	cbz	r3, 800db40 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 800dafa:	6043      	str	r3, [r0, #4]
 800dafc:	7e03      	ldrb	r3, [r0, #24]
 800dafe:	b143      	cbz	r3, 800db12 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 800db00:	6943      	ldr	r3, [r0, #20]
 800db02:	b12b      	cbz	r3, 800db10 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 800db04:	881a      	ldrh	r2, [r3, #0]
 800db06:	b11a      	cbz	r2, 800db10 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 800db08:	1c9a      	adds	r2, r3, #2
 800db0a:	6142      	str	r2, [r0, #20]
 800db0c:	8818      	ldrh	r0, [r3, #0]
 800db0e:	bd30      	pop	{r4, r5, pc}
 800db10:	7605      	strb	r5, [r0, #24]
 800db12:	6843      	ldr	r3, [r0, #4]
 800db14:	8819      	ldrh	r1, [r3, #0]
 800db16:	b199      	cbz	r1, 800db40 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 800db18:	1c9a      	adds	r2, r3, #2
 800db1a:	2902      	cmp	r1, #2
 800db1c:	6042      	str	r2, [r0, #4]
 800db1e:	d1f5      	bne.n	800db0c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 800db20:	7c03      	ldrb	r3, [r0, #16]
 800db22:	2b01      	cmp	r3, #1
 800db24:	d8e5      	bhi.n	800daf2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800db26:	1c5a      	adds	r2, r3, #1
 800db28:	3302      	adds	r3, #2
 800db2a:	7402      	strb	r2, [r0, #16]
 800db2c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800db30:	6143      	str	r3, [r0, #20]
 800db32:	2b00      	cmp	r3, #0
 800db34:	d0dd      	beq.n	800daf2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800db36:	881b      	ldrh	r3, [r3, #0]
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d0da      	beq.n	800daf2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800db3c:	7604      	strb	r4, [r0, #24]
 800db3e:	e7d8      	b.n	800daf2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800db40:	2000      	movs	r0, #0
 800db42:	e7e4      	b.n	800db0e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0800db44 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 800db44:	b430      	push	{r4, r5}
 800db46:	6001      	str	r1, [r0, #0]
 800db48:	2100      	movs	r1, #0
 800db4a:	6041      	str	r1, [r0, #4]
 800db4c:	6815      	ldr	r5, [r2, #0]
 800db4e:	6085      	str	r5, [r0, #8]
 800db50:	6852      	ldr	r2, [r2, #4]
 800db52:	6443      	str	r3, [r0, #68]	@ 0x44
 800db54:	9b02      	ldr	r3, [sp, #8]
 800db56:	60c2      	str	r2, [r0, #12]
 800db58:	7401      	strb	r1, [r0, #16]
 800db5a:	6141      	str	r1, [r0, #20]
 800db5c:	7601      	strb	r1, [r0, #24]
 800db5e:	8701      	strh	r1, [r0, #56]	@ 0x38
 800db60:	8401      	strh	r1, [r0, #32]
 800db62:	f8a0 1040 	strh.w	r1, [r0, #64]	@ 0x40
 800db66:	6483      	str	r3, [r0, #72]	@ 0x48
 800db68:	bc30      	pop	{r4, r5}
 800db6a:	f7f5 bc83 	b.w	8003474 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0800db6e <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>:
 800db6e:	b408      	push	{r3}
 800db70:	b510      	push	{r4, lr}
 800db72:	b085      	sub	sp, #20
 800db74:	ac07      	add	r4, sp, #28
 800db76:	f854 3b04 	ldr.w	r3, [r4], #4
 800db7a:	9300      	str	r3, [sp, #0]
 800db7c:	4613      	mov	r3, r2
 800db7e:	4622      	mov	r2, r4
 800db80:	9403      	str	r4, [sp, #12]
 800db82:	f7ff ffdf 	bl	800db44 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800db86:	b005      	add	sp, #20
 800db88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800db8c:	b001      	add	sp, #4
 800db8e:	4770      	bx	lr

0800db90 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 800db90:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db92:	4605      	mov	r5, r0
 800db94:	4608      	mov	r0, r1
 800db96:	b1e9      	cbz	r1, 800dbd4 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x44>
 800db98:	f105 044c 	add.w	r4, r5, #76	@ 0x4c
 800db9c:	460b      	mov	r3, r1
 800db9e:	f101 0708 	add.w	r7, r1, #8
 800dba2:	4622      	mov	r2, r4
 800dba4:	6818      	ldr	r0, [r3, #0]
 800dba6:	6859      	ldr	r1, [r3, #4]
 800dba8:	4626      	mov	r6, r4
 800dbaa:	c603      	stmia	r6!, {r0, r1}
 800dbac:	3308      	adds	r3, #8
 800dbae:	42bb      	cmp	r3, r7
 800dbb0:	4634      	mov	r4, r6
 800dbb2:	d1f7      	bne.n	800dba4 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 800dbb4:	6818      	ldr	r0, [r3, #0]
 800dbb6:	6030      	str	r0, [r6, #0]
 800dbb8:	889b      	ldrh	r3, [r3, #4]
 800dbba:	80b3      	strh	r3, [r6, #4]
 800dbbc:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 800dbc0:	015b      	lsls	r3, r3, #5
 800dbc2:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 800dbc6:	f895 3052 	ldrb.w	r3, [r5, #82]	@ 0x52
 800dbca:	430b      	orrs	r3, r1
 800dbcc:	425b      	negs	r3, r3
 800dbce:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 800dbd2:	4610      	mov	r0, r2
 800dbd4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800dbd6 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 800dbd6:	b538      	push	{r3, r4, r5, lr}
 800dbd8:	460c      	mov	r4, r1
 800dbda:	6811      	ldr	r1, [r2, #0]
 800dbdc:	4610      	mov	r0, r2
 800dbde:	68cd      	ldr	r5, [r1, #12]
 800dbe0:	4619      	mov	r1, r3
 800dbe2:	47a8      	blx	r5
 800dbe4:	2800      	cmp	r0, #0
 800dbe6:	bf08      	it	eq
 800dbe8:	4620      	moveq	r0, r4
 800dbea:	bd38      	pop	{r3, r4, r5, pc}

0800dbec <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 800dbec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbf0:	468c      	mov	ip, r1
 800dbf2:	4605      	mov	r5, r0
 800dbf4:	4614      	mov	r4, r2
 800dbf6:	b942      	cbnz	r2, 800dc0a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1e>
 800dbf8:	f8a5 205a 	strh.w	r2, [r5, #90]	@ 0x5a
 800dbfc:	f8a5 205c 	strh.w	r2, [r5, #92]	@ 0x5c
 800dc00:	f8a5 205e 	strh.w	r2, [r5, #94]	@ 0x5e
 800dc04:	4620      	mov	r0, r4
 800dc06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc0a:	7b50      	ldrb	r0, [r2, #13]
 800dc0c:	8893      	ldrh	r3, [r2, #4]
 800dc0e:	0106      	lsls	r6, r0, #4
 800dc10:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 800dc14:	79e6      	ldrb	r6, [r4, #7]
 800dc16:	f46f 6163 	mvn.w	r1, #3632	@ 0xe30
 800dc1a:	4316      	orrs	r6, r2
 800dc1c:	185a      	adds	r2, r3, r1
 800dc1e:	b291      	uxth	r1, r2
 800dc20:	291d      	cmp	r1, #29
 800dc22:	b2b7      	uxth	r7, r6
 800dc24:	d87e      	bhi.n	800dd24 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x138>
 800dc26:	2201      	movs	r2, #1
 800dc28:	408a      	lsls	r2, r1
 800dc2a:	498a      	ldr	r1, [pc, #552]	@ (800de54 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x268>)
 800dc2c:	420a      	tst	r2, r1
 800dc2e:	ea4f 06e6 	mov.w	r6, r6, asr #3
 800dc32:	d12d      	bne.n	800dc90 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 800dc34:	f412 7f60 	tst.w	r2, #896	@ 0x380
 800dc38:	d074      	beq.n	800dd24 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x138>
 800dc3a:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 800dc3e:	4623      	mov	r3, r4
 800dc40:	f104 0e08 	add.w	lr, r4, #8
 800dc44:	4614      	mov	r4, r2
 800dc46:	6818      	ldr	r0, [r3, #0]
 800dc48:	6859      	ldr	r1, [r3, #4]
 800dc4a:	4694      	mov	ip, r2
 800dc4c:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 800dc50:	3308      	adds	r3, #8
 800dc52:	4573      	cmp	r3, lr
 800dc54:	4662      	mov	r2, ip
 800dc56:	d1f6      	bne.n	800dc46 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5a>
 800dc58:	6818      	ldr	r0, [r3, #0]
 800dc5a:	f8cc 0000 	str.w	r0, [ip]
 800dc5e:	889b      	ldrh	r3, [r3, #4]
 800dc60:	f8ac 3004 	strh.w	r3, [ip, #4]
 800dc64:	f8b5 105c 	ldrh.w	r1, [r5, #92]	@ 0x5c
 800dc68:	f895 0059 	ldrb.w	r0, [r5, #89]	@ 0x59
 800dc6c:	b2b3      	uxth	r3, r6
 800dc6e:	1aca      	subs	r2, r1, r3
 800dc70:	b292      	uxth	r2, r2
 800dc72:	f885 2054 	strb.w	r2, [r5, #84]	@ 0x54
 800dc76:	10d2      	asrs	r2, r2, #3
 800dc78:	f020 0060 	bic.w	r0, r0, #96	@ 0x60
 800dc7c:	f002 0260 	and.w	r2, r2, #96	@ 0x60
 800dc80:	4302      	orrs	r2, r0
 800dc82:	1bcf      	subs	r7, r1, r7
 800dc84:	f885 2059 	strb.w	r2, [r5, #89]	@ 0x59
 800dc88:	1afb      	subs	r3, r7, r3
 800dc8a:	f8a5 305c 	strh.w	r3, [r5, #92]	@ 0x5c
 800dc8e:	e7b9      	b.n	800dc04 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 800dc90:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 800dc94:	4623      	mov	r3, r4
 800dc96:	f104 0808 	add.w	r8, r4, #8
 800dc9a:	4614      	mov	r4, r2
 800dc9c:	6818      	ldr	r0, [r3, #0]
 800dc9e:	6859      	ldr	r1, [r3, #4]
 800dca0:	4696      	mov	lr, r2
 800dca2:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 800dca6:	3308      	adds	r3, #8
 800dca8:	4543      	cmp	r3, r8
 800dcaa:	4672      	mov	r2, lr
 800dcac:	d1f6      	bne.n	800dc9c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb0>
 800dcae:	6818      	ldr	r0, [r3, #0]
 800dcb0:	f8ce 0000 	str.w	r0, [lr]
 800dcb4:	889b      	ldrh	r3, [r3, #4]
 800dcb6:	f8ae 3004 	strh.w	r3, [lr, #4]
 800dcba:	8eeb      	ldrh	r3, [r5, #54]	@ 0x36
 800dcbc:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800dcc0:	8c59      	ldrh	r1, [r3, #34]	@ 0x22
 800dcc2:	f640 6333 	movw	r3, #3635	@ 0xe33
 800dcc6:	4299      	cmp	r1, r3
 800dcc8:	d111      	bne.n	800dcee <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x102>
 800dcca:	f8dc 3000 	ldr.w	r3, [ip]
 800dcce:	4660      	mov	r0, ip
 800dcd0:	68db      	ldr	r3, [r3, #12]
 800dcd2:	4798      	blx	r3
 800dcd4:	7b41      	ldrb	r1, [r0, #13]
 800dcd6:	00cb      	lsls	r3, r1, #3
 800dcd8:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800dcdc:	7a03      	ldrb	r3, [r0, #8]
 800dcde:	4313      	orrs	r3, r2
 800dce0:	064a      	lsls	r2, r1, #25
 800dce2:	bf44      	itt	mi
 800dce4:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800dce8:	b21b      	sxthmi	r3, r3
 800dcea:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 800dcee:	f8b5 305a 	ldrh.w	r3, [r5, #90]	@ 0x5a
 800dcf2:	f895 2059 	ldrb.w	r2, [r5, #89]	@ 0x59
 800dcf6:	443b      	add	r3, r7
 800dcf8:	4433      	add	r3, r6
 800dcfa:	b29b      	uxth	r3, r3
 800dcfc:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 800dd00:	f885 3054 	strb.w	r3, [r5, #84]	@ 0x54
 800dd04:	10db      	asrs	r3, r3, #3
 800dd06:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800dd0a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800dd0e:	4313      	orrs	r3, r2
 800dd10:	f885 3059 	strb.w	r3, [r5, #89]	@ 0x59
 800dd14:	f895 205e 	ldrb.w	r2, [r5, #94]	@ 0x5e
 800dd18:	f895 3055 	ldrb.w	r3, [r5, #85]	@ 0x55
 800dd1c:	1a9b      	subs	r3, r3, r2
 800dd1e:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 800dd22:	e76f      	b.n	800dc04 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 800dd24:	f023 0204 	bic.w	r2, r3, #4
 800dd28:	f640 611b 	movw	r1, #3611	@ 0xe1b
 800dd2c:	428a      	cmp	r2, r1
 800dd2e:	d003      	beq.n	800dd38 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x14c>
 800dd30:	f640 621d 	movw	r2, #3613	@ 0xe1d
 800dd34:	4293      	cmp	r3, r2
 800dd36:	d137      	bne.n	800dda8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1bc>
 800dd38:	f105 064c 	add.w	r6, r5, #76	@ 0x4c
 800dd3c:	4622      	mov	r2, r4
 800dd3e:	f104 0808 	add.w	r8, r4, #8
 800dd42:	4634      	mov	r4, r6
 800dd44:	6810      	ldr	r0, [r2, #0]
 800dd46:	6851      	ldr	r1, [r2, #4]
 800dd48:	46b6      	mov	lr, r6
 800dd4a:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 800dd4e:	3208      	adds	r2, #8
 800dd50:	4542      	cmp	r2, r8
 800dd52:	4676      	mov	r6, lr
 800dd54:	d1f6      	bne.n	800dd44 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x158>
 800dd56:	6810      	ldr	r0, [r2, #0]
 800dd58:	f8ce 0000 	str.w	r0, [lr]
 800dd5c:	8892      	ldrh	r2, [r2, #4]
 800dd5e:	f8ae 2004 	strh.w	r2, [lr, #4]
 800dd62:	3b01      	subs	r3, #1
 800dd64:	b29b      	uxth	r3, r3
 800dd66:	4662      	mov	r2, ip
 800dd68:	4621      	mov	r1, r4
 800dd6a:	4628      	mov	r0, r5
 800dd6c:	f7ff ff33 	bl	800dbd6 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 800dd70:	7b41      	ldrb	r1, [r0, #13]
 800dd72:	00cb      	lsls	r3, r1, #3
 800dd74:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800dd78:	7a03      	ldrb	r3, [r0, #8]
 800dd7a:	0648      	lsls	r0, r1, #25
 800dd7c:	ea43 0302 	orr.w	r3, r3, r2
 800dd80:	bf44      	itt	mi
 800dd82:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800dd86:	b21b      	sxthmi	r3, r3
 800dd88:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 800dd8c:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 800dd90:	f895 2056 	ldrb.w	r2, [r5, #86]	@ 0x56
 800dd94:	005b      	lsls	r3, r3, #1
 800dd96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dd9a:	4313      	orrs	r3, r2
 800dd9c:	115a      	asrs	r2, r3, #5
 800dd9e:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 800dda2:	f8a5 305e 	strh.w	r3, [r5, #94]	@ 0x5e
 800dda6:	e046      	b.n	800de36 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x24a>
 800dda8:	00c2      	lsls	r2, r0, #3
 800ddaa:	f402 7180 	and.w	r1, r2, #256	@ 0x100
 800ddae:	7a22      	ldrb	r2, [r4, #8]
 800ddb0:	430a      	orrs	r2, r1
 800ddb2:	0641      	lsls	r1, r0, #25
 800ddb4:	bf44      	itt	mi
 800ddb6:	f5a2 7200 	submi.w	r2, r2, #512	@ 0x200
 800ddba:	b212      	sxthmi	r2, r2
 800ddbc:	f8a5 205a 	strh.w	r2, [r5, #90]	@ 0x5a
 800ddc0:	f640 6109 	movw	r1, #3593	@ 0xe09
 800ddc4:	f023 0210 	bic.w	r2, r3, #16
 800ddc8:	428a      	cmp	r2, r1
 800ddca:	d003      	beq.n	800ddd4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1e8>
 800ddcc:	f640 6213 	movw	r2, #3603	@ 0xe13
 800ddd0:	4293      	cmp	r3, r2
 800ddd2:	d13d      	bne.n	800de50 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x264>
 800ddd4:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 800ddd8:	f104 0808 	add.w	r8, r4, #8
 800dddc:	4696      	mov	lr, r2
 800ddde:	6820      	ldr	r0, [r4, #0]
 800dde0:	6861      	ldr	r1, [r4, #4]
 800dde2:	4616      	mov	r6, r2
 800dde4:	c603      	stmia	r6!, {r0, r1}
 800dde6:	3408      	adds	r4, #8
 800dde8:	4544      	cmp	r4, r8
 800ddea:	4632      	mov	r2, r6
 800ddec:	d1f7      	bne.n	800ddde <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f2>
 800ddee:	6820      	ldr	r0, [r4, #0]
 800ddf0:	6030      	str	r0, [r6, #0]
 800ddf2:	88a1      	ldrh	r1, [r4, #4]
 800ddf4:	80b1      	strh	r1, [r6, #4]
 800ddf6:	f895 6059 	ldrb.w	r6, [r5, #89]	@ 0x59
 800ddfa:	0076      	lsls	r6, r6, #1
 800ddfc:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 800de00:	f895 6056 	ldrb.w	r6, [r5, #86]	@ 0x56
 800de04:	4316      	orrs	r6, r2
 800de06:	f640 6213 	movw	r2, #3603	@ 0xe13
 800de0a:	4293      	cmp	r3, r2
 800de0c:	bf1a      	itte	ne
 800de0e:	f103 33ff 	addne.w	r3, r3, #4294967295
 800de12:	b29b      	uxthne	r3, r3
 800de14:	f640 630c 	movweq	r3, #3596	@ 0xe0c
 800de18:	4662      	mov	r2, ip
 800de1a:	4671      	mov	r1, lr
 800de1c:	4628      	mov	r0, r5
 800de1e:	4674      	mov	r4, lr
 800de20:	f7ff fed9 	bl	800dbd6 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 800de24:	7b43      	ldrb	r3, [r0, #13]
 800de26:	7a82      	ldrb	r2, [r0, #10]
 800de28:	005b      	lsls	r3, r3, #1
 800de2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800de2e:	4313      	orrs	r3, r2
 800de30:	1af6      	subs	r6, r6, r3
 800de32:	f8a5 605e 	strh.w	r6, [r5, #94]	@ 0x5e
 800de36:	7b61      	ldrb	r1, [r4, #13]
 800de38:	00cb      	lsls	r3, r1, #3
 800de3a:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800de3e:	7a23      	ldrb	r3, [r4, #8]
 800de40:	4313      	orrs	r3, r2
 800de42:	064a      	lsls	r2, r1, #25
 800de44:	bf44      	itt	mi
 800de46:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800de4a:	b21b      	sxthmi	r3, r3
 800de4c:	1bdb      	subs	r3, r3, r7
 800de4e:	e71c      	b.n	800dc8a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 800de50:	2300      	movs	r3, #0
 800de52:	e7a6      	b.n	800dda2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1b6>
 800de54:	3fc00079 	.word	0x3fc00079

0800de58 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 800de58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800de5c:	4604      	mov	r4, r0
 800de5e:	b942      	cbnz	r2, 800de72 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 800de60:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800de64:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
 800de68:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
 800de6c:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 800de70:	e047      	b.n	800df02 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 800de72:	7b51      	ldrb	r1, [r2, #13]
 800de74:	8893      	ldrh	r3, [r2, #4]
 800de76:	010d      	lsls	r5, r1, #4
 800de78:	f405 7080 	and.w	r0, r5, #256	@ 0x100
 800de7c:	79d5      	ldrb	r5, [r2, #7]
 800de7e:	4305      	orrs	r5, r0
 800de80:	2d04      	cmp	r5, #4
 800de82:	bfcc      	ite	gt
 800de84:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 800de88:	f04f 0e01 	movle.w	lr, #1
 800de8c:	f5b3 6fdd 	cmp.w	r3, #1768	@ 0x6e8
 800de90:	f200 80ab 	bhi.w	800dfea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 800de94:	f240 60e7 	movw	r0, #1767	@ 0x6e7
 800de98:	4283      	cmp	r3, r0
 800de9a:	d216      	bcs.n	800deca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800de9c:	f240 605b 	movw	r0, #1627	@ 0x65b
 800dea0:	4283      	cmp	r3, r0
 800dea2:	d859      	bhi.n	800df58 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 800dea4:	f240 6057 	movw	r0, #1623	@ 0x657
 800dea8:	4283      	cmp	r3, r0
 800deaa:	d20e      	bcs.n	800deca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800deac:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 800deb0:	d24a      	bcs.n	800df48 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 800deb2:	f240 604e 	movw	r0, #1614	@ 0x64e
 800deb6:	4283      	cmp	r3, r0
 800deb8:	d207      	bcs.n	800deca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800deba:	f240 601a 	movw	r0, #1562	@ 0x61a
 800debe:	4283      	cmp	r3, r0
 800dec0:	d02a      	beq.n	800df18 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800dec2:	d821      	bhi.n	800df08 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 800dec4:	f5b3 6fc2 	cmp.w	r3, #1552	@ 0x610
 800dec8:	d35b      	bcc.n	800df82 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 800deca:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	@ 0x5a
 800dece:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 800ded2:	f040 80d0 	bne.w	800e076 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 800ded6:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	@ 0x5c
 800deda:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 800dede:	f040 80ca 	bne.w	800e076 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 800dee2:	00cb      	lsls	r3, r1, #3
 800dee4:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 800dee8:	7a13      	ldrb	r3, [r2, #8]
 800deea:	0649      	lsls	r1, r1, #25
 800deec:	ea43 0300 	orr.w	r3, r3, r0
 800def0:	bf44      	itt	mi
 800def2:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800def6:	b21b      	sxthmi	r3, r3
 800def8:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 800defc:	1b5d      	subs	r5, r3, r5
 800defe:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 800df02:	4610      	mov	r0, r2
 800df04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800df08:	f240 604b 	movw	r0, #1611	@ 0x64b
 800df0c:	4283      	cmp	r3, r0
 800df0e:	d338      	bcc.n	800df82 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 800df10:	f240 604c 	movw	r0, #1612	@ 0x64c
 800df14:	4283      	cmp	r3, r0
 800df16:	d9d8      	bls.n	800deca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800df18:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	@ 0x5a
 800df1c:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	@ 0x5c
 800df20:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 800df24:	f040 80f2 	bne.w	800e10c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 800df28:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 800df2c:	f040 80ee 	bne.w	800e10c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 800df30:	00cb      	lsls	r3, r1, #3
 800df32:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 800df36:	7a13      	ldrb	r3, [r2, #8]
 800df38:	064e      	lsls	r6, r1, #25
 800df3a:	ea43 0300 	orr.w	r3, r3, r0
 800df3e:	bf44      	itt	mi
 800df40:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800df44:	b21b      	sxthmi	r3, r3
 800df46:	e7d9      	b.n	800defc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 800df48:	f240 6054 	movw	r0, #1620	@ 0x654
 800df4c:	4283      	cmp	r3, r0
 800df4e:	d8e3      	bhi.n	800df18 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800df50:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 800df54:	d9e0      	bls.n	800df18 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800df56:	e7b8      	b.n	800deca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800df58:	f240 6074 	movw	r0, #1652	@ 0x674
 800df5c:	4283      	cmp	r3, r0
 800df5e:	d0b4      	beq.n	800deca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800df60:	d82d      	bhi.n	800dfbe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 800df62:	f240 605e 	movw	r0, #1630	@ 0x65e
 800df66:	4283      	cmp	r3, r0
 800df68:	d804      	bhi.n	800df74 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 800df6a:	f240 605d 	movw	r0, #1629	@ 0x65d
 800df6e:	4283      	cmp	r3, r0
 800df70:	d3d2      	bcc.n	800df18 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800df72:	e7aa      	b.n	800deca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800df74:	f240 605f 	movw	r0, #1631	@ 0x65f
 800df78:	4283      	cmp	r3, r0
 800df7a:	d0cd      	beq.n	800df18 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800df7c:	f5b3 6fce 	cmp.w	r3, #1648	@ 0x670
 800df80:	d0a3      	beq.n	800deca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800df82:	00cb      	lsls	r3, r1, #3
 800df84:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 800df88:	7a13      	ldrb	r3, [r2, #8]
 800df8a:	0649      	lsls	r1, r1, #25
 800df8c:	ea43 0300 	orr.w	r3, r3, r0
 800df90:	bf44      	itt	mi
 800df92:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800df96:	b21b      	sxthmi	r3, r3
 800df98:	1b5d      	subs	r5, r3, r5
 800df9a:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 800df9e:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 800dfa2:	7b53      	ldrb	r3, [r2, #13]
 800dfa4:	015b      	lsls	r3, r3, #5
 800dfa6:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 800dfaa:	7993      	ldrb	r3, [r2, #6]
 800dfac:	430b      	orrs	r3, r1
 800dfae:	005b      	lsls	r3, r3, #1
 800dfb0:	2105      	movs	r1, #5
 800dfb2:	fb93 f3f1 	sdiv	r3, r3, r1
 800dfb6:	f992 1009 	ldrsb.w	r1, [r2, #9]
 800dfba:	440b      	add	r3, r1
 800dfbc:	e756      	b.n	800de6c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 800dfbe:	f240 60e2 	movw	r0, #1762	@ 0x6e2
 800dfc2:	4283      	cmp	r3, r0
 800dfc4:	d809      	bhi.n	800dfda <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 800dfc6:	f240 60df 	movw	r0, #1759	@ 0x6df
 800dfca:	4283      	cmp	r3, r0
 800dfcc:	f4bf af7d 	bcs.w	800deca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800dfd0:	f2a3 63d6 	subw	r3, r3, #1750	@ 0x6d6
 800dfd4:	2b05      	cmp	r3, #5
 800dfd6:	d8d4      	bhi.n	800df82 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 800dfd8:	e777      	b.n	800deca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800dfda:	f240 60e3 	movw	r0, #1763	@ 0x6e3
 800dfde:	4283      	cmp	r3, r0
 800dfe0:	d09a      	beq.n	800df18 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800dfe2:	f240 60e4 	movw	r0, #1764	@ 0x6e4
 800dfe6:	4283      	cmp	r3, r0
 800dfe8:	e7ca      	b.n	800df80 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 800dfea:	f5b3 6f0f 	cmp.w	r3, #2288	@ 0x8f0
 800dfee:	d22b      	bcs.n	800e048 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 800dff0:	f640 00ed 	movw	r0, #2285	@ 0x8ed
 800dff4:	4283      	cmp	r3, r0
 800dff6:	d28f      	bcs.n	800df18 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800dff8:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 800dffc:	4283      	cmp	r3, r0
 800dffe:	d816      	bhi.n	800e02e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 800e000:	f640 00e4 	movw	r0, #2276	@ 0x8e4
 800e004:	4283      	cmp	r3, r0
 800e006:	f4bf af60 	bcs.w	800deca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800e00a:	f240 60ec 	movw	r0, #1772	@ 0x6ec
 800e00e:	4283      	cmp	r3, r0
 800e010:	d80a      	bhi.n	800e028 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 800e012:	f240 60eb 	movw	r0, #1771	@ 0x6eb
 800e016:	4283      	cmp	r3, r0
 800e018:	f4bf af57 	bcs.w	800deca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800e01c:	f240 60ea 	movw	r0, #1770	@ 0x6ea
 800e020:	4283      	cmp	r3, r0
 800e022:	f43f af79 	beq.w	800df18 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800e026:	e7ac      	b.n	800df82 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 800e028:	f240 60ed 	movw	r0, #1773	@ 0x6ed
 800e02c:	e7f8      	b.n	800e020 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 800e02e:	f640 00e8 	movw	r0, #2280	@ 0x8e8
 800e032:	4283      	cmp	r3, r0
 800e034:	d802      	bhi.n	800e03c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 800e036:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 800e03a:	e798      	b.n	800df6e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 800e03c:	f640 00e9 	movw	r0, #2281	@ 0x8e9
 800e040:	4283      	cmp	r3, r0
 800e042:	f47f af42 	bne.w	800deca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800e046:	e767      	b.n	800df18 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800e048:	f640 00f6 	movw	r0, #2294	@ 0x8f6
 800e04c:	4283      	cmp	r3, r0
 800e04e:	f43f af63 	beq.w	800df18 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800e052:	d802      	bhi.n	800e05a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 800e054:	f640 00f2 	movw	r0, #2290	@ 0x8f2
 800e058:	e7f2      	b.n	800e040 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 800e05a:	f640 00fa 	movw	r0, #2298	@ 0x8fa
 800e05e:	4283      	cmp	r3, r0
 800e060:	d805      	bhi.n	800e06e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 800e062:	f640 00f9 	movw	r0, #2297	@ 0x8f9
 800e066:	4283      	cmp	r3, r0
 800e068:	f4ff af2f 	bcc.w	800deca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800e06c:	e754      	b.n	800df18 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800e06e:	f640 00fe 	movw	r0, #2302	@ 0x8fe
 800e072:	4283      	cmp	r3, r0
 800e074:	e7af      	b.n	800dfd6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 800e076:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 800e07a:	4617      	mov	r7, r2
 800e07c:	f102 0808 	add.w	r8, r2, #8
 800e080:	4666      	mov	r6, ip
 800e082:	6838      	ldr	r0, [r7, #0]
 800e084:	6879      	ldr	r1, [r7, #4]
 800e086:	46e6      	mov	lr, ip
 800e088:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 800e08c:	3708      	adds	r7, #8
 800e08e:	4547      	cmp	r7, r8
 800e090:	46f4      	mov	ip, lr
 800e092:	d1f6      	bne.n	800e082 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 800e094:	6838      	ldr	r0, [r7, #0]
 800e096:	f8ce 0000 	str.w	r0, [lr]
 800e09a:	88b9      	ldrh	r1, [r7, #4]
 800e09c:	f8ae 1004 	strh.w	r1, [lr, #4]
 800e0a0:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 800e0a4:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 800e0a8:	d009      	beq.n	800e0be <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 800e0aa:	7b51      	ldrb	r1, [r2, #13]
 800e0ac:	7992      	ldrb	r2, [r2, #6]
 800e0ae:	0149      	lsls	r1, r1, #5
 800e0b0:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 800e0b4:	4311      	orrs	r1, r2
 800e0b6:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 800e0ba:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 800e0be:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 800e0c2:	b2ad      	uxth	r5, r5
 800e0c4:	d00d      	beq.n	800e0e2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28a>
 800e0c6:	442b      	add	r3, r5
 800e0c8:	b29b      	uxth	r3, r3
 800e0ca:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 800e0ce:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 800e0d2:	10db      	asrs	r3, r3, #3
 800e0d4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800e0d8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e0dc:	4313      	orrs	r3, r2
 800e0de:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 800e0e2:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 800e0e6:	00cb      	lsls	r3, r1, #3
 800e0e8:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800e0ec:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 800e0f0:	064f      	lsls	r7, r1, #25
 800e0f2:	ea43 0302 	orr.w	r3, r3, r2
 800e0f6:	bf44      	itt	mi
 800e0f8:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800e0fc:	b21b      	sxthmi	r3, r3
 800e0fe:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 800e102:	1b5b      	subs	r3, r3, r5
 800e104:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 800e108:	4632      	mov	r2, r6
 800e10a:	e6fa      	b.n	800df02 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 800e10c:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 800e110:	4617      	mov	r7, r2
 800e112:	f102 0908 	add.w	r9, r2, #8
 800e116:	4666      	mov	r6, ip
 800e118:	6838      	ldr	r0, [r7, #0]
 800e11a:	6879      	ldr	r1, [r7, #4]
 800e11c:	46e0      	mov	r8, ip
 800e11e:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 800e122:	3708      	adds	r7, #8
 800e124:	454f      	cmp	r7, r9
 800e126:	46c4      	mov	ip, r8
 800e128:	d1f6      	bne.n	800e118 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c0>
 800e12a:	6838      	ldr	r0, [r7, #0]
 800e12c:	f8c8 0000 	str.w	r0, [r8]
 800e130:	88b9      	ldrh	r1, [r7, #4]
 800e132:	f8a8 1004 	strh.w	r1, [r8, #4]
 800e136:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 800e13a:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 800e13e:	d009      	beq.n	800e154 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2fc>
 800e140:	7b51      	ldrb	r1, [r2, #13]
 800e142:	7992      	ldrb	r2, [r2, #6]
 800e144:	0149      	lsls	r1, r1, #5
 800e146:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 800e14a:	4311      	orrs	r1, r2
 800e14c:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 800e150:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 800e154:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 800e158:	d00e      	beq.n	800e178 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x320>
 800e15a:	eba3 030e 	sub.w	r3, r3, lr
 800e15e:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 800e162:	b29b      	uxth	r3, r3
 800e164:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 800e168:	10db      	asrs	r3, r3, #3
 800e16a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e16e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800e172:	4313      	orrs	r3, r2
 800e174:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 800e178:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 800e17c:	00cb      	lsls	r3, r1, #3
 800e17e:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800e182:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 800e186:	0648      	lsls	r0, r1, #25
 800e188:	ea43 0302 	orr.w	r3, r3, r2
 800e18c:	bf44      	itt	mi
 800e18e:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800e192:	b21b      	sxthmi	r3, r3
 800e194:	1b5d      	subs	r5, r3, r5
 800e196:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 800e19a:	e7b5      	b.n	800e108 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b0>

0800e19c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 800e19c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1a0:	461e      	mov	r6, r3
 800e1a2:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 800e1a4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800e1a8:	4604      	mov	r4, r0
 800e1aa:	4617      	mov	r7, r2
 800e1ac:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 800e1b0:	f7f5 f91e 	bl	80033f0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800e1b4:	4605      	mov	r5, r0
 800e1b6:	b918      	cbnz	r0, 800e1c0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 800e1b8:	6030      	str	r0, [r6, #0]
 800e1ba:	4628      	mov	r0, r5
 800e1bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1c0:	683b      	ldr	r3, [r7, #0]
 800e1c2:	4601      	mov	r1, r0
 800e1c4:	68db      	ldr	r3, [r3, #12]
 800e1c6:	4638      	mov	r0, r7
 800e1c8:	4798      	blx	r3
 800e1ca:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 800e1ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e1d2:	4602      	mov	r2, r0
 800e1d4:	6030      	str	r0, [r6, #0]
 800e1d6:	d213      	bcs.n	800e200 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 800e1d8:	4643      	mov	r3, r8
 800e1da:	4639      	mov	r1, r7
 800e1dc:	4620      	mov	r0, r4
 800e1de:	f7ff fe3b 	bl	800de58 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 800e1e2:	6030      	str	r0, [r6, #0]
 800e1e4:	6833      	ldr	r3, [r6, #0]
 800e1e6:	b143      	cbz	r3, 800e1fa <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 800e1e8:	7b5a      	ldrb	r2, [r3, #13]
 800e1ea:	7a9b      	ldrb	r3, [r3, #10]
 800e1ec:	0052      	lsls	r2, r2, #1
 800e1ee:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 800e1f2:	4313      	orrs	r3, r2
 800e1f4:	bf0c      	ite	eq
 800e1f6:	2301      	moveq	r3, #1
 800e1f8:	2300      	movne	r3, #0
 800e1fa:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 800e1fe:	e7dc      	b.n	800e1ba <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 800e200:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 800e204:	b29b      	uxth	r3, r3
 800e206:	2b7f      	cmp	r3, #127	@ 0x7f
 800e208:	d804      	bhi.n	800e214 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 800e20a:	4639      	mov	r1, r7
 800e20c:	4620      	mov	r0, r4
 800e20e:	f7ff fced 	bl	800dbec <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 800e212:	e7e6      	b.n	800e1e2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 800e214:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d0e3      	beq.n	800e1e4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 800e21c:	f640 1302 	movw	r3, #2306	@ 0x902
 800e220:	429d      	cmp	r5, r3
 800e222:	d1df      	bne.n	800e1e4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 800e224:	4601      	mov	r1, r0
 800e226:	4620      	mov	r0, r4
 800e228:	f7ff fcb2 	bl	800db90 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 800e22c:	e7d9      	b.n	800e1e2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

0800e22e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 800e22e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e232:	461e      	mov	r6, r3
 800e234:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 800e236:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800e23a:	4604      	mov	r4, r0
 800e23c:	4617      	mov	r7, r2
 800e23e:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 800e242:	f7f5 f8d5 	bl	80033f0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800e246:	4605      	mov	r5, r0
 800e248:	b918      	cbnz	r0, 800e252 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
 800e24a:	6030      	str	r0, [r6, #0]
 800e24c:	4628      	mov	r0, r5
 800e24e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e252:	683b      	ldr	r3, [r7, #0]
 800e254:	4601      	mov	r1, r0
 800e256:	f8d3 9008 	ldr.w	r9, [r3, #8]
 800e25a:	4638      	mov	r0, r7
 800e25c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800e260:	47c8      	blx	r9
 800e262:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 800e266:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e26a:	4602      	mov	r2, r0
 800e26c:	6030      	str	r0, [r6, #0]
 800e26e:	d213      	bcs.n	800e298 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 800e270:	4643      	mov	r3, r8
 800e272:	4639      	mov	r1, r7
 800e274:	4620      	mov	r0, r4
 800e276:	f7ff fdef 	bl	800de58 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 800e27a:	6030      	str	r0, [r6, #0]
 800e27c:	6833      	ldr	r3, [r6, #0]
 800e27e:	b143      	cbz	r3, 800e292 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
 800e280:	7b5a      	ldrb	r2, [r3, #13]
 800e282:	7a9b      	ldrb	r3, [r3, #10]
 800e284:	0052      	lsls	r2, r2, #1
 800e286:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 800e28a:	4313      	orrs	r3, r2
 800e28c:	bf0c      	ite	eq
 800e28e:	2301      	moveq	r3, #1
 800e290:	2300      	movne	r3, #0
 800e292:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 800e296:	e7d9      	b.n	800e24c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 800e298:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 800e29c:	b29b      	uxth	r3, r3
 800e29e:	2b7f      	cmp	r3, #127	@ 0x7f
 800e2a0:	d804      	bhi.n	800e2ac <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
 800e2a2:	4639      	mov	r1, r7
 800e2a4:	4620      	mov	r0, r4
 800e2a6:	f7ff fca1 	bl	800dbec <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 800e2aa:	e7e6      	b.n	800e27a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
 800e2ac:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d0e3      	beq.n	800e27c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 800e2b4:	f640 1302 	movw	r3, #2306	@ 0x902
 800e2b8:	429d      	cmp	r5, r3
 800e2ba:	d1df      	bne.n	800e27c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 800e2bc:	4601      	mov	r1, r0
 800e2be:	4620      	mov	r0, r4
 800e2c0:	f7ff fc66 	bl	800db90 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 800e2c4:	e7d9      	b.n	800e27a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

0800e2c6 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 800e2c6:	b510      	push	{r4, lr}
 800e2c8:	4604      	mov	r4, r0
 800e2ca:	f8b4 1040 	ldrh.w	r1, [r4, #64]	@ 0x40
 800e2ce:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 800e2d0:	b1f1      	cbz	r1, 800e310 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 800e2d2:	2b0a      	cmp	r3, #10
 800e2d4:	d02f      	beq.n	800e336 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 800e2d6:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 800e2d8:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 800e2dc:	3901      	subs	r1, #1
 800e2de:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
 800e2e0:	f8a4 1040 	strh.w	r1, [r4, #64]	@ 0x40
 800e2e4:	1c51      	adds	r1, r2, #1
 800e2e6:	b289      	uxth	r1, r1
 800e2e8:	2901      	cmp	r1, #1
 800e2ea:	bf84      	itt	hi
 800e2ec:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800e2f0:	87e2      	strhhi	r2, [r4, #62]	@ 0x3e
 800e2f2:	f103 0201 	add.w	r2, r3, #1
 800e2f6:	8722      	strh	r2, [r4, #56]	@ 0x38
 800e2f8:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 800e2fa:	bf98      	it	ls
 800e2fc:	87e1      	strhls	r1, [r4, #62]	@ 0x3e
 800e2fe:	4413      	add	r3, r2
 800e300:	b29b      	uxth	r3, r3
 800e302:	2b09      	cmp	r3, #9
 800e304:	bf88      	it	hi
 800e306:	3b0a      	subhi	r3, #10
 800e308:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800e30c:	8458      	strh	r0, [r3, #34]	@ 0x22
 800e30e:	e7dc      	b.n	800e2ca <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 800e310:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 800e312:	2b0a      	cmp	r3, #10
 800e314:	d00f      	beq.n	800e336 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 800e316:	4620      	mov	r0, r4
 800e318:	f7ff fbe8 	bl	800daec <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 800e31c:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 800e31e:	1c5a      	adds	r2, r3, #1
 800e320:	8722      	strh	r2, [r4, #56]	@ 0x38
 800e322:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 800e324:	4413      	add	r3, r2
 800e326:	b29b      	uxth	r3, r3
 800e328:	2b09      	cmp	r3, #9
 800e32a:	bf88      	it	hi
 800e32c:	3b0a      	subhi	r3, #10
 800e32e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800e332:	8458      	strh	r0, [r3, #34]	@ 0x22
 800e334:	e7ec      	b.n	800e310 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 800e336:	bd10      	pop	{r4, pc}

0800e338 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 800e338:	b538      	push	{r3, r4, r5, lr}
 800e33a:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 800e33c:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 800e340:	4604      	mov	r4, r0
 800e342:	8c55      	ldrh	r5, [r2, #34]	@ 0x22
 800e344:	8f02      	ldrh	r2, [r0, #56]	@ 0x38
 800e346:	3a01      	subs	r2, #1
 800e348:	8702      	strh	r2, [r0, #56]	@ 0x38
 800e34a:	1c5a      	adds	r2, r3, #1
 800e34c:	b292      	uxth	r2, r2
 800e34e:	2a09      	cmp	r2, #9
 800e350:	bf86      	itte	hi
 800e352:	3b09      	subhi	r3, #9
 800e354:	86c3      	strhhi	r3, [r0, #54]	@ 0x36
 800e356:	86c2      	strhls	r2, [r0, #54]	@ 0x36
 800e358:	f7ff ffb5 	bl	800e2c6 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 800e35c:	8c23      	ldrh	r3, [r4, #32]
 800e35e:	2b01      	cmp	r3, #1
 800e360:	bf9c      	itt	ls
 800e362:	3301      	addls	r3, #1
 800e364:	8423      	strhls	r3, [r4, #32]
 800e366:	8be3      	ldrh	r3, [r4, #30]
 800e368:	b90b      	cbnz	r3, 800e36e <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 800e36a:	2302      	movs	r3, #2
 800e36c:	83e3      	strh	r3, [r4, #30]
 800e36e:	8be3      	ldrh	r3, [r4, #30]
 800e370:	3b01      	subs	r3, #1
 800e372:	b29b      	uxth	r3, r3
 800e374:	83e3      	strh	r3, [r4, #30]
 800e376:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 800e37a:	4628      	mov	r0, r5
 800e37c:	8365      	strh	r5, [r4, #26]
 800e37e:	bd38      	pop	{r3, r4, r5, pc}

0800e380 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 800e380:	428a      	cmp	r2, r1
 800e382:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e386:	8ec7      	ldrh	r7, [r0, #54]	@ 0x36
 800e388:	d931      	bls.n	800e3ee <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x6e>
 800e38a:	8f05      	ldrh	r5, [r0, #56]	@ 0x38
 800e38c:	f8b0 8040 	ldrh.w	r8, [r0, #64]	@ 0x40
 800e390:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	@ 0x3e
 800e394:	19ee      	adds	r6, r5, r7
 800e396:	1a54      	subs	r4, r2, r1
 800e398:	3e01      	subs	r6, #1
 800e39a:	fa1f fe84 	uxth.w	lr, r4
 800e39e:	b2b4      	uxth	r4, r6
 800e3a0:	eba4 090e 	sub.w	r9, r4, lr
 800e3a4:	fa1f f989 	uxth.w	r9, r9
 800e3a8:	2c09      	cmp	r4, #9
 800e3aa:	4626      	mov	r6, r4
 800e3ac:	bf88      	it	hi
 800e3ae:	f1a4 060a 	subhi.w	r6, r4, #10
 800e3b2:	f1bc 0f00 	cmp.w	ip, #0
 800e3b6:	bf08      	it	eq
 800e3b8:	f04f 0c02 	moveq.w	ip, #2
 800e3bc:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 800e3c0:	f10c 3cff 	add.w	ip, ip, #4294967295
 800e3c4:	fa1f fc8c 	uxth.w	ip, ip
 800e3c8:	3c01      	subs	r4, #1
 800e3ca:	f8b6 a022 	ldrh.w	sl, [r6, #34]	@ 0x22
 800e3ce:	b2a4      	uxth	r4, r4
 800e3d0:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 800e3d4:	454c      	cmp	r4, r9
 800e3d6:	f8a6 a03a 	strh.w	sl, [r6, #58]	@ 0x3a
 800e3da:	d1e5      	bne.n	800e3a8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 800e3dc:	eba5 050e 	sub.w	r5, r5, lr
 800e3e0:	eb0e 0408 	add.w	r4, lr, r8
 800e3e4:	8705      	strh	r5, [r0, #56]	@ 0x38
 800e3e6:	f8a0 4040 	strh.w	r4, [r0, #64]	@ 0x40
 800e3ea:	f8a0 c03e 	strh.w	ip, [r0, #62]	@ 0x3e
 800e3ee:	8f04      	ldrh	r4, [r0, #56]	@ 0x38
 800e3f0:	1a64      	subs	r4, r4, r1
 800e3f2:	4439      	add	r1, r7
 800e3f4:	b289      	uxth	r1, r1
 800e3f6:	2909      	cmp	r1, #9
 800e3f8:	bf88      	it	hi
 800e3fa:	390a      	subhi	r1, #10
 800e3fc:	8704      	strh	r4, [r0, #56]	@ 0x38
 800e3fe:	86c1      	strh	r1, [r0, #54]	@ 0x36
 800e400:	250a      	movs	r5, #10
 800e402:	b18a      	cbz	r2, 800e428 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xa8>
 800e404:	8f01      	ldrh	r1, [r0, #56]	@ 0x38
 800e406:	3a01      	subs	r2, #1
 800e408:	b292      	uxth	r2, r2
 800e40a:	3101      	adds	r1, #1
 800e40c:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 800e410:	8701      	strh	r1, [r0, #56]	@ 0x38
 800e412:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 800e414:	b901      	cbnz	r1, 800e418 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>
 800e416:	86c5      	strh	r5, [r0, #54]	@ 0x36
 800e418:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 800e41a:	3901      	subs	r1, #1
 800e41c:	b289      	uxth	r1, r1
 800e41e:	86c1      	strh	r1, [r0, #54]	@ 0x36
 800e420:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 800e424:	844c      	strh	r4, [r1, #34]	@ 0x22
 800e426:	e7ec      	b.n	800e402 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x82>
 800e428:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e42c:	f7ff bf4b 	b.w	800e2c6 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0800e430 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 800e430:	b570      	push	{r4, r5, r6, lr}
 800e432:	2500      	movs	r5, #0
 800e434:	4295      	cmp	r5, r2
 800e436:	d011      	beq.n	800e45c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 800e438:	8bc4      	ldrh	r4, [r0, #30]
 800e43a:	f831 6b02 	ldrh.w	r6, [r1], #2
 800e43e:	4414      	add	r4, r2
 800e440:	3c01      	subs	r4, #1
 800e442:	1b64      	subs	r4, r4, r5
 800e444:	b2a4      	uxth	r4, r4
 800e446:	2c01      	cmp	r4, #1
 800e448:	bf88      	it	hi
 800e44a:	3c02      	subhi	r4, #2
 800e44c:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 800e450:	8b64      	ldrh	r4, [r4, #26]
 800e452:	42b4      	cmp	r4, r6
 800e454:	d117      	bne.n	800e486 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 800e456:	3501      	adds	r5, #1
 800e458:	b2ad      	uxth	r5, r5
 800e45a:	e7eb      	b.n	800e434 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 800e45c:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 800e460:	2400      	movs	r4, #0
 800e462:	4413      	add	r3, r2
 800e464:	b2a2      	uxth	r2, r4
 800e466:	429a      	cmp	r2, r3
 800e468:	da0f      	bge.n	800e48a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 800e46a:	8ec6      	ldrh	r6, [r0, #54]	@ 0x36
 800e46c:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 800e470:	4432      	add	r2, r6
 800e472:	b292      	uxth	r2, r2
 800e474:	2a09      	cmp	r2, #9
 800e476:	bf88      	it	hi
 800e478:	3a0a      	subhi	r2, #10
 800e47a:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800e47e:	3401      	adds	r4, #1
 800e480:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 800e482:	42aa      	cmp	r2, r5
 800e484:	d0ee      	beq.n	800e464 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 800e486:	2000      	movs	r0, #0
 800e488:	bd70      	pop	{r4, r5, r6, pc}
 800e48a:	2001      	movs	r0, #1
 800e48c:	e7fc      	b.n	800e488 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

0800e48e <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 800e48e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e492:	4605      	mov	r5, r0
 800e494:	4616      	mov	r6, r2
 800e496:	1c8c      	adds	r4, r1, #2
 800e498:	8809      	ldrh	r1, [r1, #0]
 800e49a:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 800e49e:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 800e4a2:	42b3      	cmp	r3, r6
 800e4a4:	d124      	bne.n	800e4f0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 800e4a6:	f3c1 2903 	ubfx	r9, r1, #8, #4
 800e4aa:	f3c1 1803 	ubfx	r8, r1, #4, #4
 800e4ae:	f001 070f 	and.w	r7, r1, #15
 800e4b2:	f8cd 8000 	str.w	r8, [sp]
 800e4b6:	464b      	mov	r3, r9
 800e4b8:	4652      	mov	r2, sl
 800e4ba:	4621      	mov	r1, r4
 800e4bc:	4628      	mov	r0, r5
 800e4be:	f7ff ffb7 	bl	800e430 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 800e4c2:	4683      	mov	fp, r0
 800e4c4:	b168      	cbz	r0, 800e4e2 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 800e4c6:	eb0a 0109 	add.w	r1, sl, r9
 800e4ca:	4441      	add	r1, r8
 800e4cc:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 800e4d0:	463a      	mov	r2, r7
 800e4d2:	4649      	mov	r1, r9
 800e4d4:	4628      	mov	r0, r5
 800e4d6:	f7ff ff53 	bl	800e380 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 800e4da:	4658      	mov	r0, fp
 800e4dc:	b003      	add	sp, #12
 800e4de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4e2:	eb07 010a 	add.w	r1, r7, sl
 800e4e6:	4449      	add	r1, r9
 800e4e8:	4441      	add	r1, r8
 800e4ea:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 800e4ee:	e7d2      	b.n	800e496 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 800e4f0:	f04f 0b00 	mov.w	fp, #0
 800e4f4:	e7f1      	b.n	800e4da <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0800e4f6 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 800e4f6:	b570      	push	{r4, r5, r6, lr}
 800e4f8:	8810      	ldrh	r0, [r2, #0]
 800e4fa:	4298      	cmp	r0, r3
 800e4fc:	d817      	bhi.n	800e52e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 800e4fe:	1e48      	subs	r0, r1, #1
 800e500:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 800e504:	4298      	cmp	r0, r3
 800e506:	d312      	bcc.n	800e52e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 800e508:	2400      	movs	r4, #0
 800e50a:	428c      	cmp	r4, r1
 800e50c:	d20f      	bcs.n	800e52e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 800e50e:	1860      	adds	r0, r4, r1
 800e510:	1040      	asrs	r0, r0, #1
 800e512:	0085      	lsls	r5, r0, #2
 800e514:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 800e518:	42b3      	cmp	r3, r6
 800e51a:	d902      	bls.n	800e522 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 800e51c:	3001      	adds	r0, #1
 800e51e:	b284      	uxth	r4, r0
 800e520:	e7f3      	b.n	800e50a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 800e522:	d201      	bcs.n	800e528 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 800e524:	b281      	uxth	r1, r0
 800e526:	e7f0      	b.n	800e50a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 800e528:	442a      	add	r2, r5
 800e52a:	8850      	ldrh	r0, [r2, #2]
 800e52c:	bd70      	pop	{r4, r5, r6, pc}
 800e52e:	2000      	movs	r0, #0
 800e530:	e7fc      	b.n	800e52c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0800e532 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 800e532:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e536:	6c45      	ldr	r5, [r0, #68]	@ 0x44
 800e538:	886f      	ldrh	r7, [r5, #2]
 800e53a:	4604      	mov	r4, r0
 800e53c:	087f      	lsrs	r7, r7, #1
 800e53e:	260b      	movs	r6, #11
 800e540:	3e01      	subs	r6, #1
 800e542:	d013      	beq.n	800e56c <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 800e544:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800e546:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800e54a:	462a      	mov	r2, r5
 800e54c:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 800e550:	4639      	mov	r1, r7
 800e552:	4643      	mov	r3, r8
 800e554:	4620      	mov	r0, r4
 800e556:	f7ff ffce 	bl	800e4f6 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 800e55a:	b138      	cbz	r0, 800e56c <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 800e55c:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 800e560:	4642      	mov	r2, r8
 800e562:	4620      	mov	r0, r4
 800e564:	f7ff ff93 	bl	800e48e <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 800e568:	2800      	cmp	r0, #0
 800e56a:	d1e9      	bne.n	800e540 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 800e56c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e570 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 800e570:	b570      	push	{r4, r5, r6, lr}
 800e572:	694a      	ldr	r2, [r1, #20]
 800e574:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 800e576:	684b      	ldr	r3, [r1, #4]
 800e578:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
 800e57a:	1b54      	subs	r4, r2, r5
 800e57c:	f000 8106 	beq.w	800e78c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 800e580:	1b9b      	subs	r3, r3, r6
 800e582:	d003      	beq.n	800e58c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 800e584:	4363      	muls	r3, r4
 800e586:	2210      	movs	r2, #16
 800e588:	fb93 f3f2 	sdiv	r3, r3, r2
 800e58c:	680c      	ldr	r4, [r1, #0]
 800e58e:	698a      	ldr	r2, [r1, #24]
 800e590:	1b65      	subs	r5, r4, r5
 800e592:	f000 80fd 	beq.w	800e790 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 800e596:	1b92      	subs	r2, r2, r6
 800e598:	d003      	beq.n	800e5a2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 800e59a:	436a      	muls	r2, r5
 800e59c:	2410      	movs	r4, #16
 800e59e:	fb92 f2f4 	sdiv	r2, r2, r4
 800e5a2:	1a9b      	subs	r3, r3, r2
 800e5a4:	ee07 3a90 	vmov	s15, r3
 800e5a8:	ed9f 4a88 	vldr	s8, [pc, #544]	@ 800e7cc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 800e5ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e5b0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e5b4:	ee67 7a84 	vmul.f32	s15, s15, s8
 800e5b8:	460a      	mov	r2, r1
 800e5ba:	ee87 3a27 	vdiv.f32	s6, s14, s15
 800e5be:	4603      	mov	r3, r0
 800e5c0:	f100 040c 	add.w	r4, r0, #12
 800e5c4:	eeb1 6a43 	vneg.f32	s12, s6
 800e5c8:	edd2 7a02 	vldr	s15, [r2, #8]
 800e5cc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800e5d0:	3214      	adds	r2, #20
 800e5d2:	ece3 6a01 	vstmia	r3!, {s13}
 800e5d6:	ed52 7a02 	vldr	s15, [r2, #-8]
 800e5da:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e5de:	429c      	cmp	r4, r3
 800e5e0:	edc3 7a02 	vstr	s15, [r3, #8]
 800e5e4:	ed52 7a01 	vldr	s15, [r2, #-4]
 800e5e8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e5ec:	edc3 7a05 	vstr	s15, [r3, #20]
 800e5f0:	d1ea      	bne.n	800e5c8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 800e5f2:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 800e5f4:	698b      	ldr	r3, [r1, #24]
 800e5f6:	edd0 4a02 	vldr	s9, [r0, #8]
 800e5fa:	edd0 3a00 	vldr	s7, [r0]
 800e5fe:	edd0 6a01 	vldr	s13, [r0, #4]
 800e602:	ed90 5a05 	vldr	s10, [r0, #20]
 800e606:	ed90 2a03 	vldr	s4, [r0, #12]
 800e60a:	edd0 5a04 	vldr	s11, [r0, #16]
 800e60e:	ed90 1a07 	vldr	s2, [r0, #28]
 800e612:	edd0 2a06 	vldr	s5, [r0, #24]
 800e616:	1a9b      	subs	r3, r3, r2
 800e618:	ee07 3a90 	vmov	s15, r3
 800e61c:	684b      	ldr	r3, [r1, #4]
 800e61e:	1a9b      	subs	r3, r3, r2
 800e620:	ee07 3a10 	vmov	s14, r3
 800e624:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e628:	ee76 6ae4 	vsub.f32	s13, s13, s9
 800e62c:	ee67 7a84 	vmul.f32	s15, s15, s8
 800e630:	ee73 4ae4 	vsub.f32	s9, s7, s9
 800e634:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e638:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 800e63c:	ee27 7a04 	vmul.f32	s14, s14, s8
 800e640:	ee75 5ac5 	vsub.f32	s11, s11, s10
 800e644:	eee6 7a87 	vfma.f32	s15, s13, s14
 800e648:	ee32 5a45 	vsub.f32	s10, s4, s10
 800e64c:	ee67 7a83 	vmul.f32	s15, s15, s6
 800e650:	edc0 7a09 	vstr	s15, [r0, #36]	@ 0x24
 800e654:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 800e656:	694a      	ldr	r2, [r1, #20]
 800e658:	1b13      	subs	r3, r2, r4
 800e65a:	ee07 3a10 	vmov	s14, r3
 800e65e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e662:	680b      	ldr	r3, [r1, #0]
 800e664:	ee27 7a04 	vmul.f32	s14, s14, s8
 800e668:	1b1b      	subs	r3, r3, r4
 800e66a:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 800e66e:	ee07 3a10 	vmov	s14, r3
 800e672:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e676:	ee27 7a04 	vmul.f32	s14, s14, s8
 800e67a:	eee6 4a87 	vfma.f32	s9, s13, s14
 800e67e:	ee64 4a86 	vmul.f32	s9, s9, s12
 800e682:	edc0 4a0a 	vstr	s9, [r0, #40]	@ 0x28
 800e686:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 800e688:	698b      	ldr	r3, [r1, #24]
 800e68a:	1a9b      	subs	r3, r3, r2
 800e68c:	ee06 3a90 	vmov	s13, r3
 800e690:	684b      	ldr	r3, [r1, #4]
 800e692:	1a9b      	subs	r3, r3, r2
 800e694:	ee07 3a10 	vmov	s14, r3
 800e698:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800e69c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e6a0:	ee66 6a84 	vmul.f32	s13, s13, s8
 800e6a4:	ee27 7a04 	vmul.f32	s14, s14, s8
 800e6a8:	ee65 6a66 	vnmul.f32	s13, s10, s13
 800e6ac:	eee5 6a87 	vfma.f32	s13, s11, s14
 800e6b0:	ee66 6a83 	vmul.f32	s13, s13, s6
 800e6b4:	edc0 6a0b 	vstr	s13, [r0, #44]	@ 0x2c
 800e6b8:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 800e6ba:	694a      	ldr	r2, [r1, #20]
 800e6bc:	1b13      	subs	r3, r2, r4
 800e6be:	ee07 3a10 	vmov	s14, r3
 800e6c2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e6c6:	680b      	ldr	r3, [r1, #0]
 800e6c8:	ee27 7a04 	vmul.f32	s14, s14, s8
 800e6cc:	1b1b      	subs	r3, r3, r4
 800e6ce:	ee25 5a47 	vnmul.f32	s10, s10, s14
 800e6d2:	ee07 3a10 	vmov	s14, r3
 800e6d6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e6da:	ee27 7a04 	vmul.f32	s14, s14, s8
 800e6de:	eea5 5a87 	vfma.f32	s10, s11, s14
 800e6e2:	edd0 5a08 	vldr	s11, [r0, #32]
 800e6e6:	ee25 5a06 	vmul.f32	s10, s10, s12
 800e6ea:	ee31 1a65 	vsub.f32	s2, s2, s11
 800e6ee:	ed80 5a0c 	vstr	s10, [r0, #48]	@ 0x30
 800e6f2:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 800e6f4:	698b      	ldr	r3, [r1, #24]
 800e6f6:	1a9b      	subs	r3, r3, r2
 800e6f8:	ee07 3a10 	vmov	s14, r3
 800e6fc:	684b      	ldr	r3, [r1, #4]
 800e6fe:	1a9b      	subs	r3, r3, r2
 800e700:	ee01 3a90 	vmov	s3, r3
 800e704:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e708:	ee72 5ae5 	vsub.f32	s11, s5, s11
 800e70c:	ee27 7a04 	vmul.f32	s14, s14, s8
 800e710:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 800e714:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 800e718:	ee61 1a84 	vmul.f32	s3, s3, s8
 800e71c:	eea1 7a21 	vfma.f32	s14, s2, s3
 800e720:	ee27 7a03 	vmul.f32	s14, s14, s6
 800e724:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 800e728:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 800e72a:	694a      	ldr	r2, [r1, #20]
 800e72c:	1b13      	subs	r3, r2, r4
 800e72e:	ee03 3a10 	vmov	s6, r3
 800e732:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 800e736:	680b      	ldr	r3, [r1, #0]
 800e738:	ee23 3a04 	vmul.f32	s6, s6, s8
 800e73c:	1b1b      	subs	r3, r3, r4
 800e73e:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 800e742:	ee03 3a10 	vmov	s6, r3
 800e746:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 800e74a:	ee23 4a04 	vmul.f32	s8, s6, s8
 800e74e:	eee1 5a04 	vfma.f32	s11, s2, s8
 800e752:	ee25 6a86 	vmul.f32	s12, s11, s12
 800e756:	ee62 5a67 	vnmul.f32	s11, s4, s15
 800e75a:	ed80 6a0e 	vstr	s12, [r0, #56]	@ 0x38
 800e75e:	eee3 5aa6 	vfma.f32	s11, s7, s13
 800e762:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 800e766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e76a:	dd13      	ble.n	800e794 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 800e76c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e770:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 800e774:	63c3      	str	r3, [r0, #60]	@ 0x3c
 800e776:	eee3 7a87 	vfma.f32	s15, s7, s14
 800e77a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e77e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e782:	dd15      	ble.n	800e7b0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 800e784:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e788:	6403      	str	r3, [r0, #64]	@ 0x40
 800e78a:	bd70      	pop	{r4, r5, r6, pc}
 800e78c:	4623      	mov	r3, r4
 800e78e:	e6fd      	b.n	800e58c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 800e790:	462a      	mov	r2, r5
 800e792:	e706      	b.n	800e5a2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 800e794:	d502      	bpl.n	800e79c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 800e796:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 800e79a:	e7e9      	b.n	800e770 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 800e79c:	ee22 2a64 	vnmul.f32	s4, s4, s9
 800e7a0:	eea3 2a85 	vfma.f32	s4, s7, s10
 800e7a4:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 800e7a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7ac:	dade      	bge.n	800e76c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 800e7ae:	e7f2      	b.n	800e796 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 800e7b0:	d502      	bpl.n	800e7b8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 800e7b2:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 800e7b6:	e7e7      	b.n	800e788 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 800e7b8:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 800e7bc:	eee3 4a86 	vfma.f32	s9, s7, s12
 800e7c0:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 800e7c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7c8:	dadc      	bge.n	800e784 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 800e7ca:	e7f2      	b.n	800e7b2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 800e7cc:	3d800000 	.word	0x3d800000

0800e7d0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 800e7d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e7d4:	2714      	movs	r7, #20
 800e7d6:	435f      	muls	r7, r3
 800e7d8:	eb02 0c07 	add.w	ip, r2, r7
 800e7dc:	f8dc 5004 	ldr.w	r5, [ip, #4]
 800e7e0:	f115 0e0f 	adds.w	lr, r5, #15
 800e7e4:	f100 80a2 	bmi.w	800e92c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 800e7e8:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 800e7ec:	9c08      	ldr	r4, [sp, #32]
 800e7ee:	f8c0 e014 	str.w	lr, [r0, #20]
 800e7f2:	2614      	movs	r6, #20
 800e7f4:	4366      	muls	r6, r4
 800e7f6:	eb02 0806 	add.w	r8, r2, r6
 800e7fa:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e7fe:	f115 040f 	adds.w	r4, r5, #15
 800e802:	f100 809f 	bmi.w	800e944 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 800e806:	1124      	asrs	r4, r4, #4
 800e808:	eba4 040e 	sub.w	r4, r4, lr
 800e80c:	6184      	str	r4, [r0, #24]
 800e80e:	2c00      	cmp	r4, #0
 800e810:	f000 808a 	beq.w	800e928 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 800e814:	f8dc 9004 	ldr.w	r9, [ip, #4]
 800e818:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800e81c:	5995      	ldr	r5, [r2, r6]
 800e81e:	eba4 0809 	sub.w	r8, r4, r9
 800e822:	59d4      	ldr	r4, [r2, r7]
 800e824:	eba5 0a04 	sub.w	sl, r5, r4
 800e828:	ea4f 150a 	mov.w	r5, sl, lsl #4
 800e82c:	fb0e fe05 	mul.w	lr, lr, r5
 800e830:	fb0a ee19 	mls	lr, sl, r9, lr
 800e834:	fb08 e404 	mla	r4, r8, r4, lr
 800e838:	ea4f 1608 	mov.w	r6, r8, lsl #4
 800e83c:	3c01      	subs	r4, #1
 800e83e:	19a4      	adds	r4, r4, r6
 800e840:	f100 808c 	bmi.w	800e95c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 800e844:	fb94 fef6 	sdiv	lr, r4, r6
 800e848:	f8c0 e000 	str.w	lr, [r0]
 800e84c:	fb06 441e 	mls	r4, r6, lr, r4
 800e850:	6104      	str	r4, [r0, #16]
 800e852:	2d00      	cmp	r5, #0
 800e854:	f2c0 8095 	blt.w	800e982 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 800e858:	fb95 f4f6 	sdiv	r4, r5, r6
 800e85c:	6044      	str	r4, [r0, #4]
 800e85e:	fb06 5514 	mls	r5, r6, r4, r5
 800e862:	6085      	str	r5, [r0, #8]
 800e864:	60c6      	str	r6, [r0, #12]
 800e866:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800e86a:	6945      	ldr	r5, [r0, #20]
 800e86c:	59d2      	ldr	r2, [r2, r7]
 800e86e:	eddf 6a4d 	vldr	s13, [pc, #308]	@ 800e9a4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 800e872:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 800e876:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 800e87a:	ee07 4a10 	vmov	s14, r4
 800e87e:	6804      	ldr	r4, [r0, #0]
 800e880:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 800e884:	ee07 2a90 	vmov	s15, r2
 800e888:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e88c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e890:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800e894:	ee27 7a26 	vmul.f32	s14, s14, s13
 800e898:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e89c:	edd3 6a00 	vldr	s13, [r3]
 800e8a0:	eee6 6a07 	vfma.f32	s13, s12, s14
 800e8a4:	ed91 6a09 	vldr	s12, [r1, #36]	@ 0x24
 800e8a8:	eee6 6a27 	vfma.f32	s13, s12, s15
 800e8ac:	edc0 6a07 	vstr	s13, [r0, #28]
 800e8b0:	edd0 6a01 	vldr	s13, [r0, #4]
 800e8b4:	edd1 5a09 	vldr	s11, [r1, #36]	@ 0x24
 800e8b8:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 800e8bc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800e8c0:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800e8c4:	ed80 6a08 	vstr	s12, [r0, #32]
 800e8c8:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 800e8ca:	6242      	str	r2, [r0, #36]	@ 0x24
 800e8cc:	edd1 5a0c 	vldr	s11, [r1, #48]	@ 0x30
 800e8d0:	ed93 6a03 	vldr	s12, [r3, #12]
 800e8d4:	eea5 6a87 	vfma.f32	s12, s11, s14
 800e8d8:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 800e8dc:	eea5 6aa7 	vfma.f32	s12, s11, s15
 800e8e0:	ed80 6a0a 	vstr	s12, [r0, #40]	@ 0x28
 800e8e4:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 800e8e8:	ed91 6a0c 	vldr	s12, [r1, #48]	@ 0x30
 800e8ec:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800e8f0:	ed80 6a0b 	vstr	s12, [r0, #44]	@ 0x2c
 800e8f4:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 800e8f6:	6302      	str	r2, [r0, #48]	@ 0x30
 800e8f8:	ed93 6a06 	vldr	s12, [r3, #24]
 800e8fc:	edd1 5a0e 	vldr	s11, [r1, #56]	@ 0x38
 800e900:	eea5 6a87 	vfma.f32	s12, s11, s14
 800e904:	eeb0 7a46 	vmov.f32	s14, s12
 800e908:	ed91 6a0d 	vldr	s12, [r1, #52]	@ 0x34
 800e90c:	eea6 7a27 	vfma.f32	s14, s12, s15
 800e910:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 800e914:	ed91 7a0d 	vldr	s14, [r1, #52]	@ 0x34
 800e918:	edd1 7a0e 	vldr	s15, [r1, #56]	@ 0x38
 800e91c:	eee6 7a87 	vfma.f32	s15, s13, s14
 800e920:	edc0 7a0e 	vstr	s15, [r0, #56]	@ 0x38
 800e924:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800e926:	63c3      	str	r3, [r0, #60]	@ 0x3c
 800e928:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e92c:	f1c5 0501 	rsb	r5, r5, #1
 800e930:	f015 050f 	ands.w	r5, r5, #15
 800e934:	bf18      	it	ne
 800e936:	2501      	movne	r5, #1
 800e938:	2410      	movs	r4, #16
 800e93a:	fb9e fef4 	sdiv	lr, lr, r4
 800e93e:	ebae 0e05 	sub.w	lr, lr, r5
 800e942:	e753      	b.n	800e7ec <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 800e944:	f1c5 0501 	rsb	r5, r5, #1
 800e948:	f015 050f 	ands.w	r5, r5, #15
 800e94c:	bf18      	it	ne
 800e94e:	2501      	movne	r5, #1
 800e950:	f04f 0910 	mov.w	r9, #16
 800e954:	fb94 f4f9 	sdiv	r4, r4, r9
 800e958:	1b64      	subs	r4, r4, r5
 800e95a:	e755      	b.n	800e808 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 800e95c:	4264      	negs	r4, r4
 800e95e:	fb94 fef6 	sdiv	lr, r4, r6
 800e962:	f1ce 0800 	rsb	r8, lr, #0
 800e966:	fb06 441e 	mls	r4, r6, lr, r4
 800e96a:	f8c0 8000 	str.w	r8, [r0]
 800e96e:	6104      	str	r4, [r0, #16]
 800e970:	2c00      	cmp	r4, #0
 800e972:	f43f af6e 	beq.w	800e852 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 800e976:	ea6f 0e0e 	mvn.w	lr, lr
 800e97a:	f8c0 e000 	str.w	lr, [r0]
 800e97e:	1b34      	subs	r4, r6, r4
 800e980:	e766      	b.n	800e850 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 800e982:	426d      	negs	r5, r5
 800e984:	fb95 f4f6 	sdiv	r4, r5, r6
 800e988:	f1c4 0e00 	rsb	lr, r4, #0
 800e98c:	fb06 5514 	mls	r5, r6, r4, r5
 800e990:	f8c0 e004 	str.w	lr, [r0, #4]
 800e994:	6085      	str	r5, [r0, #8]
 800e996:	2d00      	cmp	r5, #0
 800e998:	f43f af64 	beq.w	800e864 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 800e99c:	43e4      	mvns	r4, r4
 800e99e:	6044      	str	r4, [r0, #4]
 800e9a0:	1b75      	subs	r5, r6, r5
 800e9a2:	e75e      	b.n	800e862 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 800e9a4:	3d800000 	.word	0x3d800000

0800e9a8 <_ZN8touchgfx7Unicode6strlenEPKt>:
 800e9a8:	4602      	mov	r2, r0
 800e9aa:	b148      	cbz	r0, 800e9c0 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 800e9ac:	2300      	movs	r3, #0
 800e9ae:	b298      	uxth	r0, r3
 800e9b0:	3301      	adds	r3, #1
 800e9b2:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 800e9b6:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 800e9ba:	2900      	cmp	r1, #0
 800e9bc:	d1f7      	bne.n	800e9ae <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 800e9be:	4770      	bx	lr
 800e9c0:	4770      	bx	lr

0800e9c2 <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 800e9c2:	b530      	push	{r4, r5, lr}
 800e9c4:	4604      	mov	r4, r0
 800e9c6:	b159      	cbz	r1, 800e9e0 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 800e9c8:	b148      	cbz	r0, 800e9de <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 800e9ca:	2300      	movs	r3, #0
 800e9cc:	b298      	uxth	r0, r3
 800e9ce:	4282      	cmp	r2, r0
 800e9d0:	d905      	bls.n	800e9de <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 800e9d2:	5ccd      	ldrb	r5, [r1, r3]
 800e9d4:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 800e9d8:	3301      	adds	r3, #1
 800e9da:	2d00      	cmp	r5, #0
 800e9dc:	d1f6      	bne.n	800e9cc <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 800e9de:	bd30      	pop	{r4, r5, pc}
 800e9e0:	4608      	mov	r0, r1
 800e9e2:	e7fc      	b.n	800e9de <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

0800e9e4 <_ZN8touchgfx7Unicode4itoaElPtti.part.2>:
 800e9e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e9e6:	b08b      	sub	sp, #44	@ 0x2c
 800e9e8:	468c      	mov	ip, r1
 800e9ea:	2100      	movs	r1, #0
 800e9ec:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 800e9f0:	4604      	mov	r4, r0
 800e9f2:	261f      	movs	r6, #31
 800e9f4:	af01      	add	r7, sp, #4
 800e9f6:	fb94 fef3 	sdiv	lr, r4, r3
 800e9fa:	fb03 441e 	mls	r4, r3, lr, r4
 800e9fe:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 800ea02:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 800ea06:	b2ec      	uxtb	r4, r5
 800ea08:	2d09      	cmp	r5, #9
 800ea0a:	bfd4      	ite	le
 800ea0c:	3430      	addle	r4, #48	@ 0x30
 800ea0e:	3457      	addgt	r4, #87	@ 0x57
 800ea10:	b2e4      	uxtb	r4, r4
 800ea12:	55bc      	strb	r4, [r7, r6]
 800ea14:	4674      	mov	r4, lr
 800ea16:	1e71      	subs	r1, r6, #1
 800ea18:	b974      	cbnz	r4, 800ea38 <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x54>
 800ea1a:	2800      	cmp	r0, #0
 800ea1c:	da05      	bge.n	800ea2a <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x46>
 800ea1e:	ab0a      	add	r3, sp, #40	@ 0x28
 800ea20:	4419      	add	r1, r3
 800ea22:	232d      	movs	r3, #45	@ 0x2d
 800ea24:	f801 3c24 	strb.w	r3, [r1, #-36]
 800ea28:	1eb1      	subs	r1, r6, #2
 800ea2a:	3101      	adds	r1, #1
 800ea2c:	4439      	add	r1, r7
 800ea2e:	4660      	mov	r0, ip
 800ea30:	f7ff ffc7 	bl	800e9c2 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 800ea34:	b00b      	add	sp, #44	@ 0x2c
 800ea36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ea38:	460e      	mov	r6, r1
 800ea3a:	e7dc      	b.n	800e9f6 <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x12>

0800ea3c <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>:
 800ea3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ea3e:	b08b      	sub	sp, #44	@ 0x2c
 800ea40:	468c      	mov	ip, r1
 800ea42:	2100      	movs	r1, #0
 800ea44:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 800ea48:	ae01      	add	r6, sp, #4
 800ea4a:	211f      	movs	r1, #31
 800ea4c:	fbb0 f7f3 	udiv	r7, r0, r3
 800ea50:	fb03 0517 	mls	r5, r3, r7, r0
 800ea54:	b2ec      	uxtb	r4, r5
 800ea56:	2d09      	cmp	r5, #9
 800ea58:	bfd4      	ite	le
 800ea5a:	3430      	addle	r4, #48	@ 0x30
 800ea5c:	3457      	addgt	r4, #87	@ 0x57
 800ea5e:	b2e4      	uxtb	r4, r4
 800ea60:	558c      	strb	r4, [r1, r6]
 800ea62:	4638      	mov	r0, r7
 800ea64:	1e4c      	subs	r4, r1, #1
 800ea66:	b92f      	cbnz	r7, 800ea74 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x38>
 800ea68:	4431      	add	r1, r6
 800ea6a:	4660      	mov	r0, ip
 800ea6c:	f7ff ffa9 	bl	800e9c2 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 800ea70:	b00b      	add	sp, #44	@ 0x2c
 800ea72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ea74:	4621      	mov	r1, r4
 800ea76:	e7e9      	b.n	800ea4c <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x10>

0800ea78 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 800ea78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea7c:	4691      	mov	r9, r2
 800ea7e:	b085      	sub	sp, #20
 800ea80:	6802      	ldr	r2, [r0, #0]
 800ea82:	9201      	str	r2, [sp, #4]
 800ea84:	4688      	mov	r8, r1
 800ea86:	4683      	mov	fp, r0
 800ea88:	f89d 1040 	ldrb.w	r1, [sp, #64]	@ 0x40
 800ea8c:	9103      	str	r1, [sp, #12]
 800ea8e:	4610      	mov	r0, r2
 800ea90:	461c      	mov	r4, r3
 800ea92:	f89d 3048 	ldrb.w	r3, [sp, #72]	@ 0x48
 800ea96:	9302      	str	r3, [sp, #8]
 800ea98:	f7ff ff86 	bl	800e9a8 <_ZN8touchgfx7Unicode6strlenEPKt>
 800ea9c:	f1b8 0f00 	cmp.w	r8, #0
 800eaa0:	bf0c      	ite	eq
 800eaa2:	4684      	moveq	ip, r0
 800eaa4:	f100 0c01 	addne.w	ip, r0, #1
 800eaa8:	f1b9 0f69 	cmp.w	r9, #105	@ 0x69
 800eaac:	f89d 6038 	ldrb.w	r6, [sp, #56]	@ 0x38
 800eab0:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 800eab2:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 800eab4:	f8dd a054 	ldr.w	sl, [sp, #84]	@ 0x54
 800eab8:	9903      	ldr	r1, [sp, #12]
 800eaba:	fa1f fc8c 	uxth.w	ip, ip
 800eabe:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800eac2:	d041      	beq.n	800eb48 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 800eac4:	d834      	bhi.n	800eb30 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 800eac6:	f1b9 0f63 	cmp.w	r9, #99	@ 0x63
 800eaca:	d059      	beq.n	800eb80 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 800eacc:	f1b9 0f64 	cmp.w	r9, #100	@ 0x64
 800ead0:	d03a      	beq.n	800eb48 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 800ead2:	f1b9 0f58 	cmp.w	r9, #88	@ 0x58
 800ead6:	d034      	beq.n	800eb42 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 800ead8:	2400      	movs	r4, #0
 800eada:	f8bd 2050 	ldrh.w	r2, [sp, #80]	@ 0x50
 800eade:	3a01      	subs	r2, #1
 800eae0:	b169      	cbz	r1, 800eafe <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 800eae2:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800eae4:	458c      	cmp	ip, r1
 800eae6:	da09      	bge.n	800eafc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 800eae8:	eba1 010c 	sub.w	r1, r1, ip
 800eaec:	b289      	uxth	r1, r1
 800eaee:	b933      	cbnz	r3, 800eafe <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 800eaf0:	2e00      	cmp	r6, #0
 800eaf2:	d051      	beq.n	800eb98 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 800eaf4:	2800      	cmp	r0, #0
 800eaf6:	d04f      	beq.n	800eb98 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 800eaf8:	440c      	add	r4, r1
 800eafa:	b2a4      	uxth	r4, r4
 800eafc:	2100      	movs	r1, #0
 800eafe:	682b      	ldr	r3, [r5, #0]
 800eb00:	4293      	cmp	r3, r2
 800eb02:	da07      	bge.n	800eb14 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 800eb04:	f1b8 0f00 	cmp.w	r8, #0
 800eb08:	d004      	beq.n	800eb14 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 800eb0a:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 800eb0e:	682b      	ldr	r3, [r5, #0]
 800eb10:	3301      	adds	r3, #1
 800eb12:	602b      	str	r3, [r5, #0]
 800eb14:	2730      	movs	r7, #48	@ 0x30
 800eb16:	2c00      	cmp	r4, #0
 800eb18:	d04e      	beq.n	800ebb8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 800eb1a:	682e      	ldr	r6, [r5, #0]
 800eb1c:	3c01      	subs	r4, #1
 800eb1e:	42b2      	cmp	r2, r6
 800eb20:	b2a4      	uxth	r4, r4
 800eb22:	dd49      	ble.n	800ebb8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 800eb24:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 800eb28:	682b      	ldr	r3, [r5, #0]
 800eb2a:	3301      	adds	r3, #1
 800eb2c:	602b      	str	r3, [r5, #0]
 800eb2e:	e7f2      	b.n	800eb16 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 800eb30:	f1b9 0f73 	cmp.w	r9, #115	@ 0x73
 800eb34:	d01d      	beq.n	800eb72 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 800eb36:	f1b9 0f78 	cmp.w	r9, #120	@ 0x78
 800eb3a:	d002      	beq.n	800eb42 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 800eb3c:	f1b9 0f6f 	cmp.w	r9, #111	@ 0x6f
 800eb40:	e7c9      	b.n	800ead6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 800eb42:	4684      	mov	ip, r0
 800eb44:	f04f 0800 	mov.w	r8, #0
 800eb48:	2c00      	cmp	r4, #0
 800eb4a:	d0c6      	beq.n	800eada <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 800eb4c:	b947      	cbnz	r7, 800eb60 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 800eb4e:	2801      	cmp	r0, #1
 800eb50:	d106      	bne.n	800eb60 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 800eb52:	8814      	ldrh	r4, [r2, #0]
 800eb54:	2c30      	cmp	r4, #48	@ 0x30
 800eb56:	bf02      	ittt	eq
 800eb58:	3202      	addeq	r2, #2
 800eb5a:	f8cb 2000 	streq.w	r2, [fp]
 800eb5e:	4638      	moveq	r0, r7
 800eb60:	45bc      	cmp	ip, r7
 800eb62:	da14      	bge.n	800eb8e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 800eb64:	b2bf      	uxth	r7, r7
 800eb66:	eba7 040c 	sub.w	r4, r7, ip
 800eb6a:	b2a4      	uxth	r4, r4
 800eb6c:	46bc      	mov	ip, r7
 800eb6e:	2600      	movs	r6, #0
 800eb70:	e7b3      	b.n	800eada <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 800eb72:	4684      	mov	ip, r0
 800eb74:	b16c      	cbz	r4, 800eb92 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 800eb76:	42b8      	cmp	r0, r7
 800eb78:	dd00      	ble.n	800eb7c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 800eb7a:	b2b8      	uxth	r0, r7
 800eb7c:	2400      	movs	r4, #0
 800eb7e:	e003      	b.n	800eb88 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 800eb80:	f04f 0c01 	mov.w	ip, #1
 800eb84:	2400      	movs	r4, #0
 800eb86:	4660      	mov	r0, ip
 800eb88:	4626      	mov	r6, r4
 800eb8a:	46a0      	mov	r8, r4
 800eb8c:	e7a5      	b.n	800eada <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 800eb8e:	2400      	movs	r4, #0
 800eb90:	e7ed      	b.n	800eb6e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 800eb92:	4626      	mov	r6, r4
 800eb94:	46a0      	mov	r8, r4
 800eb96:	e7a0      	b.n	800eada <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 800eb98:	2900      	cmp	r1, #0
 800eb9a:	d0b0      	beq.n	800eafe <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 800eb9c:	2720      	movs	r7, #32
 800eb9e:	682e      	ldr	r6, [r5, #0]
 800eba0:	2900      	cmp	r1, #0
 800eba2:	d0ac      	beq.n	800eafe <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 800eba4:	3901      	subs	r1, #1
 800eba6:	4296      	cmp	r6, r2
 800eba8:	b289      	uxth	r1, r1
 800ebaa:	daa7      	bge.n	800eafc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 800ebac:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 800ebb0:	682b      	ldr	r3, [r5, #0]
 800ebb2:	3301      	adds	r3, #1
 800ebb4:	602b      	str	r3, [r5, #0]
 800ebb6:	e7f2      	b.n	800eb9e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 800ebb8:	b188      	cbz	r0, 800ebde <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 800ebba:	682b      	ldr	r3, [r5, #0]
 800ebbc:	3801      	subs	r0, #1
 800ebbe:	429a      	cmp	r2, r3
 800ebc0:	b280      	uxth	r0, r0
 800ebc2:	dd0c      	ble.n	800ebde <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 800ebc4:	f8db 3000 	ldr.w	r3, [fp]
 800ebc8:	1c9c      	adds	r4, r3, #2
 800ebca:	f8cb 4000 	str.w	r4, [fp]
 800ebce:	881c      	ldrh	r4, [r3, #0]
 800ebd0:	682b      	ldr	r3, [r5, #0]
 800ebd2:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 800ebd6:	682b      	ldr	r3, [r5, #0]
 800ebd8:	3301      	adds	r3, #1
 800ebda:	602b      	str	r3, [r5, #0]
 800ebdc:	e7ec      	b.n	800ebb8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 800ebde:	2620      	movs	r6, #32
 800ebe0:	b151      	cbz	r1, 800ebf8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 800ebe2:	6828      	ldr	r0, [r5, #0]
 800ebe4:	3901      	subs	r1, #1
 800ebe6:	4282      	cmp	r2, r0
 800ebe8:	b289      	uxth	r1, r1
 800ebea:	dd05      	ble.n	800ebf8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 800ebec:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 800ebf0:	682b      	ldr	r3, [r5, #0]
 800ebf2:	3301      	adds	r3, #1
 800ebf4:	602b      	str	r3, [r5, #0]
 800ebf6:	e7f3      	b.n	800ebe0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 800ebf8:	b005      	add	sp, #20
 800ebfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ebfe <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 800ebfe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ec02:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 800ec06:	e9dd e609 	ldrd	lr, r6, [sp, #36]	@ 0x24
 800ec0a:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	@ 0x2c
 800ec0e:	2400      	movs	r4, #0
 800ec10:	8014      	strh	r4, [r2, #0]
 800ec12:	701c      	strb	r4, [r3, #0]
 800ec14:	f888 4000 	strb.w	r4, [r8]
 800ec18:	f88c 4000 	strb.w	r4, [ip]
 800ec1c:	f88e 4000 	strb.w	r4, [lr]
 800ec20:	703c      	strb	r4, [r7, #0]
 800ec22:	6804      	ldr	r4, [r0, #0]
 800ec24:	b1a4      	cbz	r4, 800ec50 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 800ec26:	8824      	ldrh	r4, [r4, #0]
 800ec28:	f04f 0901 	mov.w	r9, #1
 800ec2c:	b314      	cbz	r4, 800ec74 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 800ec2e:	2c2b      	cmp	r4, #43	@ 0x2b
 800ec30:	d001      	beq.n	800ec36 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 800ec32:	2c20      	cmp	r4, #32
 800ec34:	d110      	bne.n	800ec58 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 800ec36:	8014      	strh	r4, [r2, #0]
 800ec38:	6804      	ldr	r4, [r0, #0]
 800ec3a:	b10c      	cbz	r4, 800ec40 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 800ec3c:	3402      	adds	r4, #2
 800ec3e:	6004      	str	r4, [r0, #0]
 800ec40:	680c      	ldr	r4, [r1, #0]
 800ec42:	b10c      	cbz	r4, 800ec48 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 800ec44:	3401      	adds	r4, #1
 800ec46:	600c      	str	r4, [r1, #0]
 800ec48:	6804      	ldr	r4, [r0, #0]
 800ec4a:	b17c      	cbz	r4, 800ec6c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 800ec4c:	8824      	ldrh	r4, [r4, #0]
 800ec4e:	e7ed      	b.n	800ec2c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 800ec50:	680c      	ldr	r4, [r1, #0]
 800ec52:	b17c      	cbz	r4, 800ec74 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 800ec54:	7824      	ldrb	r4, [r4, #0]
 800ec56:	e7e7      	b.n	800ec28 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 800ec58:	2c2d      	cmp	r4, #45	@ 0x2d
 800ec5a:	d102      	bne.n	800ec62 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 800ec5c:	f883 9000 	strb.w	r9, [r3]
 800ec60:	e7ea      	b.n	800ec38 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 800ec62:	2c23      	cmp	r4, #35	@ 0x23
 800ec64:	d107      	bne.n	800ec76 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 800ec66:	f888 9000 	strb.w	r9, [r8]
 800ec6a:	e7e5      	b.n	800ec38 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 800ec6c:	680c      	ldr	r4, [r1, #0]
 800ec6e:	b10c      	cbz	r4, 800ec74 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 800ec70:	7824      	ldrb	r4, [r4, #0]
 800ec72:	e7db      	b.n	800ec2c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 800ec74:	2400      	movs	r4, #0
 800ec76:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 800ec7a:	2b09      	cmp	r3, #9
 800ec7c:	d901      	bls.n	800ec82 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 800ec7e:	2c2a      	cmp	r4, #42	@ 0x2a
 800ec80:	d122      	bne.n	800ecc8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 800ec82:	2301      	movs	r3, #1
 800ec84:	2c30      	cmp	r4, #48	@ 0x30
 800ec86:	f88e 3000 	strb.w	r3, [lr]
 800ec8a:	d10d      	bne.n	800eca8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 800ec8c:	f88c 3000 	strb.w	r3, [ip]
 800ec90:	6803      	ldr	r3, [r0, #0]
 800ec92:	b10b      	cbz	r3, 800ec98 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 800ec94:	3302      	adds	r3, #2
 800ec96:	6003      	str	r3, [r0, #0]
 800ec98:	680b      	ldr	r3, [r1, #0]
 800ec9a:	b10b      	cbz	r3, 800eca0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 800ec9c:	3301      	adds	r3, #1
 800ec9e:	600b      	str	r3, [r1, #0]
 800eca0:	6803      	ldr	r3, [r0, #0]
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d02f      	beq.n	800ed06 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 800eca6:	881c      	ldrh	r4, [r3, #0]
 800eca8:	2c2a      	cmp	r4, #42	@ 0x2a
 800ecaa:	d135      	bne.n	800ed18 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 800ecac:	f04f 33ff 	mov.w	r3, #4294967295
 800ecb0:	6033      	str	r3, [r6, #0]
 800ecb2:	6803      	ldr	r3, [r0, #0]
 800ecb4:	b10b      	cbz	r3, 800ecba <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 800ecb6:	3302      	adds	r3, #2
 800ecb8:	6003      	str	r3, [r0, #0]
 800ecba:	680b      	ldr	r3, [r1, #0]
 800ecbc:	b10b      	cbz	r3, 800ecc2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 800ecbe:	3301      	adds	r3, #1
 800ecc0:	600b      	str	r3, [r1, #0]
 800ecc2:	6803      	ldr	r3, [r0, #0]
 800ecc4:	b31b      	cbz	r3, 800ed0e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 800ecc6:	881c      	ldrh	r4, [r3, #0]
 800ecc8:	2c2e      	cmp	r4, #46	@ 0x2e
 800ecca:	d11a      	bne.n	800ed02 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 800eccc:	2301      	movs	r3, #1
 800ecce:	703b      	strb	r3, [r7, #0]
 800ecd0:	6803      	ldr	r3, [r0, #0]
 800ecd2:	b10b      	cbz	r3, 800ecd8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 800ecd4:	3302      	adds	r3, #2
 800ecd6:	6003      	str	r3, [r0, #0]
 800ecd8:	680b      	ldr	r3, [r1, #0]
 800ecda:	b10b      	cbz	r3, 800ece0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 800ecdc:	3301      	adds	r3, #1
 800ecde:	600b      	str	r3, [r1, #0]
 800ece0:	6803      	ldr	r3, [r0, #0]
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d036      	beq.n	800ed54 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 800ece6:	881b      	ldrh	r3, [r3, #0]
 800ece8:	2b2a      	cmp	r3, #42	@ 0x2a
 800ecea:	d137      	bne.n	800ed5c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 800ecec:	f04f 33ff 	mov.w	r3, #4294967295
 800ecf0:	602b      	str	r3, [r5, #0]
 800ecf2:	6803      	ldr	r3, [r0, #0]
 800ecf4:	b10b      	cbz	r3, 800ecfa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 800ecf6:	3302      	adds	r3, #2
 800ecf8:	6003      	str	r3, [r0, #0]
 800ecfa:	680b      	ldr	r3, [r1, #0]
 800ecfc:	b10b      	cbz	r3, 800ed02 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 800ecfe:	3301      	adds	r3, #1
 800ed00:	600b      	str	r3, [r1, #0]
 800ed02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ed06:	680c      	ldr	r4, [r1, #0]
 800ed08:	b134      	cbz	r4, 800ed18 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 800ed0a:	7824      	ldrb	r4, [r4, #0]
 800ed0c:	e7cc      	b.n	800eca8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 800ed0e:	680b      	ldr	r3, [r1, #0]
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d0f6      	beq.n	800ed02 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 800ed14:	781c      	ldrb	r4, [r3, #0]
 800ed16:	e7d7      	b.n	800ecc8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 800ed18:	2300      	movs	r3, #0
 800ed1a:	6033      	str	r3, [r6, #0]
 800ed1c:	220a      	movs	r2, #10
 800ed1e:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800ed22:	fa1f f38c 	uxth.w	r3, ip
 800ed26:	2b09      	cmp	r3, #9
 800ed28:	d8ce      	bhi.n	800ecc8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 800ed2a:	6833      	ldr	r3, [r6, #0]
 800ed2c:	fb02 c303 	mla	r3, r2, r3, ip
 800ed30:	6033      	str	r3, [r6, #0]
 800ed32:	6803      	ldr	r3, [r0, #0]
 800ed34:	b10b      	cbz	r3, 800ed3a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 800ed36:	3302      	adds	r3, #2
 800ed38:	6003      	str	r3, [r0, #0]
 800ed3a:	680b      	ldr	r3, [r1, #0]
 800ed3c:	b10b      	cbz	r3, 800ed42 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 800ed3e:	3301      	adds	r3, #1
 800ed40:	600b      	str	r3, [r1, #0]
 800ed42:	6803      	ldr	r3, [r0, #0]
 800ed44:	b10b      	cbz	r3, 800ed4a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 800ed46:	881c      	ldrh	r4, [r3, #0]
 800ed48:	e7e9      	b.n	800ed1e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 800ed4a:	680c      	ldr	r4, [r1, #0]
 800ed4c:	2c00      	cmp	r4, #0
 800ed4e:	d0e6      	beq.n	800ed1e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 800ed50:	7824      	ldrb	r4, [r4, #0]
 800ed52:	e7e4      	b.n	800ed1e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 800ed54:	680b      	ldr	r3, [r1, #0]
 800ed56:	b10b      	cbz	r3, 800ed5c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 800ed58:	781b      	ldrb	r3, [r3, #0]
 800ed5a:	e7c5      	b.n	800ece8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 800ed5c:	2200      	movs	r2, #0
 800ed5e:	602a      	str	r2, [r5, #0]
 800ed60:	240a      	movs	r4, #10
 800ed62:	3b30      	subs	r3, #48	@ 0x30
 800ed64:	b29e      	uxth	r6, r3
 800ed66:	2e09      	cmp	r6, #9
 800ed68:	682a      	ldr	r2, [r5, #0]
 800ed6a:	d813      	bhi.n	800ed94 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 800ed6c:	fb04 3302 	mla	r3, r4, r2, r3
 800ed70:	602b      	str	r3, [r5, #0]
 800ed72:	6803      	ldr	r3, [r0, #0]
 800ed74:	b10b      	cbz	r3, 800ed7a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 800ed76:	3302      	adds	r3, #2
 800ed78:	6003      	str	r3, [r0, #0]
 800ed7a:	680b      	ldr	r3, [r1, #0]
 800ed7c:	b10b      	cbz	r3, 800ed82 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 800ed7e:	3301      	adds	r3, #1
 800ed80:	600b      	str	r3, [r1, #0]
 800ed82:	6803      	ldr	r3, [r0, #0]
 800ed84:	b10b      	cbz	r3, 800ed8a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 800ed86:	881b      	ldrh	r3, [r3, #0]
 800ed88:	e7eb      	b.n	800ed62 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 800ed8a:	680b      	ldr	r3, [r1, #0]
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d0e8      	beq.n	800ed62 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 800ed90:	781b      	ldrb	r3, [r3, #0]
 800ed92:	e7e6      	b.n	800ed62 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 800ed94:	2a06      	cmp	r2, #6
 800ed96:	bfa8      	it	ge
 800ed98:	2206      	movge	r2, #6
 800ed9a:	602a      	str	r2, [r5, #0]
 800ed9c:	e7b1      	b.n	800ed02 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

0800ed9e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 800ed9e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eda2:	b0a3      	sub	sp, #140	@ 0x8c
 800eda4:	2600      	movs	r6, #0
 800eda6:	f10d 0944 	add.w	r9, sp, #68	@ 0x44
 800edaa:	4607      	mov	r7, r0
 800edac:	4688      	mov	r8, r1
 800edae:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800edb2:	4631      	mov	r1, r6
 800edb4:	2242      	movs	r2, #66	@ 0x42
 800edb6:	4648      	mov	r0, r9
 800edb8:	9c2c      	ldr	r4, [sp, #176]	@ 0xb0
 800edba:	960d      	str	r6, [sp, #52]	@ 0x34
 800edbc:	f003 fb25 	bl	801240a <memset>
 800edc0:	b15f      	cbz	r7, 800edda <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 800edc2:	f108 3aff 	add.w	sl, r8, #4294967295
 800edc6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800edc8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800edca:	b152      	cbz	r2, 800ede2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 800edcc:	8812      	ldrh	r2, [r2, #0]
 800edce:	b10a      	cbz	r2, 800edd4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 800edd0:	459a      	cmp	sl, r3
 800edd2:	dc2e      	bgt.n	800ee32 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 800edd4:	2200      	movs	r2, #0
 800edd6:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 800edda:	4638      	mov	r0, r7
 800eddc:	b023      	add	sp, #140	@ 0x8c
 800edde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ede2:	9a08      	ldr	r2, [sp, #32]
 800ede4:	2a00      	cmp	r2, #0
 800ede6:	d0f5      	beq.n	800edd4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 800ede8:	7812      	ldrb	r2, [r2, #0]
 800edea:	e7f0      	b.n	800edce <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 800edec:	2d00      	cmp	r5, #0
 800edee:	d0ea      	beq.n	800edc6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 800edf0:	782a      	ldrb	r2, [r5, #0]
 800edf2:	b142      	cbz	r2, 800ee06 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 800edf4:	2a25      	cmp	r2, #37	@ 0x25
 800edf6:	d001      	beq.n	800edfc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 800edf8:	459a      	cmp	sl, r3
 800edfa:	dc08      	bgt.n	800ee0e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 800edfc:	f1bb 0f00 	cmp.w	fp, #0
 800ee00:	d121      	bne.n	800ee46 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 800ee02:	2d00      	cmp	r5, #0
 800ee04:	d0df      	beq.n	800edc6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 800ee06:	782a      	ldrb	r2, [r5, #0]
 800ee08:	f04f 0b00 	mov.w	fp, #0
 800ee0c:	e01d      	b.n	800ee4a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 800ee0e:	f1bb 0f00 	cmp.w	fp, #0
 800ee12:	d078      	beq.n	800ef06 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x168>
 800ee14:	f8bb 2000 	ldrh.w	r2, [fp]
 800ee18:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 800ee1c:	f1bb 0f00 	cmp.w	fp, #0
 800ee20:	d002      	beq.n	800ee28 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 800ee22:	f10b 0202 	add.w	r2, fp, #2
 800ee26:	9209      	str	r2, [sp, #36]	@ 0x24
 800ee28:	b10d      	cbz	r5, 800ee2e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 800ee2a:	3501      	adds	r5, #1
 800ee2c:	9508      	str	r5, [sp, #32]
 800ee2e:	3301      	adds	r3, #1
 800ee30:	930d      	str	r3, [sp, #52]	@ 0x34
 800ee32:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 800ee36:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ee38:	f1bb 0f00 	cmp.w	fp, #0
 800ee3c:	d0d6      	beq.n	800edec <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 800ee3e:	f8bb 2000 	ldrh.w	r2, [fp]
 800ee42:	2a00      	cmp	r2, #0
 800ee44:	d1d6      	bne.n	800edf4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 800ee46:	f8bb 2000 	ldrh.w	r2, [fp]
 800ee4a:	2a00      	cmp	r2, #0
 800ee4c:	d0bb      	beq.n	800edc6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 800ee4e:	459a      	cmp	sl, r3
 800ee50:	ddb9      	ble.n	800edc6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 800ee52:	f8ad 6032 	strh.w	r6, [sp, #50]	@ 0x32
 800ee56:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 800ee5a:	f88d 602e 	strb.w	r6, [sp, #46]	@ 0x2e
 800ee5e:	f88d 602f 	strb.w	r6, [sp, #47]	@ 0x2f
 800ee62:	f88d 6030 	strb.w	r6, [sp, #48]	@ 0x30
 800ee66:	960e      	str	r6, [sp, #56]	@ 0x38
 800ee68:	f88d 6031 	strb.w	r6, [sp, #49]	@ 0x31
 800ee6c:	960f      	str	r6, [sp, #60]	@ 0x3c
 800ee6e:	f1bb 0f00 	cmp.w	fp, #0
 800ee72:	d002      	beq.n	800ee7a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 800ee74:	f10b 0302 	add.w	r3, fp, #2
 800ee78:	9309      	str	r3, [sp, #36]	@ 0x24
 800ee7a:	b10d      	cbz	r5, 800ee80 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 800ee7c:	1c6b      	adds	r3, r5, #1
 800ee7e:	9308      	str	r3, [sp, #32]
 800ee80:	ab0f      	add	r3, sp, #60	@ 0x3c
 800ee82:	9305      	str	r3, [sp, #20]
 800ee84:	f10d 0331 	add.w	r3, sp, #49	@ 0x31
 800ee88:	9304      	str	r3, [sp, #16]
 800ee8a:	ab0e      	add	r3, sp, #56	@ 0x38
 800ee8c:	9303      	str	r3, [sp, #12]
 800ee8e:	ab0c      	add	r3, sp, #48	@ 0x30
 800ee90:	9302      	str	r3, [sp, #8]
 800ee92:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 800ee96:	9301      	str	r3, [sp, #4]
 800ee98:	f10d 032e 	add.w	r3, sp, #46	@ 0x2e
 800ee9c:	9300      	str	r3, [sp, #0]
 800ee9e:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 800eea2:	f10d 032d 	add.w	r3, sp, #45	@ 0x2d
 800eea6:	a908      	add	r1, sp, #32
 800eea8:	a809      	add	r0, sp, #36	@ 0x24
 800eeaa:	f7ff fea8 	bl	800ebfe <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 800eeae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	bfbe      	ittt	lt
 800eeb4:	6823      	ldrlt	r3, [r4, #0]
 800eeb6:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 800eeba:	930e      	strlt	r3, [sp, #56]	@ 0x38
 800eebc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eebe:	bfb8      	it	lt
 800eec0:	3404      	addlt	r4, #4
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	bfb8      	it	lt
 800eec6:	6823      	ldrlt	r3, [r4, #0]
 800eec8:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 800eecc:	bfbe      	ittt	lt
 800eece:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 800eed2:	930f      	strlt	r3, [sp, #60]	@ 0x3c
 800eed4:	3404      	addlt	r4, #4
 800eed6:	b1d9      	cbz	r1, 800ef10 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x172>
 800eed8:	880b      	ldrh	r3, [r1, #0]
 800eeda:	2b69      	cmp	r3, #105	@ 0x69
 800eedc:	d01f      	beq.n	800ef1e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 800eede:	d82f      	bhi.n	800ef40 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a2>
 800eee0:	2b58      	cmp	r3, #88	@ 0x58
 800eee2:	d01c      	beq.n	800ef1e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 800eee4:	d818      	bhi.n	800ef18 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17a>
 800eee6:	2b25      	cmp	r3, #37	@ 0x25
 800eee8:	d034      	beq.n	800ef54 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b6>
 800eeea:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 800eeee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800eef0:	f1bb 0f00 	cmp.w	fp, #0
 800eef4:	f000 80b8 	beq.w	800f068 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2ca>
 800eef8:	f8bb 5000 	ldrh.w	r5, [fp]
 800eefc:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 800ef00:	3301      	adds	r3, #1
 800ef02:	930d      	str	r3, [sp, #52]	@ 0x34
 800ef04:	e029      	b.n	800ef5a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1bc>
 800ef06:	b10d      	cbz	r5, 800ef0c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16e>
 800ef08:	782a      	ldrb	r2, [r5, #0]
 800ef0a:	e785      	b.n	800ee18 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 800ef0c:	462a      	mov	r2, r5
 800ef0e:	e783      	b.n	800ee18 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 800ef10:	2a00      	cmp	r2, #0
 800ef12:	d0ea      	beq.n	800eeea <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14c>
 800ef14:	7813      	ldrb	r3, [r2, #0]
 800ef16:	e7e0      	b.n	800eeda <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13c>
 800ef18:	3b63      	subs	r3, #99	@ 0x63
 800ef1a:	2b01      	cmp	r3, #1
 800ef1c:	d8e5      	bhi.n	800eeea <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14c>
 800ef1e:	f8cd 9040 	str.w	r9, [sp, #64]	@ 0x40
 800ef22:	b329      	cbz	r1, 800ef70 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d2>
 800ef24:	880b      	ldrh	r3, [r1, #0]
 800ef26:	2b69      	cmp	r3, #105	@ 0x69
 800ef28:	d063      	beq.n	800eff2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x254>
 800ef2a:	d825      	bhi.n	800ef78 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1da>
 800ef2c:	2b63      	cmp	r3, #99	@ 0x63
 800ef2e:	d038      	beq.n	800efa2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x204>
 800ef30:	2b64      	cmp	r3, #100	@ 0x64
 800ef32:	d05e      	beq.n	800eff2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x254>
 800ef34:	2b58      	cmp	r3, #88	@ 0x58
 800ef36:	d07b      	beq.n	800f030 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x292>
 800ef38:	f8ad 6044 	strh.w	r6, [sp, #68]	@ 0x44
 800ef3c:	4625      	mov	r5, r4
 800ef3e:	e036      	b.n	800efae <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 800ef40:	2b73      	cmp	r3, #115	@ 0x73
 800ef42:	d0ec      	beq.n	800ef1e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 800ef44:	d802      	bhi.n	800ef4c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ae>
 800ef46:	2b6f      	cmp	r3, #111	@ 0x6f
 800ef48:	d1cf      	bne.n	800eeea <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14c>
 800ef4a:	e7e8      	b.n	800ef1e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 800ef4c:	2b75      	cmp	r3, #117	@ 0x75
 800ef4e:	d0e6      	beq.n	800ef1e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 800ef50:	2b78      	cmp	r3, #120	@ 0x78
 800ef52:	e7f9      	b.n	800ef48 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1aa>
 800ef54:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ef56:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 800ef5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ef5c:	b10b      	cbz	r3, 800ef62 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c4>
 800ef5e:	3302      	adds	r3, #2
 800ef60:	9309      	str	r3, [sp, #36]	@ 0x24
 800ef62:	9b08      	ldr	r3, [sp, #32]
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	f43f af2e 	beq.w	800edc6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 800ef6a:	3301      	adds	r3, #1
 800ef6c:	9308      	str	r3, [sp, #32]
 800ef6e:	e72a      	b.n	800edc6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 800ef70:	2a00      	cmp	r2, #0
 800ef72:	d0e1      	beq.n	800ef38 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x19a>
 800ef74:	7813      	ldrb	r3, [r2, #0]
 800ef76:	e7d6      	b.n	800ef26 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x188>
 800ef78:	2b73      	cmp	r3, #115	@ 0x73
 800ef7a:	d036      	beq.n	800efea <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24c>
 800ef7c:	d807      	bhi.n	800ef8e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1f0>
 800ef7e:	2b6f      	cmp	r3, #111	@ 0x6f
 800ef80:	d1da      	bne.n	800ef38 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x19a>
 800ef82:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ef84:	1d25      	adds	r5, r4, #4
 800ef86:	eba8 0202 	sub.w	r2, r8, r2
 800ef8a:	2308      	movs	r3, #8
 800ef8c:	e04a      	b.n	800f024 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x286>
 800ef8e:	2b75      	cmp	r3, #117	@ 0x75
 800ef90:	d043      	beq.n	800f01a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x27c>
 800ef92:	2b78      	cmp	r3, #120	@ 0x78
 800ef94:	d1d0      	bne.n	800ef38 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x19a>
 800ef96:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ef98:	1d25      	adds	r5, r4, #4
 800ef9a:	eba8 0202 	sub.w	r2, r8, r2
 800ef9e:	2310      	movs	r3, #16
 800efa0:	e040      	b.n	800f024 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x286>
 800efa2:	6823      	ldr	r3, [r4, #0]
 800efa4:	f8ad 3044 	strh.w	r3, [sp, #68]	@ 0x44
 800efa8:	1d25      	adds	r5, r4, #4
 800efaa:	f8ad 6046 	strh.w	r6, [sp, #70]	@ 0x46
 800efae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800efb0:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d052      	beq.n	800f05e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c0>
 800efb8:	881a      	ldrh	r2, [r3, #0]
 800efba:	f89d 3031 	ldrb.w	r3, [sp, #49]	@ 0x31
 800efbe:	a80d      	add	r0, sp, #52	@ 0x34
 800efc0:	9005      	str	r0, [sp, #20]
 800efc2:	f89d 002d 	ldrb.w	r0, [sp, #45]	@ 0x2d
 800efc6:	9004      	str	r0, [sp, #16]
 800efc8:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800efca:	9003      	str	r0, [sp, #12]
 800efcc:	f89d 0030 	ldrb.w	r0, [sp, #48]	@ 0x30
 800efd0:	9002      	str	r0, [sp, #8]
 800efd2:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 800efd4:	9001      	str	r0, [sp, #4]
 800efd6:	f89d 002f 	ldrb.w	r0, [sp, #47]	@ 0x2f
 800efda:	9000      	str	r0, [sp, #0]
 800efdc:	e9cd 8706 	strd	r8, r7, [sp, #24]
 800efe0:	a810      	add	r0, sp, #64	@ 0x40
 800efe2:	f7ff fd49 	bl	800ea78 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 800efe6:	462c      	mov	r4, r5
 800efe8:	e7b7      	b.n	800ef5a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1bc>
 800efea:	6823      	ldr	r3, [r4, #0]
 800efec:	1d25      	adds	r5, r4, #4
 800efee:	9310      	str	r3, [sp, #64]	@ 0x40
 800eff0:	e7dd      	b.n	800efae <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 800eff2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800eff4:	6820      	ldr	r0, [r4, #0]
 800eff6:	eba8 0202 	sub.w	r2, r8, r2
 800effa:	230a      	movs	r3, #10
 800effc:	b292      	uxth	r2, r2
 800effe:	4649      	mov	r1, r9
 800f000:	f7ff fcf0 	bl	800e9e4 <_ZN8touchgfx7Unicode4itoaElPtti.part.2>
 800f004:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 800f008:	2b2d      	cmp	r3, #45	@ 0x2d
 800f00a:	f104 0504 	add.w	r5, r4, #4
 800f00e:	d1ce      	bne.n	800efae <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 800f010:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 800f014:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f016:	3302      	adds	r3, #2
 800f018:	e7e9      	b.n	800efee <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x250>
 800f01a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f01c:	1d25      	adds	r5, r4, #4
 800f01e:	eba8 0202 	sub.w	r2, r8, r2
 800f022:	230a      	movs	r3, #10
 800f024:	b292      	uxth	r2, r2
 800f026:	4649      	mov	r1, r9
 800f028:	6820      	ldr	r0, [r4, #0]
 800f02a:	f7ff fd07 	bl	800ea3c <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 800f02e:	e7be      	b.n	800efae <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 800f030:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f032:	6820      	ldr	r0, [r4, #0]
 800f034:	eba8 0202 	sub.w	r2, r8, r2
 800f038:	b292      	uxth	r2, r2
 800f03a:	2310      	movs	r3, #16
 800f03c:	4649      	mov	r1, r9
 800f03e:	f7ff fcfd 	bl	800ea3c <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 800f042:	1d25      	adds	r5, r4, #4
 800f044:	f10d 0242 	add.w	r2, sp, #66	@ 0x42
 800f048:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d0ae      	beq.n	800efae <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 800f050:	f1a3 0161 	sub.w	r1, r3, #97	@ 0x61
 800f054:	2919      	cmp	r1, #25
 800f056:	d8f7      	bhi.n	800f048 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2aa>
 800f058:	3b20      	subs	r3, #32
 800f05a:	8013      	strh	r3, [r2, #0]
 800f05c:	e7f4      	b.n	800f048 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2aa>
 800f05e:	9a08      	ldr	r2, [sp, #32]
 800f060:	2a00      	cmp	r2, #0
 800f062:	d0aa      	beq.n	800efba <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21c>
 800f064:	7812      	ldrb	r2, [r2, #0]
 800f066:	e7a8      	b.n	800efba <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21c>
 800f068:	2d00      	cmp	r5, #0
 800f06a:	f43f af47 	beq.w	800eefc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15e>
 800f06e:	782d      	ldrb	r5, [r5, #0]
 800f070:	e744      	b.n	800eefc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15e>

0800f072 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 800f072:	b507      	push	{r0, r1, r2, lr}
 800f074:	9300      	str	r3, [sp, #0]
 800f076:	4613      	mov	r3, r2
 800f078:	2200      	movs	r2, #0
 800f07a:	f7ff fe90 	bl	800ed9e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 800f07e:	b003      	add	sp, #12
 800f080:	f85d fb04 	ldr.w	pc, [sp], #4

0800f084 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 800f084:	b40c      	push	{r2, r3}
 800f086:	b507      	push	{r0, r1, r2, lr}
 800f088:	ab04      	add	r3, sp, #16
 800f08a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f08e:	9301      	str	r3, [sp, #4]
 800f090:	f7ff ffef 	bl	800f072 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 800f094:	b003      	add	sp, #12
 800f096:	f85d eb04 	ldr.w	lr, [sp], #4
 800f09a:	b002      	add	sp, #8
 800f09c:	4770      	bx	lr
	...

0800f0a0 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 800f0a0:	4b01      	ldr	r3, [pc, #4]	@ (800f0a8 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 800f0a2:	6018      	str	r0, [r3, #0]
 800f0a4:	4770      	bx	lr
 800f0a6:	bf00      	nop
 800f0a8:	20012698 	.word	0x20012698

0800f0ac <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 800f0ac:	4b06      	ldr	r3, [pc, #24]	@ (800f0c8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 800f0ae:	881a      	ldrh	r2, [r3, #0]
 800f0b0:	4282      	cmp	r2, r0
 800f0b2:	d807      	bhi.n	800f0c4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 800f0b4:	4b05      	ldr	r3, [pc, #20]	@ (800f0cc <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 800f0b6:	881b      	ldrh	r3, [r3, #0]
 800f0b8:	4413      	add	r3, r2
 800f0ba:	4298      	cmp	r0, r3
 800f0bc:	bfac      	ite	ge
 800f0be:	2000      	movge	r0, #0
 800f0c0:	2001      	movlt	r0, #1
 800f0c2:	4770      	bx	lr
 800f0c4:	2000      	movs	r0, #0
 800f0c6:	4770      	bx	lr
 800f0c8:	200126b8 	.word	0x200126b8
 800f0cc:	200126bc 	.word	0x200126bc

0800f0d0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 800f0d0:	b508      	push	{r3, lr}
 800f0d2:	4601      	mov	r1, r0
 800f0d4:	f7ff ffea 	bl	800f0ac <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 800f0d8:	b118      	cbz	r0, 800f0e2 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 800f0da:	4b02      	ldr	r3, [pc, #8]	@ (800f0e4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 800f0dc:	681b      	ldr	r3, [r3, #0]
 800f0de:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 800f0e2:	bd08      	pop	{r3, pc}
 800f0e4:	2001269c 	.word	0x2001269c

0800f0e8 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 800f0e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f0ea:	4c24      	ldr	r4, [pc, #144]	@ (800f17c <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 800f0ec:	6823      	ldr	r3, [r4, #0]
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d042      	beq.n	800f178 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 800f0f2:	4a23      	ldr	r2, [pc, #140]	@ (800f180 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 800f0f4:	4d23      	ldr	r5, [pc, #140]	@ (800f184 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 800f0f6:	8811      	ldrh	r1, [r2, #0]
 800f0f8:	f8b5 c000 	ldrh.w	ip, [r5]
 800f0fc:	4822      	ldr	r0, [pc, #136]	@ (800f188 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 800f0fe:	4461      	add	r1, ip
 800f100:	1c4a      	adds	r2, r1, #1
 800f102:	f022 0201 	bic.w	r2, r2, #1
 800f106:	008f      	lsls	r7, r1, #2
 800f108:	0412      	lsls	r2, r2, #16
 800f10a:	19de      	adds	r6, r3, r7
 800f10c:	0c12      	lsrs	r2, r2, #16
 800f10e:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 800f112:	6006      	str	r6, [r0, #0]
 800f114:	4e1d      	ldr	r6, [pc, #116]	@ (800f18c <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 800f116:	19da      	adds	r2, r3, r7
 800f118:	6032      	str	r2, [r6, #0]
 800f11a:	220e      	movs	r2, #14
 800f11c:	fb02 f20c 	mul.w	r2, r2, ip
 800f120:	3203      	adds	r2, #3
 800f122:	f022 0203 	bic.w	r2, r2, #3
 800f126:	443a      	add	r2, r7
 800f128:	4f19      	ldr	r7, [pc, #100]	@ (800f190 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 800f12a:	4413      	add	r3, r2
 800f12c:	603b      	str	r3, [r7, #0]
 800f12e:	4f19      	ldr	r7, [pc, #100]	@ (800f194 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 800f130:	2300      	movs	r3, #0
 800f132:	803b      	strh	r3, [r7, #0]
 800f134:	4f18      	ldr	r7, [pc, #96]	@ (800f198 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 800f136:	683f      	ldr	r7, [r7, #0]
 800f138:	1aba      	subs	r2, r7, r2
 800f13a:	4f18      	ldr	r7, [pc, #96]	@ (800f19c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 800f13c:	603a      	str	r2, [r7, #0]
 800f13e:	4a18      	ldr	r2, [pc, #96]	@ (800f1a0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 800f140:	469c      	mov	ip, r3
 800f142:	8013      	strh	r3, [r2, #0]
 800f144:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 800f148:	428b      	cmp	r3, r1
 800f14a:	d10d      	bne.n	800f168 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 800f14c:	882d      	ldrh	r5, [r5, #0]
 800f14e:	6830      	ldr	r0, [r6, #0]
 800f150:	2300      	movs	r3, #0
 800f152:	240e      	movs	r4, #14
 800f154:	429d      	cmp	r5, r3
 800f156:	d90f      	bls.n	800f178 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 800f158:	fb04 0203 	mla	r2, r4, r3, r0
 800f15c:	3301      	adds	r3, #1
 800f15e:	7b11      	ldrb	r1, [r2, #12]
 800f160:	f36f 1145 	bfc	r1, #5, #1
 800f164:	7311      	strb	r1, [r2, #12]
 800f166:	e7f5      	b.n	800f154 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 800f168:	6822      	ldr	r2, [r4, #0]
 800f16a:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 800f16e:	6802      	ldr	r2, [r0, #0]
 800f170:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 800f174:	3301      	adds	r3, #1
 800f176:	e7e7      	b.n	800f148 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 800f178:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f17a:	bf00      	nop
 800f17c:	2001269c 	.word	0x2001269c
 800f180:	200126b8 	.word	0x200126b8
 800f184:	200126bc 	.word	0x200126bc
 800f188:	200126b0 	.word	0x200126b0
 800f18c:	200126a0 	.word	0x200126a0
 800f190:	200126a8 	.word	0x200126a8
 800f194:	200126ba 	.word	0x200126ba
 800f198:	200126a4 	.word	0x200126a4
 800f19c:	200126b4 	.word	0x200126b4
 800f1a0:	200126ac 	.word	0x200126ac

0800f1a4 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 800f1a4:	4b06      	ldr	r3, [pc, #24]	@ (800f1c0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	b943      	cbnz	r3, 800f1bc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 800f1aa:	b139      	cbz	r1, 800f1bc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 800f1ac:	4b05      	ldr	r3, [pc, #20]	@ (800f1c4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 800f1ae:	801a      	strh	r2, [r3, #0]
 800f1b0:	4b05      	ldr	r3, [pc, #20]	@ (800f1c8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 800f1b2:	6019      	str	r1, [r3, #0]
 800f1b4:	4b05      	ldr	r3, [pc, #20]	@ (800f1cc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 800f1b6:	6018      	str	r0, [r3, #0]
 800f1b8:	f7ff bf96 	b.w	800f0e8 <_ZN8touchgfx6Bitmap10clearCacheEv>
 800f1bc:	4770      	bx	lr
 800f1be:	bf00      	nop
 800f1c0:	200126a8 	.word	0x200126a8
 800f1c4:	200126bc 	.word	0x200126bc
 800f1c8:	200126a4 	.word	0x200126a4
 800f1cc:	2001269c 	.word	0x2001269c

0800f1d0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 800f1d0:	b470      	push	{r4, r5, r6}
 800f1d2:	4c07      	ldr	r4, [pc, #28]	@ (800f1f0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 800f1d4:	6826      	ldr	r6, [r4, #0]
 800f1d6:	4605      	mov	r5, r0
 800f1d8:	4610      	mov	r0, r2
 800f1da:	9a03      	ldr	r2, [sp, #12]
 800f1dc:	b936      	cbnz	r6, 800f1ec <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 800f1de:	6025      	str	r5, [r4, #0]
 800f1e0:	4c04      	ldr	r4, [pc, #16]	@ (800f1f4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 800f1e2:	8021      	strh	r1, [r4, #0]
 800f1e4:	bc70      	pop	{r4, r5, r6}
 800f1e6:	4619      	mov	r1, r3
 800f1e8:	f7ff bfdc 	b.w	800f1a4 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 800f1ec:	bc70      	pop	{r4, r5, r6}
 800f1ee:	4770      	bx	lr
 800f1f0:	200126c0 	.word	0x200126c0
 800f1f4:	200126b8 	.word	0x200126b8

0800f1f8 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 800f1f8:	4a12      	ldr	r2, [pc, #72]	@ (800f244 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 800f1fa:	8803      	ldrh	r3, [r0, #0]
 800f1fc:	8812      	ldrh	r2, [r2, #0]
 800f1fe:	4293      	cmp	r3, r2
 800f200:	d207      	bcs.n	800f212 <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 800f202:	4a11      	ldr	r2, [pc, #68]	@ (800f248 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 800f204:	6812      	ldr	r2, [r2, #0]
 800f206:	2114      	movs	r1, #20
 800f208:	fb01 2303 	mla	r3, r1, r3, r2
 800f20c:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 800f210:	4770      	bx	lr
 800f212:	490e      	ldr	r1, [pc, #56]	@ (800f24c <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 800f214:	8809      	ldrh	r1, [r1, #0]
 800f216:	4411      	add	r1, r2
 800f218:	428b      	cmp	r3, r1
 800f21a:	da04      	bge.n	800f226 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 800f21c:	1a9b      	subs	r3, r3, r2
 800f21e:	4a0c      	ldr	r2, [pc, #48]	@ (800f250 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 800f220:	210e      	movs	r1, #14
 800f222:	6812      	ldr	r2, [r2, #0]
 800f224:	e7f0      	b.n	800f208 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 800f226:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800f22a:	4293      	cmp	r3, r2
 800f22c:	d108      	bne.n	800f240 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 800f22e:	4b09      	ldr	r3, [pc, #36]	@ (800f254 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 800f230:	781b      	ldrb	r3, [r3, #0]
 800f232:	b91b      	cbnz	r3, 800f23c <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 800f234:	4b08      	ldr	r3, [pc, #32]	@ (800f258 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 800f236:	f9b3 0000 	ldrsh.w	r0, [r3]
 800f23a:	4770      	bx	lr
 800f23c:	4b07      	ldr	r3, [pc, #28]	@ (800f25c <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 800f23e:	e7fa      	b.n	800f236 <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 800f240:	2000      	movs	r0, #0
 800f242:	4770      	bx	lr
 800f244:	200126b8 	.word	0x200126b8
 800f248:	200126c0 	.word	0x200126c0
 800f24c:	200126bc 	.word	0x200126bc
 800f250:	200126a0 	.word	0x200126a0
 800f254:	20012630 	.word	0x20012630
 800f258:	20012632 	.word	0x20012632
 800f25c:	20012634 	.word	0x20012634

0800f260 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 800f260:	4a12      	ldr	r2, [pc, #72]	@ (800f2ac <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 800f262:	8803      	ldrh	r3, [r0, #0]
 800f264:	8812      	ldrh	r2, [r2, #0]
 800f266:	4293      	cmp	r3, r2
 800f268:	d207      	bcs.n	800f27a <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 800f26a:	4a11      	ldr	r2, [pc, #68]	@ (800f2b0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 800f26c:	6812      	ldr	r2, [r2, #0]
 800f26e:	2114      	movs	r1, #20
 800f270:	fb01 2303 	mla	r3, r1, r3, r2
 800f274:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 800f278:	4770      	bx	lr
 800f27a:	490e      	ldr	r1, [pc, #56]	@ (800f2b4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 800f27c:	8809      	ldrh	r1, [r1, #0]
 800f27e:	4411      	add	r1, r2
 800f280:	428b      	cmp	r3, r1
 800f282:	da04      	bge.n	800f28e <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 800f284:	1a9b      	subs	r3, r3, r2
 800f286:	4a0c      	ldr	r2, [pc, #48]	@ (800f2b8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 800f288:	210e      	movs	r1, #14
 800f28a:	6812      	ldr	r2, [r2, #0]
 800f28c:	e7f0      	b.n	800f270 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 800f28e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800f292:	4293      	cmp	r3, r2
 800f294:	d108      	bne.n	800f2a8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 800f296:	4b09      	ldr	r3, [pc, #36]	@ (800f2bc <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 800f298:	781b      	ldrb	r3, [r3, #0]
 800f29a:	b91b      	cbnz	r3, 800f2a4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 800f29c:	4b08      	ldr	r3, [pc, #32]	@ (800f2c0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 800f29e:	f9b3 0000 	ldrsh.w	r0, [r3]
 800f2a2:	4770      	bx	lr
 800f2a4:	4b07      	ldr	r3, [pc, #28]	@ (800f2c4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 800f2a6:	e7fa      	b.n	800f29e <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 800f2a8:	2000      	movs	r0, #0
 800f2aa:	4770      	bx	lr
 800f2ac:	200126b8 	.word	0x200126b8
 800f2b0:	200126c0 	.word	0x200126c0
 800f2b4:	200126bc 	.word	0x200126bc
 800f2b8:	200126a0 	.word	0x200126a0
 800f2bc:	20012630 	.word	0x20012630
 800f2c0:	20012634 	.word	0x20012634
 800f2c4:	20012632 	.word	0x20012632

0800f2c8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 800f2c8:	b530      	push	{r4, r5, lr}
 800f2ca:	4a22      	ldr	r2, [pc, #136]	@ (800f354 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 800f2cc:	880b      	ldrh	r3, [r1, #0]
 800f2ce:	8812      	ldrh	r2, [r2, #0]
 800f2d0:	4293      	cmp	r3, r2
 800f2d2:	d213      	bcs.n	800f2fc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 800f2d4:	4a20      	ldr	r2, [pc, #128]	@ (800f358 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 800f2d6:	6812      	ldr	r2, [r2, #0]
 800f2d8:	2114      	movs	r1, #20
 800f2da:	fb01 2303 	mla	r3, r1, r3, r2
 800f2de:	8a1a      	ldrh	r2, [r3, #16]
 800f2e0:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 800f2e4:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 800f2e8:	8a5b      	ldrh	r3, [r3, #18]
 800f2ea:	8004      	strh	r4, [r0, #0]
 800f2ec:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800f2f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f2f4:	8041      	strh	r1, [r0, #2]
 800f2f6:	8082      	strh	r2, [r0, #4]
 800f2f8:	80c3      	strh	r3, [r0, #6]
 800f2fa:	e024      	b.n	800f346 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x7e>
 800f2fc:	4917      	ldr	r1, [pc, #92]	@ (800f35c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 800f2fe:	8809      	ldrh	r1, [r1, #0]
 800f300:	4411      	add	r1, r2
 800f302:	428b      	cmp	r3, r1
 800f304:	da10      	bge.n	800f328 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x60>
 800f306:	1a9b      	subs	r3, r3, r2
 800f308:	220e      	movs	r2, #14
 800f30a:	4353      	muls	r3, r2
 800f30c:	4a14      	ldr	r2, [pc, #80]	@ (800f360 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 800f30e:	6811      	ldr	r1, [r2, #0]
 800f310:	18ca      	adds	r2, r1, r3
 800f312:	5ecd      	ldrsh	r5, [r1, r3]
 800f314:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 800f318:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 800f31c:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 800f320:	8005      	strh	r5, [r0, #0]
 800f322:	8044      	strh	r4, [r0, #2]
 800f324:	8081      	strh	r1, [r0, #4]
 800f326:	e7e7      	b.n	800f2f8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 800f328:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800f32c:	4293      	cmp	r3, r2
 800f32e:	d10b      	bne.n	800f348 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>
 800f330:	4b0c      	ldr	r3, [pc, #48]	@ (800f364 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 800f332:	f9b3 1000 	ldrsh.w	r1, [r3]
 800f336:	4b0c      	ldr	r3, [pc, #48]	@ (800f368 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 800f338:	8081      	strh	r1, [r0, #4]
 800f33a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f33e:	80c2      	strh	r2, [r0, #6]
 800f340:	2300      	movs	r3, #0
 800f342:	8003      	strh	r3, [r0, #0]
 800f344:	8043      	strh	r3, [r0, #2]
 800f346:	bd30      	pop	{r4, r5, pc}
 800f348:	2300      	movs	r3, #0
 800f34a:	8003      	strh	r3, [r0, #0]
 800f34c:	8043      	strh	r3, [r0, #2]
 800f34e:	8083      	strh	r3, [r0, #4]
 800f350:	e7d2      	b.n	800f2f8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 800f352:	bf00      	nop
 800f354:	200126b8 	.word	0x200126b8
 800f358:	200126c0 	.word	0x200126c0
 800f35c:	200126bc 	.word	0x200126bc
 800f360:	200126a0 	.word	0x200126a0
 800f364:	2001262c 	.word	0x2001262c
 800f368:	2001262e 	.word	0x2001262e

0800f36c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 800f36c:	4a17      	ldr	r2, [pc, #92]	@ (800f3cc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 800f36e:	8803      	ldrh	r3, [r0, #0]
 800f370:	8812      	ldrh	r2, [r2, #0]
 800f372:	4293      	cmp	r3, r2
 800f374:	d213      	bcs.n	800f39e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 800f376:	4a16      	ldr	r2, [pc, #88]	@ (800f3d0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 800f378:	6812      	ldr	r2, [r2, #0]
 800f37a:	2114      	movs	r1, #20
 800f37c:	fb01 2303 	mla	r3, r1, r3, r2
 800f380:	8a1a      	ldrh	r2, [r3, #16]
 800f382:	8919      	ldrh	r1, [r3, #8]
 800f384:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800f388:	428a      	cmp	r2, r1
 800f38a:	db1d      	blt.n	800f3c8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 800f38c:	8a58      	ldrh	r0, [r3, #18]
 800f38e:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800f392:	895b      	ldrh	r3, [r3, #10]
 800f394:	4298      	cmp	r0, r3
 800f396:	bfac      	ite	ge
 800f398:	2000      	movge	r0, #0
 800f39a:	2001      	movlt	r0, #1
 800f39c:	4770      	bx	lr
 800f39e:	490d      	ldr	r1, [pc, #52]	@ (800f3d4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 800f3a0:	8809      	ldrh	r1, [r1, #0]
 800f3a2:	4411      	add	r1, r2
 800f3a4:	428b      	cmp	r3, r1
 800f3a6:	da0d      	bge.n	800f3c4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 800f3a8:	1a9b      	subs	r3, r3, r2
 800f3aa:	4a0b      	ldr	r2, [pc, #44]	@ (800f3d8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 800f3ac:	6812      	ldr	r2, [r2, #0]
 800f3ae:	210e      	movs	r1, #14
 800f3b0:	fb01 2303 	mla	r3, r1, r3, r2
 800f3b4:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 800f3b8:	891a      	ldrh	r2, [r3, #8]
 800f3ba:	4291      	cmp	r1, r2
 800f3bc:	db04      	blt.n	800f3c8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 800f3be:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 800f3c2:	e7e6      	b.n	800f392 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 800f3c4:	2000      	movs	r0, #0
 800f3c6:	4770      	bx	lr
 800f3c8:	2001      	movs	r0, #1
 800f3ca:	4770      	bx	lr
 800f3cc:	200126b8 	.word	0x200126b8
 800f3d0:	200126c0 	.word	0x200126c0
 800f3d4:	200126bc 	.word	0x200126bc
 800f3d8:	200126a0 	.word	0x200126a0

0800f3dc <_ZNK8touchgfx6Bitmap7getDataEv>:
 800f3dc:	4a12      	ldr	r2, [pc, #72]	@ (800f428 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 800f3de:	8803      	ldrh	r3, [r0, #0]
 800f3e0:	8811      	ldrh	r1, [r2, #0]
 800f3e2:	428b      	cmp	r3, r1
 800f3e4:	d20b      	bcs.n	800f3fe <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 800f3e6:	4a11      	ldr	r2, [pc, #68]	@ (800f42c <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 800f3e8:	6812      	ldr	r2, [r2, #0]
 800f3ea:	b112      	cbz	r2, 800f3f2 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 800f3ec:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800f3f0:	b9c0      	cbnz	r0, 800f424 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 800f3f2:	4a0f      	ldr	r2, [pc, #60]	@ (800f430 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 800f3f4:	6811      	ldr	r1, [r2, #0]
 800f3f6:	2214      	movs	r2, #20
 800f3f8:	4353      	muls	r3, r2
 800f3fa:	58c8      	ldr	r0, [r1, r3]
 800f3fc:	4770      	bx	lr
 800f3fe:	4a0d      	ldr	r2, [pc, #52]	@ (800f434 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 800f400:	8812      	ldrh	r2, [r2, #0]
 800f402:	440a      	add	r2, r1
 800f404:	4293      	cmp	r3, r2
 800f406:	da04      	bge.n	800f412 <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 800f408:	4a08      	ldr	r2, [pc, #32]	@ (800f42c <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 800f40a:	6812      	ldr	r2, [r2, #0]
 800f40c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800f410:	4770      	bx	lr
 800f412:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800f416:	4293      	cmp	r3, r2
 800f418:	d103      	bne.n	800f422 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 800f41a:	4b07      	ldr	r3, [pc, #28]	@ (800f438 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 800f420:	4770      	bx	lr
 800f422:	2000      	movs	r0, #0
 800f424:	4770      	bx	lr
 800f426:	bf00      	nop
 800f428:	200126b8 	.word	0x200126b8
 800f42c:	2001269c 	.word	0x2001269c
 800f430:	200126c0 	.word	0x200126c0
 800f434:	200126bc 	.word	0x200126bc
 800f438:	20012638 	.word	0x20012638

0800f43c <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 800f43c:	4b24      	ldr	r3, [pc, #144]	@ (800f4d0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 800f43e:	8802      	ldrh	r2, [r0, #0]
 800f440:	8818      	ldrh	r0, [r3, #0]
 800f442:	4282      	cmp	r2, r0
 800f444:	d221      	bcs.n	800f48a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 800f446:	4b23      	ldr	r3, [pc, #140]	@ (800f4d4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 800f448:	6819      	ldr	r1, [r3, #0]
 800f44a:	2314      	movs	r3, #20
 800f44c:	fb03 1302 	mla	r3, r3, r2, r1
 800f450:	6858      	ldr	r0, [r3, #4]
 800f452:	2800      	cmp	r0, #0
 800f454:	d03a      	beq.n	800f4cc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 800f456:	4920      	ldr	r1, [pc, #128]	@ (800f4d8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 800f458:	6809      	ldr	r1, [r1, #0]
 800f45a:	2900      	cmp	r1, #0
 800f45c:	d036      	beq.n	800f4cc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 800f45e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800f462:	2900      	cmp	r1, #0
 800f464:	d032      	beq.n	800f4cc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 800f466:	891a      	ldrh	r2, [r3, #8]
 800f468:	8958      	ldrh	r0, [r3, #10]
 800f46a:	4350      	muls	r0, r2
 800f46c:	7c5a      	ldrb	r2, [r3, #17]
 800f46e:	7cdb      	ldrb	r3, [r3, #19]
 800f470:	0952      	lsrs	r2, r2, #5
 800f472:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800f476:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800f47a:	2b0b      	cmp	r3, #11
 800f47c:	bf18      	it	ne
 800f47e:	0040      	lslne	r0, r0, #1
 800f480:	3003      	adds	r0, #3
 800f482:	f020 0003 	bic.w	r0, r0, #3
 800f486:	4408      	add	r0, r1
 800f488:	4770      	bx	lr
 800f48a:	4b14      	ldr	r3, [pc, #80]	@ (800f4dc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 800f48c:	881b      	ldrh	r3, [r3, #0]
 800f48e:	4403      	add	r3, r0
 800f490:	429a      	cmp	r2, r3
 800f492:	da1a      	bge.n	800f4ca <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 800f494:	4b12      	ldr	r3, [pc, #72]	@ (800f4e0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	1a10      	subs	r0, r2, r0
 800f49a:	210e      	movs	r1, #14
 800f49c:	fb01 3000 	mla	r0, r1, r0, r3
 800f4a0:	7b03      	ldrb	r3, [r0, #12]
 800f4a2:	f003 031f 	and.w	r3, r3, #31
 800f4a6:	2b0b      	cmp	r3, #11
 800f4a8:	d10b      	bne.n	800f4c2 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 800f4aa:	8903      	ldrh	r3, [r0, #8]
 800f4ac:	8940      	ldrh	r0, [r0, #10]
 800f4ae:	4358      	muls	r0, r3
 800f4b0:	4b09      	ldr	r3, [pc, #36]	@ (800f4d8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 800f4b2:	6819      	ldr	r1, [r3, #0]
 800f4b4:	3003      	adds	r0, #3
 800f4b6:	f020 0303 	bic.w	r3, r0, #3
 800f4ba:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 800f4be:	4418      	add	r0, r3
 800f4c0:	4770      	bx	lr
 800f4c2:	2b0d      	cmp	r3, #13
 800f4c4:	d101      	bne.n	800f4ca <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 800f4c6:	300d      	adds	r0, #13
 800f4c8:	4770      	bx	lr
 800f4ca:	2000      	movs	r0, #0
 800f4cc:	4770      	bx	lr
 800f4ce:	bf00      	nop
 800f4d0:	200126b8 	.word	0x200126b8
 800f4d4:	200126c0 	.word	0x200126c0
 800f4d8:	2001269c 	.word	0x2001269c
 800f4dc:	200126bc 	.word	0x200126bc
 800f4e0:	200126a0 	.word	0x200126a0

0800f4e4 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 800f4e4:	b510      	push	{r4, lr}
 800f4e6:	4b1f      	ldr	r3, [pc, #124]	@ (800f564 <_ZNK8touchgfx6Bitmap9getFormatEv+0x80>)
 800f4e8:	8802      	ldrh	r2, [r0, #0]
 800f4ea:	881b      	ldrh	r3, [r3, #0]
 800f4ec:	429a      	cmp	r2, r3
 800f4ee:	d21a      	bcs.n	800f526 <_ZNK8touchgfx6Bitmap9getFormatEv+0x42>
 800f4f0:	4b1d      	ldr	r3, [pc, #116]	@ (800f568 <_ZNK8touchgfx6Bitmap9getFormatEv+0x84>)
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	2114      	movs	r1, #20
 800f4f6:	fb01 3102 	mla	r1, r1, r2, r3
 800f4fa:	7c4b      	ldrb	r3, [r1, #17]
 800f4fc:	0958      	lsrs	r0, r3, #5
 800f4fe:	7ccb      	ldrb	r3, [r1, #19]
 800f500:	491a      	ldr	r1, [pc, #104]	@ (800f56c <_ZNK8touchgfx6Bitmap9getFormatEv+0x88>)
 800f502:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800f506:	6809      	ldr	r1, [r1, #0]
 800f508:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
 800f50c:	b2d8      	uxtb	r0, r3
 800f50e:	b149      	cbz	r1, 800f524 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 800f510:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800f514:	b132      	cbz	r2, 800f524 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 800f516:	2b0e      	cmp	r3, #14
 800f518:	d021      	beq.n	800f55e <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 800f51a:	280f      	cmp	r0, #15
 800f51c:	d01d      	beq.n	800f55a <_ZNK8touchgfx6Bitmap9getFormatEv+0x76>
 800f51e:	2810      	cmp	r0, #16
 800f520:	bf08      	it	eq
 800f522:	2002      	moveq	r0, #2
 800f524:	bd10      	pop	{r4, pc}
 800f526:	4912      	ldr	r1, [pc, #72]	@ (800f570 <_ZNK8touchgfx6Bitmap9getFormatEv+0x8c>)
 800f528:	8809      	ldrh	r1, [r1, #0]
 800f52a:	4419      	add	r1, r3
 800f52c:	428a      	cmp	r2, r1
 800f52e:	da09      	bge.n	800f544 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>
 800f530:	1ad3      	subs	r3, r2, r3
 800f532:	4a10      	ldr	r2, [pc, #64]	@ (800f574 <_ZNK8touchgfx6Bitmap9getFormatEv+0x90>)
 800f534:	6812      	ldr	r2, [r2, #0]
 800f536:	210e      	movs	r1, #14
 800f538:	fb01 2303 	mla	r3, r1, r3, r2
 800f53c:	7b18      	ldrb	r0, [r3, #12]
 800f53e:	f000 001f 	and.w	r0, r0, #31
 800f542:	e7ef      	b.n	800f524 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 800f544:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 800f548:	429a      	cmp	r2, r3
 800f54a:	d108      	bne.n	800f55e <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 800f54c:	f7f9 fc60 	bl	8008e10 <_ZN8touchgfx3HAL3lcdEv>
 800f550:	6803      	ldr	r3, [r0, #0]
 800f552:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f558:	4718      	bx	r3
 800f55a:	2001      	movs	r0, #1
 800f55c:	e7e2      	b.n	800f524 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 800f55e:	2000      	movs	r0, #0
 800f560:	e7e0      	b.n	800f524 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 800f562:	bf00      	nop
 800f564:	200126b8 	.word	0x200126b8
 800f568:	200126c0 	.word	0x200126c0
 800f56c:	2001269c 	.word	0x2001269c
 800f570:	200126bc 	.word	0x200126bc
 800f574:	200126a0 	.word	0x200126a0

0800f578 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 800f578:	2010      	movs	r0, #16
 800f57a:	4770      	bx	lr

0800f57c <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 800f57c:	2000      	movs	r0, #0
 800f57e:	4770      	bx	lr

0800f580 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 800f580:	4b02      	ldr	r3, [pc, #8]	@ (800f58c <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0xc>)
 800f582:	8818      	ldrh	r0, [r3, #0]
 800f584:	0040      	lsls	r0, r0, #1
 800f586:	b280      	uxth	r0, r0
 800f588:	4770      	bx	lr
 800f58a:	bf00      	nop
 800f58c:	20012632 	.word	0x20012632

0800f590 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 800f590:	2bff      	cmp	r3, #255	@ 0xff
 800f592:	d05e      	beq.n	800f652 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc2>
 800f594:	2a0b      	cmp	r2, #11
 800f596:	d058      	beq.n	800f64a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xba>
 800f598:	d80e      	bhi.n	800f5b8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 800f59a:	2a03      	cmp	r2, #3
 800f59c:	d04d      	beq.n	800f63a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xaa>
 800f59e:	d804      	bhi.n	800f5aa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 800f5a0:	2a01      	cmp	r2, #1
 800f5a2:	d04c      	beq.n	800f63e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xae>
 800f5a4:	d94d      	bls.n	800f642 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb2>
 800f5a6:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800f5a8:	e031      	b.n	800f60e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800f5aa:	2a09      	cmp	r2, #9
 800f5ac:	d04d      	beq.n	800f64a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xba>
 800f5ae:	d84a      	bhi.n	800f646 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb6>
 800f5b0:	2a08      	cmp	r2, #8
 800f5b2:	d048      	beq.n	800f646 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb6>
 800f5b4:	2300      	movs	r3, #0
 800f5b6:	e02a      	b.n	800f60e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800f5b8:	2a2f      	cmp	r2, #47	@ 0x2f
 800f5ba:	d02c      	beq.n	800f616 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x86>
 800f5bc:	d811      	bhi.n	800f5e2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x52>
 800f5be:	2a2d      	cmp	r2, #45	@ 0x2d
 800f5c0:	d018      	beq.n	800f5f4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x64>
 800f5c2:	d831      	bhi.n	800f628 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x98>
 800f5c4:	2a2c      	cmp	r2, #44	@ 0x2c
 800f5c6:	d1f5      	bne.n	800f5b4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800f5c8:	684a      	ldr	r2, [r1, #4]
 800f5ca:	7813      	ldrb	r3, [r2, #0]
 800f5cc:	7852      	ldrb	r2, [r2, #1]
 800f5ce:	2a00      	cmp	r2, #0
 800f5d0:	d1f0      	bne.n	800f5b4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800f5d2:	2b01      	cmp	r3, #1
 800f5d4:	d01d      	beq.n	800f612 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d02d      	beq.n	800f636 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 800f5da:	2b02      	cmp	r3, #2
 800f5dc:	d1ea      	bne.n	800f5b4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800f5de:	68c3      	ldr	r3, [r0, #12]
 800f5e0:	e015      	b.n	800f60e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800f5e2:	2a31      	cmp	r2, #49	@ 0x31
 800f5e4:	d004      	beq.n	800f5f0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x60>
 800f5e6:	d332      	bcc.n	800f64e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 800f5e8:	2a32      	cmp	r2, #50	@ 0x32
 800f5ea:	d030      	beq.n	800f64e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 800f5ec:	2a33      	cmp	r2, #51	@ 0x33
 800f5ee:	d1e1      	bne.n	800f5b4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800f5f0:	6f43      	ldr	r3, [r0, #116]	@ 0x74
 800f5f2:	e00c      	b.n	800f60e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800f5f4:	684a      	ldr	r2, [r1, #4]
 800f5f6:	7813      	ldrb	r3, [r2, #0]
 800f5f8:	7852      	ldrb	r2, [r2, #1]
 800f5fa:	2a00      	cmp	r2, #0
 800f5fc:	d1da      	bne.n	800f5b4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800f5fe:	2b01      	cmp	r3, #1
 800f600:	d004      	beq.n	800f60c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7c>
 800f602:	d30f      	bcc.n	800f624 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x94>
 800f604:	2b02      	cmp	r3, #2
 800f606:	d1d5      	bne.n	800f5b4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800f608:	6943      	ldr	r3, [r0, #20]
 800f60a:	e000      	b.n	800f60e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800f60c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800f60e:	4618      	mov	r0, r3
 800f610:	4770      	bx	lr
 800f612:	69c3      	ldr	r3, [r0, #28]
 800f614:	e7fb      	b.n	800f60e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800f616:	684b      	ldr	r3, [r1, #4]
 800f618:	781a      	ldrb	r2, [r3, #0]
 800f61a:	785b      	ldrb	r3, [r3, #1]
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d1c9      	bne.n	800f5b4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800f620:	2a00      	cmp	r2, #0
 800f622:	d1f4      	bne.n	800f60e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800f624:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800f626:	e7f2      	b.n	800f60e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800f628:	684b      	ldr	r3, [r1, #4]
 800f62a:	781a      	ldrb	r2, [r3, #0]
 800f62c:	785b      	ldrb	r3, [r3, #1]
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d1c0      	bne.n	800f5b4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800f632:	2a00      	cmp	r2, #0
 800f634:	d1eb      	bne.n	800f60e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800f636:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800f638:	e7e9      	b.n	800f60e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800f63a:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 800f63c:	e7e7      	b.n	800f60e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800f63e:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800f640:	e7e5      	b.n	800f60e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800f642:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800f644:	e7e3      	b.n	800f60e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800f646:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 800f648:	e7e1      	b.n	800f60e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800f64a:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 800f64c:	e7df      	b.n	800f60e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800f64e:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800f650:	e7dd      	b.n	800f60e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800f652:	2a0b      	cmp	r2, #11
 800f654:	d059      	beq.n	800f70a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17a>
 800f656:	d80e      	bhi.n	800f676 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe6>
 800f658:	2a03      	cmp	r2, #3
 800f65a:	d050      	beq.n	800f6fe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x16e>
 800f65c:	d804      	bhi.n	800f668 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xd8>
 800f65e:	2a01      	cmp	r2, #1
 800f660:	d04f      	beq.n	800f702 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x172>
 800f662:	d950      	bls.n	800f706 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x176>
 800f664:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800f666:	e7d2      	b.n	800f60e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800f668:	2a09      	cmp	r2, #9
 800f66a:	d04e      	beq.n	800f70a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17a>
 800f66c:	d801      	bhi.n	800f672 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe2>
 800f66e:	2a08      	cmp	r2, #8
 800f670:	d1a0      	bne.n	800f5b4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800f672:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 800f674:	e7cb      	b.n	800f60e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800f676:	2a2f      	cmp	r2, #47	@ 0x2f
 800f678:	d02d      	beq.n	800f6d6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x146>
 800f67a:	d811      	bhi.n	800f6a0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 800f67c:	2a2d      	cmp	r2, #45	@ 0x2d
 800f67e:	d018      	beq.n	800f6b2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x122>
 800f680:	d833      	bhi.n	800f6ea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x15a>
 800f682:	2a2c      	cmp	r2, #44	@ 0x2c
 800f684:	d196      	bne.n	800f5b4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800f686:	684a      	ldr	r2, [r1, #4]
 800f688:	7813      	ldrb	r3, [r2, #0]
 800f68a:	7852      	ldrb	r2, [r2, #1]
 800f68c:	2a00      	cmp	r2, #0
 800f68e:	d191      	bne.n	800f5b4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800f690:	2b01      	cmp	r3, #1
 800f692:	d01e      	beq.n	800f6d2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 800f694:	2b00      	cmp	r3, #0
 800f696:	d030      	beq.n	800f6fa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x16a>
 800f698:	2b02      	cmp	r3, #2
 800f69a:	d18b      	bne.n	800f5b4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800f69c:	6903      	ldr	r3, [r0, #16]
 800f69e:	e7b6      	b.n	800f60e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800f6a0:	2a31      	cmp	r2, #49	@ 0x31
 800f6a2:	d004      	beq.n	800f6ae <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11e>
 800f6a4:	d333      	bcc.n	800f70e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17e>
 800f6a6:	2a32      	cmp	r2, #50	@ 0x32
 800f6a8:	d031      	beq.n	800f70e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17e>
 800f6aa:	2a33      	cmp	r2, #51	@ 0x33
 800f6ac:	d182      	bne.n	800f5b4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800f6ae:	6f83      	ldr	r3, [r0, #120]	@ 0x78
 800f6b0:	e7ad      	b.n	800f60e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800f6b2:	684a      	ldr	r2, [r1, #4]
 800f6b4:	7813      	ldrb	r3, [r2, #0]
 800f6b6:	7852      	ldrb	r2, [r2, #1]
 800f6b8:	2a00      	cmp	r2, #0
 800f6ba:	f47f af7b 	bne.w	800f5b4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800f6be:	2b01      	cmp	r3, #1
 800f6c0:	d005      	beq.n	800f6ce <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 800f6c2:	d310      	bcc.n	800f6e6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x156>
 800f6c4:	2b02      	cmp	r3, #2
 800f6c6:	f47f af75 	bne.w	800f5b4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800f6ca:	6983      	ldr	r3, [r0, #24]
 800f6cc:	e79f      	b.n	800f60e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800f6ce:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800f6d0:	e79d      	b.n	800f60e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800f6d2:	6a03      	ldr	r3, [r0, #32]
 800f6d4:	e79b      	b.n	800f60e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800f6d6:	684b      	ldr	r3, [r1, #4]
 800f6d8:	781a      	ldrb	r2, [r3, #0]
 800f6da:	785b      	ldrb	r3, [r3, #1]
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	f47f af69 	bne.w	800f5b4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800f6e2:	2a00      	cmp	r2, #0
 800f6e4:	d193      	bne.n	800f60e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800f6e6:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800f6e8:	e791      	b.n	800f60e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800f6ea:	684b      	ldr	r3, [r1, #4]
 800f6ec:	781a      	ldrb	r2, [r3, #0]
 800f6ee:	785b      	ldrb	r3, [r3, #1]
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	f47f af5f 	bne.w	800f5b4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800f6f6:	2a00      	cmp	r2, #0
 800f6f8:	d189      	bne.n	800f60e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800f6fa:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800f6fc:	e787      	b.n	800f60e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800f6fe:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800f700:	e785      	b.n	800f60e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800f702:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 800f704:	e783      	b.n	800f60e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800f706:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 800f708:	e781      	b.n	800f60e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800f70a:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 800f70c:	e77f      	b.n	800f60e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800f70e:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 800f710:	e77d      	b.n	800f60e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>

0800f712 <_ZN8touchgfx8LCD16bppD1Ev>:
 800f712:	4770      	bx	lr

0800f714 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L4D1Ev>:
 800f714:	4770      	bx	lr

0800f716 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 800f716:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f71a:	b088      	sub	sp, #32
 800f71c:	ac08      	add	r4, sp, #32
 800f71e:	4606      	mov	r6, r0
 800f720:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 800f724:	4620      	mov	r0, r4
 800f726:	4688      	mov	r8, r1
 800f728:	4691      	mov	r9, r2
 800f72a:	f7ff fe57 	bl	800f3dc <_ZNK8touchgfx6Bitmap7getDataEv>
 800f72e:	6833      	ldr	r3, [r6, #0]
 800f730:	4605      	mov	r5, r0
 800f732:	4620      	mov	r0, r4
 800f734:	699f      	ldr	r7, [r3, #24]
 800f736:	f7ff fd5f 	bl	800f1f8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800f73a:	4682      	mov	sl, r0
 800f73c:	4620      	mov	r0, r4
 800f73e:	f7ff fd8f 	bl	800f260 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800f742:	9500      	str	r5, [sp, #0]
 800f744:	e9cd a001 	strd	sl, r0, [sp, #4]
 800f748:	464b      	mov	r3, r9
 800f74a:	a806      	add	r0, sp, #24
 800f74c:	4642      	mov	r2, r8
 800f74e:	4631      	mov	r1, r6
 800f750:	47b8      	blx	r7
 800f752:	4628      	mov	r0, r5
 800f754:	b008      	add	sp, #32
 800f756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0800f75c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 800f75c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f760:	2300      	movs	r3, #0
 800f762:	9300      	str	r3, [sp, #0]
 800f764:	4b3d      	ldr	r3, [pc, #244]	@ (800f85c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x100>)
 800f766:	781b      	ldrb	r3, [r3, #0]
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d137      	bne.n	800f7dc <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x80>
 800f76c:	4a3c      	ldr	r2, [pc, #240]	@ (800f860 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 800f76e:	f9b2 2000 	ldrsh.w	r2, [r2]
 800f772:	f8ad 2004 	strh.w	r2, [sp, #4]
 800f776:	2b00      	cmp	r3, #0
 800f778:	d132      	bne.n	800f7e0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x84>
 800f77a:	4b3a      	ldr	r3, [pc, #232]	@ (800f864 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 800f77c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f780:	6808      	ldr	r0, [r1, #0]
 800f782:	6849      	ldr	r1, [r1, #4]
 800f784:	f8ad 3006 	strh.w	r3, [sp, #6]
 800f788:	ac02      	add	r4, sp, #8
 800f78a:	ab02      	add	r3, sp, #8
 800f78c:	c303      	stmia	r3!, {r0, r1}
 800f78e:	4669      	mov	r1, sp
 800f790:	4620      	mov	r0, r4
 800f792:	f7fc f9a5 	bl	800bae0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 800f796:	4668      	mov	r0, sp
 800f798:	f7fc f97a 	bl	800ba90 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800f79c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800f7a0:	f8bd 2000 	ldrh.w	r2, [sp]
 800f7a4:	4d30      	ldr	r5, [pc, #192]	@ (800f868 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
 800f7a6:	4413      	add	r3, r2
 800f7a8:	f8ad 3008 	strh.w	r3, [sp, #8]
 800f7ac:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800f7b0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800f7b4:	6828      	ldr	r0, [r5, #0]
 800f7b6:	4413      	add	r3, r2
 800f7b8:	f8ad 300a 	strh.w	r3, [sp, #10]
 800f7bc:	6803      	ldr	r3, [r0, #0]
 800f7be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f7c0:	4798      	blx	r3
 800f7c2:	f010 0f01 	tst.w	r0, #1
 800f7c6:	462f      	mov	r7, r5
 800f7c8:	d00c      	beq.n	800f7e4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x88>
 800f7ca:	6828      	ldr	r0, [r5, #0]
 800f7cc:	6803      	ldr	r3, [r0, #0]
 800f7ce:	e894 0006 	ldmia.w	r4, {r1, r2}
 800f7d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f7d4:	4798      	blx	r3
 800f7d6:	b004      	add	sp, #16
 800f7d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f7dc:	4a21      	ldr	r2, [pc, #132]	@ (800f864 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 800f7de:	e7c6      	b.n	800f76e <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 800f7e0:	4b1f      	ldr	r3, [pc, #124]	@ (800f860 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 800f7e2:	e7cb      	b.n	800f77c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 800f7e4:	6838      	ldr	r0, [r7, #0]
 800f7e6:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 800f7ea:	6803      	ldr	r3, [r0, #0]
 800f7ec:	f9bd 500e 	ldrsh.w	r5, [sp, #14]
 800f7f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f7f2:	4798      	blx	r3
 800f7f4:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 800f7f8:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 800f7fc:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 800f800:	fb16 3602 	smlabb	r6, r6, r2, r3
 800f804:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 800f808:	6838      	ldr	r0, [r7, #0]
 800f80a:	6803      	ldr	r3, [r0, #0]
 800f80c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f80e:	4798      	blx	r3
 800f810:	4a13      	ldr	r2, [pc, #76]	@ (800f860 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 800f812:	f9bd 400a 	ldrsh.w	r4, [sp, #10]
 800f816:	8813      	ldrh	r3, [r2, #0]
 800f818:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 800f81c:	fb03 1404 	mla	r4, r3, r4, r1
 800f820:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 800f824:	435d      	muls	r5, r3
 800f826:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 800f82a:	ea4f 0848 	mov.w	r8, r8, lsl #1
 800f82e:	4691      	mov	r9, r2
 800f830:	6838      	ldr	r0, [r7, #0]
 800f832:	42ac      	cmp	r4, r5
 800f834:	6803      	ldr	r3, [r0, #0]
 800f836:	d20e      	bcs.n	800f856 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xfa>
 800f838:	f8d3 a038 	ldr.w	sl, [r3, #56]	@ 0x38
 800f83c:	4632      	mov	r2, r6
 800f83e:	4643      	mov	r3, r8
 800f840:	4621      	mov	r1, r4
 800f842:	47d0      	blx	sl
 800f844:	f8b9 3000 	ldrh.w	r3, [r9]
 800f848:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 800f84c:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 800f850:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 800f854:	e7ec      	b.n	800f830 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd4>
 800f856:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f858:	4798      	blx	r3
 800f85a:	e7bc      	b.n	800f7d6 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 800f85c:	20012630 	.word	0x20012630
 800f860:	20012632 	.word	0x20012632
 800f864:	20012634 	.word	0x20012634
 800f868:	20012638 	.word	0x20012638

0800f86c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 800f86c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f870:	b08b      	sub	sp, #44	@ 0x2c
 800f872:	460f      	mov	r7, r1
 800f874:	f89d b050 	ldrb.w	fp, [sp, #80]	@ 0x50
 800f878:	f89d 4054 	ldrb.w	r4, [sp, #84]	@ 0x54
 800f87c:	4616      	mov	r6, r2
 800f87e:	f1bb 0f00 	cmp.w	fp, #0
 800f882:	d04a      	beq.n	800f91a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xae>
 800f884:	6810      	ldr	r0, [r2, #0]
 800f886:	6851      	ldr	r1, [r2, #4]
 800f888:	ad06      	add	r5, sp, #24
 800f88a:	c503      	stmia	r5!, {r0, r1}
 800f88c:	6818      	ldr	r0, [r3, #0]
 800f88e:	6859      	ldr	r1, [r3, #4]
 800f890:	ad08      	add	r5, sp, #32
 800f892:	c503      	stmia	r5!, {r0, r1}
 800f894:	a806      	add	r0, sp, #24
 800f896:	f7fc f8fb 	bl	800ba90 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800f89a:	4631      	mov	r1, r6
 800f89c:	a808      	add	r0, sp, #32
 800f89e:	f7fc f91f 	bl	800bae0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 800f8a2:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 800f8a6:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 800f8aa:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 800f8ae:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 800f8b2:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	@ 0x26
 800f8b6:	fb16 2103 	smlabb	r1, r6, r3, r2
 800f8ba:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 800f8be:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 800f8c2:	4f5f      	ldr	r7, [pc, #380]	@ (800fa40 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 800f8c4:	440a      	add	r2, r1
 800f8c6:	f8ad 2020 	strh.w	r2, [sp, #32]
 800f8ca:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 800f8ce:	6838      	ldr	r0, [r7, #0]
 800f8d0:	4413      	add	r3, r2
 800f8d2:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 800f8d6:	6803      	ldr	r3, [r0, #0]
 800f8d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f8da:	4798      	blx	r3
 800f8dc:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 800f8e0:	46b9      	mov	r9, r7
 800f8e2:	d11d      	bne.n	800f920 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 800f8e4:	b9fc      	cbnz	r4, 800f926 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 800f8e6:	f010 0f01 	tst.w	r0, #1
 800f8ea:	d01c      	beq.n	800f926 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 800f8ec:	f8d9 0000 	ldr.w	r0, [r9]
 800f8f0:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 800f8f4:	6801      	ldr	r1, [r0, #0]
 800f8f6:	f8cd b00c 	str.w	fp, [sp, #12]
 800f8fa:	2700      	movs	r7, #0
 800f8fc:	e9cd 4704 	strd	r4, r7, [sp, #16]
 800f900:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 800f904:	9402      	str	r4, [sp, #8]
 800f906:	b2ad      	uxth	r5, r5
 800f908:	fa1f f488 	uxth.w	r4, r8
 800f90c:	9501      	str	r5, [sp, #4]
 800f90e:	9400      	str	r4, [sp, #0]
 800f910:	6c8c      	ldr	r4, [r1, #72]	@ 0x48
 800f912:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 800f916:	4631      	mov	r1, r6
 800f918:	47a0      	blx	r4
 800f91a:	b00b      	add	sp, #44	@ 0x2c
 800f91c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f920:	f010 0f04 	tst.w	r0, #4
 800f924:	e7e1      	b.n	800f8ea <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7e>
 800f926:	f8d9 0000 	ldr.w	r0, [r9]
 800f92a:	6803      	ldr	r3, [r0, #0]
 800f92c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f92e:	4798      	blx	r3
 800f930:	4b44      	ldr	r3, [pc, #272]	@ (800fa44 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
 800f932:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	@ 0x22
 800f936:	881a      	ldrh	r2, [r3, #0]
 800f938:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 800f93c:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 800f940:	fb02 1404 	mla	r4, r2, r4, r1
 800f944:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 800f948:	469a      	mov	sl, r3
 800f94a:	fb05 f502 	mul.w	r5, r5, r2
 800f94e:	ea4f 0748 	mov.w	r7, r8, lsl #1
 800f952:	d059      	beq.n	800fa08 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
 800f954:	f1cb 09ff 	rsb	r9, fp, #255	@ 0xff
 800f958:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 800f95c:	fa1f f28b 	uxth.w	r2, fp
 800f960:	fa1f f989 	uxth.w	r9, r9
 800f964:	469e      	mov	lr, r3
 800f966:	42ac      	cmp	r4, r5
 800f968:	d264      	bcs.n	800fa34 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 800f96a:	eb04 0a07 	add.w	sl, r4, r7
 800f96e:	4554      	cmp	r4, sl
 800f970:	d23d      	bcs.n	800f9ee <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
 800f972:	8821      	ldrh	r1, [r4, #0]
 800f974:	f836 3b02 	ldrh.w	r3, [r6], #2
 800f978:	1208      	asrs	r0, r1, #8
 800f97a:	ea4f 2c23 	mov.w	ip, r3, asr #8
 800f97e:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 800f982:	fb10 f009 	smulbb	r0, r0, r9
 800f986:	ea4f 0be1 	mov.w	fp, r1, asr #3
 800f98a:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 800f98e:	00c9      	lsls	r1, r1, #3
 800f990:	fb0c 0c02 	mla	ip, ip, r2, r0
 800f994:	f00b 0bfc 	and.w	fp, fp, #252	@ 0xfc
 800f998:	10d8      	asrs	r0, r3, #3
 800f99a:	b2c9      	uxtb	r1, r1
 800f99c:	00db      	lsls	r3, r3, #3
 800f99e:	fa1f fc8c 	uxth.w	ip, ip
 800f9a2:	fb1b fb09 	smulbb	fp, fp, r9
 800f9a6:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 800f9aa:	b2db      	uxtb	r3, r3
 800f9ac:	fb11 f109 	smulbb	r1, r1, r9
 800f9b0:	fb00 b002 	mla	r0, r0, r2, fp
 800f9b4:	fb03 1302 	mla	r3, r3, r2, r1
 800f9b8:	f10c 0b01 	add.w	fp, ip, #1
 800f9bc:	b29b      	uxth	r3, r3
 800f9be:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 800f9c2:	b280      	uxth	r0, r0
 800f9c4:	f40c 4b78 	and.w	fp, ip, #63488	@ 0xf800
 800f9c8:	f103 0c01 	add.w	ip, r3, #1
 800f9cc:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 800f9d0:	1c43      	adds	r3, r0, #1
 800f9d2:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 800f9d6:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 800f9da:	0940      	lsrs	r0, r0, #5
 800f9dc:	ea4c 0c0b 	orr.w	ip, ip, fp
 800f9e0:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 800f9e4:	ea4c 0c00 	orr.w	ip, ip, r0
 800f9e8:	f824 cb02 	strh.w	ip, [r4], #2
 800f9ec:	e7bf      	b.n	800f96e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
 800f9ee:	f8be 3000 	ldrh.w	r3, [lr]
 800f9f2:	eba3 0308 	sub.w	r3, r3, r8
 800f9f6:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 800f9fa:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 800f9fe:	eba3 0308 	sub.w	r3, r3, r8
 800fa02:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 800fa06:	e7ae      	b.n	800f966 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
 800fa08:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 800fa0c:	f8d9 0000 	ldr.w	r0, [r9]
 800fa10:	42ac      	cmp	r4, r5
 800fa12:	6803      	ldr	r3, [r0, #0]
 800fa14:	d20e      	bcs.n	800fa34 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 800fa16:	f8d3 8038 	ldr.w	r8, [r3, #56]	@ 0x38
 800fa1a:	4632      	mov	r2, r6
 800fa1c:	463b      	mov	r3, r7
 800fa1e:	4621      	mov	r1, r4
 800fa20:	47c0      	blx	r8
 800fa22:	f8ba 3000 	ldrh.w	r3, [sl]
 800fa26:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 800fa2a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 800fa2e:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 800fa32:	e7eb      	b.n	800fa0c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 800fa34:	4b02      	ldr	r3, [pc, #8]	@ (800fa40 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 800fa36:	6818      	ldr	r0, [r3, #0]
 800fa38:	6803      	ldr	r3, [r0, #0]
 800fa3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fa3c:	4798      	blx	r3
 800fa3e:	e76c      	b.n	800f91a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xae>
 800fa40:	20012638 	.word	0x20012638
 800fa44:	20012632 	.word	0x20012632

0800fa48 <_ZN8touchgfx8LCD16bppD0Ev>:
 800fa48:	b510      	push	{r4, lr}
 800fa4a:	218c      	movs	r1, #140	@ 0x8c
 800fa4c:	4604      	mov	r4, r0
 800fa4e:	f002 faa7 	bl	8011fa0 <_ZdlPvj>
 800fa52:	4620      	mov	r0, r4
 800fa54:	bd10      	pop	{r4, pc}

0800fa56 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L4D0Ev>:
 800fa56:	b510      	push	{r4, lr}
 800fa58:	2104      	movs	r1, #4
 800fa5a:	4604      	mov	r4, r0
 800fa5c:	f002 faa0 	bl	8011fa0 <_ZdlPvj>
 800fa60:	4620      	mov	r0, r4
 800fa62:	bd10      	pop	{r4, pc}

0800fa64 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 800fa64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa68:	b091      	sub	sp, #68	@ 0x44
 800fa6a:	469b      	mov	fp, r3
 800fa6c:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 800fa70:	4616      	mov	r6, r2
 800fa72:	f9bd 906c 	ldrsh.w	r9, [sp, #108]	@ 0x6c
 800fa76:	f9b3 2000 	ldrsh.w	r2, [r3]
 800fa7a:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	@ 0x70
 800fa7e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800fa82:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 800fa86:	4604      	mov	r4, r0
 800fa88:	460d      	mov	r5, r1
 800fa8a:	4640      	mov	r0, r8
 800fa8c:	4659      	mov	r1, fp
 800fa8e:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 800fa92:	f8ad 902c 	strh.w	r9, [sp, #44]	@ 0x2c
 800fa96:	f8ad 702e 	strh.w	r7, [sp, #46]	@ 0x2e
 800fa9a:	f7f8 fed5 	bl	8008848 <_ZN8touchgfx4RectaNERKS0_>
 800fa9e:	4631      	mov	r1, r6
 800faa0:	4640      	mov	r0, r8
 800faa2:	f7f8 fed1 	bl	8008848 <_ZN8touchgfx4RectaNERKS0_>
 800faa6:	4b74      	ldr	r3, [pc, #464]	@ (800fc78 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x214>)
 800faa8:	8818      	ldrh	r0, [r3, #0]
 800faaa:	4b74      	ldr	r3, [pc, #464]	@ (800fc7c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x218>)
 800faac:	8819      	ldrh	r1, [r3, #0]
 800faae:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	b202      	sxth	r2, r0
 800fab6:	b20e      	sxth	r6, r1
 800fab8:	da07      	bge.n	800faca <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x66>
 800faba:	f8bd c02c 	ldrh.w	ip, [sp, #44]	@ 0x2c
 800fabe:	4463      	add	r3, ip
 800fac0:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 800fac4:	2300      	movs	r3, #0
 800fac6:	f8ad 3028 	strh.w	r3, [sp, #40]	@ 0x28
 800faca:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
 800face:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	@ 0x2c
 800fad2:	1ad2      	subs	r2, r2, r3
 800fad4:	4594      	cmp	ip, r2
 800fad6:	bfc4      	itt	gt
 800fad8:	1ac2      	subgt	r2, r0, r3
 800fada:	f8ad 202c 	strhgt.w	r2, [sp, #44]	@ 0x2c
 800fade:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 800fae2:	2a00      	cmp	r2, #0
 800fae4:	da07      	bge.n	800faf6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x92>
 800fae6:	f8bd c02e 	ldrh.w	ip, [sp, #46]	@ 0x2e
 800faea:	4462      	add	r2, ip
 800faec:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 800faf0:	2200      	movs	r2, #0
 800faf2:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 800faf6:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	@ 0x2a
 800fafa:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	@ 0x2e
 800fafe:	eba6 060a 	sub.w	r6, r6, sl
 800fb02:	42b2      	cmp	r2, r6
 800fb04:	bfc4      	itt	gt
 800fb06:	eba1 020a 	subgt.w	r2, r1, sl
 800fb0a:	f8ad 202e 	strhgt.w	r2, [sp, #46]	@ 0x2e
 800fb0e:	4a5c      	ldr	r2, [pc, #368]	@ (800fc80 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21c>)
 800fb10:	7812      	ldrb	r2, [r2, #0]
 800fb12:	b9a2      	cbnz	r2, 800fb3e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xda>
 800fb14:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 800fb18:	4286      	cmp	r6, r0
 800fb1a:	4640      	mov	r0, r8
 800fb1c:	9303      	str	r3, [sp, #12]
 800fb1e:	bf14      	ite	ne
 800fb20:	2600      	movne	r6, #0
 800fb22:	2601      	moveq	r6, #1
 800fb24:	f7f8 fed3 	bl	80088ce <_ZNK8touchgfx4Rect7isEmptyEv>
 800fb28:	9b03      	ldr	r3, [sp, #12]
 800fb2a:	b160      	cbz	r0, 800fb46 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xe2>
 800fb2c:	2300      	movs	r3, #0
 800fb2e:	8023      	strh	r3, [r4, #0]
 800fb30:	8063      	strh	r3, [r4, #2]
 800fb32:	80a3      	strh	r3, [r4, #4]
 800fb34:	4620      	mov	r0, r4
 800fb36:	80e3      	strh	r3, [r4, #6]
 800fb38:	b011      	add	sp, #68	@ 0x44
 800fb3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb3e:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	@ 0x2e
 800fb42:	428e      	cmp	r6, r1
 800fb44:	e7e9      	b.n	800fb1a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb6>
 800fb46:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 800fb4a:	9205      	str	r2, [sp, #20]
 800fb4c:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	@ 0x2e
 800fb50:	9206      	str	r2, [sp, #24]
 800fb52:	f8bb 2000 	ldrh.w	r2, [fp]
 800fb56:	900e      	str	r0, [sp, #56]	@ 0x38
 800fb58:	1a9b      	subs	r3, r3, r2
 800fb5a:	b21b      	sxth	r3, r3
 800fb5c:	9303      	str	r3, [sp, #12]
 800fb5e:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 800fb62:	f8ad 903c 	strh.w	r9, [sp, #60]	@ 0x3c
 800fb66:	ebaa 0a03 	sub.w	sl, sl, r3
 800fb6a:	fa0f f38a 	sxth.w	r3, sl
 800fb6e:	9304      	str	r3, [sp, #16]
 800fb70:	9b03      	ldr	r3, [sp, #12]
 800fb72:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 800fb76:	9b04      	ldr	r3, [sp, #16]
 800fb78:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 800fb7c:	9b05      	ldr	r3, [sp, #20]
 800fb7e:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 800fb82:	a90e      	add	r1, sp, #56	@ 0x38
 800fb84:	9b06      	ldr	r3, [sp, #24]
 800fb86:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 800fb8a:	a80c      	add	r0, sp, #48	@ 0x30
 800fb8c:	f8ad 703e 	strh.w	r7, [sp, #62]	@ 0x3e
 800fb90:	f7fb ffa6 	bl	800bae0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 800fb94:	4640      	mov	r0, r8
 800fb96:	f7fb ff7b 	bl	800ba90 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800fb9a:	a80e      	add	r0, sp, #56	@ 0x38
 800fb9c:	f7fb ff78 	bl	800ba90 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800fba0:	4b38      	ldr	r3, [pc, #224]	@ (800fc84 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 800fba2:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	@ 0x3c
 800fba6:	881b      	ldrh	r3, [r3, #0]
 800fba8:	9307      	str	r3, [sp, #28]
 800fbaa:	682b      	ldr	r3, [r5, #0]
 800fbac:	f8df b0d8 	ldr.w	fp, [pc, #216]	@ 800fc88 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 800fbb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fbb2:	4628      	mov	r0, r5
 800fbb4:	4798      	blx	r3
 800fbb6:	f8bd 5032 	ldrh.w	r5, [sp, #50]	@ 0x32
 800fbba:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 800fbbe:	4681      	mov	r9, r0
 800fbc0:	fb1a 3305 	smlabb	r3, sl, r5, r3
 800fbc4:	f8db 0000 	ldr.w	r0, [fp]
 800fbc8:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 800fbca:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 800fbce:	6803      	ldr	r3, [r0, #0]
 800fbd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fbd2:	4798      	blx	r3
 800fbd4:	4607      	mov	r7, r0
 800fbd6:	f8db 0000 	ldr.w	r0, [fp]
 800fbda:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 800fbde:	6803      	ldr	r3, [r0, #0]
 800fbe0:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 800fbe4:	9109      	str	r1, [sp, #36]	@ 0x24
 800fbe6:	9208      	str	r2, [sp, #32]
 800fbe8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fbea:	4798      	blx	r3
 800fbec:	f010 0f01 	tst.w	r0, #1
 800fbf0:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 800fbf4:	d012      	beq.n	800fc1c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b8>
 800fbf6:	f8db 0000 	ldr.w	r0, [fp]
 800fbfa:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	@ 0x34
 800fbfe:	6803      	ldr	r3, [r0, #0]
 800fc00:	9200      	str	r2, [sp, #0]
 800fc02:	6f1e      	ldr	r6, [r3, #112]	@ 0x70
 800fc04:	e898 0006 	ldmia.w	r8, {r1, r2}
 800fc08:	462b      	mov	r3, r5
 800fc0a:	47b0      	blx	r6
 800fc0c:	9b03      	ldr	r3, [sp, #12]
 800fc0e:	8023      	strh	r3, [r4, #0]
 800fc10:	9b04      	ldr	r3, [sp, #16]
 800fc12:	8063      	strh	r3, [r4, #2]
 800fc14:	9b05      	ldr	r3, [sp, #20]
 800fc16:	80a3      	strh	r3, [r4, #4]
 800fc18:	9b06      	ldr	r3, [sp, #24]
 800fc1a:	e78b      	b.n	800fb34 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xd0>
 800fc1c:	fb09 f202 	mul.w	r2, r9, r2
 800fc20:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800fc24:	440f      	add	r7, r1
 800fc26:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	@ 0x36
 800fc2a:	b166      	cbz	r6, 800fc46 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 800fc2c:	9a07      	ldr	r2, [sp, #28]
 800fc2e:	4592      	cmp	sl, r2
 800fc30:	d109      	bne.n	800fc46 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 800fc32:	f8db 0000 	ldr.w	r0, [fp]
 800fc36:	6802      	ldr	r2, [r0, #0]
 800fc38:	fb09 f303 	mul.w	r3, r9, r3
 800fc3c:	6b96      	ldr	r6, [r2, #56]	@ 0x38
 800fc3e:	4629      	mov	r1, r5
 800fc40:	463a      	mov	r2, r7
 800fc42:	47b0      	blx	r6
 800fc44:	e7e2      	b.n	800fc0c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 800fc46:	fb0a f303 	mul.w	r3, sl, r3
 800fc4a:	f8df b03c 	ldr.w	fp, [pc, #60]	@ 800fc88 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 800fc4e:	eb05 0843 	add.w	r8, r5, r3, lsl #1
 800fc52:	ea4f 064a 	mov.w	r6, sl, lsl #1
 800fc56:	4545      	cmp	r5, r8
 800fc58:	d2d8      	bcs.n	800fc0c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 800fc5a:	f8db 0000 	ldr.w	r0, [fp]
 800fc5e:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 800fc62:	6802      	ldr	r2, [r0, #0]
 800fc64:	4629      	mov	r1, r5
 800fc66:	f8d2 a038 	ldr.w	sl, [r2, #56]	@ 0x38
 800fc6a:	005b      	lsls	r3, r3, #1
 800fc6c:	463a      	mov	r2, r7
 800fc6e:	47d0      	blx	sl
 800fc70:	444f      	add	r7, r9
 800fc72:	4435      	add	r5, r6
 800fc74:	e7ef      	b.n	800fc56 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f2>
 800fc76:	bf00      	nop
 800fc78:	2001262c 	.word	0x2001262c
 800fc7c:	2001262e 	.word	0x2001262e
 800fc80:	20012630 	.word	0x20012630
 800fc84:	20012632 	.word	0x20012632
 800fc88:	20012638 	.word	0x20012638

0800fc8c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 800fc8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fc8e:	4606      	mov	r6, r0
 800fc90:	b087      	sub	sp, #28
 800fc92:	460c      	mov	r4, r1
 800fc94:	4617      	mov	r7, r2
 800fc96:	461d      	mov	r5, r3
 800fc98:	b333      	cbz	r3, 800fce8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 800fc9a:	4608      	mov	r0, r1
 800fc9c:	f7f8 fe17 	bl	80088ce <_ZNK8touchgfx4Rect7isEmptyEv>
 800fca0:	bb10      	cbnz	r0, 800fce8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 800fca2:	6820      	ldr	r0, [r4, #0]
 800fca4:	6861      	ldr	r1, [r4, #4]
 800fca6:	4c1c      	ldr	r4, [pc, #112]	@ (800fd18 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 800fca8:	ab04      	add	r3, sp, #16
 800fcaa:	c303      	stmia	r3!, {r0, r1}
 800fcac:	a804      	add	r0, sp, #16
 800fcae:	f7fb feef 	bl	800ba90 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800fcb2:	6820      	ldr	r0, [r4, #0]
 800fcb4:	6803      	ldr	r3, [r0, #0]
 800fcb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fcb8:	4798      	blx	r3
 800fcba:	2dff      	cmp	r5, #255	@ 0xff
 800fcbc:	d016      	beq.n	800fcec <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 800fcbe:	f010 0f08 	tst.w	r0, #8
 800fcc2:	6820      	ldr	r0, [r4, #0]
 800fcc4:	d015      	beq.n	800fcf2 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 800fcc6:	2400      	movs	r4, #0
 800fcc8:	6801      	ldr	r1, [r0, #0]
 800fcca:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800fcce:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 800fcd2:	e9cd 5402 	strd	r5, r4, [sp, #8]
 800fcd6:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 800fcda:	9401      	str	r4, [sp, #4]
 800fcdc:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 800fce0:	9400      	str	r4, [sp, #0]
 800fce2:	6e4c      	ldr	r4, [r1, #100]	@ 0x64
 800fce4:	4639      	mov	r1, r7
 800fce6:	47a0      	blx	r4
 800fce8:	b007      	add	sp, #28
 800fcea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fcec:	f010 0f02 	tst.w	r0, #2
 800fcf0:	e7e7      	b.n	800fcc2 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 800fcf2:	6803      	ldr	r3, [r0, #0]
 800fcf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fcf6:	4798      	blx	r3
 800fcf8:	4b08      	ldr	r3, [pc, #32]	@ (800fd1c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 800fcfa:	881a      	ldrh	r2, [r3, #0]
 800fcfc:	6833      	ldr	r3, [r6, #0]
 800fcfe:	e9cd 7500 	strd	r7, r5, [sp]
 800fd02:	4601      	mov	r1, r0
 800fd04:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 800fd06:	4630      	mov	r0, r6
 800fd08:	ab04      	add	r3, sp, #16
 800fd0a:	47a8      	blx	r5
 800fd0c:	6820      	ldr	r0, [r4, #0]
 800fd0e:	6803      	ldr	r3, [r0, #0]
 800fd10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fd12:	4798      	blx	r3
 800fd14:	e7e8      	b.n	800fce8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 800fd16:	bf00      	nop
 800fd18:	20012638 	.word	0x20012638
 800fd1c:	20012632 	.word	0x20012632

0800fd20 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 800fd20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fd24:	f89d 7024 	ldrb.w	r7, [sp, #36]	@ 0x24
 800fd28:	9e08      	ldr	r6, [sp, #32]
 800fd2a:	4688      	mov	r8, r1
 800fd2c:	4614      	mov	r4, r2
 800fd2e:	461d      	mov	r5, r3
 800fd30:	2f00      	cmp	r7, #0
 800fd32:	f000 80a9 	beq.w	800fe88 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 800fd36:	4618      	mov	r0, r3
 800fd38:	f7f8 fdc9 	bl	80088ce <_ZNK8touchgfx4Rect7isEmptyEv>
 800fd3c:	2800      	cmp	r0, #0
 800fd3e:	f040 80a3 	bne.w	800fe88 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 800fd42:	f9b5 1000 	ldrsh.w	r1, [r5]
 800fd46:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 800fd4a:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 800fd4e:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 800fd52:	fb04 1303 	mla	r3, r4, r3, r1
 800fd56:	eb08 0143 	add.w	r1, r8, r3, lsl #1
 800fd5a:	4365      	muls	r5, r4
 800fd5c:	2fff      	cmp	r7, #255	@ 0xff
 800fd5e:	eba4 0200 	sub.w	r2, r4, r0
 800fd62:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 800fd66:	ea4f 2816 	mov.w	r8, r6, lsr #8
 800fd6a:	d04a      	beq.n	800fe02 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe2>
 800fd6c:	b2bc      	uxth	r4, r7
 800fd6e:	f1c7 0cff 	rsb	ip, r7, #255	@ 0xff
 800fd72:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 800fd76:	fa5f f788 	uxtb.w	r7, r8
 800fd7a:	b2f3      	uxtb	r3, r6
 800fd7c:	0040      	lsls	r0, r0, #1
 800fd7e:	fb0e fe04 	mul.w	lr, lr, r4
 800fd82:	4367      	muls	r7, r4
 800fd84:	4363      	muls	r3, r4
 800fd86:	ea4f 0842 	mov.w	r8, r2, lsl #1
 800fd8a:	fa1f fc8c 	uxth.w	ip, ip
 800fd8e:	42a9      	cmp	r1, r5
 800fd90:	d27a      	bcs.n	800fe88 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 800fd92:	eb01 0900 	add.w	r9, r1, r0
 800fd96:	4549      	cmp	r1, r9
 800fd98:	d231      	bcs.n	800fdfe <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xde>
 800fd9a:	880a      	ldrh	r2, [r1, #0]
 800fd9c:	1214      	asrs	r4, r2, #8
 800fd9e:	10d6      	asrs	r6, r2, #3
 800fda0:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 800fda4:	00d2      	lsls	r2, r2, #3
 800fda6:	b2d2      	uxtb	r2, r2
 800fda8:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 800fdac:	fb14 f40c 	smulbb	r4, r4, ip
 800fdb0:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 800fdb4:	4474      	add	r4, lr
 800fdb6:	fb12 f20c 	smulbb	r2, r2, ip
 800fdba:	b2a4      	uxth	r4, r4
 800fdbc:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 800fdc0:	441a      	add	r2, r3
 800fdc2:	b292      	uxth	r2, r2
 800fdc4:	f104 0a01 	add.w	sl, r4, #1
 800fdc8:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 800fdcc:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 800fdd0:	fb16 f60c 	smulbb	r6, r6, ip
 800fdd4:	f102 0a01 	add.w	sl, r2, #1
 800fdd8:	443e      	add	r6, r7
 800fdda:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 800fdde:	b2b6      	uxth	r6, r6
 800fde0:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 800fde4:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 800fde8:	4322      	orrs	r2, r4
 800fdea:	1c74      	adds	r4, r6, #1
 800fdec:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 800fdf0:	0976      	lsrs	r6, r6, #5
 800fdf2:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 800fdf6:	4332      	orrs	r2, r6
 800fdf8:	f821 2b02 	strh.w	r2, [r1], #2
 800fdfc:	e7cb      	b.n	800fd96 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x76>
 800fdfe:	4441      	add	r1, r8
 800fe00:	e7c5      	b.n	800fd8e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6e>
 800fe02:	4f22      	ldr	r7, [pc, #136]	@ (800fe8c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>)
 800fe04:	0973      	lsrs	r3, r6, #5
 800fe06:	ea08 0707 	and.w	r7, r8, r7
 800fe0a:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 800fe0e:	433b      	orrs	r3, r7
 800fe10:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 800fe14:	4333      	orrs	r3, r6
 800fe16:	07e7      	lsls	r7, r4, #31
 800fe18:	b29b      	uxth	r3, r3
 800fe1a:	d50b      	bpl.n	800fe34 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
 800fe1c:	0040      	lsls	r0, r0, #1
 800fe1e:	0052      	lsls	r2, r2, #1
 800fe20:	42a9      	cmp	r1, r5
 800fe22:	d231      	bcs.n	800fe88 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 800fe24:	180c      	adds	r4, r1, r0
 800fe26:	42a1      	cmp	r1, r4
 800fe28:	d202      	bcs.n	800fe30 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x110>
 800fe2a:	f821 3b02 	strh.w	r3, [r1], #2
 800fe2e:	e7fa      	b.n	800fe26 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x106>
 800fe30:	4411      	add	r1, r2
 800fe32:	e7f5      	b.n	800fe20 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x100>
 800fe34:	078e      	lsls	r6, r1, #30
 800fe36:	d008      	beq.n	800fe4a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
 800fe38:	0066      	lsls	r6, r4, #1
 800fe3a:	460a      	mov	r2, r1
 800fe3c:	42aa      	cmp	r2, r5
 800fe3e:	d202      	bcs.n	800fe46 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x126>
 800fe40:	8013      	strh	r3, [r2, #0]
 800fe42:	4432      	add	r2, r6
 800fe44:	e7fa      	b.n	800fe3c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x11c>
 800fe46:	3102      	adds	r1, #2
 800fe48:	3801      	subs	r0, #1
 800fe4a:	07c2      	lsls	r2, r0, #31
 800fe4c:	d50b      	bpl.n	800fe66 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x146>
 800fe4e:	f100 4200 	add.w	r2, r0, #2147483648	@ 0x80000000
 800fe52:	3a01      	subs	r2, #1
 800fe54:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800fe58:	0066      	lsls	r6, r4, #1
 800fe5a:	42aa      	cmp	r2, r5
 800fe5c:	d202      	bcs.n	800fe64 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x144>
 800fe5e:	8013      	strh	r3, [r2, #0]
 800fe60:	4432      	add	r2, r6
 800fe62:	e7fa      	b.n	800fe5a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13a>
 800fe64:	3801      	subs	r0, #1
 800fe66:	b178      	cbz	r0, 800fe88 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 800fe68:	1040      	asrs	r0, r0, #1
 800fe6a:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 800fe6e:	0080      	lsls	r0, r0, #2
 800fe70:	0064      	lsls	r4, r4, #1
 800fe72:	42a9      	cmp	r1, r5
 800fe74:	d208      	bcs.n	800fe88 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 800fe76:	180e      	adds	r6, r1, r0
 800fe78:	460a      	mov	r2, r1
 800fe7a:	42b2      	cmp	r2, r6
 800fe7c:	d202      	bcs.n	800fe84 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x164>
 800fe7e:	f842 3b04 	str.w	r3, [r2], #4
 800fe82:	e7fa      	b.n	800fe7a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x15a>
 800fe84:	4421      	add	r1, r4
 800fe86:	e7f4      	b.n	800fe72 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x152>
 800fe88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe8c:	00fff800 	.word	0x00fff800

0800fe90 <_ZN8touchgfx8LCD16bppC1Ev>:
 800fe90:	2200      	movs	r2, #0
 800fe92:	4912      	ldr	r1, [pc, #72]	@ (800fedc <_ZN8touchgfx8LCD16bppC1Ev+0x4c>)
 800fe94:	6001      	str	r1, [r0, #0]
 800fe96:	e9c0 2201 	strd	r2, r2, [r0, #4]
 800fe9a:	e9c0 2203 	strd	r2, r2, [r0, #12]
 800fe9e:	e9c0 2205 	strd	r2, r2, [r0, #20]
 800fea2:	e9c0 2207 	strd	r2, r2, [r0, #28]
 800fea6:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
 800feaa:	e9c0 220b 	strd	r2, r2, [r0, #44]	@ 0x2c
 800feae:	e9c0 220d 	strd	r2, r2, [r0, #52]	@ 0x34
 800feb2:	e9c0 220f 	strd	r2, r2, [r0, #60]	@ 0x3c
 800feb6:	e9c0 2211 	strd	r2, r2, [r0, #68]	@ 0x44
 800feba:	e9c0 2213 	strd	r2, r2, [r0, #76]	@ 0x4c
 800febe:	e9c0 2215 	strd	r2, r2, [r0, #84]	@ 0x54
 800fec2:	e9c0 2217 	strd	r2, r2, [r0, #92]	@ 0x5c
 800fec6:	e9c0 2219 	strd	r2, r2, [r0, #100]	@ 0x64
 800feca:	e9c0 221b 	strd	r2, r2, [r0, #108]	@ 0x6c
 800fece:	e9c0 221d 	strd	r2, r2, [r0, #116]	@ 0x74
 800fed2:	e9c0 221f 	strd	r2, r2, [r0, #124]	@ 0x7c
 800fed6:	e9c0 2221 	strd	r2, r2, [r0, #132]	@ 0x84
 800feda:	4770      	bx	lr
 800fedc:	08014910 	.word	0x08014910

0800fee0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 800fee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fee4:	460d      	mov	r5, r1
 800fee6:	b08d      	sub	sp, #52	@ 0x34
 800fee8:	4604      	mov	r4, r0
 800feea:	6808      	ldr	r0, [r1, #0]
 800feec:	6849      	ldr	r1, [r1, #4]
 800feee:	4699      	mov	r9, r3
 800fef0:	ab08      	add	r3, sp, #32
 800fef2:	c303      	stmia	r3!, {r0, r1}
 800fef4:	6810      	ldr	r0, [r2, #0]
 800fef6:	6851      	ldr	r1, [r2, #4]
 800fef8:	ab0a      	add	r3, sp, #40	@ 0x28
 800fefa:	c303      	stmia	r3!, {r0, r1}
 800fefc:	a808      	add	r0, sp, #32
 800fefe:	f7fb fdc7 	bl	800ba90 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800ff02:	4629      	mov	r1, r5
 800ff04:	a80a      	add	r0, sp, #40	@ 0x28
 800ff06:	f7fb fdeb 	bl	800bae0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 800ff0a:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	@ 0x28
 800ff0e:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	@ 0x2a
 800ff12:	f8bd 1024 	ldrh.w	r1, [sp, #36]	@ 0x24
 800ff16:	4d63      	ldr	r5, [pc, #396]	@ (80100a4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 800ff18:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	@ 0x2c
 800ff1c:	6828      	ldr	r0, [r5, #0]
 800ff1e:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	@ 0x2e
 800ff22:	fb11 2103 	smlabb	r1, r1, r3, r2
 800ff26:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 800ff2a:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 800ff2e:	440a      	add	r2, r1
 800ff30:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 800ff34:	f8bd 2022 	ldrh.w	r2, [sp, #34]	@ 0x22
 800ff38:	4413      	add	r3, r2
 800ff3a:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 800ff3e:	6803      	ldr	r3, [r0, #0]
 800ff40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ff42:	4798      	blx	r3
 800ff44:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 800ff48:	d119      	bne.n	800ff7e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 800ff4a:	f010 0f20 	tst.w	r0, #32
 800ff4e:	6828      	ldr	r0, [r5, #0]
 800ff50:	d018      	beq.n	800ff84 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 800ff52:	2500      	movs	r5, #0
 800ff54:	6801      	ldr	r1, [r0, #0]
 800ff56:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 800ff5a:	f8bd 2028 	ldrh.w	r2, [sp, #40]	@ 0x28
 800ff5e:	e9cd 9503 	strd	r9, r5, [sp, #12]
 800ff62:	f8bd 5024 	ldrh.w	r5, [sp, #36]	@ 0x24
 800ff66:	9502      	str	r5, [sp, #8]
 800ff68:	b2b6      	uxth	r6, r6
 800ff6a:	fa1f f588 	uxth.w	r5, r8
 800ff6e:	9601      	str	r6, [sp, #4]
 800ff70:	9500      	str	r5, [sp, #0]
 800ff72:	6d4d      	ldr	r5, [r1, #84]	@ 0x54
 800ff74:	4621      	mov	r1, r4
 800ff76:	47a8      	blx	r5
 800ff78:	b00d      	add	sp, #52	@ 0x34
 800ff7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff7e:	f010 0f40 	tst.w	r0, #64	@ 0x40
 800ff82:	e7e4      	b.n	800ff4e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 800ff84:	6803      	ldr	r3, [r0, #0]
 800ff86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff88:	4798      	blx	r3
 800ff8a:	4947      	ldr	r1, [pc, #284]	@ (80100a8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
 800ff8c:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 800ff90:	880b      	ldrh	r3, [r1, #0]
 800ff92:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	@ 0x28
 800ff96:	fb03 5202 	mla	r2, r3, r2, r5
 800ff9a:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 800ff9e:	4373      	muls	r3, r6
 800ffa0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800ffa4:	9307      	str	r3, [sp, #28]
 800ffa6:	ea4f 0348 	mov.w	r3, r8, lsl #1
 800ffaa:	9306      	str	r3, [sp, #24]
 800ffac:	468a      	mov	sl, r1
 800ffae:	9b07      	ldr	r3, [sp, #28]
 800ffb0:	4298      	cmp	r0, r3
 800ffb2:	d270      	bcs.n	8010096 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
 800ffb4:	9b06      	ldr	r3, [sp, #24]
 800ffb6:	4621      	mov	r1, r4
 800ffb8:	eb00 0b03 	add.w	fp, r0, r3
 800ffbc:	4558      	cmp	r0, fp
 800ffbe:	d25d      	bcs.n	801007c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
 800ffc0:	f851 4b04 	ldr.w	r4, [r1], #4
 800ffc4:	0e23      	lsrs	r3, r4, #24
 800ffc6:	d014      	beq.n	800fff2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 800ffc8:	2bff      	cmp	r3, #255	@ 0xff
 800ffca:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 800ffce:	d112      	bne.n	800fff6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 800ffd0:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 800ffd4:	d10f      	bne.n	800fff6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 800ffd6:	0963      	lsrs	r3, r4, #5
 800ffd8:	f42c 6cff 	bic.w	ip, ip, #2040	@ 0x7f8
 800ffdc:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 800ffe0:	f02c 0c07 	bic.w	ip, ip, #7
 800ffe4:	ea43 0c0c 	orr.w	ip, r3, ip
 800ffe8:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 800ffec:	ea4c 0404 	orr.w	r4, ip, r4
 800fff0:	8004      	strh	r4, [r0, #0]
 800fff2:	3002      	adds	r0, #2
 800fff4:	e7e2      	b.n	800ffbc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
 800fff6:	fb09 f303 	mul.w	r3, r9, r3
 800fffa:	8807      	ldrh	r7, [r0, #0]
 800fffc:	1c5a      	adds	r2, r3, #1
 800fffe:	eb02 2223 	add.w	r2, r2, r3, asr #8
 8010002:	1212      	asrs	r2, r2, #8
 8010004:	123e      	asrs	r6, r7, #8
 8010006:	b293      	uxth	r3, r2
 8010008:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 801000c:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 8010010:	43d2      	mvns	r2, r2
 8010012:	b2d2      	uxtb	r2, r2
 8010014:	10fd      	asrs	r5, r7, #3
 8010016:	fb1e fe03 	smulbb	lr, lr, r3
 801001a:	00ff      	lsls	r7, r7, #3
 801001c:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8010020:	fb06 e602 	mla	r6, r6, r2, lr
 8010024:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 8010028:	b2ff      	uxtb	r7, r7
 801002a:	fa5f fc8c 	uxtb.w	ip, ip
 801002e:	b2e4      	uxtb	r4, r4
 8010030:	b2b6      	uxth	r6, r6
 8010032:	fb1c fc03 	smulbb	ip, ip, r3
 8010036:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801003a:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 801003e:	fb14 f403 	smulbb	r4, r4, r3
 8010042:	fb05 c502 	mla	r5, r5, r2, ip
 8010046:	f106 0e01 	add.w	lr, r6, #1
 801004a:	fb07 4702 	mla	r7, r7, r2, r4
 801004e:	b2ad      	uxth	r5, r5
 8010050:	b2bf      	uxth	r7, r7
 8010052:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 8010056:	f406 4e78 	and.w	lr, r6, #63488	@ 0xf800
 801005a:	f105 0c01 	add.w	ip, r5, #1
 801005e:	1c7e      	adds	r6, r7, #1
 8010060:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 8010064:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8010068:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801006c:	096d      	lsrs	r5, r5, #5
 801006e:	ea46 060e 	orr.w	r6, r6, lr
 8010072:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8010076:	432e      	orrs	r6, r5
 8010078:	8006      	strh	r6, [r0, #0]
 801007a:	e7ba      	b.n	800fff2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 801007c:	f8ba 3000 	ldrh.w	r3, [sl]
 8010080:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	@ 0x24
 8010084:	eba3 0308 	sub.w	r3, r3, r8
 8010088:	eba4 0408 	sub.w	r4, r4, r8
 801008c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8010090:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 8010094:	e78b      	b.n	800ffae <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 8010096:	4b03      	ldr	r3, [pc, #12]	@ (80100a4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 8010098:	6818      	ldr	r0, [r3, #0]
 801009a:	6803      	ldr	r3, [r0, #0]
 801009c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801009e:	4798      	blx	r3
 80100a0:	e76a      	b.n	800ff78 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 80100a2:	bf00      	nop
 80100a4:	20012638 	.word	0x20012638
 80100a8:	20012632 	.word	0x20012632

080100ac <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
 80100ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80100b0:	460c      	mov	r4, r1
 80100b2:	b085      	sub	sp, #20
 80100b4:	6810      	ldr	r0, [r2, #0]
 80100b6:	6851      	ldr	r1, [r2, #4]
 80100b8:	466d      	mov	r5, sp
 80100ba:	c503      	stmia	r5!, {r0, r1}
 80100bc:	6818      	ldr	r0, [r3, #0]
 80100be:	6859      	ldr	r1, [r3, #4]
 80100c0:	4616      	mov	r6, r2
 80100c2:	c503      	stmia	r5!, {r0, r1}
 80100c4:	4668      	mov	r0, sp
 80100c6:	f7fb fce3 	bl	800ba90 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80100ca:	4631      	mov	r1, r6
 80100cc:	a802      	add	r0, sp, #8
 80100ce:	f7fb fd07 	bl	800bae0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80100d2:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 80100d6:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 80100da:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 80100de:	4d28      	ldr	r5, [pc, #160]	@ (8010180 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
 80100e0:	4e28      	ldr	r6, [pc, #160]	@ (8010184 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
 80100e2:	6828      	ldr	r0, [r5, #0]
 80100e4:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 80100e8:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 80100ec:	fb11 2103 	smlabb	r1, r1, r3, r2
 80100f0:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 80100f4:	f8bd 1000 	ldrh.w	r1, [sp]
 80100f8:	440a      	add	r2, r1
 80100fa:	f8ad 2008 	strh.w	r2, [sp, #8]
 80100fe:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8010102:	4413      	add	r3, r2
 8010104:	f8ad 300a 	strh.w	r3, [sp, #10]
 8010108:	6803      	ldr	r3, [r0, #0]
 801010a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801010c:	4798      	blx	r3
 801010e:	8833      	ldrh	r3, [r6, #0]
 8010110:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8010114:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8010118:	f8df e06c 	ldr.w	lr, [pc, #108]	@ 8010188 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
 801011c:	fb03 1202 	mla	r2, r3, r2, r1
 8010120:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8010124:	fb08 f303 	mul.w	r3, r8, r3
 8010128:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801012c:	ea4f 0c47 	mov.w	ip, r7, lsl #1
 8010130:	4298      	cmp	r0, r3
 8010132:	d21d      	bcs.n	8010170 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
 8010134:	eb00 080c 	add.w	r8, r0, ip
 8010138:	4540      	cmp	r0, r8
 801013a:	d20f      	bcs.n	801015c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
 801013c:	f854 1b04 	ldr.w	r1, [r4], #4
 8010140:	ea4f 1951 	mov.w	r9, r1, lsr #5
 8010144:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
 8010148:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 801014c:	ea42 0209 	orr.w	r2, r2, r9
 8010150:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8010154:	430a      	orrs	r2, r1
 8010156:	f820 2b02 	strh.w	r2, [r0], #2
 801015a:	e7ed      	b.n	8010138 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
 801015c:	8832      	ldrh	r2, [r6, #0]
 801015e:	1bd2      	subs	r2, r2, r7
 8010160:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8010164:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8010168:	1bd2      	subs	r2, r2, r7
 801016a:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 801016e:	e7df      	b.n	8010130 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
 8010170:	6828      	ldr	r0, [r5, #0]
 8010172:	6803      	ldr	r3, [r0, #0]
 8010174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010176:	4798      	blx	r3
 8010178:	b005      	add	sp, #20
 801017a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801017e:	bf00      	nop
 8010180:	20012638 	.word	0x20012638
 8010184:	20012632 	.word	0x20012632
 8010188:	fffff800 	.word	0xfffff800

0801018c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
 801018c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010190:	460e      	mov	r6, r1
 8010192:	b08e      	sub	sp, #56	@ 0x38
 8010194:	4604      	mov	r4, r0
 8010196:	6808      	ldr	r0, [r1, #0]
 8010198:	6849      	ldr	r1, [r1, #4]
 801019a:	f8df 81d8 	ldr.w	r8, [pc, #472]	@ 8010374 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
 801019e:	f8df 91d8 	ldr.w	r9, [pc, #472]	@ 8010378 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
 80101a2:	461d      	mov	r5, r3
 80101a4:	ab0a      	add	r3, sp, #40	@ 0x28
 80101a6:	c303      	stmia	r3!, {r0, r1}
 80101a8:	6810      	ldr	r0, [r2, #0]
 80101aa:	6851      	ldr	r1, [r2, #4]
 80101ac:	ab0c      	add	r3, sp, #48	@ 0x30
 80101ae:	c303      	stmia	r3!, {r0, r1}
 80101b0:	a80a      	add	r0, sp, #40	@ 0x28
 80101b2:	f7fb fc6d 	bl	800ba90 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80101b6:	4631      	mov	r1, r6
 80101b8:	a80c      	add	r0, sp, #48	@ 0x30
 80101ba:	f7fb fc91 	bl	800bae0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80101be:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 80101c2:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 80101c6:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 80101ca:	f8d8 0000 	ldr.w	r0, [r8]
 80101ce:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	@ 0x34
 80101d2:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	@ 0x36
 80101d6:	fb11 2103 	smlabb	r1, r1, r3, r2
 80101da:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80101de:	440c      	add	r4, r1
 80101e0:	f8bd 1028 	ldrh.w	r1, [sp, #40]	@ 0x28
 80101e4:	440a      	add	r2, r1
 80101e6:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 80101ea:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 80101ee:	4413      	add	r3, r2
 80101f0:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 80101f4:	6803      	ldr	r3, [r0, #0]
 80101f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80101f8:	4798      	blx	r3
 80101fa:	2dff      	cmp	r5, #255	@ 0xff
 80101fc:	d124      	bne.n	8010248 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
 80101fe:	f010 0f01 	tst.w	r0, #1
 8010202:	f8d8 0000 	ldr.w	r0, [r8]
 8010206:	d022      	beq.n	801024e <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
 8010208:	2100      	movs	r1, #0
 801020a:	f8d0 c000 	ldr.w	ip, [r0]
 801020e:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 8010212:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 8010216:	e9cd 1107 	strd	r1, r1, [sp, #28]
 801021a:	f04f 0e01 	mov.w	lr, #1
 801021e:	f8cd e018 	str.w	lr, [sp, #24]
 8010222:	f8b9 e000 	ldrh.w	lr, [r9]
 8010226:	9503      	str	r5, [sp, #12]
 8010228:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 801022c:	b2b6      	uxth	r6, r6
 801022e:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 8010232:	9102      	str	r1, [sp, #8]
 8010234:	b2bf      	uxth	r7, r7
 8010236:	9601      	str	r6, [sp, #4]
 8010238:	9700      	str	r7, [sp, #0]
 801023a:	f8dc 5044 	ldr.w	r5, [ip, #68]	@ 0x44
 801023e:	4621      	mov	r1, r4
 8010240:	47a8      	blx	r5
 8010242:	b00e      	add	sp, #56	@ 0x38
 8010244:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010248:	f010 0f04 	tst.w	r0, #4
 801024c:	e7d9      	b.n	8010202 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
 801024e:	6803      	ldr	r3, [r0, #0]
 8010250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010252:	4798      	blx	r3
 8010254:	f8b9 3000 	ldrh.w	r3, [r9]
 8010258:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801025c:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 8010260:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	@ 0x2c
 8010264:	fb03 1202 	mla	r2, r3, r2, r1
 8010268:	ebac 0c07 	sub.w	ip, ip, r7
 801026c:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8010270:	435e      	muls	r6, r3
 8010272:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 8010276:	2dff      	cmp	r5, #255	@ 0xff
 8010278:	eba3 0707 	sub.w	r7, r3, r7
 801027c:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8010280:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8010284:	ea4f 0747 	mov.w	r7, r7, lsl #1
 8010288:	d049      	beq.n	801031e <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
 801028a:	43eb      	mvns	r3, r5
 801028c:	fa1f f985 	uxth.w	r9, r5
 8010290:	b2db      	uxtb	r3, r3
 8010292:	42b0      	cmp	r0, r6
 8010294:	d266      	bcs.n	8010364 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 8010296:	eb00 0a0e 	add.w	sl, r0, lr
 801029a:	4550      	cmp	r0, sl
 801029c:	4621      	mov	r1, r4
 801029e:	f104 0403 	add.w	r4, r4, #3
 80102a2:	d25b      	bcs.n	801035c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 80102a4:	8802      	ldrh	r2, [r0, #0]
 80102a6:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 80102aa:	ea4f 2822 	mov.w	r8, r2, asr #8
 80102ae:	f008 08f8 	and.w	r8, r8, #248	@ 0xf8
 80102b2:	fb11 f109 	smulbb	r1, r1, r9
 80102b6:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 80102ba:	10d5      	asrs	r5, r2, #3
 80102bc:	fb08 1803 	mla	r8, r8, r3, r1
 80102c0:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 80102c4:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 80102c8:	fb11 f109 	smulbb	r1, r1, r9
 80102cc:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 80102d0:	fb05 1503 	mla	r5, r5, r3, r1
 80102d4:	00d2      	lsls	r2, r2, #3
 80102d6:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 80102da:	b2d2      	uxtb	r2, r2
 80102dc:	fb11 f109 	smulbb	r1, r1, r9
 80102e0:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 80102e4:	fa1f f888 	uxth.w	r8, r8
 80102e8:	fb02 1203 	mla	r2, r2, r3, r1
 80102ec:	b292      	uxth	r2, r2
 80102ee:	f108 0101 	add.w	r1, r8, #1
 80102f2:	b2ad      	uxth	r5, r5
 80102f4:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 80102f8:	1c51      	adds	r1, r2, #1
 80102fa:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80102fe:	1c69      	adds	r1, r5, #1
 8010300:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8010304:	f408 4878 	and.w	r8, r8, #63488	@ 0xf800
 8010308:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801030c:	096d      	lsrs	r5, r5, #5
 801030e:	ea42 0208 	orr.w	r2, r2, r8
 8010312:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8010316:	432a      	orrs	r2, r5
 8010318:	f820 2b02 	strh.w	r2, [r0], #2
 801031c:	e7bd      	b.n	801029a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
 801031e:	4a14      	ldr	r2, [pc, #80]	@ (8010370 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
 8010320:	42b0      	cmp	r0, r6
 8010322:	d21f      	bcs.n	8010364 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 8010324:	eb00 050e 	add.w	r5, r0, lr
 8010328:	42a8      	cmp	r0, r5
 801032a:	4621      	mov	r1, r4
 801032c:	f104 0403 	add.w	r4, r4, #3
 8010330:	d210      	bcs.n	8010354 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
 8010332:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 8010336:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801033a:	00db      	lsls	r3, r3, #3
 801033c:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 8010340:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8010344:	430b      	orrs	r3, r1
 8010346:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801034a:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 801034e:	f820 3b02 	strh.w	r3, [r0], #2
 8010352:	e7e9      	b.n	8010328 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
 8010354:	4438      	add	r0, r7
 8010356:	eb01 040c 	add.w	r4, r1, ip
 801035a:	e7e1      	b.n	8010320 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
 801035c:	4438      	add	r0, r7
 801035e:	eb01 040c 	add.w	r4, r1, ip
 8010362:	e796      	b.n	8010292 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
 8010364:	4b03      	ldr	r3, [pc, #12]	@ (8010374 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
 8010366:	6818      	ldr	r0, [r3, #0]
 8010368:	6803      	ldr	r3, [r0, #0]
 801036a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801036c:	4798      	blx	r3
 801036e:	e768      	b.n	8010242 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
 8010370:	fffff800 	.word	0xfffff800
 8010374:	20012638 	.word	0x20012638
 8010378:	20012632 	.word	0x20012632

0801037c <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801037c:	b4f0      	push	{r4, r5, r6, r7}
 801037e:	4616      	mov	r6, r2
 8010380:	2e01      	cmp	r6, #1
 8010382:	461c      	mov	r4, r3
 8010384:	460d      	mov	r5, r1
 8010386:	9a04      	ldr	r2, [sp, #16]
 8010388:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801038c:	f89d 7018 	ldrb.w	r7, [sp, #24]
 8010390:	d012      	beq.n	80103b8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3c>
 8010392:	d303      	bcc.n	801039c <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x20>
 8010394:	2e02      	cmp	r6, #2
 8010396:	d00a      	beq.n	80103ae <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x32>
 8010398:	bcf0      	pop	{r4, r5, r6, r7}
 801039a:	4770      	bx	lr
 801039c:	6805      	ldr	r5, [r0, #0]
 801039e:	e9cd 3704 	strd	r3, r7, [sp, #16]
 80103a2:	68ed      	ldr	r5, [r5, #12]
 80103a4:	4613      	mov	r3, r2
 80103a6:	46ac      	mov	ip, r5
 80103a8:	4622      	mov	r2, r4
 80103aa:	bcf0      	pop	{r4, r5, r6, r7}
 80103ac:	4760      	bx	ip
 80103ae:	4621      	mov	r1, r4
 80103b0:	4628      	mov	r0, r5
 80103b2:	bcf0      	pop	{r4, r5, r6, r7}
 80103b4:	f7ff bd94 	b.w	800fee0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 80103b8:	4621      	mov	r1, r4
 80103ba:	4628      	mov	r0, r5
 80103bc:	bcf0      	pop	{r4, r5, r6, r7}
 80103be:	f7ff bee5 	b.w	801018c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
	...

080103c4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 80103c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103c8:	4681      	mov	r9, r0
 80103ca:	b093      	sub	sp, #76	@ 0x4c
 80103cc:	6810      	ldr	r0, [r2, #0]
 80103ce:	f89d a070 	ldrb.w	sl, [sp, #112]	@ 0x70
 80103d2:	4f6d      	ldr	r7, [pc, #436]	@ (8010588 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 80103d4:	4688      	mov	r8, r1
 80103d6:	6851      	ldr	r1, [r2, #4]
 80103d8:	ac0e      	add	r4, sp, #56	@ 0x38
 80103da:	c403      	stmia	r4!, {r0, r1}
 80103dc:	6818      	ldr	r0, [r3, #0]
 80103de:	6859      	ldr	r1, [r3, #4]
 80103e0:	ac10      	add	r4, sp, #64	@ 0x40
 80103e2:	4616      	mov	r6, r2
 80103e4:	c403      	stmia	r4!, {r0, r1}
 80103e6:	a80e      	add	r0, sp, #56	@ 0x38
 80103e8:	f7fb fb52 	bl	800ba90 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80103ec:	4631      	mov	r1, r6
 80103ee:	a810      	add	r0, sp, #64	@ 0x40
 80103f0:	f7fb fb76 	bl	800bae0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80103f4:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	@ 0x40
 80103f8:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	@ 0x42
 80103fc:	f8bd 103c 	ldrh.w	r1, [sp, #60]	@ 0x3c
 8010400:	4e62      	ldr	r6, [pc, #392]	@ (801058c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 8010402:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	@ 0x44
 8010406:	6830      	ldr	r0, [r6, #0]
 8010408:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	@ 0x46
 801040c:	fb11 2103 	smlabb	r1, r1, r3, r2
 8010410:	4489      	add	r9, r1
 8010412:	f8bd 1038 	ldrh.w	r1, [sp, #56]	@ 0x38
 8010416:	440a      	add	r2, r1
 8010418:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 801041c:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 8010420:	4413      	add	r3, r2
 8010422:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 8010426:	6803      	ldr	r3, [r0, #0]
 8010428:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801042a:	4798      	blx	r3
 801042c:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8010430:	6830      	ldr	r0, [r6, #0]
 8010432:	d01d      	beq.n	8010470 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 8010434:	2200      	movs	r2, #0
 8010436:	6801      	ldr	r1, [r0, #0]
 8010438:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 801043c:	e9cd 2208 	strd	r2, r2, [sp, #32]
 8010440:	220b      	movs	r2, #11
 8010442:	9207      	str	r2, [sp, #28]
 8010444:	883a      	ldrh	r2, [r7, #0]
 8010446:	9206      	str	r2, [sp, #24]
 8010448:	2201      	movs	r2, #1
 801044a:	e9cd a204 	strd	sl, r2, [sp, #16]
 801044e:	f8bd 203c 	ldrh.w	r2, [sp, #60]	@ 0x3c
 8010452:	9203      	str	r2, [sp, #12]
 8010454:	b2a4      	uxth	r4, r4
 8010456:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 801045a:	9200      	str	r2, [sp, #0]
 801045c:	b2ad      	uxth	r5, r5
 801045e:	9502      	str	r5, [sp, #8]
 8010460:	9401      	str	r4, [sp, #4]
 8010462:	6c0c      	ldr	r4, [r1, #64]	@ 0x40
 8010464:	4642      	mov	r2, r8
 8010466:	4649      	mov	r1, r9
 8010468:	47a0      	blx	r4
 801046a:	b013      	add	sp, #76	@ 0x4c
 801046c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010470:	6803      	ldr	r3, [r0, #0]
 8010472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010474:	4798      	blx	r3
 8010476:	883b      	ldrh	r3, [r7, #0]
 8010478:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	@ 0x42
 801047c:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	@ 0x40
 8010480:	fb03 1202 	mla	r2, r3, r2, r1
 8010484:	435d      	muls	r5, r3
 8010486:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801048a:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 801048e:	920c      	str	r2, [sp, #48]	@ 0x30
 8010490:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 8010494:	1b12      	subs	r2, r2, r4
 8010496:	920d      	str	r2, [sp, #52]	@ 0x34
 8010498:	0062      	lsls	r2, r4, #1
 801049a:	1b1c      	subs	r4, r3, r4
 801049c:	0063      	lsls	r3, r4, #1
 801049e:	920a      	str	r2, [sp, #40]	@ 0x28
 80104a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80104a2:	f04f 0e04 	mov.w	lr, #4
 80104a6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80104a8:	4298      	cmp	r0, r3
 80104aa:	d266      	bcs.n	801057a <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b6>
 80104ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80104ae:	eb00 0b03 	add.w	fp, r0, r3
 80104b2:	4558      	cmp	r0, fp
 80104b4:	d25c      	bcs.n	8010570 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 80104b6:	f819 3b01 	ldrb.w	r3, [r9], #1
 80104ba:	fb1e e303 	smlabb	r3, lr, r3, lr
 80104be:	f858 2003 	ldr.w	r2, [r8, r3]
 80104c2:	0e11      	lsrs	r1, r2, #24
 80104c4:	d012      	beq.n	80104ec <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 80104c6:	29ff      	cmp	r1, #255	@ 0xff
 80104c8:	ea4f 2712 	mov.w	r7, r2, lsr #8
 80104cc:	d110      	bne.n	80104f0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 80104ce:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 80104d2:	d10d      	bne.n	80104f0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 80104d4:	0953      	lsrs	r3, r2, #5
 80104d6:	f427 67ff 	bic.w	r7, r7, #2040	@ 0x7f8
 80104da:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80104de:	f027 0707 	bic.w	r7, r7, #7
 80104e2:	431f      	orrs	r7, r3
 80104e4:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80104e8:	433a      	orrs	r2, r7
 80104ea:	8002      	strh	r2, [r0, #0]
 80104ec:	3002      	adds	r0, #2
 80104ee:	e7e0      	b.n	80104b2 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
 80104f0:	fb0a f101 	mul.w	r1, sl, r1
 80104f4:	8806      	ldrh	r6, [r0, #0]
 80104f6:	1c4b      	adds	r3, r1, #1
 80104f8:	eb03 2321 	add.w	r3, r3, r1, asr #8
 80104fc:	1235      	asrs	r5, r6, #8
 80104fe:	10f4      	asrs	r4, r6, #3
 8010500:	121b      	asrs	r3, r3, #8
 8010502:	00f6      	lsls	r6, r6, #3
 8010504:	b299      	uxth	r1, r3
 8010506:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 801050a:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 801050e:	b2f6      	uxtb	r6, r6
 8010510:	43db      	mvns	r3, r3
 8010512:	b2d2      	uxtb	r2, r2
 8010514:	b2db      	uxtb	r3, r3
 8010516:	fb1c fc01 	smulbb	ip, ip, r1
 801051a:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 801051e:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8010522:	fb12 f201 	smulbb	r2, r2, r1
 8010526:	fb05 c503 	mla	r5, r5, r3, ip
 801052a:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 801052e:	b2ff      	uxtb	r7, r7
 8010530:	fb06 2203 	mla	r2, r6, r3, r2
 8010534:	b2ad      	uxth	r5, r5
 8010536:	fb17 f701 	smulbb	r7, r7, r1
 801053a:	b292      	uxth	r2, r2
 801053c:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 8010540:	fb04 7403 	mla	r4, r4, r3, r7
 8010544:	f105 0c01 	add.w	ip, r5, #1
 8010548:	1c57      	adds	r7, r2, #1
 801054a:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801054e:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8010552:	b2a4      	uxth	r4, r4
 8010554:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8010558:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 801055c:	433d      	orrs	r5, r7
 801055e:	1c67      	adds	r7, r4, #1
 8010560:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 8010564:	0964      	lsrs	r4, r4, #5
 8010566:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 801056a:	4325      	orrs	r5, r4
 801056c:	8005      	strh	r5, [r0, #0]
 801056e:	e7bd      	b.n	80104ec <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 8010570:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010572:	4418      	add	r0, r3
 8010574:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010576:	4499      	add	r9, r3
 8010578:	e795      	b.n	80104a6 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xe2>
 801057a:	4b04      	ldr	r3, [pc, #16]	@ (801058c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 801057c:	6818      	ldr	r0, [r3, #0]
 801057e:	6803      	ldr	r3, [r0, #0]
 8010580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010582:	4798      	blx	r3
 8010584:	e771      	b.n	801046a <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xa6>
 8010586:	bf00      	nop
 8010588:	20012632 	.word	0x20012632
 801058c:	20012638 	.word	0x20012638

08010590 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 8010590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010594:	b087      	sub	sp, #28
 8010596:	4680      	mov	r8, r0
 8010598:	f89d 6040 	ldrb.w	r6, [sp, #64]	@ 0x40
 801059c:	460d      	mov	r5, r1
 801059e:	4614      	mov	r4, r2
 80105a0:	2e00      	cmp	r6, #0
 80105a2:	f000 80b9 	beq.w	8010718 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x188>
 80105a6:	6810      	ldr	r0, [r2, #0]
 80105a8:	6851      	ldr	r1, [r2, #4]
 80105aa:	af02      	add	r7, sp, #8
 80105ac:	c703      	stmia	r7!, {r0, r1}
 80105ae:	6818      	ldr	r0, [r3, #0]
 80105b0:	6859      	ldr	r1, [r3, #4]
 80105b2:	af04      	add	r7, sp, #16
 80105b4:	c703      	stmia	r7!, {r0, r1}
 80105b6:	a802      	add	r0, sp, #8
 80105b8:	f7fb fa6a 	bl	800ba90 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80105bc:	4621      	mov	r1, r4
 80105be:	a804      	add	r0, sp, #16
 80105c0:	f7fb fa8e 	bl	800bae0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80105c4:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80105c8:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80105cc:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 80105d0:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 80105d4:	fb14 2103 	smlabb	r1, r4, r3, r2
 80105d8:	eb08 0401 	add.w	r4, r8, r1
 80105dc:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 80105e0:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 80105e4:	440a      	add	r2, r1
 80105e6:	f8ad 2010 	strh.w	r2, [sp, #16]
 80105ea:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80105ee:	4413      	add	r3, r2
 80105f0:	f8ad 3012 	strh.w	r3, [sp, #18]
 80105f4:	4b4a      	ldr	r3, [pc, #296]	@ (8010720 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 80105f6:	6818      	ldr	r0, [r3, #0]
 80105f8:	6803      	ldr	r3, [r0, #0]
 80105fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80105fc:	4798      	blx	r3
 80105fe:	4b49      	ldr	r3, [pc, #292]	@ (8010724 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x194>)
 8010600:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 8010604:	881a      	ldrh	r2, [r3, #0]
 8010606:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 801060a:	2eff      	cmp	r6, #255	@ 0xff
 801060c:	fb02 c101 	mla	r1, r2, r1, ip
 8010610:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8010614:	fb02 f207 	mul.w	r2, r2, r7
 8010618:	f105 0104 	add.w	r1, r5, #4
 801061c:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 8010620:	461d      	mov	r5, r3
 8010622:	d05a      	beq.n	80106da <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14a>
 8010624:	f1c6 0eff 	rsb	lr, r6, #255	@ 0xff
 8010628:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801062c:	b2b6      	uxth	r6, r6
 801062e:	fa1f fe8e 	uxth.w	lr, lr
 8010632:	9301      	str	r3, [sp, #4]
 8010634:	4282      	cmp	r2, r0
 8010636:	d96a      	bls.n	801070e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 8010638:	eb00 0b0a 	add.w	fp, r0, sl
 801063c:	4583      	cmp	fp, r0
 801063e:	d940      	bls.n	80106c2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x132>
 8010640:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010644:	8805      	ldrh	r5, [r0, #0]
 8010646:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801064a:	122f      	asrs	r7, r5, #8
 801064c:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8010650:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 8010654:	fb17 f70e 	smulbb	r7, r7, lr
 8010658:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801065c:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8010660:	00ed      	lsls	r5, r5, #3
 8010662:	fb0c 7c06 	mla	ip, ip, r6, r7
 8010666:	f009 09fc 	and.w	r9, r9, #252	@ 0xfc
 801066a:	10df      	asrs	r7, r3, #3
 801066c:	b2ed      	uxtb	r5, r5
 801066e:	00db      	lsls	r3, r3, #3
 8010670:	fa1f fc8c 	uxth.w	ip, ip
 8010674:	fb19 f90e 	smulbb	r9, r9, lr
 8010678:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801067c:	b2db      	uxtb	r3, r3
 801067e:	fb15 f50e 	smulbb	r5, r5, lr
 8010682:	fb07 9706 	mla	r7, r7, r6, r9
 8010686:	fb03 5306 	mla	r3, r3, r6, r5
 801068a:	f10c 0901 	add.w	r9, ip, #1
 801068e:	b29b      	uxth	r3, r3
 8010690:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 8010694:	f40c 4978 	and.w	r9, ip, #63488	@ 0xf800
 8010698:	f103 0c01 	add.w	ip, r3, #1
 801069c:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 80106a0:	b2bf      	uxth	r7, r7
 80106a2:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 80106a6:	ea4c 0c09 	orr.w	ip, ip, r9
 80106aa:	f107 0901 	add.w	r9, r7, #1
 80106ae:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 80106b2:	097f      	lsrs	r7, r7, #5
 80106b4:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 80106b8:	ea4c 0c07 	orr.w	ip, ip, r7
 80106bc:	f820 cb02 	strh.w	ip, [r0], #2
 80106c0:	e7bc      	b.n	801063c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xac>
 80106c2:	9b01      	ldr	r3, [sp, #4]
 80106c4:	881b      	ldrh	r3, [r3, #0]
 80106c6:	eba3 0308 	sub.w	r3, r3, r8
 80106ca:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80106ce:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80106d2:	eba3 0308 	sub.w	r3, r3, r8
 80106d6:	441c      	add	r4, r3
 80106d8:	e7ac      	b.n	8010634 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xa4>
 80106da:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80106de:	4282      	cmp	r2, r0
 80106e0:	d915      	bls.n	801070e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 80106e2:	eb00 060a 	add.w	r6, r0, sl
 80106e6:	4286      	cmp	r6, r0
 80106e8:	d906      	bls.n	80106f8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x168>
 80106ea:	f814 3b01 	ldrb.w	r3, [r4], #1
 80106ee:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80106f2:	f820 3b02 	strh.w	r3, [r0], #2
 80106f6:	e7f6      	b.n	80106e6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x156>
 80106f8:	882b      	ldrh	r3, [r5, #0]
 80106fa:	eba3 0308 	sub.w	r3, r3, r8
 80106fe:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8010702:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8010706:	eba3 0308 	sub.w	r3, r3, r8
 801070a:	441c      	add	r4, r3
 801070c:	e7e7      	b.n	80106de <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14e>
 801070e:	4b04      	ldr	r3, [pc, #16]	@ (8010720 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 8010710:	6818      	ldr	r0, [r3, #0]
 8010712:	6803      	ldr	r3, [r0, #0]
 8010714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010716:	4798      	blx	r3
 8010718:	b007      	add	sp, #28
 801071a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801071e:	bf00      	nop
 8010720:	20012638 	.word	0x20012638
 8010724:	20012632 	.word	0x20012632

08010728 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8010728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801072c:	b091      	sub	sp, #68	@ 0x44
 801072e:	4680      	mov	r8, r0
 8010730:	f89d 5068 	ldrb.w	r5, [sp, #104]	@ 0x68
 8010734:	460f      	mov	r7, r1
 8010736:	4614      	mov	r4, r2
 8010738:	2d00      	cmp	r5, #0
 801073a:	d051      	beq.n	80107e0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 801073c:	6810      	ldr	r0, [r2, #0]
 801073e:	6851      	ldr	r1, [r2, #4]
 8010740:	f8df 9200 	ldr.w	r9, [pc, #512]	@ 8010944 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
 8010744:	ae0c      	add	r6, sp, #48	@ 0x30
 8010746:	c603      	stmia	r6!, {r0, r1}
 8010748:	6818      	ldr	r0, [r3, #0]
 801074a:	6859      	ldr	r1, [r3, #4]
 801074c:	ae0e      	add	r6, sp, #56	@ 0x38
 801074e:	c603      	stmia	r6!, {r0, r1}
 8010750:	a80c      	add	r0, sp, #48	@ 0x30
 8010752:	f7fb f99d 	bl	800ba90 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8010756:	4621      	mov	r1, r4
 8010758:	a80e      	add	r0, sp, #56	@ 0x38
 801075a:	f7fb f9c1 	bl	800bae0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801075e:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 8010762:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 8010766:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 801076a:	f8d9 0000 	ldr.w	r0, [r9]
 801076e:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	@ 0x3c
 8010772:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	@ 0x3e
 8010776:	fb11 2103 	smlabb	r1, r1, r3, r2
 801077a:	eb08 0401 	add.w	r4, r8, r1
 801077e:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 8010782:	f8df 81c4 	ldr.w	r8, [pc, #452]	@ 8010948 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x220>
 8010786:	440a      	add	r2, r1
 8010788:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 801078c:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 8010790:	4413      	add	r3, r2
 8010792:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 8010796:	6803      	ldr	r3, [r0, #0]
 8010798:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801079a:	4798      	blx	r3
 801079c:	f010 0f80 	tst.w	r0, #128	@ 0x80
 80107a0:	f8d9 0000 	ldr.w	r0, [r9]
 80107a4:	d01f      	beq.n	80107e6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xbe>
 80107a6:	2200      	movs	r2, #0
 80107a8:	6801      	ldr	r1, [r0, #0]
 80107aa:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 80107ae:	e9cd 2208 	strd	r2, r2, [sp, #32]
 80107b2:	220b      	movs	r2, #11
 80107b4:	9207      	str	r2, [sp, #28]
 80107b6:	f8b8 2000 	ldrh.w	r2, [r8]
 80107ba:	9206      	str	r2, [sp, #24]
 80107bc:	2201      	movs	r2, #1
 80107be:	e9cd 5204 	strd	r5, r2, [sp, #16]
 80107c2:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 80107c6:	9203      	str	r2, [sp, #12]
 80107c8:	fa1f f28a 	uxth.w	r2, sl
 80107cc:	9202      	str	r2, [sp, #8]
 80107ce:	b2b6      	uxth	r6, r6
 80107d0:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 80107d4:	9200      	str	r2, [sp, #0]
 80107d6:	9601      	str	r6, [sp, #4]
 80107d8:	6c0d      	ldr	r5, [r1, #64]	@ 0x40
 80107da:	463a      	mov	r2, r7
 80107dc:	4621      	mov	r1, r4
 80107de:	47a8      	blx	r5
 80107e0:	b011      	add	sp, #68	@ 0x44
 80107e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107e6:	6803      	ldr	r3, [r0, #0]
 80107e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80107ea:	4798      	blx	r3
 80107ec:	f8b8 2000 	ldrh.w	r2, [r8]
 80107f0:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 80107f4:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	@ 0x38
 80107f8:	2dff      	cmp	r5, #255	@ 0xff
 80107fa:	fb02 1303 	mla	r3, r2, r3, r1
 80107fe:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8010802:	ea4f 0946 	mov.w	r9, r6, lsl #1
 8010806:	fb0a fa02 	mul.w	sl, sl, r2
 801080a:	d062      	beq.n	80108d2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 801080c:	ea6f 0c05 	mvn.w	ip, r5
 8010810:	eb00 034a 	add.w	r3, r0, sl, lsl #1
 8010814:	930a      	str	r3, [sp, #40]	@ 0x28
 8010816:	b2ad      	uxth	r5, r5
 8010818:	fa5f fc8c 	uxtb.w	ip, ip
 801081c:	f8cd 802c 	str.w	r8, [sp, #44]	@ 0x2c
 8010820:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010822:	4298      	cmp	r0, r3
 8010824:	f080 8085 	bcs.w	8010932 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 8010828:	eb00 0b09 	add.w	fp, r0, r9
 801082c:	4558      	cmp	r0, fp
 801082e:	d246      	bcs.n	80108be <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x196>
 8010830:	f814 eb01 	ldrb.w	lr, [r4], #1
 8010834:	2303      	movs	r3, #3
 8010836:	2204      	movs	r2, #4
 8010838:	fb13 2e0e 	smlabb	lr, r3, lr, r2
 801083c:	eb07 0a0e 	add.w	sl, r7, lr
 8010840:	8803      	ldrh	r3, [r0, #0]
 8010842:	f89a 8002 	ldrb.w	r8, [sl, #2]
 8010846:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801084a:	1219      	asrs	r1, r3, #8
 801084c:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 8010850:	fb18 f805 	smulbb	r8, r8, r5
 8010854:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 8010858:	10da      	asrs	r2, r3, #3
 801085a:	fb01 810c 	mla	r1, r1, ip, r8
 801085e:	00db      	lsls	r3, r3, #3
 8010860:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8010864:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8010868:	b2db      	uxtb	r3, r3
 801086a:	fb18 f805 	smulbb	r8, r8, r5
 801086e:	fb1e fe05 	smulbb	lr, lr, r5
 8010872:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 8010876:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 801087a:	b289      	uxth	r1, r1
 801087c:	fb02 820c 	mla	r2, r2, ip, r8
 8010880:	fb03 e30c 	mla	r3, r3, ip, lr
 8010884:	b292      	uxth	r2, r2
 8010886:	b29b      	uxth	r3, r3
 8010888:	f101 0801 	add.w	r8, r1, #1
 801088c:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8010890:	f103 0e01 	add.w	lr, r3, #1
 8010894:	f102 0801 	add.w	r8, r2, #1
 8010898:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 801089c:	eb08 2812 	add.w	r8, r8, r2, lsr #8
 80108a0:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 80108a4:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 80108a8:	ea4f 1858 	mov.w	r8, r8, lsr #5
 80108ac:	ea4e 0101 	orr.w	r1, lr, r1
 80108b0:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 80108b4:	ea41 0108 	orr.w	r1, r1, r8
 80108b8:	f820 1b02 	strh.w	r1, [r0], #2
 80108bc:	e7b6      	b.n	801082c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x104>
 80108be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80108c0:	881b      	ldrh	r3, [r3, #0]
 80108c2:	1b9b      	subs	r3, r3, r6
 80108c4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80108c8:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 80108cc:	1b9b      	subs	r3, r3, r6
 80108ce:	441c      	add	r4, r3
 80108d0:	e7a6      	b.n	8010820 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xf8>
 80108d2:	491b      	ldr	r1, [pc, #108]	@ (8010940 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
 80108d4:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 80108d8:	2203      	movs	r2, #3
 80108da:	2504      	movs	r5, #4
 80108dc:	4550      	cmp	r0, sl
 80108de:	d228      	bcs.n	8010932 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 80108e0:	eb00 0c09 	add.w	ip, r0, r9
 80108e4:	4560      	cmp	r0, ip
 80108e6:	4623      	mov	r3, r4
 80108e8:	d219      	bcs.n	801091e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f6>
 80108ea:	f893 e000 	ldrb.w	lr, [r3]
 80108ee:	fb12 5e0e 	smlabb	lr, r2, lr, r5
 80108f2:	eb07 0b0e 	add.w	fp, r7, lr
 80108f6:	f817 e00e 	ldrb.w	lr, [r7, lr]
 80108fa:	f89b 3002 	ldrb.w	r3, [fp, #2]
 80108fe:	f89b b001 	ldrb.w	fp, [fp, #1]
 8010902:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8010906:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 801090a:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 801090e:	ea43 030b 	orr.w	r3, r3, fp
 8010912:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
 8010916:	3401      	adds	r4, #1
 8010918:	f820 3b02 	strh.w	r3, [r0], #2
 801091c:	e7e2      	b.n	80108e4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>
 801091e:	f8b8 3000 	ldrh.w	r3, [r8]
 8010922:	1b9b      	subs	r3, r3, r6
 8010924:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8010928:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 801092c:	1b9b      	subs	r3, r3, r6
 801092e:	441c      	add	r4, r3
 8010930:	e7d4      	b.n	80108dc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 8010932:	4b04      	ldr	r3, [pc, #16]	@ (8010944 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
 8010934:	6818      	ldr	r0, [r3, #0]
 8010936:	6803      	ldr	r3, [r0, #0]
 8010938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801093a:	4798      	blx	r3
 801093c:	e750      	b.n	80107e0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 801093e:	bf00      	nop
 8010940:	fffff800 	.word	0xfffff800
 8010944:	20012638 	.word	0x20012638
 8010948:	20012632 	.word	0x20012632

0801094c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801094c:	b4f0      	push	{r4, r5, r6, r7}
 801094e:	460c      	mov	r4, r1
 8010950:	4611      	mov	r1, r2
 8010952:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8010956:	780f      	ldrb	r7, [r1, #0]
 8010958:	784e      	ldrb	r6, [r1, #1]
 801095a:	2f01      	cmp	r7, #1
 801095c:	461a      	mov	r2, r3
 801095e:	9b04      	ldr	r3, [sp, #16]
 8010960:	d038      	beq.n	80109d4 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x88>
 8010962:	d31f      	bcc.n	80109a4 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x58>
 8010964:	2f02      	cmp	r7, #2
 8010966:	d14d      	bne.n	8010a04 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 8010968:	2e03      	cmp	r6, #3
 801096a:	d84b      	bhi.n	8010a04 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 801096c:	e8df f006 	tbb	[pc, r6]
 8010970:	17140702 	.word	0x17140702
 8010974:	9504      	str	r5, [sp, #16]
 8010976:	4620      	mov	r0, r4
 8010978:	bcf0      	pop	{r4, r5, r6, r7}
 801097a:	f7ff be09 	b.w	8010590 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 801097e:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 8010980:	2800      	cmp	r0, #0
 8010982:	d03f      	beq.n	8010a04 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 8010984:	6806      	ldr	r6, [r0, #0]
 8010986:	e9cd 3504 	strd	r3, r5, [sp, #16]
 801098a:	68b5      	ldr	r5, [r6, #8]
 801098c:	4613      	mov	r3, r2
 801098e:	46ac      	mov	ip, r5
 8010990:	460a      	mov	r2, r1
 8010992:	4621      	mov	r1, r4
 8010994:	bcf0      	pop	{r4, r5, r6, r7}
 8010996:	4760      	bx	ip
 8010998:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 801099c:	e7f0      	b.n	8010980 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 801099e:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 80109a2:	e7ed      	b.n	8010980 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 80109a4:	2e03      	cmp	r6, #3
 80109a6:	d82d      	bhi.n	8010a04 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 80109a8:	e8df f006 	tbb	[pc, r6]
 80109ac:	110e0702 	.word	0x110e0702
 80109b0:	9504      	str	r5, [sp, #16]
 80109b2:	4620      	mov	r0, r4
 80109b4:	bcf0      	pop	{r4, r5, r6, r7}
 80109b6:	f7ff bd05 	b.w	80103c4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 80109ba:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 80109bc:	b310      	cbz	r0, 8010a04 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 80109be:	6806      	ldr	r6, [r0, #0]
 80109c0:	e9cd 3504 	strd	r3, r5, [sp, #16]
 80109c4:	68f5      	ldr	r5, [r6, #12]
 80109c6:	e7e1      	b.n	801098c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 80109c8:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 80109cc:	e7f6      	b.n	80109bc <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x70>
 80109ce:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 80109d2:	e7f3      	b.n	80109bc <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x70>
 80109d4:	2e03      	cmp	r6, #3
 80109d6:	d815      	bhi.n	8010a04 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 80109d8:	e8df f006 	tbb	[pc, r6]
 80109dc:	110e0702 	.word	0x110e0702
 80109e0:	9504      	str	r5, [sp, #16]
 80109e2:	4620      	mov	r0, r4
 80109e4:	bcf0      	pop	{r4, r5, r6, r7}
 80109e6:	f7ff be9f 	b.w	8010728 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 80109ea:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 80109ec:	b150      	cbz	r0, 8010a04 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 80109ee:	6806      	ldr	r6, [r0, #0]
 80109f0:	e9cd 3504 	strd	r3, r5, [sp, #16]
 80109f4:	6935      	ldr	r5, [r6, #16]
 80109f6:	e7c9      	b.n	801098c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 80109f8:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 80109fc:	e7f6      	b.n	80109ec <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xa0>
 80109fe:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 8010a02:	e7f3      	b.n	80109ec <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xa0>
 8010a04:	bcf0      	pop	{r4, r5, r6, r7}
 8010a06:	4770      	bx	lr

08010a08 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 8010a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a0c:	4604      	mov	r4, r0
 8010a0e:	b087      	sub	sp, #28
 8010a10:	6810      	ldr	r0, [r2, #0]
 8010a12:	f89d a040 	ldrb.w	sl, [sp, #64]	@ 0x40
 8010a16:	f8df 9238 	ldr.w	r9, [pc, #568]	@ 8010c50 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 8010a1a:	460e      	mov	r6, r1
 8010a1c:	6851      	ldr	r1, [r2, #4]
 8010a1e:	ad02      	add	r5, sp, #8
 8010a20:	c503      	stmia	r5!, {r0, r1}
 8010a22:	6818      	ldr	r0, [r3, #0]
 8010a24:	6859      	ldr	r1, [r3, #4]
 8010a26:	ad04      	add	r5, sp, #16
 8010a28:	4617      	mov	r7, r2
 8010a2a:	c503      	stmia	r5!, {r0, r1}
 8010a2c:	a802      	add	r0, sp, #8
 8010a2e:	f7fb f82f 	bl	800ba90 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8010a32:	4639      	mov	r1, r7
 8010a34:	a804      	add	r0, sp, #16
 8010a36:	f7fb f853 	bl	800bae0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8010a3a:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8010a3e:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8010a42:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8010a46:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 8010a4a:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 8010a4e:	fb11 2103 	smlabb	r1, r1, r3, r2
 8010a52:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 8010a56:	440e      	add	r6, r1
 8010a58:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8010a5c:	440a      	add	r2, r1
 8010a5e:	f8ad 2010 	strh.w	r2, [sp, #16]
 8010a62:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8010a66:	4413      	add	r3, r2
 8010a68:	f8ad 3012 	strh.w	r3, [sp, #18]
 8010a6c:	4b77      	ldr	r3, [pc, #476]	@ (8010c4c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 8010a6e:	6818      	ldr	r0, [r3, #0]
 8010a70:	6803      	ldr	r3, [r0, #0]
 8010a72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010a74:	4798      	blx	r3
 8010a76:	f8b9 b000 	ldrh.w	fp, [r9]
 8010a7a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8010a7e:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8010a82:	fb0b 2303 	mla	r3, fp, r3, r2
 8010a86:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8010a8a:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 8010a8e:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8010a92:	fb05 f50b 	mul.w	r5, r5, fp
 8010a96:	9300      	str	r3, [sp, #0]
 8010a98:	d069      	beq.n	8010b6e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
 8010a9a:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 8010a9e:	4558      	cmp	r0, fp
 8010aa0:	f080 80cc 	bcs.w	8010c3c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 8010aa4:	9b00      	ldr	r3, [sp, #0]
 8010aa6:	18c3      	adds	r3, r0, r3
 8010aa8:	9301      	str	r3, [sp, #4]
 8010aaa:	4631      	mov	r1, r6
 8010aac:	9b01      	ldr	r3, [sp, #4]
 8010aae:	4298      	cmp	r0, r3
 8010ab0:	d24f      	bcs.n	8010b52 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 8010ab2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010ab6:	2a00      	cmp	r2, #0
 8010ab8:	d048      	beq.n	8010b4c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 8010aba:	fb0a f202 	mul.w	r2, sl, r2
 8010abe:	1c53      	adds	r3, r2, #1
 8010ac0:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8010ac4:	121b      	asrs	r3, r3, #8
 8010ac6:	d041      	beq.n	8010b4c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 8010ac8:	8802      	ldrh	r2, [r0, #0]
 8010aca:	f8b4 c000 	ldrh.w	ip, [r4]
 8010ace:	b29e      	uxth	r6, r3
 8010ad0:	1215      	asrs	r5, r2, #8
 8010ad2:	43db      	mvns	r3, r3
 8010ad4:	b2db      	uxtb	r3, r3
 8010ad6:	ea4f 272c 	mov.w	r7, ip, asr #8
 8010ada:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8010ade:	fb15 f503 	smulbb	r5, r5, r3
 8010ae2:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 8010ae6:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 8010aea:	00d2      	lsls	r2, r2, #3
 8010aec:	fb07 5706 	mla	r7, r7, r6, r5
 8010af0:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 8010af4:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8010af8:	b2d2      	uxtb	r2, r2
 8010afa:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8010afe:	b2bf      	uxth	r7, r7
 8010b00:	fb1e fe03 	smulbb	lr, lr, r3
 8010b04:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 8010b08:	fa5f fc8c 	uxtb.w	ip, ip
 8010b0c:	fb12 f203 	smulbb	r2, r2, r3
 8010b10:	fb05 e506 	mla	r5, r5, r6, lr
 8010b14:	fb0c 2c06 	mla	ip, ip, r6, r2
 8010b18:	f107 0e01 	add.w	lr, r7, #1
 8010b1c:	fa1f fc8c 	uxth.w	ip, ip
 8010b20:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8010b24:	f407 4e78 	and.w	lr, r7, #63488	@ 0xf800
 8010b28:	f10c 0701 	add.w	r7, ip, #1
 8010b2c:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8010b30:	b2ad      	uxth	r5, r5
 8010b32:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8010b36:	ea47 070e 	orr.w	r7, r7, lr
 8010b3a:	f105 0e01 	add.w	lr, r5, #1
 8010b3e:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 8010b42:	096d      	lsrs	r5, r5, #5
 8010b44:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8010b48:	432f      	orrs	r7, r5
 8010b4a:	8007      	strh	r7, [r0, #0]
 8010b4c:	3002      	adds	r0, #2
 8010b4e:	3402      	adds	r4, #2
 8010b50:	e7ac      	b.n	8010aac <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 8010b52:	f8b9 3000 	ldrh.w	r3, [r9]
 8010b56:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8010b5a:	eba3 0308 	sub.w	r3, r3, r8
 8010b5e:	eba6 0608 	sub.w	r6, r6, r8
 8010b62:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8010b66:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8010b6a:	440e      	add	r6, r1
 8010b6c:	e797      	b.n	8010a9e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 8010b6e:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8010b72:	42a8      	cmp	r0, r5
 8010b74:	d262      	bcs.n	8010c3c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 8010b76:	9b00      	ldr	r3, [sp, #0]
 8010b78:	4631      	mov	r1, r6
 8010b7a:	eb00 0b03 	add.w	fp, r0, r3
 8010b7e:	4558      	cmp	r0, fp
 8010b80:	d24e      	bcs.n	8010c20 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 8010b82:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010b86:	b12b      	cbz	r3, 8010b94 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 8010b88:	2bff      	cmp	r3, #255	@ 0xff
 8010b8a:	f8b4 e000 	ldrh.w	lr, [r4]
 8010b8e:	d104      	bne.n	8010b9a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
 8010b90:	f8a0 e000 	strh.w	lr, [r0]
 8010b94:	3002      	adds	r0, #2
 8010b96:	3402      	adds	r4, #2
 8010b98:	e7f1      	b.n	8010b7e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
 8010b9a:	8802      	ldrh	r2, [r0, #0]
 8010b9c:	b29f      	uxth	r7, r3
 8010b9e:	1216      	asrs	r6, r2, #8
 8010ba0:	43db      	mvns	r3, r3
 8010ba2:	b2db      	uxtb	r3, r3
 8010ba4:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8010ba8:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 8010bac:	fb16 f603 	smulbb	r6, r6, r3
 8010bb0:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 8010bb4:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8010bb8:	00d2      	lsls	r2, r2, #3
 8010bba:	fb0c 6c07 	mla	ip, ip, r7, r6
 8010bbe:	b2d2      	uxtb	r2, r2
 8010bc0:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8010bc4:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 8010bc8:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8010bcc:	fb1a fa03 	smulbb	sl, sl, r3
 8010bd0:	fa1f fc8c 	uxth.w	ip, ip
 8010bd4:	fb12 f303 	smulbb	r3, r2, r3
 8010bd8:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 8010bdc:	fa5f fe8e 	uxtb.w	lr, lr
 8010be0:	fb06 a607 	mla	r6, r6, r7, sl
 8010be4:	f10c 0201 	add.w	r2, ip, #1
 8010be8:	fb0e 3307 	mla	r3, lr, r7, r3
 8010bec:	b2b6      	uxth	r6, r6
 8010bee:	b29b      	uxth	r3, r3
 8010bf0:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8010bf4:	f40c 4278 	and.w	r2, ip, #63488	@ 0xf800
 8010bf8:	f106 0a01 	add.w	sl, r6, #1
 8010bfc:	f103 0c01 	add.w	ip, r3, #1
 8010c00:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8010c04:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 8010c08:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8010c0c:	0976      	lsrs	r6, r6, #5
 8010c0e:	ea4c 0c02 	orr.w	ip, ip, r2
 8010c12:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 8010c16:	ea4c 0c06 	orr.w	ip, ip, r6
 8010c1a:	f8a0 c000 	strh.w	ip, [r0]
 8010c1e:	e7b9      	b.n	8010b94 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 8010c20:	f8b9 3000 	ldrh.w	r3, [r9]
 8010c24:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8010c28:	eba3 0308 	sub.w	r3, r3, r8
 8010c2c:	eba6 0608 	sub.w	r6, r6, r8
 8010c30:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8010c34:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8010c38:	440e      	add	r6, r1
 8010c3a:	e79a      	b.n	8010b72 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
 8010c3c:	4b03      	ldr	r3, [pc, #12]	@ (8010c4c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 8010c3e:	6818      	ldr	r0, [r3, #0]
 8010c40:	6803      	ldr	r3, [r0, #0]
 8010c42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010c44:	4798      	blx	r3
 8010c46:	b007      	add	sp, #28
 8010c48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c4c:	20012638 	.word	0x20012638
 8010c50:	20012632 	.word	0x20012632

08010c54 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8010c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c58:	b089      	sub	sp, #36	@ 0x24
 8010c5a:	4607      	mov	r7, r0
 8010c5c:	f89d 604c 	ldrb.w	r6, [sp, #76]	@ 0x4c
 8010c60:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8010c62:	4688      	mov	r8, r1
 8010c64:	4692      	mov	sl, r2
 8010c66:	4699      	mov	r9, r3
 8010c68:	2e00      	cmp	r6, #0
 8010c6a:	d048      	beq.n	8010cfe <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8010c6c:	4608      	mov	r0, r1
 8010c6e:	f7fe fac3 	bl	800f1f8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8010c72:	4605      	mov	r5, r0
 8010c74:	4640      	mov	r0, r8
 8010c76:	f7fe faf3 	bl	800f260 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8010c7a:	f8ad 000e 	strh.w	r0, [sp, #14]
 8010c7e:	4640      	mov	r0, r8
 8010c80:	f8ad a008 	strh.w	sl, [sp, #8]
 8010c84:	f8ad 500c 	strh.w	r5, [sp, #12]
 8010c88:	f8ad 900a 	strh.w	r9, [sp, #10]
 8010c8c:	f7fe fba6 	bl	800f3dc <_ZNK8touchgfx6Bitmap7getDataEv>
 8010c90:	4605      	mov	r5, r0
 8010c92:	4640      	mov	r0, r8
 8010c94:	f7fe fbd2 	bl	800f43c <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8010c98:	4682      	mov	sl, r0
 8010c9a:	4640      	mov	r0, r8
 8010c9c:	f7fe fc22 	bl	800f4e4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8010ca0:	2810      	cmp	r0, #16
 8010ca2:	d82c      	bhi.n	8010cfe <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8010ca4:	e8df f010 	tbh	[pc, r0, lsl #1]
 8010ca8:	00ba00ca 	.word	0x00ba00ca
 8010cac:	002b0011 	.word	0x002b0011
 8010cb0:	002b002b 	.word	0x002b002b
 8010cb4:	002b002b 	.word	0x002b002b
 8010cb8:	002b002b 	.word	0x002b002b
 8010cbc:	00c1002b 	.word	0x00c1002b
 8010cc0:	002b002b 	.word	0x002b002b
 8010cc4:	002b0180 	.word	0x002b0180
 8010cc8:	0173      	.short	0x0173
 8010cca:	4bbc      	ldr	r3, [pc, #752]	@ (8010fbc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x368>)
 8010ccc:	6818      	ldr	r0, [r3, #0]
 8010cce:	6803      	ldr	r3, [r0, #0]
 8010cd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010cd2:	4798      	blx	r3
 8010cd4:	2eff      	cmp	r6, #255	@ 0xff
 8010cd6:	d101      	bne.n	8010cdc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x88>
 8010cd8:	0683      	lsls	r3, r0, #26
 8010cda:	d506      	bpl.n	8010cea <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x96>
 8010cdc:	4633      	mov	r3, r6
 8010cde:	4622      	mov	r2, r4
 8010ce0:	a902      	add	r1, sp, #8
 8010ce2:	4628      	mov	r0, r5
 8010ce4:	f7ff f8fc 	bl	800fee0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8010ce8:	e009      	b.n	8010cfe <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8010cea:	4640      	mov	r0, r8
 8010cec:	f7fe fb3e 	bl	800f36c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8010cf0:	b940      	cbnz	r0, 8010d04 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb0>
 8010cf2:	4623      	mov	r3, r4
 8010cf4:	aa02      	add	r2, sp, #8
 8010cf6:	4629      	mov	r1, r5
 8010cf8:	4638      	mov	r0, r7
 8010cfa:	f7ff f9d7 	bl	80100ac <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 8010cfe:	b009      	add	sp, #36	@ 0x24
 8010d00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d04:	f10d 0918 	add.w	r9, sp, #24
 8010d08:	4641      	mov	r1, r8
 8010d0a:	4648      	mov	r0, r9
 8010d0c:	f7fe fadc 	bl	800f2c8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8010d10:	e899 0003 	ldmia.w	r9, {r0, r1}
 8010d14:	f10d 0810 	add.w	r8, sp, #16
 8010d18:	e888 0003 	stmia.w	r8, {r0, r1}
 8010d1c:	4640      	mov	r0, r8
 8010d1e:	4621      	mov	r1, r4
 8010d20:	f7f7 fd92 	bl	8008848 <_ZN8touchgfx4RectaNERKS0_>
 8010d24:	4640      	mov	r0, r8
 8010d26:	f7f7 fdd2 	bl	80088ce <_ZNK8touchgfx4Rect7isEmptyEv>
 8010d2a:	2800      	cmp	r0, #0
 8010d2c:	d1d6      	bne.n	8010cdc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x88>
 8010d2e:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8010d32:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8010d36:	4293      	cmp	r3, r2
 8010d38:	dd12      	ble.n	8010d60 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x10c>
 8010d3a:	1a9b      	subs	r3, r3, r2
 8010d3c:	f9b4 0000 	ldrsh.w	r0, [r4]
 8010d40:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8010d44:	f8ad 0018 	strh.w	r0, [sp, #24]
 8010d48:	f8ad 201a 	strh.w	r2, [sp, #26]
 8010d4c:	f8ad 101c 	strh.w	r1, [sp, #28]
 8010d50:	f8ad 301e 	strh.w	r3, [sp, #30]
 8010d54:	464a      	mov	r2, r9
 8010d56:	4633      	mov	r3, r6
 8010d58:	a902      	add	r1, sp, #8
 8010d5a:	4628      	mov	r0, r5
 8010d5c:	f7ff f8c0 	bl	800fee0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8010d60:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8010d64:	f9b4 2000 	ldrsh.w	r2, [r4]
 8010d68:	4293      	cmp	r3, r2
 8010d6a:	dd12      	ble.n	8010d92 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x13e>
 8010d6c:	1a9b      	subs	r3, r3, r2
 8010d6e:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8010d72:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8010d76:	f8ad 2018 	strh.w	r2, [sp, #24]
 8010d7a:	f8ad 001a 	strh.w	r0, [sp, #26]
 8010d7e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8010d82:	f8ad 101e 	strh.w	r1, [sp, #30]
 8010d86:	23ff      	movs	r3, #255	@ 0xff
 8010d88:	464a      	mov	r2, r9
 8010d8a:	a902      	add	r1, sp, #8
 8010d8c:	4628      	mov	r0, r5
 8010d8e:	f7ff f8a7 	bl	800fee0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8010d92:	4643      	mov	r3, r8
 8010d94:	aa02      	add	r2, sp, #8
 8010d96:	4629      	mov	r1, r5
 8010d98:	4638      	mov	r0, r7
 8010d9a:	f7ff f987 	bl	80100ac <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 8010d9e:	88a2      	ldrh	r2, [r4, #4]
 8010da0:	8823      	ldrh	r3, [r4, #0]
 8010da2:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8010da6:	4413      	add	r3, r2
 8010da8:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8010dac:	440a      	add	r2, r1
 8010dae:	b29b      	uxth	r3, r3
 8010db0:	b292      	uxth	r2, r2
 8010db2:	b211      	sxth	r1, r2
 8010db4:	b218      	sxth	r0, r3
 8010db6:	4288      	cmp	r0, r1
 8010db8:	dd12      	ble.n	8010de0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x18c>
 8010dba:	1a9b      	subs	r3, r3, r2
 8010dbc:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8010dc0:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 8010dc4:	f8ad 1018 	strh.w	r1, [sp, #24]
 8010dc8:	f8ad 301c 	strh.w	r3, [sp, #28]
 8010dcc:	f8ad 001e 	strh.w	r0, [sp, #30]
 8010dd0:	23ff      	movs	r3, #255	@ 0xff
 8010dd2:	464a      	mov	r2, r9
 8010dd4:	a902      	add	r1, sp, #8
 8010dd6:	4628      	mov	r0, r5
 8010dd8:	f8ad 601a 	strh.w	r6, [sp, #26]
 8010ddc:	f7ff f880 	bl	800fee0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8010de0:	88e2      	ldrh	r2, [r4, #6]
 8010de2:	8863      	ldrh	r3, [r4, #2]
 8010de4:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8010de8:	4413      	add	r3, r2
 8010dea:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8010dee:	440a      	add	r2, r1
 8010df0:	b29b      	uxth	r3, r3
 8010df2:	b292      	uxth	r2, r2
 8010df4:	b211      	sxth	r1, r2
 8010df6:	b218      	sxth	r0, r3
 8010df8:	4288      	cmp	r0, r1
 8010dfa:	dd80      	ble.n	8010cfe <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8010dfc:	1a9b      	subs	r3, r3, r2
 8010dfe:	f9b4 6000 	ldrsh.w	r6, [r4]
 8010e02:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8010e06:	f8ad 301e 	strh.w	r3, [sp, #30]
 8010e0a:	f8ad 6018 	strh.w	r6, [sp, #24]
 8010e0e:	f8ad 101a 	strh.w	r1, [sp, #26]
 8010e12:	f8ad 001c 	strh.w	r0, [sp, #28]
 8010e16:	23ff      	movs	r3, #255	@ 0xff
 8010e18:	464a      	mov	r2, r9
 8010e1a:	e761      	b.n	8010ce0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x8c>
 8010e1c:	4633      	mov	r3, r6
 8010e1e:	4622      	mov	r2, r4
 8010e20:	a902      	add	r1, sp, #8
 8010e22:	4628      	mov	r0, r5
 8010e24:	f7ff f9b2 	bl	801018c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 8010e28:	e769      	b.n	8010cfe <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8010e2a:	e9cd 4600 	strd	r4, r6, [sp]
 8010e2e:	ab02      	add	r3, sp, #8
 8010e30:	4652      	mov	r2, sl
 8010e32:	4629      	mov	r1, r5
 8010e34:	4638      	mov	r0, r7
 8010e36:	f7ff fd89 	bl	801094c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 8010e3a:	e760      	b.n	8010cfe <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8010e3c:	4640      	mov	r0, r8
 8010e3e:	f7fe fa95 	bl	800f36c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8010e42:	b948      	cbnz	r0, 8010e58 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x204>
 8010e44:	683b      	ldr	r3, [r7, #0]
 8010e46:	e9cd 6000 	strd	r6, r0, [sp]
 8010e4a:	aa02      	add	r2, sp, #8
 8010e4c:	68de      	ldr	r6, [r3, #12]
 8010e4e:	4629      	mov	r1, r5
 8010e50:	4623      	mov	r3, r4
 8010e52:	4638      	mov	r0, r7
 8010e54:	47b0      	blx	r6
 8010e56:	e752      	b.n	8010cfe <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8010e58:	f10d 0918 	add.w	r9, sp, #24
 8010e5c:	4641      	mov	r1, r8
 8010e5e:	4648      	mov	r0, r9
 8010e60:	f7fe fa32 	bl	800f2c8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8010e64:	e899 0003 	ldmia.w	r9, {r0, r1}
 8010e68:	f10d 0810 	add.w	r8, sp, #16
 8010e6c:	e888 0003 	stmia.w	r8, {r0, r1}
 8010e70:	4640      	mov	r0, r8
 8010e72:	4621      	mov	r1, r4
 8010e74:	f7f7 fce8 	bl	8008848 <_ZN8touchgfx4RectaNERKS0_>
 8010e78:	4640      	mov	r0, r8
 8010e7a:	f7f7 fd28 	bl	80088ce <_ZNK8touchgfx4Rect7isEmptyEv>
 8010e7e:	b138      	cbz	r0, 8010e90 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x23c>
 8010e80:	9600      	str	r6, [sp, #0]
 8010e82:	4623      	mov	r3, r4
 8010e84:	aa02      	add	r2, sp, #8
 8010e86:	4651      	mov	r1, sl
 8010e88:	4628      	mov	r0, r5
 8010e8a:	f7ff fdbd 	bl	8010a08 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8010e8e:	e736      	b.n	8010cfe <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8010e90:	683b      	ldr	r3, [r7, #0]
 8010e92:	e9cd 6000 	strd	r6, r0, [sp]
 8010e96:	aa02      	add	r2, sp, #8
 8010e98:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 8010e9c:	4629      	mov	r1, r5
 8010e9e:	4643      	mov	r3, r8
 8010ea0:	4638      	mov	r0, r7
 8010ea2:	47d8      	blx	fp
 8010ea4:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8010ea8:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8010eac:	4293      	cmp	r3, r2
 8010eae:	dd13      	ble.n	8010ed8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x284>
 8010eb0:	f9b4 0000 	ldrsh.w	r0, [r4]
 8010eb4:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8010eb8:	f8ad 0018 	strh.w	r0, [sp, #24]
 8010ebc:	1a9b      	subs	r3, r3, r2
 8010ebe:	f8ad 201a 	strh.w	r2, [sp, #26]
 8010ec2:	f8ad 101c 	strh.w	r1, [sp, #28]
 8010ec6:	f8ad 301e 	strh.w	r3, [sp, #30]
 8010eca:	9600      	str	r6, [sp, #0]
 8010ecc:	464b      	mov	r3, r9
 8010ece:	aa02      	add	r2, sp, #8
 8010ed0:	4651      	mov	r1, sl
 8010ed2:	4628      	mov	r0, r5
 8010ed4:	f7ff fd98 	bl	8010a08 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8010ed8:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8010edc:	f9b4 2000 	ldrsh.w	r2, [r4]
 8010ee0:	4293      	cmp	r3, r2
 8010ee2:	dd13      	ble.n	8010f0c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2b8>
 8010ee4:	1a9b      	subs	r3, r3, r2
 8010ee6:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8010eea:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8010eee:	f8ad 2018 	strh.w	r2, [sp, #24]
 8010ef2:	f8ad 001a 	strh.w	r0, [sp, #26]
 8010ef6:	f8ad 301c 	strh.w	r3, [sp, #28]
 8010efa:	f8ad 101e 	strh.w	r1, [sp, #30]
 8010efe:	9600      	str	r6, [sp, #0]
 8010f00:	464b      	mov	r3, r9
 8010f02:	aa02      	add	r2, sp, #8
 8010f04:	4651      	mov	r1, sl
 8010f06:	4628      	mov	r0, r5
 8010f08:	f7ff fd7e 	bl	8010a08 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8010f0c:	88a2      	ldrh	r2, [r4, #4]
 8010f0e:	8823      	ldrh	r3, [r4, #0]
 8010f10:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8010f14:	4413      	add	r3, r2
 8010f16:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8010f1a:	440a      	add	r2, r1
 8010f1c:	b29b      	uxth	r3, r3
 8010f1e:	b292      	uxth	r2, r2
 8010f20:	b211      	sxth	r1, r2
 8010f22:	b218      	sxth	r0, r3
 8010f24:	4288      	cmp	r0, r1
 8010f26:	dd13      	ble.n	8010f50 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2fc>
 8010f28:	1a9b      	subs	r3, r3, r2
 8010f2a:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8010f2e:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
 8010f32:	f8ad 1018 	strh.w	r1, [sp, #24]
 8010f36:	f8ad 301c 	strh.w	r3, [sp, #28]
 8010f3a:	f8ad 001e 	strh.w	r0, [sp, #30]
 8010f3e:	9600      	str	r6, [sp, #0]
 8010f40:	464b      	mov	r3, r9
 8010f42:	aa02      	add	r2, sp, #8
 8010f44:	4651      	mov	r1, sl
 8010f46:	4628      	mov	r0, r5
 8010f48:	f8ad 701a 	strh.w	r7, [sp, #26]
 8010f4c:	f7ff fd5c 	bl	8010a08 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8010f50:	88e2      	ldrh	r2, [r4, #6]
 8010f52:	8863      	ldrh	r3, [r4, #2]
 8010f54:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8010f58:	4413      	add	r3, r2
 8010f5a:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8010f5e:	440a      	add	r2, r1
 8010f60:	b29b      	uxth	r3, r3
 8010f62:	b292      	uxth	r2, r2
 8010f64:	b211      	sxth	r1, r2
 8010f66:	b218      	sxth	r0, r3
 8010f68:	4288      	cmp	r0, r1
 8010f6a:	f77f aec8 	ble.w	8010cfe <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8010f6e:	f9b4 7000 	ldrsh.w	r7, [r4]
 8010f72:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8010f76:	f8ad 7018 	strh.w	r7, [sp, #24]
 8010f7a:	1a9b      	subs	r3, r3, r2
 8010f7c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8010f80:	f8ad 101a 	strh.w	r1, [sp, #26]
 8010f84:	f8ad 001c 	strh.w	r0, [sp, #28]
 8010f88:	9600      	str	r6, [sp, #0]
 8010f8a:	464b      	mov	r3, r9
 8010f8c:	e77a      	b.n	8010e84 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x230>
 8010f8e:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8010f92:	2800      	cmp	r0, #0
 8010f94:	f43f aeb3 	beq.w	8010cfe <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8010f98:	6803      	ldr	r3, [r0, #0]
 8010f9a:	9600      	str	r6, [sp, #0]
 8010f9c:	68de      	ldr	r6, [r3, #12]
 8010f9e:	4623      	mov	r3, r4
 8010fa0:	aa02      	add	r2, sp, #8
 8010fa2:	4629      	mov	r1, r5
 8010fa4:	47b0      	blx	r6
 8010fa6:	e6aa      	b.n	8010cfe <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8010fa8:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8010fac:	2800      	cmp	r0, #0
 8010fae:	f43f aea6 	beq.w	8010cfe <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8010fb2:	6803      	ldr	r3, [r0, #0]
 8010fb4:	9600      	str	r6, [sp, #0]
 8010fb6:	689e      	ldr	r6, [r3, #8]
 8010fb8:	e7f1      	b.n	8010f9e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x34a>
 8010fba:	bf00      	nop
 8010fbc:	20012638 	.word	0x20012638

08010fc0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 8010fc0:	b180      	cbz	r0, 8010fe4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
 8010fc2:	2903      	cmp	r1, #3
 8010fc4:	d81c      	bhi.n	8011000 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 8010fc6:	e8df f001 	tbb	[pc, r1]
 8010fca:	1d02      	.short	0x1d02
 8010fcc:	1f08      	.short	0x1f08
 8010fce:	4b10      	ldr	r3, [pc, #64]	@ (8011010 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8010fd0:	8818      	ldrh	r0, [r3, #0]
 8010fd2:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8010fd6:	4240      	negs	r0, r0
 8010fd8:	4770      	bx	lr
 8010fda:	4b0d      	ldr	r3, [pc, #52]	@ (8011010 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8010fdc:	8818      	ldrh	r0, [r3, #0]
 8010fde:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8010fe2:	4770      	bx	lr
 8010fe4:	2903      	cmp	r1, #3
 8010fe6:	d80b      	bhi.n	8011000 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 8010fe8:	a301      	add	r3, pc, #4	@ (adr r3, 8010ff0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x30>)
 8010fea:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8010fee:	bf00      	nop
 8010ff0:	08011005 	.word	0x08011005
 8010ff4:	08010fdb 	.word	0x08010fdb
 8010ff8:	08011009 	.word	0x08011009
 8010ffc:	08010fcf 	.word	0x08010fcf
 8011000:	2000      	movs	r0, #0
 8011002:	4770      	bx	lr
 8011004:	2001      	movs	r0, #1
 8011006:	4770      	bx	lr
 8011008:	f04f 30ff 	mov.w	r0, #4294967295
 801100c:	4770      	bx	lr
 801100e:	bf00      	nop
 8011010:	20012632 	.word	0x20012632

08011014 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 8011014:	b180      	cbz	r0, 8011038 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x24>
 8011016:	2903      	cmp	r1, #3
 8011018:	d81c      	bhi.n	8011054 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 801101a:	e8df f001 	tbb	[pc, r1]
 801101e:	021d      	.short	0x021d
 8011020:	071f      	.short	0x071f
 8011022:	4b10      	ldr	r3, [pc, #64]	@ (8011064 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8011024:	8818      	ldrh	r0, [r3, #0]
 8011026:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801102a:	4770      	bx	lr
 801102c:	4b0d      	ldr	r3, [pc, #52]	@ (8011064 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 801102e:	8818      	ldrh	r0, [r3, #0]
 8011030:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8011034:	4240      	negs	r0, r0
 8011036:	4770      	bx	lr
 8011038:	2903      	cmp	r1, #3
 801103a:	d80b      	bhi.n	8011054 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 801103c:	a301      	add	r3, pc, #4	@ (adr r3, 8011044 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x30>)
 801103e:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8011042:	bf00      	nop
 8011044:	08011023 	.word	0x08011023
 8011048:	0801105d 	.word	0x0801105d
 801104c:	0801102d 	.word	0x0801102d
 8011050:	08011059 	.word	0x08011059
 8011054:	2000      	movs	r0, #0
 8011056:	4770      	bx	lr
 8011058:	2001      	movs	r0, #1
 801105a:	4770      	bx	lr
 801105c:	f04f 30ff 	mov.w	r0, #4294967295
 8011060:	4770      	bx	lr
 8011062:	bf00      	nop
 8011064:	20012632 	.word	0x20012632

08011068 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8011068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801106c:	b099      	sub	sp, #100	@ 0x64
 801106e:	910d      	str	r1, [sp, #52]	@ 0x34
 8011070:	a914      	add	r1, sp, #80	@ 0x50
 8011072:	e881 000c 	stmia.w	r1, {r2, r3}
 8011076:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	@ 0x8c
 801107a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801107c:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	@ 0x98
 8011080:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 8011084:	9310      	str	r3, [sp, #64]	@ 0x40
 8011086:	f89d 30ac 	ldrb.w	r3, [sp, #172]	@ 0xac
 801108a:	9308      	str	r3, [sp, #32]
 801108c:	f89d 30b0 	ldrb.w	r3, [sp, #176]	@ 0xb0
 8011090:	9309      	str	r3, [sp, #36]	@ 0x24
 8011092:	7b4b      	ldrb	r3, [r1, #13]
 8011094:	f9bd 4088 	ldrsh.w	r4, [sp, #136]	@ 0x88
 8011098:	f8bd 5090 	ldrh.w	r5, [sp, #144]	@ 0x90
 801109c:	f8bd 6094 	ldrh.w	r6, [sp, #148]	@ 0x94
 80110a0:	9f28      	ldr	r7, [sp, #160]	@ 0xa0
 80110a2:	f8dd 90a8 	ldr.w	r9, [sp, #168]	@ 0xa8
 80110a6:	f89d a0b4 	ldrb.w	sl, [sp, #180]	@ 0xb4
 80110aa:	ea4f 1843 	mov.w	r8, r3, lsl #5
 80110ae:	f408 7080 	and.w	r0, r8, #256	@ 0x100
 80110b2:	f891 8006 	ldrb.w	r8, [r1, #6]
 80110b6:	ea58 0800 	orrs.w	r8, r8, r0
 80110ba:	f000 81ce 	beq.w	801145a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f2>
 80110be:	011b      	lsls	r3, r3, #4
 80110c0:	79c8      	ldrb	r0, [r1, #7]
 80110c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80110c6:	4303      	orrs	r3, r0
 80110c8:	930c      	str	r3, [sp, #48]	@ 0x30
 80110ca:	f000 81c6 	beq.w	801145a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f2>
 80110ce:	f991 3009 	ldrsb.w	r3, [r1, #9]
 80110d2:	b29b      	uxth	r3, r3
 80110d4:	2d00      	cmp	r5, #0
 80110d6:	f000 812c 	beq.w	8011332 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ca>
 80110da:	1aed      	subs	r5, r5, r3
 80110dc:	b2ad      	uxth	r5, r5
 80110de:	0429      	lsls	r1, r5, #16
 80110e0:	d502      	bpl.n	80110e8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x80>
 80110e2:	1b64      	subs	r4, r4, r5
 80110e4:	b224      	sxth	r4, r4
 80110e6:	2500      	movs	r5, #0
 80110e8:	f9b2 0000 	ldrsh.w	r0, [r2]
 80110ec:	8891      	ldrh	r1, [r2, #4]
 80110ee:	4284      	cmp	r4, r0
 80110f0:	b283      	uxth	r3, r0
 80110f2:	bfb8      	it	lt
 80110f4:	18ed      	addlt	r5, r5, r3
 80110f6:	440b      	add	r3, r1
 80110f8:	b21b      	sxth	r3, r3
 80110fa:	930a      	str	r3, [sp, #40]	@ 0x28
 80110fc:	88d3      	ldrh	r3, [r2, #6]
 80110fe:	8852      	ldrh	r2, [r2, #2]
 8011100:	4413      	add	r3, r2
 8011102:	b21b      	sxth	r3, r3
 8011104:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011106:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011108:	930e      	str	r3, [sp, #56]	@ 0x38
 801110a:	bfb8      	it	lt
 801110c:	1b2c      	sublt	r4, r5, r4
 801110e:	4bb5      	ldr	r3, [pc, #724]	@ (80113e4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>)
 8011110:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011112:	f893 b000 	ldrb.w	fp, [r3]
 8011116:	bfbc      	itt	lt
 8011118:	b2a5      	uxthlt	r5, r4
 801111a:	4604      	movlt	r4, r0
 801111c:	4653      	mov	r3, sl
 801111e:	4621      	mov	r1, r4
 8011120:	a814      	add	r0, sp, #80	@ 0x50
 8011122:	f7fa fb2a 	bl	800b77a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8011126:	4621      	mov	r1, r4
 8011128:	f8ad 005c 	strh.w	r0, [sp, #92]	@ 0x5c
 801112c:	4653      	mov	r3, sl
 801112e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011130:	a814      	add	r0, sp, #80	@ 0x50
 8011132:	f7fa fb3f 	bl	800b7b4 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8011136:	a918      	add	r1, sp, #96	@ 0x60
 8011138:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801113c:	a817      	add	r0, sp, #92	@ 0x5c
 801113e:	f7fa fc65 	bl	800ba0c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 8011142:	f1ba 0f00 	cmp.w	sl, #0
 8011146:	f040 80f7 	bne.w	8011338 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2d0>
 801114a:	f1bb 0f01 	cmp.w	fp, #1
 801114e:	f040 80fb 	bne.w	8011348 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e0>
 8011152:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011154:	2b00      	cmp	r3, #0
 8011156:	f040 81a8 	bne.w	80114aa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x442>
 801115a:	fa1f f288 	uxth.w	r2, r8
 801115e:	b905      	cbnz	r5, 8011162 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xfa>
 8011160:	b15e      	cbz	r6, 801117a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x112>
 8011162:	9808      	ldr	r0, [sp, #32]
 8011164:	fb06 5302 	mla	r3, r6, r2, r5
 8011168:	4343      	muls	r3, r0
 801116a:	4631      	mov	r1, r6
 801116c:	eb07 07d3 	add.w	r7, r7, r3, lsr #3
 8011170:	f003 0607 	and.w	r6, r3, #7
 8011174:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011176:	1a5b      	subs	r3, r3, r1
 8011178:	930e      	str	r3, [sp, #56]	@ 0x38
 801117a:	f10b 31ff 	add.w	r1, fp, #4294967295
 801117e:	424b      	negs	r3, r1
 8011180:	414b      	adcs	r3, r1
 8011182:	4618      	mov	r0, r3
 8011184:	4651      	mov	r1, sl
 8011186:	930c      	str	r3, [sp, #48]	@ 0x30
 8011188:	f7ff ff1a 	bl	8010fc0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 801118c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801118e:	4683      	mov	fp, r0
 8011190:	4618      	mov	r0, r3
 8011192:	f7ff ff3f 	bl	8011014 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 8011196:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8011198:	4603      	mov	r3, r0
 801119a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801119c:	eba1 0a00 	sub.w	sl, r1, r0
 80111a0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80111a2:	458a      	cmp	sl, r1
 80111a4:	bfa8      	it	ge
 80111a6:	468a      	movge	sl, r1
 80111a8:	f1ba 0f00 	cmp.w	sl, #0
 80111ac:	f340 8155 	ble.w	801145a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f2>
 80111b0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80111b2:	1b64      	subs	r4, r4, r5
 80111b4:	1b0c      	subs	r4, r1, r4
 80111b6:	4544      	cmp	r4, r8
 80111b8:	bfd4      	ite	le
 80111ba:	ebc5 0504 	rsble	r5, r5, r4
 80111be:	ebc5 0508 	rsbgt	r5, r5, r8
 80111c2:	2d00      	cmp	r5, #0
 80111c4:	f340 8149 	ble.w	801145a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f2>
 80111c8:	9908      	ldr	r1, [sp, #32]
 80111ca:	1b52      	subs	r2, r2, r5
 80111cc:	434a      	muls	r2, r1
 80111ce:	920e      	str	r2, [sp, #56]	@ 0x38
 80111d0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80111d2:	2a00      	cmp	r2, #0
 80111d4:	f040 8175 	bne.w	80114c2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x45a>
 80111d8:	4a83      	ldr	r2, [pc, #524]	@ (80113e8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>)
 80111da:	930a      	str	r3, [sp, #40]	@ 0x28
 80111dc:	6810      	ldr	r0, [r2, #0]
 80111de:	6802      	ldr	r2, [r0, #0]
 80111e0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80111e2:	4790      	blx	r2
 80111e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80111e6:	9908      	ldr	r1, [sp, #32]
 80111e8:	2201      	movs	r2, #1
 80111ea:	408a      	lsls	r2, r1
 80111ec:	3a01      	subs	r2, #1
 80111ee:	497f      	ldr	r1, [pc, #508]	@ (80113ec <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 80111f0:	b2d2      	uxtb	r2, r2
 80111f2:	880c      	ldrh	r4, [r1, #0]
 80111f4:	920c      	str	r2, [sp, #48]	@ 0x30
 80111f6:	f9bd 105c 	ldrsh.w	r1, [sp, #92]	@ 0x5c
 80111fa:	f9bd 205e 	ldrsh.w	r2, [sp, #94]	@ 0x5e
 80111fe:	fb04 1202 	mla	r2, r4, r2, r1
 8011202:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8011206:	ea4f 2419 	mov.w	r4, r9, lsr #8
 801120a:	920a      	str	r2, [sp, #40]	@ 0x28
 801120c:	f3c9 4207 	ubfx	r2, r9, #16, #8
 8011210:	9212      	str	r2, [sp, #72]	@ 0x48
 8011212:	b2e2      	uxtb	r2, r4
 8011214:	9211      	str	r2, [sp, #68]	@ 0x44
 8011216:	fa5f f289 	uxtb.w	r2, r9
 801121a:	9210      	str	r2, [sp, #64]	@ 0x40
 801121c:	4a74      	ldr	r2, [pc, #464]	@ (80113f0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 801121e:	ea4f 1159 	mov.w	r1, r9, lsr #5
 8011222:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8011226:	4022      	ands	r2, r4
 8011228:	430a      	orrs	r2, r1
 801122a:	f3c9 09c4 	ubfx	r9, r9, #3, #5
 801122e:	ea42 0209 	orr.w	r2, r2, r9
 8011232:	ea4f 014b 	mov.w	r1, fp, lsl #1
 8011236:	b292      	uxth	r2, r2
 8011238:	fb05 3b1b 	mls	fp, r5, fp, r3
 801123c:	920f      	str	r2, [sp, #60]	@ 0x3c
 801123e:	460b      	mov	r3, r1
 8011240:	783a      	ldrb	r2, [r7, #0]
 8011242:	910b      	str	r1, [sp, #44]	@ 0x2c
 8011244:	436b      	muls	r3, r5
 8011246:	4132      	asrs	r2, r6
 8011248:	eb03 034b 	add.w	r3, r3, fp, lsl #1
 801124c:	b2d2      	uxtb	r2, r2
 801124e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8011250:	f11a 3aff 	adds.w	sl, sl, #4294967295
 8011254:	f0c0 8149 	bcc.w	80114ea <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x482>
 8011258:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
 801125c:	46a9      	mov	r9, r5
 801125e:	f119 39ff 	adds.w	r9, r9, #4294967295
 8011262:	f0c0 8132 	bcc.w	80114ca <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x462>
 8011266:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011268:	4013      	ands	r3, r2
 801126a:	d054      	beq.n	8011316 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ae>
 801126c:	20ff      	movs	r0, #255	@ 0xff
 801126e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8011270:	fb90 f1f1 	sdiv	r1, r0, r1
 8011274:	434b      	muls	r3, r1
 8011276:	2bfe      	cmp	r3, #254	@ 0xfe
 8011278:	dd03      	ble.n	8011282 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x21a>
 801127a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801127c:	4281      	cmp	r1, r0
 801127e:	f000 8122 	beq.w	80114c6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x45e>
 8011282:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011284:	f8b8 4000 	ldrh.w	r4, [r8]
 8011288:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801128a:	fb11 f303 	smulbb	r3, r1, r3
 801128e:	b29b      	uxth	r3, r3
 8011290:	1c59      	adds	r1, r3, #1
 8011292:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8011296:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801129a:	fa1f fe83 	uxth.w	lr, r3
 801129e:	1221      	asrs	r1, r4, #8
 80112a0:	fb10 fb0e 	smulbb	fp, r0, lr
 80112a4:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 80112a8:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80112aa:	43db      	mvns	r3, r3
 80112ac:	b2db      	uxtb	r3, r3
 80112ae:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 80112b2:	fb01 b103 	mla	r1, r1, r3, fp
 80112b6:	ea4f 0ce4 	mov.w	ip, r4, asr #3
 80112ba:	fb10 fb0e 	smulbb	fp, r0, lr
 80112be:	00e4      	lsls	r4, r4, #3
 80112c0:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80112c2:	b2e4      	uxtb	r4, r4
 80112c4:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 80112c8:	fb10 fe0e 	smulbb	lr, r0, lr
 80112cc:	fb04 e403 	mla	r4, r4, r3, lr
 80112d0:	f00c 0cfc 	and.w	ip, ip, #252	@ 0xfc
 80112d4:	b289      	uxth	r1, r1
 80112d6:	b2a4      	uxth	r4, r4
 80112d8:	ea4c 1c9c 	orr.w	ip, ip, ip, lsr #6
 80112dc:	fb0c bc03 	mla	ip, ip, r3, fp
 80112e0:	1c4b      	adds	r3, r1, #1
 80112e2:	f104 0b01 	add.w	fp, r4, #1
 80112e6:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80112ea:	eb0b 2b14 	add.w	fp, fp, r4, lsr #8
 80112ee:	fa1f fc8c 	uxth.w	ip, ip
 80112f2:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 80112f6:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 80112fa:	ea4b 0101 	orr.w	r1, fp, r1
 80112fe:	f10c 0b01 	add.w	fp, ip, #1
 8011302:	eb0b 2b1c 	add.w	fp, fp, ip, lsr #8
 8011306:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801130a:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 801130e:	ea41 010b 	orr.w	r1, r1, fp
 8011312:	f8a8 1000 	strh.w	r1, [r8]
 8011316:	9b08      	ldr	r3, [sp, #32]
 8011318:	441e      	add	r6, r3
 801131a:	b2b6      	uxth	r6, r6
 801131c:	2e07      	cmp	r6, #7
 801131e:	bf98      	it	ls
 8011320:	411a      	asrls	r2, r3
 8011322:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011324:	bf89      	itett	hi
 8011326:	787a      	ldrbhi	r2, [r7, #1]
 8011328:	b2d2      	uxtbls	r2, r2
 801132a:	3701      	addhi	r7, #1
 801132c:	2600      	movhi	r6, #0
 801132e:	4498      	add	r8, r3
 8011330:	e795      	b.n	801125e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1f6>
 8011332:	441c      	add	r4, r3
 8011334:	b224      	sxth	r4, r4
 8011336:	e6d7      	b.n	80110e8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x80>
 8011338:	f1ba 0f01 	cmp.w	sl, #1
 801133c:	f47f af09 	bne.w	8011152 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xea>
 8011340:	f1bb 0f01 	cmp.w	fp, #1
 8011344:	f47f af05 	bne.w	8011152 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xea>
 8011348:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801134a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801134c:	1a99      	subs	r1, r3, r2
 801134e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011350:	1b9b      	subs	r3, r3, r6
 8011352:	4299      	cmp	r1, r3
 8011354:	bfa8      	it	ge
 8011356:	4619      	movge	r1, r3
 8011358:	2900      	cmp	r1, #0
 801135a:	9112      	str	r1, [sp, #72]	@ 0x48
 801135c:	dd7d      	ble.n	801145a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f2>
 801135e:	4a22      	ldr	r2, [pc, #136]	@ (80113e8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>)
 8011360:	9211      	str	r2, [sp, #68]	@ 0x44
 8011362:	6810      	ldr	r0, [r2, #0]
 8011364:	6803      	ldr	r3, [r0, #0]
 8011366:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011368:	4798      	blx	r3
 801136a:	f410 7380 	ands.w	r3, r0, #256	@ 0x100
 801136e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8011370:	d006      	beq.n	8011380 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x318>
 8011372:	9b08      	ldr	r3, [sp, #32]
 8011374:	2b04      	cmp	r3, #4
 8011376:	d133      	bne.n	80113e0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 8011378:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801137a:	3300      	adds	r3, #0
 801137c:	bf18      	it	ne
 801137e:	2301      	movne	r3, #1
 8011380:	0582      	lsls	r2, r0, #22
 8011382:	fa1f fc88 	uxth.w	ip, r8
 8011386:	f140 80b9 	bpl.w	80114fc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x494>
 801138a:	9808      	ldr	r0, [sp, #32]
 801138c:	2808      	cmp	r0, #8
 801138e:	f040 80b5 	bne.w	80114fc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x494>
 8011392:	2b00      	cmp	r3, #0
 8011394:	d064      	beq.n	8011460 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f8>
 8011396:	f10c 0c01 	add.w	ip, ip, #1
 801139a:	f02c 0301 	bic.w	r3, ip, #1
 801139e:	b29b      	uxth	r3, r3
 80113a0:	bb45      	cbnz	r5, 80113f4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>
 80113a2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80113a4:	eb08 0004 	add.w	r0, r8, r4
 80113a8:	4290      	cmp	r0, r2
 80113aa:	dc23      	bgt.n	80113f4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>
 80113ac:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80113ae:	f8bd e05e 	ldrh.w	lr, [sp, #94]	@ 0x5e
 80113b2:	6810      	ldr	r0, [r2, #0]
 80113b4:	f8bd 205c 	ldrh.w	r2, [sp, #92]	@ 0x5c
 80113b8:	6804      	ldr	r4, [r0, #0]
 80113ba:	9506      	str	r5, [sp, #24]
 80113bc:	f44f 7580 	mov.w	r5, #256	@ 0x100
 80113c0:	9505      	str	r5, [sp, #20]
 80113c2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80113c4:	9302      	str	r3, [sp, #8]
 80113c6:	b289      	uxth	r1, r1
 80113c8:	e9cd 3100 	strd	r3, r1, [sp]
 80113cc:	e9cd 9503 	strd	r9, r5, [sp, #12]
 80113d0:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80113d4:	6da4      	ldr	r4, [r4, #88]	@ 0x58
 80113d6:	4673      	mov	r3, lr
 80113d8:	fb06 710c 	mla	r1, r6, ip, r7
 80113dc:	47a0      	blx	r4
 80113de:	e03c      	b.n	801145a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f2>
 80113e0:	2300      	movs	r3, #0
 80113e2:	e7cd      	b.n	8011380 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x318>
 80113e4:	20012630 	.word	0x20012630
 80113e8:	20012638 	.word	0x20012638
 80113ec:	20012632 	.word	0x20012632
 80113f0:	00fff800 	.word	0x00fff800
 80113f4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80113f6:	eba4 0e05 	sub.w	lr, r4, r5
 80113fa:	eba2 0e0e 	sub.w	lr, r2, lr
 80113fe:	45c6      	cmp	lr, r8
 8011400:	bfd4      	ite	le
 8011402:	ebc5 0e0e 	rsble	lr, r5, lr
 8011406:	ebc5 0e08 	rsbgt	lr, r5, r8
 801140a:	f1be 0f00 	cmp.w	lr, #0
 801140e:	d024      	beq.n	801145a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f2>
 8011410:	07e8      	lsls	r0, r5, #31
 8011412:	f53f ae9e 	bmi.w	8011152 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xea>
 8011416:	f01e 0001 	ands.w	r0, lr, #1
 801141a:	f47f ae9a 	bne.w	8011152 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xea>
 801141e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8011420:	f8bd 805e 	ldrh.w	r8, [sp, #94]	@ 0x5e
 8011424:	6814      	ldr	r4, [r2, #0]
 8011426:	f8bd 205c 	ldrh.w	r2, [sp, #92]	@ 0x5c
 801142a:	086d      	lsrs	r5, r5, #1
 801142c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8011430:	fb06 560c 	mla	r6, r6, ip, r5
 8011434:	6825      	ldr	r5, [r4, #0]
 8011436:	9006      	str	r0, [sp, #24]
 8011438:	f44f 7080 	mov.w	r0, #256	@ 0x100
 801143c:	9005      	str	r0, [sp, #20]
 801143e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011440:	9302      	str	r3, [sp, #8]
 8011442:	e9cd 9003 	strd	r9, r0, [sp, #12]
 8011446:	b289      	uxth	r1, r1
 8011448:	fa1f f38e 	uxth.w	r3, lr
 801144c:	9101      	str	r1, [sp, #4]
 801144e:	9300      	str	r3, [sp, #0]
 8011450:	6dad      	ldr	r5, [r5, #88]	@ 0x58
 8011452:	4643      	mov	r3, r8
 8011454:	19b9      	adds	r1, r7, r6
 8011456:	4620      	mov	r0, r4
 8011458:	47a8      	blx	r5
 801145a:	b019      	add	sp, #100	@ 0x64
 801145c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011460:	4a28      	ldr	r2, [pc, #160]	@ (8011504 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x49c>)
 8011462:	f8bd e05e 	ldrh.w	lr, [sp, #94]	@ 0x5e
 8011466:	6810      	ldr	r0, [r2, #0]
 8011468:	f8bd 205c 	ldrh.w	r2, [sp, #92]	@ 0x5c
 801146c:	f8d0 a000 	ldr.w	sl, [r0]
 8011470:	9306      	str	r3, [sp, #24]
 8011472:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8011476:	9305      	str	r3, [sp, #20]
 8011478:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801147a:	f8cd c008 	str.w	ip, [sp, #8]
 801147e:	e9cd 9303 	strd	r9, r3, [sp, #12]
 8011482:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011484:	1b64      	subs	r4, r4, r5
 8011486:	1b1c      	subs	r4, r3, r4
 8011488:	fb06 5608 	mla	r6, r6, r8, r5
 801148c:	4544      	cmp	r4, r8
 801148e:	bfd4      	ite	le
 8011490:	ebc5 0504 	rsble	r5, r5, r4
 8011494:	ebc5 0508 	rsbgt	r5, r5, r8
 8011498:	b289      	uxth	r1, r1
 801149a:	b2ad      	uxth	r5, r5
 801149c:	9101      	str	r1, [sp, #4]
 801149e:	9500      	str	r5, [sp, #0]
 80114a0:	f8da 4058 	ldr.w	r4, [sl, #88]	@ 0x58
 80114a4:	4673      	mov	r3, lr
 80114a6:	19b9      	adds	r1, r7, r6
 80114a8:	e798      	b.n	80113dc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 80114aa:	2208      	movs	r2, #8
 80114ac:	9b08      	ldr	r3, [sp, #32]
 80114ae:	fb92 f3f3 	sdiv	r3, r2, r3
 80114b2:	1e5a      	subs	r2, r3, #1
 80114b4:	4442      	add	r2, r8
 80114b6:	fb92 f2f3 	sdiv	r2, r2, r3
 80114ba:	fb12 f203 	smulbb	r2, r2, r3
 80114be:	b292      	uxth	r2, r2
 80114c0:	e64d      	b.n	801115e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf6>
 80114c2:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80114c4:	e68f      	b.n	80111e6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x17e>
 80114c6:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80114c8:	e723      	b.n	8011312 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2aa>
 80114ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80114cc:	b143      	cbz	r3, 80114e0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x478>
 80114ce:	441e      	add	r6, r3
 80114d0:	b2b6      	uxth	r6, r6
 80114d2:	eb07 07d6 	add.w	r7, r7, r6, lsr #3
 80114d6:	f006 0607 	and.w	r6, r6, #7
 80114da:	783a      	ldrb	r2, [r7, #0]
 80114dc:	4132      	asrs	r2, r6
 80114de:	b2d2      	uxtb	r2, r2
 80114e0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80114e2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80114e4:	4419      	add	r1, r3
 80114e6:	910a      	str	r1, [sp, #40]	@ 0x28
 80114e8:	e6b2      	b.n	8011250 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e8>
 80114ea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80114ec:	2b00      	cmp	r3, #0
 80114ee:	d1b4      	bne.n	801145a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f2>
 80114f0:	4b04      	ldr	r3, [pc, #16]	@ (8011504 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x49c>)
 80114f2:	6818      	ldr	r0, [r3, #0]
 80114f4:	6803      	ldr	r3, [r0, #0]
 80114f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80114f8:	4798      	blx	r3
 80114fa:	e7ae      	b.n	801145a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f2>
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	f47f af4a 	bne.w	8011396 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x32e>
 8011502:	e626      	b.n	8011152 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xea>
 8011504:	20012638 	.word	0x20012638

08011508 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev>:
 8011508:	b538      	push	{r3, r4, r5, lr}
 801150a:	4c0b      	ldr	r4, [pc, #44]	@ (8011538 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x30>)
 801150c:	7823      	ldrb	r3, [r4, #0]
 801150e:	f3bf 8f5b 	dmb	ish
 8011512:	07db      	lsls	r3, r3, #31
 8011514:	4605      	mov	r5, r0
 8011516:	d40b      	bmi.n	8011530 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x28>
 8011518:	4620      	mov	r0, r4
 801151a:	f000 fd43 	bl	8011fa4 <__cxa_guard_acquire>
 801151e:	b138      	cbz	r0, 8011530 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x28>
 8011520:	4620      	mov	r0, r4
 8011522:	f000 fd4b 	bl	8011fbc <__cxa_guard_release>
 8011526:	4a05      	ldr	r2, [pc, #20]	@ (801153c <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x34>)
 8011528:	4905      	ldr	r1, [pc, #20]	@ (8011540 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x38>)
 801152a:	4806      	ldr	r0, [pc, #24]	@ (8011544 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x3c>)
 801152c:	f000 fd33 	bl	8011f96 <__aeabi_atexit>
 8011530:	4b04      	ldr	r3, [pc, #16]	@ (8011544 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x3c>)
 8011532:	67eb      	str	r3, [r5, #124]	@ 0x7c
 8011534:	bd38      	pop	{r3, r4, r5, pc}
 8011536:	bf00      	nop
 8011538:	200126c4 	.word	0x200126c4
 801153c:	20000000 	.word	0x20000000
 8011540:	0800f715 	.word	0x0800f715
 8011544:	20000088 	.word	0x20000088

08011548 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>:
 8011548:	b570      	push	{r4, r5, r6, lr}
 801154a:	1208      	asrs	r0, r1, #8
 801154c:	b29e      	uxth	r6, r3
 801154e:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 8011552:	1213      	asrs	r3, r2, #8
 8011554:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8011558:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 801155c:	fb13 f305 	smulbb	r3, r3, r5
 8011560:	fb10 f006 	smulbb	r0, r0, r6
 8011564:	4418      	add	r0, r3
 8011566:	10cc      	asrs	r4, r1, #3
 8011568:	10d3      	asrs	r3, r2, #3
 801156a:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 801156e:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 8011572:	fb13 f305 	smulbb	r3, r3, r5
 8011576:	fb14 f406 	smulbb	r4, r4, r6
 801157a:	00c9      	lsls	r1, r1, #3
 801157c:	00d2      	lsls	r2, r2, #3
 801157e:	441c      	add	r4, r3
 8011580:	b2d2      	uxtb	r2, r2
 8011582:	b2cb      	uxtb	r3, r1
 8011584:	fb12 f205 	smulbb	r2, r2, r5
 8011588:	b280      	uxth	r0, r0
 801158a:	fb13 f306 	smulbb	r3, r3, r6
 801158e:	4413      	add	r3, r2
 8011590:	1c42      	adds	r2, r0, #1
 8011592:	b29b      	uxth	r3, r3
 8011594:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8011598:	f400 4278 	and.w	r2, r0, #63488	@ 0xf800
 801159c:	1c58      	adds	r0, r3, #1
 801159e:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80115a2:	b2a4      	uxth	r4, r4
 80115a4:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 80115a8:	4310      	orrs	r0, r2
 80115aa:	1c62      	adds	r2, r4, #1
 80115ac:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 80115b0:	0964      	lsrs	r4, r4, #5
 80115b2:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 80115b6:	4320      	orrs	r0, r4
 80115b8:	bd70      	pop	{r4, r5, r6, pc}
	...

080115bc <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h>:
 80115bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115c0:	b08f      	sub	sp, #60	@ 0x3c
 80115c2:	461c      	mov	r4, r3
 80115c4:	f89d 7064 	ldrb.w	r7, [sp, #100]	@ 0x64
 80115c8:	9004      	str	r0, [sp, #16]
 80115ca:	460d      	mov	r5, r1
 80115cc:	4616      	mov	r6, r2
 80115ce:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80115d0:	2f00      	cmp	r7, #0
 80115d2:	f000 80f6 	beq.w	80117c2 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x206>
 80115d6:	6820      	ldr	r0, [r4, #0]
 80115d8:	6861      	ldr	r1, [r4, #4]
 80115da:	aa0a      	add	r2, sp, #40	@ 0x28
 80115dc:	c203      	stmia	r2!, {r0, r1}
 80115de:	6818      	ldr	r0, [r3, #0]
 80115e0:	6859      	ldr	r1, [r3, #4]
 80115e2:	aa0c      	add	r2, sp, #48	@ 0x30
 80115e4:	c203      	stmia	r2!, {r0, r1}
 80115e6:	a80a      	add	r0, sp, #40	@ 0x28
 80115e8:	f7fa fa52 	bl	800ba90 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80115ec:	4621      	mov	r1, r4
 80115ee:	a80c      	add	r0, sp, #48	@ 0x30
 80115f0:	f7fa fa76 	bl	800bae0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80115f4:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 80115f8:	f9bd b036 	ldrsh.w	fp, [sp, #54]	@ 0x36
 80115fc:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 8011600:	f002 0301 	and.w	r3, r2, #1
 8011604:	9306      	str	r3, [sp, #24]
 8011606:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 801160a:	f003 0101 	and.w	r1, r3, #1
 801160e:	9105      	str	r1, [sp, #20]
 8011610:	9805      	ldr	r0, [sp, #20]
 8011612:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 8011616:	4403      	add	r3, r0
 8011618:	fb01 2303 	mla	r3, r1, r3, r2
 801161c:	f04f 0802 	mov.w	r8, #2
 8011620:	fb93 f3f8 	sdiv	r3, r3, r8
 8011624:	441d      	add	r5, r3
 8011626:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801162a:	441a      	add	r2, r3
 801162c:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 8011630:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 8011634:	4419      	add	r1, r3
 8011636:	4b64      	ldr	r3, [pc, #400]	@ (80117c8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x20c>)
 8011638:	f8ad 1032 	strh.w	r1, [sp, #50]	@ 0x32
 801163c:	6818      	ldr	r0, [r3, #0]
 801163e:	6803      	ldr	r3, [r0, #0]
 8011640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011642:	4798      	blx	r3
 8011644:	4a61      	ldr	r2, [pc, #388]	@ (80117cc <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x210>)
 8011646:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	@ 0x32
 801164a:	8813      	ldrh	r3, [r2, #0]
 801164c:	f9bd a030 	ldrsh.w	sl, [sp, #48]	@ 0x30
 8011650:	2fff      	cmp	r7, #255	@ 0xff
 8011652:	fb03 a404 	mla	r4, r3, r4, sl
 8011656:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801165a:	f106 0604 	add.w	r6, r6, #4
 801165e:	4611      	mov	r1, r2
 8011660:	fb03 fb0b 	mul.w	fp, r3, fp
 8011664:	d06b      	beq.n	801173e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x182>
 8011666:	f1c7 03ff 	rsb	r3, r7, #255	@ 0xff
 801166a:	9303      	str	r3, [sp, #12]
 801166c:	eb04 034b 	add.w	r3, r4, fp, lsl #1
 8011670:	e9cd 3207 	strd	r3, r2, [sp, #28]
 8011674:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 8011678:	9b07      	ldr	r3, [sp, #28]
 801167a:	42a3      	cmp	r3, r4
 801167c:	f240 809c 	bls.w	80117b8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1fc>
 8011680:	9b06      	ldr	r3, [sp, #24]
 8011682:	2b00      	cmp	r3, #0
 8011684:	d039      	beq.n	80116fa <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x13e>
 8011686:	782b      	ldrb	r3, [r5, #0]
 8011688:	8822      	ldrh	r2, [r4, #0]
 801168a:	9804      	ldr	r0, [sp, #16]
 801168c:	f003 030f 	and.w	r3, r3, #15
 8011690:	f105 0801 	add.w	r8, r5, #1
 8011694:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 8011698:	9b03      	ldr	r3, [sp, #12]
 801169a:	9300      	str	r3, [sp, #0]
 801169c:	463b      	mov	r3, r7
 801169e:	f7ff ff53 	bl	8011548 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 80116a2:	f824 0b02 	strh.w	r0, [r4], #2
 80116a6:	f109 3bff 	add.w	fp, r9, #4294967295
 80116aa:	f1bb 0f01 	cmp.w	fp, #1
 80116ae:	46a2      	mov	sl, r4
 80116b0:	f104 0404 	add.w	r4, r4, #4
 80116b4:	dd24      	ble.n	8011700 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x144>
 80116b6:	f898 3000 	ldrb.w	r3, [r8]
 80116ba:	f834 2c04 	ldrh.w	r2, [r4, #-4]
 80116be:	9804      	ldr	r0, [sp, #16]
 80116c0:	091b      	lsrs	r3, r3, #4
 80116c2:	f1ab 0b02 	sub.w	fp, fp, #2
 80116c6:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 80116ca:	9b03      	ldr	r3, [sp, #12]
 80116cc:	9300      	str	r3, [sp, #0]
 80116ce:	463b      	mov	r3, r7
 80116d0:	f7ff ff3a 	bl	8011548 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 80116d4:	f824 0c04 	strh.w	r0, [r4, #-4]
 80116d8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80116dc:	f834 2c02 	ldrh.w	r2, [r4, #-2]
 80116e0:	9804      	ldr	r0, [sp, #16]
 80116e2:	f003 030f 	and.w	r3, r3, #15
 80116e6:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 80116ea:	9b03      	ldr	r3, [sp, #12]
 80116ec:	9300      	str	r3, [sp, #0]
 80116ee:	463b      	mov	r3, r7
 80116f0:	f7ff ff2a 	bl	8011548 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 80116f4:	f824 0c02 	strh.w	r0, [r4, #-2]
 80116f8:	e7d7      	b.n	80116aa <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xee>
 80116fa:	46a8      	mov	r8, r5
 80116fc:	46cb      	mov	fp, r9
 80116fe:	e7d4      	b.n	80116aa <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xee>
 8011700:	d10e      	bne.n	8011720 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x164>
 8011702:	f898 3000 	ldrb.w	r3, [r8]
 8011706:	f8ba 2000 	ldrh.w	r2, [sl]
 801170a:	9804      	ldr	r0, [sp, #16]
 801170c:	091b      	lsrs	r3, r3, #4
 801170e:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 8011712:	9b03      	ldr	r3, [sp, #12]
 8011714:	9300      	str	r3, [sp, #0]
 8011716:	463b      	mov	r3, r7
 8011718:	f7ff ff16 	bl	8011548 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 801171c:	f82a 0b02 	strh.w	r0, [sl], #2
 8011720:	9b08      	ldr	r3, [sp, #32]
 8011722:	9a05      	ldr	r2, [sp, #20]
 8011724:	881c      	ldrh	r4, [r3, #0]
 8011726:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 801172a:	eba4 0409 	sub.w	r4, r4, r9
 801172e:	4413      	add	r3, r2
 8011730:	eb0a 0444 	add.w	r4, sl, r4, lsl #1
 8011734:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011736:	fb93 f3f2 	sdiv	r3, r3, r2
 801173a:	441d      	add	r5, r3
 801173c:	e79c      	b.n	8011678 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xbc>
 801173e:	eb04 0b4b 	add.w	fp, r4, fp, lsl #1
 8011742:	45a3      	cmp	fp, r4
 8011744:	d938      	bls.n	80117b8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1fc>
 8011746:	9b06      	ldr	r3, [sp, #24]
 8011748:	b1f3      	cbz	r3, 8011788 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1cc>
 801174a:	782b      	ldrb	r3, [r5, #0]
 801174c:	f003 030f 	and.w	r3, r3, #15
 8011750:	1c6a      	adds	r2, r5, #1
 8011752:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8011756:	8023      	strh	r3, [r4, #0]
 8011758:	f109 30ff 	add.w	r0, r9, #4294967295
 801175c:	3402      	adds	r4, #2
 801175e:	2801      	cmp	r0, #1
 8011760:	4623      	mov	r3, r4
 8011762:	f104 0404 	add.w	r4, r4, #4
 8011766:	dd12      	ble.n	801178e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1d2>
 8011768:	7813      	ldrb	r3, [r2, #0]
 801176a:	091b      	lsrs	r3, r3, #4
 801176c:	3802      	subs	r0, #2
 801176e:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8011772:	f824 3c04 	strh.w	r3, [r4, #-4]
 8011776:	f812 3b01 	ldrb.w	r3, [r2], #1
 801177a:	f003 030f 	and.w	r3, r3, #15
 801177e:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8011782:	f824 3c02 	strh.w	r3, [r4, #-2]
 8011786:	e7ea      	b.n	801175e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1a2>
 8011788:	462a      	mov	r2, r5
 801178a:	4648      	mov	r0, r9
 801178c:	e7e7      	b.n	801175e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1a2>
 801178e:	d106      	bne.n	801179e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1e2>
 8011790:	7812      	ldrb	r2, [r2, #0]
 8011792:	0912      	lsrs	r2, r2, #4
 8011794:	3302      	adds	r3, #2
 8011796:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 801179a:	f823 2c02 	strh.w	r2, [r3, #-2]
 801179e:	880c      	ldrh	r4, [r1, #0]
 80117a0:	9a05      	ldr	r2, [sp, #20]
 80117a2:	eba4 0409 	sub.w	r4, r4, r9
 80117a6:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 80117aa:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 80117ae:	4413      	add	r3, r2
 80117b0:	fb93 f3f8 	sdiv	r3, r3, r8
 80117b4:	441d      	add	r5, r3
 80117b6:	e7c4      	b.n	8011742 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x186>
 80117b8:	4b03      	ldr	r3, [pc, #12]	@ (80117c8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x20c>)
 80117ba:	6818      	ldr	r0, [r3, #0]
 80117bc:	6803      	ldr	r3, [r0, #0]
 80117be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80117c0:	4798      	blx	r3
 80117c2:	b00f      	add	sp, #60	@ 0x3c
 80117c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117c8:	20012638 	.word	0x20012638
 80117cc:	20012632 	.word	0x20012632

080117d0 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>:
 80117d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80117d2:	f89d 5014 	ldrb.w	r5, [sp, #20]
 80117d6:	2dff      	cmp	r5, #255	@ 0xff
 80117d8:	ea4f 2711 	mov.w	r7, r1, lsr #8
 80117dc:	d10c      	bne.n	80117f8 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x28>
 80117de:	2bff      	cmp	r3, #255	@ 0xff
 80117e0:	d10a      	bne.n	80117f8 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x28>
 80117e2:	4b25      	ldr	r3, [pc, #148]	@ (8011878 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0xa8>)
 80117e4:	0948      	lsrs	r0, r1, #5
 80117e6:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 80117ea:	403b      	ands	r3, r7
 80117ec:	4318      	orrs	r0, r3
 80117ee:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 80117f2:	4308      	orrs	r0, r1
 80117f4:	b280      	uxth	r0, r0
 80117f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80117f8:	fb15 f503 	smulbb	r5, r5, r3
 80117fc:	b2ab      	uxth	r3, r5
 80117fe:	1c5d      	adds	r5, r3, #1
 8011800:	eb05 2513 	add.w	r5, r5, r3, lsr #8
 8011804:	1214      	asrs	r4, r2, #8
 8011806:	f3c5 2507 	ubfx	r5, r5, #8, #8
 801180a:	fa1f fc85 	uxth.w	ip, r5
 801180e:	10d6      	asrs	r6, r2, #3
 8011810:	00d0      	lsls	r0, r2, #3
 8011812:	43ed      	mvns	r5, r5
 8011814:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 8011818:	f3c1 4207 	ubfx	r2, r1, #16, #8
 801181c:	b2eb      	uxtb	r3, r5
 801181e:	b2c0      	uxtb	r0, r0
 8011820:	fb12 f20c 	smulbb	r2, r2, ip
 8011824:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8011828:	fb04 2403 	mla	r4, r4, r3, r2
 801182c:	ea40 1250 	orr.w	r2, r0, r0, lsr #5
 8011830:	b2c8      	uxtb	r0, r1
 8011832:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 8011836:	b2fd      	uxtb	r5, r7
 8011838:	fb10 f00c 	smulbb	r0, r0, ip
 801183c:	b2a4      	uxth	r4, r4
 801183e:	fb02 0003 	mla	r0, r2, r3, r0
 8011842:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 8011846:	fb15 f50c 	smulbb	r5, r5, ip
 801184a:	fb06 5503 	mla	r5, r6, r3, r5
 801184e:	b283      	uxth	r3, r0
 8011850:	1c60      	adds	r0, r4, #1
 8011852:	b2ad      	uxth	r5, r5
 8011854:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 8011858:	1c58      	adds	r0, r3, #1
 801185a:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801185e:	1c6b      	adds	r3, r5, #1
 8011860:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8011864:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 8011868:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 801186c:	096d      	lsrs	r5, r5, #5
 801186e:	4320      	orrs	r0, r4
 8011870:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8011874:	4328      	orrs	r0, r5
 8011876:	e7be      	b.n	80117f6 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x26>
 8011878:	00fff800 	.word	0x00fff800

0801187c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 801187c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011880:	461c      	mov	r4, r3
 8011882:	b08d      	sub	sp, #52	@ 0x34
 8011884:	460d      	mov	r5, r1
 8011886:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8011888:	6861      	ldr	r1, [r4, #4]
 801188a:	f89d 905c 	ldrb.w	r9, [sp, #92]	@ 0x5c
 801188e:	4680      	mov	r8, r0
 8011890:	6820      	ldr	r0, [r4, #0]
 8011892:	4616      	mov	r6, r2
 8011894:	aa08      	add	r2, sp, #32
 8011896:	c203      	stmia	r2!, {r0, r1}
 8011898:	6818      	ldr	r0, [r3, #0]
 801189a:	6859      	ldr	r1, [r3, #4]
 801189c:	aa0a      	add	r2, sp, #40	@ 0x28
 801189e:	c203      	stmia	r2!, {r0, r1}
 80118a0:	a808      	add	r0, sp, #32
 80118a2:	f7fa f8f5 	bl	800ba90 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80118a6:	4621      	mov	r1, r4
 80118a8:	a80a      	add	r0, sp, #40	@ 0x28
 80118aa:	f7fa f919 	bl	800bae0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80118ae:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	@ 0x28
 80118b2:	f9bd 702e 	ldrsh.w	r7, [sp, #46]	@ 0x2e
 80118b6:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	@ 0x2c
 80118ba:	f002 0301 	and.w	r3, r2, #1
 80118be:	9303      	str	r3, [sp, #12]
 80118c0:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	@ 0x24
 80118c4:	f003 0101 	and.w	r1, r3, #1
 80118c8:	9102      	str	r1, [sp, #8]
 80118ca:	9802      	ldr	r0, [sp, #8]
 80118cc:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 80118d0:	4403      	add	r3, r0
 80118d2:	fb01 2303 	mla	r3, r1, r3, r2
 80118d6:	f04f 0a02 	mov.w	sl, #2
 80118da:	fb93 f3fa 	sdiv	r3, r3, sl
 80118de:	441d      	add	r5, r3
 80118e0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80118e4:	441a      	add	r2, r3
 80118e6:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 80118ea:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 80118ee:	4a3f      	ldr	r2, [pc, #252]	@ (80119ec <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x170>)
 80118f0:	9205      	str	r2, [sp, #20]
 80118f2:	4419      	add	r1, r3
 80118f4:	6810      	ldr	r0, [r2, #0]
 80118f6:	f8ad 102a 	strh.w	r1, [sp, #42]	@ 0x2a
 80118fa:	6803      	ldr	r3, [r0, #0]
 80118fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80118fe:	4798      	blx	r3
 8011900:	4b3b      	ldr	r3, [pc, #236]	@ (80119f0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x174>)
 8011902:	f9bd 402a 	ldrsh.w	r4, [sp, #42]	@ 0x2a
 8011906:	8819      	ldrh	r1, [r3, #0]
 8011908:	f9bd c028 	ldrsh.w	ip, [sp, #40]	@ 0x28
 801190c:	fb01 c404 	mla	r4, r1, r4, ip
 8011910:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8011914:	434f      	muls	r7, r1
 8011916:	e9cd 3a06 	strd	r3, sl, [sp, #24]
 801191a:	eb04 0247 	add.w	r2, r4, r7, lsl #1
 801191e:	3604      	adds	r6, #4
 8011920:	9204      	str	r2, [sp, #16]
 8011922:	9b04      	ldr	r3, [sp, #16]
 8011924:	429c      	cmp	r4, r3
 8011926:	d258      	bcs.n	80119da <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x15e>
 8011928:	9b03      	ldr	r3, [sp, #12]
 801192a:	2b00      	cmp	r3, #0
 801192c:	d034      	beq.n	8011998 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x11c>
 801192e:	782b      	ldrb	r3, [r5, #0]
 8011930:	f003 030f 	and.w	r3, r3, #15
 8011934:	1c6f      	adds	r7, r5, #1
 8011936:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 801193a:	0e0b      	lsrs	r3, r1, #24
 801193c:	d006      	beq.n	801194c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd0>
 801193e:	8822      	ldrh	r2, [r4, #0]
 8011940:	9300      	str	r3, [sp, #0]
 8011942:	4640      	mov	r0, r8
 8011944:	464b      	mov	r3, r9
 8011946:	f7ff ff43 	bl	80117d0 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 801194a:	8020      	strh	r0, [r4, #0]
 801194c:	3402      	adds	r4, #2
 801194e:	f10b 3aff 	add.w	sl, fp, #4294967295
 8011952:	f1ba 0f01 	cmp.w	sl, #1
 8011956:	dd22      	ble.n	801199e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x122>
 8011958:	783b      	ldrb	r3, [r7, #0]
 801195a:	091b      	lsrs	r3, r3, #4
 801195c:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8011960:	0e0b      	lsrs	r3, r1, #24
 8011962:	d006      	beq.n	8011972 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xf6>
 8011964:	8822      	ldrh	r2, [r4, #0]
 8011966:	9300      	str	r3, [sp, #0]
 8011968:	4640      	mov	r0, r8
 801196a:	464b      	mov	r3, r9
 801196c:	f7ff ff30 	bl	80117d0 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 8011970:	8020      	strh	r0, [r4, #0]
 8011972:	f817 3b01 	ldrb.w	r3, [r7], #1
 8011976:	f003 030f 	and.w	r3, r3, #15
 801197a:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 801197e:	0e0b      	lsrs	r3, r1, #24
 8011980:	d006      	beq.n	8011990 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x114>
 8011982:	8862      	ldrh	r2, [r4, #2]
 8011984:	9300      	str	r3, [sp, #0]
 8011986:	4640      	mov	r0, r8
 8011988:	464b      	mov	r3, r9
 801198a:	f7ff ff21 	bl	80117d0 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 801198e:	8060      	strh	r0, [r4, #2]
 8011990:	3404      	adds	r4, #4
 8011992:	f1aa 0a02 	sub.w	sl, sl, #2
 8011996:	e7dc      	b.n	8011952 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd6>
 8011998:	462f      	mov	r7, r5
 801199a:	46da      	mov	sl, fp
 801199c:	e7d9      	b.n	8011952 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd6>
 801199e:	d10d      	bne.n	80119bc <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x140>
 80119a0:	783b      	ldrb	r3, [r7, #0]
 80119a2:	091b      	lsrs	r3, r3, #4
 80119a4:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 80119a8:	0e0b      	lsrs	r3, r1, #24
 80119aa:	d006      	beq.n	80119ba <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x13e>
 80119ac:	8822      	ldrh	r2, [r4, #0]
 80119ae:	9300      	str	r3, [sp, #0]
 80119b0:	4640      	mov	r0, r8
 80119b2:	464b      	mov	r3, r9
 80119b4:	f7ff ff0c 	bl	80117d0 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 80119b8:	8020      	strh	r0, [r4, #0]
 80119ba:	3402      	adds	r4, #2
 80119bc:	9b06      	ldr	r3, [sp, #24]
 80119be:	9a02      	ldr	r2, [sp, #8]
 80119c0:	881b      	ldrh	r3, [r3, #0]
 80119c2:	eba3 030b 	sub.w	r3, r3, fp
 80119c6:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80119ca:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	@ 0x24
 80119ce:	4413      	add	r3, r2
 80119d0:	9a07      	ldr	r2, [sp, #28]
 80119d2:	fb93 f3f2 	sdiv	r3, r3, r2
 80119d6:	441d      	add	r5, r3
 80119d8:	e7a3      	b.n	8011922 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xa6>
 80119da:	9b05      	ldr	r3, [sp, #20]
 80119dc:	6818      	ldr	r0, [r3, #0]
 80119de:	6803      	ldr	r3, [r0, #0]
 80119e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80119e2:	4798      	blx	r3
 80119e4:	b00d      	add	sp, #52	@ 0x34
 80119e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119ea:	bf00      	nop
 80119ec:	20012638 	.word	0x20012638
 80119f0:	20012632 	.word	0x20012632

080119f4 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>:
 80119f4:	b570      	push	{r4, r5, r6, lr}
 80119f6:	1214      	asrs	r4, r2, #8
 80119f8:	788d      	ldrb	r5, [r1, #2]
 80119fa:	f89d 6010 	ldrb.w	r6, [sp, #16]
 80119fe:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 8011a02:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8011a06:	fb15 f503 	smulbb	r5, r5, r3
 8011a0a:	fb04 5506 	mla	r5, r4, r6, r5
 8011a0e:	10d0      	asrs	r0, r2, #3
 8011a10:	784c      	ldrb	r4, [r1, #1]
 8011a12:	7809      	ldrb	r1, [r1, #0]
 8011a14:	00d2      	lsls	r2, r2, #3
 8011a16:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8011a1a:	b2d2      	uxtb	r2, r2
 8011a1c:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 8011a20:	fb14 f403 	smulbb	r4, r4, r3
 8011a24:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8011a28:	fb11 f303 	smulbb	r3, r1, r3
 8011a2c:	fb00 4406 	mla	r4, r0, r6, r4
 8011a30:	fb02 3306 	mla	r3, r2, r6, r3
 8011a34:	b2ad      	uxth	r5, r5
 8011a36:	b29b      	uxth	r3, r3
 8011a38:	b2a4      	uxth	r4, r4
 8011a3a:	1c68      	adds	r0, r5, #1
 8011a3c:	eb00 2515 	add.w	r5, r0, r5, lsr #8
 8011a40:	1c62      	adds	r2, r4, #1
 8011a42:	1c58      	adds	r0, r3, #1
 8011a44:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8011a48:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8011a4c:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8011a50:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8011a54:	0964      	lsrs	r4, r4, #5
 8011a56:	4328      	orrs	r0, r5
 8011a58:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 8011a5c:	4320      	orrs	r0, r4
 8011a5e:	bd70      	pop	{r4, r5, r6, pc}

08011a60 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 8011a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a64:	b08f      	sub	sp, #60	@ 0x3c
 8011a66:	461c      	mov	r4, r3
 8011a68:	f89d 7064 	ldrb.w	r7, [sp, #100]	@ 0x64
 8011a6c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8011a6e:	4682      	mov	sl, r0
 8011a70:	460e      	mov	r6, r1
 8011a72:	4615      	mov	r5, r2
 8011a74:	2f00      	cmp	r7, #0
 8011a76:	f000 8142 	beq.w	8011cfe <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x29e>
 8011a7a:	6820      	ldr	r0, [r4, #0]
 8011a7c:	6861      	ldr	r1, [r4, #4]
 8011a7e:	aa0a      	add	r2, sp, #40	@ 0x28
 8011a80:	c203      	stmia	r2!, {r0, r1}
 8011a82:	6818      	ldr	r0, [r3, #0]
 8011a84:	6859      	ldr	r1, [r3, #4]
 8011a86:	aa0c      	add	r2, sp, #48	@ 0x30
 8011a88:	c203      	stmia	r2!, {r0, r1}
 8011a8a:	a80a      	add	r0, sp, #40	@ 0x28
 8011a8c:	f7fa f800 	bl	800ba90 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8011a90:	4621      	mov	r1, r4
 8011a92:	a80c      	add	r0, sp, #48	@ 0x30
 8011a94:	f7fa f824 	bl	800bae0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8011a98:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 8011a9c:	f9bd b036 	ldrsh.w	fp, [sp, #54]	@ 0x36
 8011aa0:	f002 0301 	and.w	r3, r2, #1
 8011aa4:	9306      	str	r3, [sp, #24]
 8011aa6:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8011aaa:	f003 0101 	and.w	r1, r3, #1
 8011aae:	9105      	str	r1, [sp, #20]
 8011ab0:	9805      	ldr	r0, [sp, #20]
 8011ab2:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 8011ab6:	4403      	add	r3, r0
 8011ab8:	fb01 2303 	mla	r3, r1, r3, r2
 8011abc:	f04f 0802 	mov.w	r8, #2
 8011ac0:	fb93 f3f8 	sdiv	r3, r3, r8
 8011ac4:	441e      	add	r6, r3
 8011ac6:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8011aca:	441a      	add	r2, r3
 8011acc:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 8011ad0:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 8011ad4:	4419      	add	r1, r3
 8011ad6:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 8011ada:	9303      	str	r3, [sp, #12]
 8011adc:	4b89      	ldr	r3, [pc, #548]	@ (8011d04 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a4>)
 8011ade:	f8ad 1032 	strh.w	r1, [sp, #50]	@ 0x32
 8011ae2:	6818      	ldr	r0, [r3, #0]
 8011ae4:	6803      	ldr	r3, [r0, #0]
 8011ae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011ae8:	4798      	blx	r3
 8011aea:	4a87      	ldr	r2, [pc, #540]	@ (8011d08 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a8>)
 8011aec:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	@ 0x32
 8011af0:	8813      	ldrh	r3, [r2, #0]
 8011af2:	f9bd 9030 	ldrsh.w	r9, [sp, #48]	@ 0x30
 8011af6:	2fff      	cmp	r7, #255	@ 0xff
 8011af8:	fb03 9404 	mla	r4, r3, r4, r9
 8011afc:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8011b00:	f105 0504 	add.w	r5, r5, #4
 8011b04:	4694      	mov	ip, r2
 8011b06:	fb03 f30b 	mul.w	r3, r3, fp
 8011b0a:	d071      	beq.n	8011bf0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x190>
 8011b0c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8011b10:	43f9      	mvns	r1, r7
 8011b12:	e9cd 3207 	strd	r3, r2, [sp, #28]
 8011b16:	b2c9      	uxtb	r1, r1
 8011b18:	9104      	str	r1, [sp, #16]
 8011b1a:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 8011b1e:	9b07      	ldr	r3, [sp, #28]
 8011b20:	42a3      	cmp	r3, r4
 8011b22:	f240 80e7 	bls.w	8011cf4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x294>
 8011b26:	9b06      	ldr	r3, [sp, #24]
 8011b28:	2b00      	cmp	r3, #0
 8011b2a:	d03d      	beq.n	8011ba8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x148>
 8011b2c:	7831      	ldrb	r1, [r6, #0]
 8011b2e:	9b04      	ldr	r3, [sp, #16]
 8011b30:	8822      	ldrh	r2, [r4, #0]
 8011b32:	9300      	str	r3, [sp, #0]
 8011b34:	f001 010f 	and.w	r1, r1, #15
 8011b38:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8011b3c:	463b      	mov	r3, r7
 8011b3e:	4429      	add	r1, r5
 8011b40:	4650      	mov	r0, sl
 8011b42:	f7ff ff57 	bl	80119f4 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 8011b46:	9b03      	ldr	r3, [sp, #12]
 8011b48:	f824 0b02 	strh.w	r0, [r4], #2
 8011b4c:	f106 0801 	add.w	r8, r6, #1
 8011b50:	f103 3bff 	add.w	fp, r3, #4294967295
 8011b54:	f1bb 0f01 	cmp.w	fp, #1
 8011b58:	46a1      	mov	r9, r4
 8011b5a:	f104 0404 	add.w	r4, r4, #4
 8011b5e:	dd27      	ble.n	8011bb0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x150>
 8011b60:	f898 1000 	ldrb.w	r1, [r8]
 8011b64:	9b04      	ldr	r3, [sp, #16]
 8011b66:	f834 2c04 	ldrh.w	r2, [r4, #-4]
 8011b6a:	9300      	str	r3, [sp, #0]
 8011b6c:	0909      	lsrs	r1, r1, #4
 8011b6e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8011b72:	463b      	mov	r3, r7
 8011b74:	4429      	add	r1, r5
 8011b76:	4650      	mov	r0, sl
 8011b78:	f7ff ff3c 	bl	80119f4 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 8011b7c:	f824 0c04 	strh.w	r0, [r4, #-4]
 8011b80:	f818 1b01 	ldrb.w	r1, [r8], #1
 8011b84:	9b04      	ldr	r3, [sp, #16]
 8011b86:	f834 2c02 	ldrh.w	r2, [r4, #-2]
 8011b8a:	9300      	str	r3, [sp, #0]
 8011b8c:	f001 010f 	and.w	r1, r1, #15
 8011b90:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8011b94:	463b      	mov	r3, r7
 8011b96:	4429      	add	r1, r5
 8011b98:	4650      	mov	r0, sl
 8011b9a:	f7ff ff2b 	bl	80119f4 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 8011b9e:	f1ab 0b02 	sub.w	fp, fp, #2
 8011ba2:	f824 0c02 	strh.w	r0, [r4, #-2]
 8011ba6:	e7d5      	b.n	8011b54 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf4>
 8011ba8:	46b0      	mov	r8, r6
 8011baa:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8011bae:	e7d1      	b.n	8011b54 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf4>
 8011bb0:	d10f      	bne.n	8011bd2 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x172>
 8011bb2:	f898 1000 	ldrb.w	r1, [r8]
 8011bb6:	9b04      	ldr	r3, [sp, #16]
 8011bb8:	f8b9 2000 	ldrh.w	r2, [r9]
 8011bbc:	9300      	str	r3, [sp, #0]
 8011bbe:	0909      	lsrs	r1, r1, #4
 8011bc0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8011bc4:	463b      	mov	r3, r7
 8011bc6:	4429      	add	r1, r5
 8011bc8:	4650      	mov	r0, sl
 8011bca:	f7ff ff13 	bl	80119f4 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 8011bce:	f829 0b02 	strh.w	r0, [r9], #2
 8011bd2:	9b08      	ldr	r3, [sp, #32]
 8011bd4:	9a05      	ldr	r2, [sp, #20]
 8011bd6:	881c      	ldrh	r4, [r3, #0]
 8011bd8:	9b03      	ldr	r3, [sp, #12]
 8011bda:	1ae4      	subs	r4, r4, r3
 8011bdc:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8011be0:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 8011be4:	4413      	add	r3, r2
 8011be6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011be8:	fb93 f3f2 	sdiv	r3, r3, r2
 8011bec:	441e      	add	r6, r3
 8011bee:	e796      	b.n	8011b1e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xbe>
 8011bf0:	4f46      	ldr	r7, [pc, #280]	@ (8011d0c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2ac>)
 8011bf2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8011bf6:	42a3      	cmp	r3, r4
 8011bf8:	d97c      	bls.n	8011cf4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x294>
 8011bfa:	9a06      	ldr	r2, [sp, #24]
 8011bfc:	2a00      	cmp	r2, #0
 8011bfe:	d054      	beq.n	8011caa <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x24a>
 8011c00:	7830      	ldrb	r0, [r6, #0]
 8011c02:	f000 000f 	and.w	r0, r0, #15
 8011c06:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8011c0a:	eb05 0e00 	add.w	lr, r5, r0
 8011c0e:	5c28      	ldrb	r0, [r5, r0]
 8011c10:	f89e 2002 	ldrb.w	r2, [lr, #2]
 8011c14:	f89e e001 	ldrb.w	lr, [lr, #1]
 8011c18:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8011c1c:	f40e 6efc 	and.w	lr, lr, #2016	@ 0x7e0
 8011c20:	ea07 2202 	and.w	r2, r7, r2, lsl #8
 8011c24:	ea42 020e 	orr.w	r2, r2, lr
 8011c28:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
 8011c2c:	f824 2b02 	strh.w	r2, [r4], #2
 8011c30:	9a03      	ldr	r2, [sp, #12]
 8011c32:	1c71      	adds	r1, r6, #1
 8011c34:	f102 3eff 	add.w	lr, r2, #4294967295
 8011c38:	f1be 0f01 	cmp.w	lr, #1
 8011c3c:	4620      	mov	r0, r4
 8011c3e:	f104 0404 	add.w	r4, r4, #4
 8011c42:	dd36      	ble.n	8011cb2 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x252>
 8011c44:	7808      	ldrb	r0, [r1, #0]
 8011c46:	0900      	lsrs	r0, r0, #4
 8011c48:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8011c4c:	eb05 0a00 	add.w	sl, r5, r0
 8011c50:	f1ae 0e02 	sub.w	lr, lr, #2
 8011c54:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8011c58:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8011c5c:	00d2      	lsls	r2, r2, #3
 8011c5e:	ea07 2909 	and.w	r9, r7, r9, lsl #8
 8011c62:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8011c66:	ea49 0202 	orr.w	r2, r9, r2
 8011c6a:	f815 9000 	ldrb.w	r9, [r5, r0]
 8011c6e:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
 8011c72:	f824 2c04 	strh.w	r2, [r4, #-4]
 8011c76:	f811 0b01 	ldrb.w	r0, [r1], #1
 8011c7a:	f000 000f 	and.w	r0, r0, #15
 8011c7e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8011c82:	eb05 0a00 	add.w	sl, r5, r0
 8011c86:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8011c8a:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8011c8e:	00d2      	lsls	r2, r2, #3
 8011c90:	ea07 2909 	and.w	r9, r7, r9, lsl #8
 8011c94:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8011c98:	ea49 0202 	orr.w	r2, r9, r2
 8011c9c:	f815 9000 	ldrb.w	r9, [r5, r0]
 8011ca0:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
 8011ca4:	f824 2c02 	strh.w	r2, [r4, #-2]
 8011ca8:	e7c6      	b.n	8011c38 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1d8>
 8011caa:	4631      	mov	r1, r6
 8011cac:	f8dd e00c 	ldr.w	lr, [sp, #12]
 8011cb0:	e7c2      	b.n	8011c38 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1d8>
 8011cb2:	d111      	bne.n	8011cd8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x278>
 8011cb4:	7809      	ldrb	r1, [r1, #0]
 8011cb6:	0909      	lsrs	r1, r1, #4
 8011cb8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8011cbc:	186c      	adds	r4, r5, r1
 8011cbe:	5c69      	ldrb	r1, [r5, r1]
 8011cc0:	78a2      	ldrb	r2, [r4, #2]
 8011cc2:	7864      	ldrb	r4, [r4, #1]
 8011cc4:	00e4      	lsls	r4, r4, #3
 8011cc6:	ea07 2202 	and.w	r2, r7, r2, lsl #8
 8011cca:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 8011cce:	4322      	orrs	r2, r4
 8011cd0:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
 8011cd4:	f820 2b02 	strh.w	r2, [r0], #2
 8011cd8:	9a03      	ldr	r2, [sp, #12]
 8011cda:	f8bc 4000 	ldrh.w	r4, [ip]
 8011cde:	9905      	ldr	r1, [sp, #20]
 8011ce0:	1aa4      	subs	r4, r4, r2
 8011ce2:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 8011ce6:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8011cea:	440a      	add	r2, r1
 8011cec:	fb92 f2f8 	sdiv	r2, r2, r8
 8011cf0:	4416      	add	r6, r2
 8011cf2:	e780      	b.n	8011bf6 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x196>
 8011cf4:	4b03      	ldr	r3, [pc, #12]	@ (8011d04 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a4>)
 8011cf6:	6818      	ldr	r0, [r3, #0]
 8011cf8:	6803      	ldr	r3, [r0, #0]
 8011cfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011cfc:	4798      	blx	r3
 8011cfe:	b00f      	add	sp, #60	@ 0x3c
 8011d00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d04:	20012638 	.word	0x20012638
 8011d08:	20012632 	.word	0x20012632
 8011d0c:	fffff800 	.word	0xfffff800

08011d10 <CRC_Lock>:
 8011d10:	b530      	push	{r4, r5, lr}
 8011d12:	4a2d      	ldr	r2, [pc, #180]	@ (8011dc8 <CRC_Lock+0xb8>)
 8011d14:	6813      	ldr	r3, [r2, #0]
 8011d16:	f023 0301 	bic.w	r3, r3, #1
 8011d1a:	6013      	str	r3, [r2, #0]
 8011d1c:	4b2b      	ldr	r3, [pc, #172]	@ (8011dcc <CRC_Lock+0xbc>)
 8011d1e:	681c      	ldr	r4, [r3, #0]
 8011d20:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 8011d24:	4014      	ands	r4, r2
 8011d26:	f24c 2540 	movw	r5, #49728	@ 0xc240
 8011d2a:	42ac      	cmp	r4, r5
 8011d2c:	d005      	beq.n	8011d3a <CRC_Lock+0x2a>
 8011d2e:	681c      	ldr	r4, [r3, #0]
 8011d30:	f24c 2570 	movw	r5, #49776	@ 0xc270
 8011d34:	4014      	ands	r4, r2
 8011d36:	42ac      	cmp	r4, r5
 8011d38:	d125      	bne.n	8011d86 <CRC_Lock+0x76>
 8011d3a:	4b25      	ldr	r3, [pc, #148]	@ (8011dd0 <CRC_Lock+0xc0>)
 8011d3c:	681b      	ldr	r3, [r3, #0]
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	d139      	bne.n	8011db6 <CRC_Lock+0xa6>
 8011d42:	4b24      	ldr	r3, [pc, #144]	@ (8011dd4 <CRC_Lock+0xc4>)
 8011d44:	681a      	ldr	r2, [r3, #0]
 8011d46:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8011d4a:	f5b2 6f8a 	cmp.w	r2, #1104	@ 0x450
 8011d4e:	d00d      	beq.n	8011d6c <CRC_Lock+0x5c>
 8011d50:	681a      	ldr	r2, [r3, #0]
 8011d52:	f240 4483 	movw	r4, #1155	@ 0x483
 8011d56:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8011d5a:	42a2      	cmp	r2, r4
 8011d5c:	d006      	beq.n	8011d6c <CRC_Lock+0x5c>
 8011d5e:	681b      	ldr	r3, [r3, #0]
 8011d60:	f240 4285 	movw	r2, #1157	@ 0x485
 8011d64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011d68:	4293      	cmp	r3, r2
 8011d6a:	d124      	bne.n	8011db6 <CRC_Lock+0xa6>
 8011d6c:	4b1a      	ldr	r3, [pc, #104]	@ (8011dd8 <CRC_Lock+0xc8>)
 8011d6e:	2201      	movs	r2, #1
 8011d70:	601a      	str	r2, [r3, #0]
 8011d72:	681a      	ldr	r2, [r3, #0]
 8011d74:	2a00      	cmp	r2, #0
 8011d76:	d1fc      	bne.n	8011d72 <CRC_Lock+0x62>
 8011d78:	4b18      	ldr	r3, [pc, #96]	@ (8011ddc <CRC_Lock+0xcc>)
 8011d7a:	6018      	str	r0, [r3, #0]
 8011d7c:	6818      	ldr	r0, [r3, #0]
 8011d7e:	1a43      	subs	r3, r0, r1
 8011d80:	4258      	negs	r0, r3
 8011d82:	4158      	adcs	r0, r3
 8011d84:	e00e      	b.n	8011da4 <CRC_Lock+0x94>
 8011d86:	681b      	ldr	r3, [r3, #0]
 8011d88:	4013      	ands	r3, r2
 8011d8a:	f24d 2220 	movw	r2, #53792	@ 0xd220
 8011d8e:	4293      	cmp	r3, r2
 8011d90:	d111      	bne.n	8011db6 <CRC_Lock+0xa6>
 8011d92:	4b13      	ldr	r3, [pc, #76]	@ (8011de0 <CRC_Lock+0xd0>)
 8011d94:	681b      	ldr	r3, [r3, #0]
 8011d96:	f240 4286 	movw	r2, #1158	@ 0x486
 8011d9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011d9e:	4293      	cmp	r3, r2
 8011da0:	d001      	beq.n	8011da6 <CRC_Lock+0x96>
 8011da2:	2000      	movs	r0, #0
 8011da4:	bd30      	pop	{r4, r5, pc}
 8011da6:	4b0f      	ldr	r3, [pc, #60]	@ (8011de4 <CRC_Lock+0xd4>)
 8011da8:	2201      	movs	r2, #1
 8011daa:	601a      	str	r2, [r3, #0]
 8011dac:	681a      	ldr	r2, [r3, #0]
 8011dae:	2a00      	cmp	r2, #0
 8011db0:	d1fc      	bne.n	8011dac <CRC_Lock+0x9c>
 8011db2:	4b0d      	ldr	r3, [pc, #52]	@ (8011de8 <CRC_Lock+0xd8>)
 8011db4:	e7e1      	b.n	8011d7a <CRC_Lock+0x6a>
 8011db6:	4b0d      	ldr	r3, [pc, #52]	@ (8011dec <CRC_Lock+0xdc>)
 8011db8:	2201      	movs	r2, #1
 8011dba:	601a      	str	r2, [r3, #0]
 8011dbc:	681a      	ldr	r2, [r3, #0]
 8011dbe:	2a00      	cmp	r2, #0
 8011dc0:	d1fc      	bne.n	8011dbc <CRC_Lock+0xac>
 8011dc2:	4b0b      	ldr	r3, [pc, #44]	@ (8011df0 <CRC_Lock+0xe0>)
 8011dc4:	e7d9      	b.n	8011d7a <CRC_Lock+0x6a>
 8011dc6:	bf00      	nop
 8011dc8:	e0002000 	.word	0xe0002000
 8011dcc:	e000ed00 	.word	0xe000ed00
 8011dd0:	e0042000 	.word	0xe0042000
 8011dd4:	5c001000 	.word	0x5c001000
 8011dd8:	58024c08 	.word	0x58024c08
 8011ddc:	58024c00 	.word	0x58024c00
 8011de0:	46008ff0 	.word	0x46008ff0
 8011de4:	46024c08 	.word	0x46024c08
 8011de8:	46024c00 	.word	0x46024c00
 8011dec:	40023008 	.word	0x40023008
 8011df0:	40023000 	.word	0x40023000

08011df4 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8011df4:	6101      	str	r1, [r0, #16]
 8011df6:	4770      	bx	lr

08011df8 <_ZN8touchgfx8Gestures4tickEv>:
 8011df8:	7b83      	ldrb	r3, [r0, #14]
 8011dfa:	b14b      	cbz	r3, 8011e10 <_ZN8touchgfx8Gestures4tickEv+0x18>
 8011dfc:	8903      	ldrh	r3, [r0, #8]
 8011dfe:	3301      	adds	r3, #1
 8011e00:	b29b      	uxth	r3, r3
 8011e02:	2b07      	cmp	r3, #7
 8011e04:	8103      	strh	r3, [r0, #8]
 8011e06:	bf81      	itttt	hi
 8011e08:	2300      	movhi	r3, #0
 8011e0a:	8143      	strhhi	r3, [r0, #10]
 8011e0c:	8183      	strhhi	r3, [r0, #12]
 8011e0e:	7383      	strbhi	r3, [r0, #14]
 8011e10:	4770      	bx	lr
	...

08011e14 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8011e14:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8011e18:	4698      	mov	r8, r3
 8011e1a:	8883      	ldrh	r3, [r0, #4]
 8011e1c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8011e20:	eba8 0303 	sub.w	r3, r8, r3
 8011e24:	b21b      	sxth	r3, r3
 8011e26:	4604      	mov	r4, r0
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	4617      	mov	r7, r2
 8011e2c:	4a18      	ldr	r2, [pc, #96]	@ (8011e90 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 8011e2e:	9200      	str	r2, [sp, #0]
 8011e30:	bfb8      	it	lt
 8011e32:	425b      	neglt	r3, r3
 8011e34:	8aa2      	ldrh	r2, [r4, #20]
 8011e36:	f8bd 5028 	ldrh.w	r5, [sp, #40]	@ 0x28
 8011e3a:	f8ad 800a 	strh.w	r8, [sp, #10]
 8011e3e:	b21b      	sxth	r3, r3
 8011e40:	460e      	mov	r6, r1
 8011e42:	4293      	cmp	r3, r2
 8011e44:	88c1      	ldrh	r1, [r0, #6]
 8011e46:	f8ad 1008 	strh.w	r1, [sp, #8]
 8011e4a:	f04f 0000 	mov.w	r0, #0
 8011e4e:	f88d 0004 	strb.w	r0, [sp, #4]
 8011e52:	f8ad 500c 	strh.w	r5, [sp, #12]
 8011e56:	dc07      	bgt.n	8011e68 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x54>
 8011e58:	1a69      	subs	r1, r5, r1
 8011e5a:	b209      	sxth	r1, r1
 8011e5c:	2900      	cmp	r1, #0
 8011e5e:	bfb8      	it	lt
 8011e60:	4249      	neglt	r1, r1
 8011e62:	b209      	sxth	r1, r1
 8011e64:	428a      	cmp	r2, r1
 8011e66:	da10      	bge.n	8011e8a <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x76>
 8011e68:	6920      	ldr	r0, [r4, #16]
 8011e6a:	6803      	ldr	r3, [r0, #0]
 8011e6c:	4669      	mov	r1, sp
 8011e6e:	685b      	ldr	r3, [r3, #4]
 8011e70:	4798      	blx	r3
 8011e72:	eba8 0606 	sub.w	r6, r8, r6
 8011e76:	2300      	movs	r3, #0
 8011e78:	1bef      	subs	r7, r5, r7
 8011e7a:	2001      	movs	r0, #1
 8011e7c:	8123      	strh	r3, [r4, #8]
 8011e7e:	8166      	strh	r6, [r4, #10]
 8011e80:	81a7      	strh	r7, [r4, #12]
 8011e82:	f8a4 8004 	strh.w	r8, [r4, #4]
 8011e86:	80e5      	strh	r5, [r4, #6]
 8011e88:	73a0      	strb	r0, [r4, #14]
 8011e8a:	b004      	add	sp, #16
 8011e8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e90:	08014898 	.word	0x08014898

08011e94 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8011e94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011e96:	461e      	mov	r6, r3
 8011e98:	1e4b      	subs	r3, r1, #1
 8011e9a:	2b01      	cmp	r3, #1
 8011e9c:	b085      	sub	sp, #20
 8011e9e:	4604      	mov	r4, r0
 8011ea0:	460d      	mov	r5, r1
 8011ea2:	4617      	mov	r7, r2
 8011ea4:	d84b      	bhi.n	8011f3e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8011ea6:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8011eaa:	1cd3      	adds	r3, r2, #3
 8011eac:	b29b      	uxth	r3, r3
 8011eae:	2b06      	cmp	r3, #6
 8011eb0:	d916      	bls.n	8011ee0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8011eb2:	f8df c0a0 	ldr.w	ip, [pc, #160]	@ 8011f54 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8011eb6:	f8cd c004 	str.w	ip, [sp, #4]
 8011eba:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8011ebe:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8011ec2:	6900      	ldr	r0, [r0, #16]
 8011ec4:	f8ad 100c 	strh.w	r1, [sp, #12]
 8011ec8:	f04f 0c00 	mov.w	ip, #0
 8011ecc:	f88d c008 	strb.w	ip, [sp, #8]
 8011ed0:	f8ad 200a 	strh.w	r2, [sp, #10]
 8011ed4:	f8ad 300e 	strh.w	r3, [sp, #14]
 8011ed8:	6803      	ldr	r3, [r0, #0]
 8011eda:	a901      	add	r1, sp, #4
 8011edc:	689b      	ldr	r3, [r3, #8]
 8011ede:	4798      	blx	r3
 8011ee0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011ee4:	1cd3      	adds	r3, r2, #3
 8011ee6:	b29b      	uxth	r3, r3
 8011ee8:	2b06      	cmp	r3, #6
 8011eea:	d916      	bls.n	8011f1a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8011eec:	f8df c064 	ldr.w	ip, [pc, #100]	@ 8011f54 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8011ef0:	f8cd c004 	str.w	ip, [sp, #4]
 8011ef4:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8011ef8:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8011efc:	6920      	ldr	r0, [r4, #16]
 8011efe:	f8ad 100c 	strh.w	r1, [sp, #12]
 8011f02:	f04f 0c01 	mov.w	ip, #1
 8011f06:	f88d c008 	strb.w	ip, [sp, #8]
 8011f0a:	f8ad 200a 	strh.w	r2, [sp, #10]
 8011f0e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8011f12:	6803      	ldr	r3, [r0, #0]
 8011f14:	a901      	add	r1, sp, #4
 8011f16:	689b      	ldr	r3, [r3, #8]
 8011f18:	4798      	blx	r3
 8011f1a:	4b0d      	ldr	r3, [pc, #52]	@ (8011f50 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 8011f1c:	9301      	str	r3, [sp, #4]
 8011f1e:	6920      	ldr	r0, [r4, #16]
 8011f20:	f88d 5008 	strb.w	r5, [sp, #8]
 8011f24:	2300      	movs	r3, #0
 8011f26:	f8ad 700a 	strh.w	r7, [sp, #10]
 8011f2a:	f8ad 600c 	strh.w	r6, [sp, #12]
 8011f2e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8011f32:	6803      	ldr	r3, [r0, #0]
 8011f34:	a901      	add	r1, sp, #4
 8011f36:	681b      	ldr	r3, [r3, #0]
 8011f38:	4798      	blx	r3
 8011f3a:	b005      	add	sp, #20
 8011f3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011f3e:	2900      	cmp	r1, #0
 8011f40:	d1eb      	bne.n	8011f1a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8011f42:	80a2      	strh	r2, [r4, #4]
 8011f44:	80c6      	strh	r6, [r0, #6]
 8011f46:	60a1      	str	r1, [r4, #8]
 8011f48:	81a1      	strh	r1, [r4, #12]
 8011f4a:	73a1      	strb	r1, [r4, #14]
 8011f4c:	e7e5      	b.n	8011f1a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8011f4e:	bf00      	nop
 8011f50:	08014884 	.word	0x08014884
 8011f54:	080148ac 	.word	0x080148ac

08011f58 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 8011f58:	b570      	push	{r4, r5, r6, lr}
 8011f5a:	790b      	ldrb	r3, [r1, #4]
 8011f5c:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 8011f60:	2b00      	cmp	r3, #0
 8011f62:	bf0c      	ite	eq
 8011f64:	2301      	moveq	r3, #1
 8011f66:	2300      	movne	r3, #0
 8011f68:	4604      	mov	r4, r0
 8011f6a:	460e      	mov	r6, r1
 8011f6c:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
 8011f70:	d109      	bne.n	8011f86 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 8011f72:	b14d      	cbz	r5, 8011f88 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 8011f74:	7933      	ldrb	r3, [r6, #4]
 8011f76:	2b01      	cmp	r3, #1
 8011f78:	d10c      	bne.n	8011f94 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8011f7a:	6823      	ldr	r3, [r4, #0]
 8011f7c:	4620      	mov	r0, r4
 8011f7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011f80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011f84:	4718      	bx	r3
 8011f86:	b12d      	cbz	r5, 8011f94 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8011f88:	6823      	ldr	r3, [r4, #0]
 8011f8a:	4620      	mov	r0, r4
 8011f8c:	695b      	ldr	r3, [r3, #20]
 8011f8e:	4798      	blx	r3
 8011f90:	2d00      	cmp	r5, #0
 8011f92:	d1ef      	bne.n	8011f74 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 8011f94:	bd70      	pop	{r4, r5, r6, pc}

08011f96 <__aeabi_atexit>:
 8011f96:	460b      	mov	r3, r1
 8011f98:	4601      	mov	r1, r0
 8011f9a:	4618      	mov	r0, r3
 8011f9c:	f000 b910 	b.w	80121c0 <__cxa_atexit>

08011fa0 <_ZdlPvj>:
 8011fa0:	f000 b812 	b.w	8011fc8 <_ZdlPv>

08011fa4 <__cxa_guard_acquire>:
 8011fa4:	6802      	ldr	r2, [r0, #0]
 8011fa6:	07d2      	lsls	r2, r2, #31
 8011fa8:	4603      	mov	r3, r0
 8011faa:	d405      	bmi.n	8011fb8 <__cxa_guard_acquire+0x14>
 8011fac:	7842      	ldrb	r2, [r0, #1]
 8011fae:	b102      	cbz	r2, 8011fb2 <__cxa_guard_acquire+0xe>
 8011fb0:	deff      	udf	#255	@ 0xff
 8011fb2:	2001      	movs	r0, #1
 8011fb4:	7058      	strb	r0, [r3, #1]
 8011fb6:	4770      	bx	lr
 8011fb8:	2000      	movs	r0, #0
 8011fba:	4770      	bx	lr

08011fbc <__cxa_guard_release>:
 8011fbc:	2301      	movs	r3, #1
 8011fbe:	6003      	str	r3, [r0, #0]
 8011fc0:	4770      	bx	lr

08011fc2 <__cxa_pure_virtual>:
 8011fc2:	b508      	push	{r3, lr}
 8011fc4:	f000 f80e 	bl	8011fe4 <_ZSt9terminatev>

08011fc8 <_ZdlPv>:
 8011fc8:	f000 b844 	b.w	8012054 <free>

08011fcc <_ZN10__cxxabiv111__terminateEPFvvE>:
 8011fcc:	b508      	push	{r3, lr}
 8011fce:	4780      	blx	r0
 8011fd0:	f000 f80d 	bl	8011fee <abort>

08011fd4 <_ZSt13get_terminatev>:
 8011fd4:	4b02      	ldr	r3, [pc, #8]	@ (8011fe0 <_ZSt13get_terminatev+0xc>)
 8011fd6:	6818      	ldr	r0, [r3, #0]
 8011fd8:	f3bf 8f5b 	dmb	ish
 8011fdc:	4770      	bx	lr
 8011fde:	bf00      	nop
 8011fe0:	2000008c 	.word	0x2000008c

08011fe4 <_ZSt9terminatev>:
 8011fe4:	b508      	push	{r3, lr}
 8011fe6:	f7ff fff5 	bl	8011fd4 <_ZSt13get_terminatev>
 8011fea:	f7ff ffef 	bl	8011fcc <_ZN10__cxxabiv111__terminateEPFvvE>

08011fee <abort>:
 8011fee:	b508      	push	{r3, lr}
 8011ff0:	2006      	movs	r0, #6
 8011ff2:	f000 fa3b 	bl	801246c <raise>
 8011ff6:	2001      	movs	r0, #1
 8011ff8:	f7ef ff62 	bl	8001ec0 <_exit>

08011ffc <__assert_func>:
 8011ffc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011ffe:	4614      	mov	r4, r2
 8012000:	461a      	mov	r2, r3
 8012002:	4b09      	ldr	r3, [pc, #36]	@ (8012028 <__assert_func+0x2c>)
 8012004:	681b      	ldr	r3, [r3, #0]
 8012006:	4605      	mov	r5, r0
 8012008:	68d8      	ldr	r0, [r3, #12]
 801200a:	b14c      	cbz	r4, 8012020 <__assert_func+0x24>
 801200c:	4b07      	ldr	r3, [pc, #28]	@ (801202c <__assert_func+0x30>)
 801200e:	9100      	str	r1, [sp, #0]
 8012010:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012014:	4906      	ldr	r1, [pc, #24]	@ (8012030 <__assert_func+0x34>)
 8012016:	462b      	mov	r3, r5
 8012018:	f000 f984 	bl	8012324 <fiprintf>
 801201c:	f7ff ffe7 	bl	8011fee <abort>
 8012020:	4b04      	ldr	r3, [pc, #16]	@ (8012034 <__assert_func+0x38>)
 8012022:	461c      	mov	r4, r3
 8012024:	e7f3      	b.n	801200e <__assert_func+0x12>
 8012026:	bf00      	nop
 8012028:	2000009c 	.word	0x2000009c
 801202c:	08013cb8 	.word	0x08013cb8
 8012030:	08013cc5 	.word	0x08013cc5
 8012034:	08013cf3 	.word	0x08013cf3

08012038 <atexit>:
 8012038:	2300      	movs	r3, #0
 801203a:	4601      	mov	r1, r0
 801203c:	461a      	mov	r2, r3
 801203e:	4618      	mov	r0, r3
 8012040:	f000 bac2 	b.w	80125c8 <__register_exitproc>

08012044 <malloc>:
 8012044:	4b02      	ldr	r3, [pc, #8]	@ (8012050 <malloc+0xc>)
 8012046:	4601      	mov	r1, r0
 8012048:	6818      	ldr	r0, [r3, #0]
 801204a:	f000 b82d 	b.w	80120a8 <_malloc_r>
 801204e:	bf00      	nop
 8012050:	2000009c 	.word	0x2000009c

08012054 <free>:
 8012054:	4b02      	ldr	r3, [pc, #8]	@ (8012060 <free+0xc>)
 8012056:	4601      	mov	r1, r0
 8012058:	6818      	ldr	r0, [r3, #0]
 801205a:	f000 bb11 	b.w	8012680 <_free_r>
 801205e:	bf00      	nop
 8012060:	2000009c 	.word	0x2000009c

08012064 <sbrk_aligned>:
 8012064:	b570      	push	{r4, r5, r6, lr}
 8012066:	4e0f      	ldr	r6, [pc, #60]	@ (80120a4 <sbrk_aligned+0x40>)
 8012068:	460c      	mov	r4, r1
 801206a:	6831      	ldr	r1, [r6, #0]
 801206c:	4605      	mov	r5, r0
 801206e:	b911      	cbnz	r1, 8012076 <sbrk_aligned+0x12>
 8012070:	f000 fa4c 	bl	801250c <_sbrk_r>
 8012074:	6030      	str	r0, [r6, #0]
 8012076:	4621      	mov	r1, r4
 8012078:	4628      	mov	r0, r5
 801207a:	f000 fa47 	bl	801250c <_sbrk_r>
 801207e:	1c43      	adds	r3, r0, #1
 8012080:	d103      	bne.n	801208a <sbrk_aligned+0x26>
 8012082:	f04f 34ff 	mov.w	r4, #4294967295
 8012086:	4620      	mov	r0, r4
 8012088:	bd70      	pop	{r4, r5, r6, pc}
 801208a:	1cc4      	adds	r4, r0, #3
 801208c:	f024 0403 	bic.w	r4, r4, #3
 8012090:	42a0      	cmp	r0, r4
 8012092:	d0f8      	beq.n	8012086 <sbrk_aligned+0x22>
 8012094:	1a21      	subs	r1, r4, r0
 8012096:	4628      	mov	r0, r5
 8012098:	f000 fa38 	bl	801250c <_sbrk_r>
 801209c:	3001      	adds	r0, #1
 801209e:	d1f2      	bne.n	8012086 <sbrk_aligned+0x22>
 80120a0:	e7ef      	b.n	8012082 <sbrk_aligned+0x1e>
 80120a2:	bf00      	nop
 80120a4:	200126c8 	.word	0x200126c8

080120a8 <_malloc_r>:
 80120a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80120ac:	1ccd      	adds	r5, r1, #3
 80120ae:	f025 0503 	bic.w	r5, r5, #3
 80120b2:	3508      	adds	r5, #8
 80120b4:	2d0c      	cmp	r5, #12
 80120b6:	bf38      	it	cc
 80120b8:	250c      	movcc	r5, #12
 80120ba:	2d00      	cmp	r5, #0
 80120bc:	4606      	mov	r6, r0
 80120be:	db01      	blt.n	80120c4 <_malloc_r+0x1c>
 80120c0:	42a9      	cmp	r1, r5
 80120c2:	d904      	bls.n	80120ce <_malloc_r+0x26>
 80120c4:	230c      	movs	r3, #12
 80120c6:	6033      	str	r3, [r6, #0]
 80120c8:	2000      	movs	r0, #0
 80120ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80120ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80121a4 <_malloc_r+0xfc>
 80120d2:	f000 f869 	bl	80121a8 <__malloc_lock>
 80120d6:	f8d8 3000 	ldr.w	r3, [r8]
 80120da:	461c      	mov	r4, r3
 80120dc:	bb44      	cbnz	r4, 8012130 <_malloc_r+0x88>
 80120de:	4629      	mov	r1, r5
 80120e0:	4630      	mov	r0, r6
 80120e2:	f7ff ffbf 	bl	8012064 <sbrk_aligned>
 80120e6:	1c43      	adds	r3, r0, #1
 80120e8:	4604      	mov	r4, r0
 80120ea:	d158      	bne.n	801219e <_malloc_r+0xf6>
 80120ec:	f8d8 4000 	ldr.w	r4, [r8]
 80120f0:	4627      	mov	r7, r4
 80120f2:	2f00      	cmp	r7, #0
 80120f4:	d143      	bne.n	801217e <_malloc_r+0xd6>
 80120f6:	2c00      	cmp	r4, #0
 80120f8:	d04b      	beq.n	8012192 <_malloc_r+0xea>
 80120fa:	6823      	ldr	r3, [r4, #0]
 80120fc:	4639      	mov	r1, r7
 80120fe:	4630      	mov	r0, r6
 8012100:	eb04 0903 	add.w	r9, r4, r3
 8012104:	f000 fa02 	bl	801250c <_sbrk_r>
 8012108:	4581      	cmp	r9, r0
 801210a:	d142      	bne.n	8012192 <_malloc_r+0xea>
 801210c:	6821      	ldr	r1, [r4, #0]
 801210e:	1a6d      	subs	r5, r5, r1
 8012110:	4629      	mov	r1, r5
 8012112:	4630      	mov	r0, r6
 8012114:	f7ff ffa6 	bl	8012064 <sbrk_aligned>
 8012118:	3001      	adds	r0, #1
 801211a:	d03a      	beq.n	8012192 <_malloc_r+0xea>
 801211c:	6823      	ldr	r3, [r4, #0]
 801211e:	442b      	add	r3, r5
 8012120:	6023      	str	r3, [r4, #0]
 8012122:	f8d8 3000 	ldr.w	r3, [r8]
 8012126:	685a      	ldr	r2, [r3, #4]
 8012128:	bb62      	cbnz	r2, 8012184 <_malloc_r+0xdc>
 801212a:	f8c8 7000 	str.w	r7, [r8]
 801212e:	e00f      	b.n	8012150 <_malloc_r+0xa8>
 8012130:	6822      	ldr	r2, [r4, #0]
 8012132:	1b52      	subs	r2, r2, r5
 8012134:	d420      	bmi.n	8012178 <_malloc_r+0xd0>
 8012136:	2a0b      	cmp	r2, #11
 8012138:	d917      	bls.n	801216a <_malloc_r+0xc2>
 801213a:	1961      	adds	r1, r4, r5
 801213c:	42a3      	cmp	r3, r4
 801213e:	6025      	str	r5, [r4, #0]
 8012140:	bf18      	it	ne
 8012142:	6059      	strne	r1, [r3, #4]
 8012144:	6863      	ldr	r3, [r4, #4]
 8012146:	bf08      	it	eq
 8012148:	f8c8 1000 	streq.w	r1, [r8]
 801214c:	5162      	str	r2, [r4, r5]
 801214e:	604b      	str	r3, [r1, #4]
 8012150:	4630      	mov	r0, r6
 8012152:	f000 f82f 	bl	80121b4 <__malloc_unlock>
 8012156:	f104 000b 	add.w	r0, r4, #11
 801215a:	1d23      	adds	r3, r4, #4
 801215c:	f020 0007 	bic.w	r0, r0, #7
 8012160:	1ac2      	subs	r2, r0, r3
 8012162:	bf1c      	itt	ne
 8012164:	1a1b      	subne	r3, r3, r0
 8012166:	50a3      	strne	r3, [r4, r2]
 8012168:	e7af      	b.n	80120ca <_malloc_r+0x22>
 801216a:	6862      	ldr	r2, [r4, #4]
 801216c:	42a3      	cmp	r3, r4
 801216e:	bf0c      	ite	eq
 8012170:	f8c8 2000 	streq.w	r2, [r8]
 8012174:	605a      	strne	r2, [r3, #4]
 8012176:	e7eb      	b.n	8012150 <_malloc_r+0xa8>
 8012178:	4623      	mov	r3, r4
 801217a:	6864      	ldr	r4, [r4, #4]
 801217c:	e7ae      	b.n	80120dc <_malloc_r+0x34>
 801217e:	463c      	mov	r4, r7
 8012180:	687f      	ldr	r7, [r7, #4]
 8012182:	e7b6      	b.n	80120f2 <_malloc_r+0x4a>
 8012184:	461a      	mov	r2, r3
 8012186:	685b      	ldr	r3, [r3, #4]
 8012188:	42a3      	cmp	r3, r4
 801218a:	d1fb      	bne.n	8012184 <_malloc_r+0xdc>
 801218c:	2300      	movs	r3, #0
 801218e:	6053      	str	r3, [r2, #4]
 8012190:	e7de      	b.n	8012150 <_malloc_r+0xa8>
 8012192:	230c      	movs	r3, #12
 8012194:	6033      	str	r3, [r6, #0]
 8012196:	4630      	mov	r0, r6
 8012198:	f000 f80c 	bl	80121b4 <__malloc_unlock>
 801219c:	e794      	b.n	80120c8 <_malloc_r+0x20>
 801219e:	6005      	str	r5, [r0, #0]
 80121a0:	e7d6      	b.n	8012150 <_malloc_r+0xa8>
 80121a2:	bf00      	nop
 80121a4:	200126cc 	.word	0x200126cc

080121a8 <__malloc_lock>:
 80121a8:	4801      	ldr	r0, [pc, #4]	@ (80121b0 <__malloc_lock+0x8>)
 80121aa:	f000 b9fc 	b.w	80125a6 <__retarget_lock_acquire_recursive>
 80121ae:	bf00      	nop
 80121b0:	20012810 	.word	0x20012810

080121b4 <__malloc_unlock>:
 80121b4:	4801      	ldr	r0, [pc, #4]	@ (80121bc <__malloc_unlock+0x8>)
 80121b6:	f000 b9f7 	b.w	80125a8 <__retarget_lock_release_recursive>
 80121ba:	bf00      	nop
 80121bc:	20012810 	.word	0x20012810

080121c0 <__cxa_atexit>:
 80121c0:	b510      	push	{r4, lr}
 80121c2:	4604      	mov	r4, r0
 80121c4:	4804      	ldr	r0, [pc, #16]	@ (80121d8 <__cxa_atexit+0x18>)
 80121c6:	4613      	mov	r3, r2
 80121c8:	b120      	cbz	r0, 80121d4 <__cxa_atexit+0x14>
 80121ca:	460a      	mov	r2, r1
 80121cc:	2002      	movs	r0, #2
 80121ce:	4621      	mov	r1, r4
 80121d0:	f000 f9fa 	bl	80125c8 <__register_exitproc>
 80121d4:	bd10      	pop	{r4, pc}
 80121d6:	bf00      	nop
 80121d8:	080125c9 	.word	0x080125c9

080121dc <std>:
 80121dc:	2300      	movs	r3, #0
 80121de:	b510      	push	{r4, lr}
 80121e0:	4604      	mov	r4, r0
 80121e2:	e9c0 3300 	strd	r3, r3, [r0]
 80121e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80121ea:	6083      	str	r3, [r0, #8]
 80121ec:	8181      	strh	r1, [r0, #12]
 80121ee:	6643      	str	r3, [r0, #100]	@ 0x64
 80121f0:	81c2      	strh	r2, [r0, #14]
 80121f2:	6183      	str	r3, [r0, #24]
 80121f4:	4619      	mov	r1, r3
 80121f6:	2208      	movs	r2, #8
 80121f8:	305c      	adds	r0, #92	@ 0x5c
 80121fa:	f000 f906 	bl	801240a <memset>
 80121fe:	4b0d      	ldr	r3, [pc, #52]	@ (8012234 <std+0x58>)
 8012200:	6263      	str	r3, [r4, #36]	@ 0x24
 8012202:	4b0d      	ldr	r3, [pc, #52]	@ (8012238 <std+0x5c>)
 8012204:	62a3      	str	r3, [r4, #40]	@ 0x28
 8012206:	4b0d      	ldr	r3, [pc, #52]	@ (801223c <std+0x60>)
 8012208:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801220a:	4b0d      	ldr	r3, [pc, #52]	@ (8012240 <std+0x64>)
 801220c:	6323      	str	r3, [r4, #48]	@ 0x30
 801220e:	4b0d      	ldr	r3, [pc, #52]	@ (8012244 <std+0x68>)
 8012210:	6224      	str	r4, [r4, #32]
 8012212:	429c      	cmp	r4, r3
 8012214:	d006      	beq.n	8012224 <std+0x48>
 8012216:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801221a:	4294      	cmp	r4, r2
 801221c:	d002      	beq.n	8012224 <std+0x48>
 801221e:	33d0      	adds	r3, #208	@ 0xd0
 8012220:	429c      	cmp	r4, r3
 8012222:	d105      	bne.n	8012230 <std+0x54>
 8012224:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8012228:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801222c:	f000 b9ba 	b.w	80125a4 <__retarget_lock_init_recursive>
 8012230:	bd10      	pop	{r4, pc}
 8012232:	bf00      	nop
 8012234:	08012385 	.word	0x08012385
 8012238:	080123a7 	.word	0x080123a7
 801223c:	080123df 	.word	0x080123df
 8012240:	08012403 	.word	0x08012403
 8012244:	200126d0 	.word	0x200126d0

08012248 <stdio_exit_handler>:
 8012248:	4a02      	ldr	r2, [pc, #8]	@ (8012254 <stdio_exit_handler+0xc>)
 801224a:	4903      	ldr	r1, [pc, #12]	@ (8012258 <stdio_exit_handler+0x10>)
 801224c:	4803      	ldr	r0, [pc, #12]	@ (801225c <stdio_exit_handler+0x14>)
 801224e:	f000 b87b 	b.w	8012348 <_fwalk_sglue>
 8012252:	bf00      	nop
 8012254:	20000090 	.word	0x20000090
 8012258:	08012db9 	.word	0x08012db9
 801225c:	200000a0 	.word	0x200000a0

08012260 <cleanup_stdio>:
 8012260:	6841      	ldr	r1, [r0, #4]
 8012262:	4b0c      	ldr	r3, [pc, #48]	@ (8012294 <cleanup_stdio+0x34>)
 8012264:	4299      	cmp	r1, r3
 8012266:	b510      	push	{r4, lr}
 8012268:	4604      	mov	r4, r0
 801226a:	d001      	beq.n	8012270 <cleanup_stdio+0x10>
 801226c:	f000 fda4 	bl	8012db8 <_fflush_r>
 8012270:	68a1      	ldr	r1, [r4, #8]
 8012272:	4b09      	ldr	r3, [pc, #36]	@ (8012298 <cleanup_stdio+0x38>)
 8012274:	4299      	cmp	r1, r3
 8012276:	d002      	beq.n	801227e <cleanup_stdio+0x1e>
 8012278:	4620      	mov	r0, r4
 801227a:	f000 fd9d 	bl	8012db8 <_fflush_r>
 801227e:	68e1      	ldr	r1, [r4, #12]
 8012280:	4b06      	ldr	r3, [pc, #24]	@ (801229c <cleanup_stdio+0x3c>)
 8012282:	4299      	cmp	r1, r3
 8012284:	d004      	beq.n	8012290 <cleanup_stdio+0x30>
 8012286:	4620      	mov	r0, r4
 8012288:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801228c:	f000 bd94 	b.w	8012db8 <_fflush_r>
 8012290:	bd10      	pop	{r4, pc}
 8012292:	bf00      	nop
 8012294:	200126d0 	.word	0x200126d0
 8012298:	20012738 	.word	0x20012738
 801229c:	200127a0 	.word	0x200127a0

080122a0 <global_stdio_init.part.0>:
 80122a0:	b510      	push	{r4, lr}
 80122a2:	4b0b      	ldr	r3, [pc, #44]	@ (80122d0 <global_stdio_init.part.0+0x30>)
 80122a4:	4c0b      	ldr	r4, [pc, #44]	@ (80122d4 <global_stdio_init.part.0+0x34>)
 80122a6:	4a0c      	ldr	r2, [pc, #48]	@ (80122d8 <global_stdio_init.part.0+0x38>)
 80122a8:	601a      	str	r2, [r3, #0]
 80122aa:	4620      	mov	r0, r4
 80122ac:	2200      	movs	r2, #0
 80122ae:	2104      	movs	r1, #4
 80122b0:	f7ff ff94 	bl	80121dc <std>
 80122b4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80122b8:	2201      	movs	r2, #1
 80122ba:	2109      	movs	r1, #9
 80122bc:	f7ff ff8e 	bl	80121dc <std>
 80122c0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80122c4:	2202      	movs	r2, #2
 80122c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80122ca:	2112      	movs	r1, #18
 80122cc:	f7ff bf86 	b.w	80121dc <std>
 80122d0:	20012808 	.word	0x20012808
 80122d4:	200126d0 	.word	0x200126d0
 80122d8:	08012249 	.word	0x08012249

080122dc <__sfp_lock_acquire>:
 80122dc:	4801      	ldr	r0, [pc, #4]	@ (80122e4 <__sfp_lock_acquire+0x8>)
 80122de:	f000 b962 	b.w	80125a6 <__retarget_lock_acquire_recursive>
 80122e2:	bf00      	nop
 80122e4:	20012812 	.word	0x20012812

080122e8 <__sfp_lock_release>:
 80122e8:	4801      	ldr	r0, [pc, #4]	@ (80122f0 <__sfp_lock_release+0x8>)
 80122ea:	f000 b95d 	b.w	80125a8 <__retarget_lock_release_recursive>
 80122ee:	bf00      	nop
 80122f0:	20012812 	.word	0x20012812

080122f4 <__sinit>:
 80122f4:	b510      	push	{r4, lr}
 80122f6:	4604      	mov	r4, r0
 80122f8:	f7ff fff0 	bl	80122dc <__sfp_lock_acquire>
 80122fc:	6a23      	ldr	r3, [r4, #32]
 80122fe:	b11b      	cbz	r3, 8012308 <__sinit+0x14>
 8012300:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012304:	f7ff bff0 	b.w	80122e8 <__sfp_lock_release>
 8012308:	4b04      	ldr	r3, [pc, #16]	@ (801231c <__sinit+0x28>)
 801230a:	6223      	str	r3, [r4, #32]
 801230c:	4b04      	ldr	r3, [pc, #16]	@ (8012320 <__sinit+0x2c>)
 801230e:	681b      	ldr	r3, [r3, #0]
 8012310:	2b00      	cmp	r3, #0
 8012312:	d1f5      	bne.n	8012300 <__sinit+0xc>
 8012314:	f7ff ffc4 	bl	80122a0 <global_stdio_init.part.0>
 8012318:	e7f2      	b.n	8012300 <__sinit+0xc>
 801231a:	bf00      	nop
 801231c:	08012261 	.word	0x08012261
 8012320:	20012808 	.word	0x20012808

08012324 <fiprintf>:
 8012324:	b40e      	push	{r1, r2, r3}
 8012326:	b503      	push	{r0, r1, lr}
 8012328:	4601      	mov	r1, r0
 801232a:	ab03      	add	r3, sp, #12
 801232c:	4805      	ldr	r0, [pc, #20]	@ (8012344 <fiprintf+0x20>)
 801232e:	f853 2b04 	ldr.w	r2, [r3], #4
 8012332:	6800      	ldr	r0, [r0, #0]
 8012334:	9301      	str	r3, [sp, #4]
 8012336:	f000 fa17 	bl	8012768 <_vfiprintf_r>
 801233a:	b002      	add	sp, #8
 801233c:	f85d eb04 	ldr.w	lr, [sp], #4
 8012340:	b003      	add	sp, #12
 8012342:	4770      	bx	lr
 8012344:	2000009c 	.word	0x2000009c

08012348 <_fwalk_sglue>:
 8012348:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801234c:	4607      	mov	r7, r0
 801234e:	4688      	mov	r8, r1
 8012350:	4614      	mov	r4, r2
 8012352:	2600      	movs	r6, #0
 8012354:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012358:	f1b9 0901 	subs.w	r9, r9, #1
 801235c:	d505      	bpl.n	801236a <_fwalk_sglue+0x22>
 801235e:	6824      	ldr	r4, [r4, #0]
 8012360:	2c00      	cmp	r4, #0
 8012362:	d1f7      	bne.n	8012354 <_fwalk_sglue+0xc>
 8012364:	4630      	mov	r0, r6
 8012366:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801236a:	89ab      	ldrh	r3, [r5, #12]
 801236c:	2b01      	cmp	r3, #1
 801236e:	d907      	bls.n	8012380 <_fwalk_sglue+0x38>
 8012370:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012374:	3301      	adds	r3, #1
 8012376:	d003      	beq.n	8012380 <_fwalk_sglue+0x38>
 8012378:	4629      	mov	r1, r5
 801237a:	4638      	mov	r0, r7
 801237c:	47c0      	blx	r8
 801237e:	4306      	orrs	r6, r0
 8012380:	3568      	adds	r5, #104	@ 0x68
 8012382:	e7e9      	b.n	8012358 <_fwalk_sglue+0x10>

08012384 <__sread>:
 8012384:	b510      	push	{r4, lr}
 8012386:	460c      	mov	r4, r1
 8012388:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801238c:	f000 f898 	bl	80124c0 <_read_r>
 8012390:	2800      	cmp	r0, #0
 8012392:	bfab      	itete	ge
 8012394:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8012396:	89a3      	ldrhlt	r3, [r4, #12]
 8012398:	181b      	addge	r3, r3, r0
 801239a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801239e:	bfac      	ite	ge
 80123a0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80123a2:	81a3      	strhlt	r3, [r4, #12]
 80123a4:	bd10      	pop	{r4, pc}

080123a6 <__swrite>:
 80123a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80123aa:	461f      	mov	r7, r3
 80123ac:	898b      	ldrh	r3, [r1, #12]
 80123ae:	05db      	lsls	r3, r3, #23
 80123b0:	4605      	mov	r5, r0
 80123b2:	460c      	mov	r4, r1
 80123b4:	4616      	mov	r6, r2
 80123b6:	d505      	bpl.n	80123c4 <__swrite+0x1e>
 80123b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80123bc:	2302      	movs	r3, #2
 80123be:	2200      	movs	r2, #0
 80123c0:	f000 f86c 	bl	801249c <_lseek_r>
 80123c4:	89a3      	ldrh	r3, [r4, #12]
 80123c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80123ca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80123ce:	81a3      	strh	r3, [r4, #12]
 80123d0:	4632      	mov	r2, r6
 80123d2:	463b      	mov	r3, r7
 80123d4:	4628      	mov	r0, r5
 80123d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80123da:	f000 b8a7 	b.w	801252c <_write_r>

080123de <__sseek>:
 80123de:	b510      	push	{r4, lr}
 80123e0:	460c      	mov	r4, r1
 80123e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80123e6:	f000 f859 	bl	801249c <_lseek_r>
 80123ea:	1c43      	adds	r3, r0, #1
 80123ec:	89a3      	ldrh	r3, [r4, #12]
 80123ee:	bf15      	itete	ne
 80123f0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80123f2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80123f6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80123fa:	81a3      	strheq	r3, [r4, #12]
 80123fc:	bf18      	it	ne
 80123fe:	81a3      	strhne	r3, [r4, #12]
 8012400:	bd10      	pop	{r4, pc}

08012402 <__sclose>:
 8012402:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012406:	f000 b839 	b.w	801247c <_close_r>

0801240a <memset>:
 801240a:	4402      	add	r2, r0
 801240c:	4603      	mov	r3, r0
 801240e:	4293      	cmp	r3, r2
 8012410:	d100      	bne.n	8012414 <memset+0xa>
 8012412:	4770      	bx	lr
 8012414:	f803 1b01 	strb.w	r1, [r3], #1
 8012418:	e7f9      	b.n	801240e <memset+0x4>

0801241a <_raise_r>:
 801241a:	291f      	cmp	r1, #31
 801241c:	b538      	push	{r3, r4, r5, lr}
 801241e:	4605      	mov	r5, r0
 8012420:	460c      	mov	r4, r1
 8012422:	d904      	bls.n	801242e <_raise_r+0x14>
 8012424:	2316      	movs	r3, #22
 8012426:	6003      	str	r3, [r0, #0]
 8012428:	f04f 30ff 	mov.w	r0, #4294967295
 801242c:	bd38      	pop	{r3, r4, r5, pc}
 801242e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8012430:	b112      	cbz	r2, 8012438 <_raise_r+0x1e>
 8012432:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012436:	b94b      	cbnz	r3, 801244c <_raise_r+0x32>
 8012438:	4628      	mov	r0, r5
 801243a:	f000 f865 	bl	8012508 <_getpid_r>
 801243e:	4622      	mov	r2, r4
 8012440:	4601      	mov	r1, r0
 8012442:	4628      	mov	r0, r5
 8012444:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012448:	f000 b84c 	b.w	80124e4 <_kill_r>
 801244c:	2b01      	cmp	r3, #1
 801244e:	d00a      	beq.n	8012466 <_raise_r+0x4c>
 8012450:	1c59      	adds	r1, r3, #1
 8012452:	d103      	bne.n	801245c <_raise_r+0x42>
 8012454:	2316      	movs	r3, #22
 8012456:	6003      	str	r3, [r0, #0]
 8012458:	2001      	movs	r0, #1
 801245a:	e7e7      	b.n	801242c <_raise_r+0x12>
 801245c:	2100      	movs	r1, #0
 801245e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8012462:	4620      	mov	r0, r4
 8012464:	4798      	blx	r3
 8012466:	2000      	movs	r0, #0
 8012468:	e7e0      	b.n	801242c <_raise_r+0x12>
	...

0801246c <raise>:
 801246c:	4b02      	ldr	r3, [pc, #8]	@ (8012478 <raise+0xc>)
 801246e:	4601      	mov	r1, r0
 8012470:	6818      	ldr	r0, [r3, #0]
 8012472:	f7ff bfd2 	b.w	801241a <_raise_r>
 8012476:	bf00      	nop
 8012478:	2000009c 	.word	0x2000009c

0801247c <_close_r>:
 801247c:	b538      	push	{r3, r4, r5, lr}
 801247e:	4d06      	ldr	r5, [pc, #24]	@ (8012498 <_close_r+0x1c>)
 8012480:	2300      	movs	r3, #0
 8012482:	4604      	mov	r4, r0
 8012484:	4608      	mov	r0, r1
 8012486:	602b      	str	r3, [r5, #0]
 8012488:	f7ef fd3c 	bl	8001f04 <_close>
 801248c:	1c43      	adds	r3, r0, #1
 801248e:	d102      	bne.n	8012496 <_close_r+0x1a>
 8012490:	682b      	ldr	r3, [r5, #0]
 8012492:	b103      	cbz	r3, 8012496 <_close_r+0x1a>
 8012494:	6023      	str	r3, [r4, #0]
 8012496:	bd38      	pop	{r3, r4, r5, pc}
 8012498:	2001280c 	.word	0x2001280c

0801249c <_lseek_r>:
 801249c:	b538      	push	{r3, r4, r5, lr}
 801249e:	4d07      	ldr	r5, [pc, #28]	@ (80124bc <_lseek_r+0x20>)
 80124a0:	4604      	mov	r4, r0
 80124a2:	4608      	mov	r0, r1
 80124a4:	4611      	mov	r1, r2
 80124a6:	2200      	movs	r2, #0
 80124a8:	602a      	str	r2, [r5, #0]
 80124aa:	461a      	mov	r2, r3
 80124ac:	f7ef fd34 	bl	8001f18 <_lseek>
 80124b0:	1c43      	adds	r3, r0, #1
 80124b2:	d102      	bne.n	80124ba <_lseek_r+0x1e>
 80124b4:	682b      	ldr	r3, [r5, #0]
 80124b6:	b103      	cbz	r3, 80124ba <_lseek_r+0x1e>
 80124b8:	6023      	str	r3, [r4, #0]
 80124ba:	bd38      	pop	{r3, r4, r5, pc}
 80124bc:	2001280c 	.word	0x2001280c

080124c0 <_read_r>:
 80124c0:	b538      	push	{r3, r4, r5, lr}
 80124c2:	4d07      	ldr	r5, [pc, #28]	@ (80124e0 <_read_r+0x20>)
 80124c4:	4604      	mov	r4, r0
 80124c6:	4608      	mov	r0, r1
 80124c8:	4611      	mov	r1, r2
 80124ca:	2200      	movs	r2, #0
 80124cc:	602a      	str	r2, [r5, #0]
 80124ce:	461a      	mov	r2, r3
 80124d0:	f7ef fcfc 	bl	8001ecc <_read>
 80124d4:	1c43      	adds	r3, r0, #1
 80124d6:	d102      	bne.n	80124de <_read_r+0x1e>
 80124d8:	682b      	ldr	r3, [r5, #0]
 80124da:	b103      	cbz	r3, 80124de <_read_r+0x1e>
 80124dc:	6023      	str	r3, [r4, #0]
 80124de:	bd38      	pop	{r3, r4, r5, pc}
 80124e0:	2001280c 	.word	0x2001280c

080124e4 <_kill_r>:
 80124e4:	b538      	push	{r3, r4, r5, lr}
 80124e6:	4d07      	ldr	r5, [pc, #28]	@ (8012504 <_kill_r+0x20>)
 80124e8:	2300      	movs	r3, #0
 80124ea:	4604      	mov	r4, r0
 80124ec:	4608      	mov	r0, r1
 80124ee:	4611      	mov	r1, r2
 80124f0:	602b      	str	r3, [r5, #0]
 80124f2:	f7ef fcdd 	bl	8001eb0 <_kill>
 80124f6:	1c43      	adds	r3, r0, #1
 80124f8:	d102      	bne.n	8012500 <_kill_r+0x1c>
 80124fa:	682b      	ldr	r3, [r5, #0]
 80124fc:	b103      	cbz	r3, 8012500 <_kill_r+0x1c>
 80124fe:	6023      	str	r3, [r4, #0]
 8012500:	bd38      	pop	{r3, r4, r5, pc}
 8012502:	bf00      	nop
 8012504:	2001280c 	.word	0x2001280c

08012508 <_getpid_r>:
 8012508:	f7ef bcd0 	b.w	8001eac <_getpid>

0801250c <_sbrk_r>:
 801250c:	b538      	push	{r3, r4, r5, lr}
 801250e:	4d06      	ldr	r5, [pc, #24]	@ (8012528 <_sbrk_r+0x1c>)
 8012510:	2300      	movs	r3, #0
 8012512:	4604      	mov	r4, r0
 8012514:	4608      	mov	r0, r1
 8012516:	602b      	str	r3, [r5, #0]
 8012518:	f7ef fd00 	bl	8001f1c <_sbrk>
 801251c:	1c43      	adds	r3, r0, #1
 801251e:	d102      	bne.n	8012526 <_sbrk_r+0x1a>
 8012520:	682b      	ldr	r3, [r5, #0]
 8012522:	b103      	cbz	r3, 8012526 <_sbrk_r+0x1a>
 8012524:	6023      	str	r3, [r4, #0]
 8012526:	bd38      	pop	{r3, r4, r5, pc}
 8012528:	2001280c 	.word	0x2001280c

0801252c <_write_r>:
 801252c:	b538      	push	{r3, r4, r5, lr}
 801252e:	4d07      	ldr	r5, [pc, #28]	@ (801254c <_write_r+0x20>)
 8012530:	4604      	mov	r4, r0
 8012532:	4608      	mov	r0, r1
 8012534:	4611      	mov	r1, r2
 8012536:	2200      	movs	r2, #0
 8012538:	602a      	str	r2, [r5, #0]
 801253a:	461a      	mov	r2, r3
 801253c:	f7ef fcd4 	bl	8001ee8 <_write>
 8012540:	1c43      	adds	r3, r0, #1
 8012542:	d102      	bne.n	801254a <_write_r+0x1e>
 8012544:	682b      	ldr	r3, [r5, #0]
 8012546:	b103      	cbz	r3, 801254a <_write_r+0x1e>
 8012548:	6023      	str	r3, [r4, #0]
 801254a:	bd38      	pop	{r3, r4, r5, pc}
 801254c:	2001280c 	.word	0x2001280c

08012550 <__errno>:
 8012550:	4b01      	ldr	r3, [pc, #4]	@ (8012558 <__errno+0x8>)
 8012552:	6818      	ldr	r0, [r3, #0]
 8012554:	4770      	bx	lr
 8012556:	bf00      	nop
 8012558:	2000009c 	.word	0x2000009c

0801255c <__libc_init_array>:
 801255c:	b570      	push	{r4, r5, r6, lr}
 801255e:	4d0d      	ldr	r5, [pc, #52]	@ (8012594 <__libc_init_array+0x38>)
 8012560:	4c0d      	ldr	r4, [pc, #52]	@ (8012598 <__libc_init_array+0x3c>)
 8012562:	1b64      	subs	r4, r4, r5
 8012564:	10a4      	asrs	r4, r4, #2
 8012566:	2600      	movs	r6, #0
 8012568:	42a6      	cmp	r6, r4
 801256a:	d109      	bne.n	8012580 <__libc_init_array+0x24>
 801256c:	4d0b      	ldr	r5, [pc, #44]	@ (801259c <__libc_init_array+0x40>)
 801256e:	4c0c      	ldr	r4, [pc, #48]	@ (80125a0 <__libc_init_array+0x44>)
 8012570:	f000 fd62 	bl	8013038 <_init>
 8012574:	1b64      	subs	r4, r4, r5
 8012576:	10a4      	asrs	r4, r4, #2
 8012578:	2600      	movs	r6, #0
 801257a:	42a6      	cmp	r6, r4
 801257c:	d105      	bne.n	801258a <__libc_init_array+0x2e>
 801257e:	bd70      	pop	{r4, r5, r6, pc}
 8012580:	f855 3b04 	ldr.w	r3, [r5], #4
 8012584:	4798      	blx	r3
 8012586:	3601      	adds	r6, #1
 8012588:	e7ee      	b.n	8012568 <__libc_init_array+0xc>
 801258a:	f855 3b04 	ldr.w	r3, [r5], #4
 801258e:	4798      	blx	r3
 8012590:	3601      	adds	r6, #1
 8012592:	e7f2      	b.n	801257a <__libc_init_array+0x1e>
 8012594:	080e7248 	.word	0x080e7248
 8012598:	080e7248 	.word	0x080e7248
 801259c:	080e7248 	.word	0x080e7248
 80125a0:	080e725c 	.word	0x080e725c

080125a4 <__retarget_lock_init_recursive>:
 80125a4:	4770      	bx	lr

080125a6 <__retarget_lock_acquire_recursive>:
 80125a6:	4770      	bx	lr

080125a8 <__retarget_lock_release_recursive>:
 80125a8:	4770      	bx	lr

080125aa <memcpy>:
 80125aa:	440a      	add	r2, r1
 80125ac:	4291      	cmp	r1, r2
 80125ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80125b2:	d100      	bne.n	80125b6 <memcpy+0xc>
 80125b4:	4770      	bx	lr
 80125b6:	b510      	push	{r4, lr}
 80125b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80125bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80125c0:	4291      	cmp	r1, r2
 80125c2:	d1f9      	bne.n	80125b8 <memcpy+0xe>
 80125c4:	bd10      	pop	{r4, pc}
	...

080125c8 <__register_exitproc>:
 80125c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80125cc:	4d27      	ldr	r5, [pc, #156]	@ (801266c <__register_exitproc+0xa4>)
 80125ce:	4607      	mov	r7, r0
 80125d0:	6828      	ldr	r0, [r5, #0]
 80125d2:	4691      	mov	r9, r2
 80125d4:	460e      	mov	r6, r1
 80125d6:	4698      	mov	r8, r3
 80125d8:	f7ff ffe5 	bl	80125a6 <__retarget_lock_acquire_recursive>
 80125dc:	4a24      	ldr	r2, [pc, #144]	@ (8012670 <__register_exitproc+0xa8>)
 80125de:	6814      	ldr	r4, [r2, #0]
 80125e0:	b93c      	cbnz	r4, 80125f2 <__register_exitproc+0x2a>
 80125e2:	4b24      	ldr	r3, [pc, #144]	@ (8012674 <__register_exitproc+0xac>)
 80125e4:	6013      	str	r3, [r2, #0]
 80125e6:	4a24      	ldr	r2, [pc, #144]	@ (8012678 <__register_exitproc+0xb0>)
 80125e8:	b112      	cbz	r2, 80125f0 <__register_exitproc+0x28>
 80125ea:	6812      	ldr	r2, [r2, #0]
 80125ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 80125f0:	4c20      	ldr	r4, [pc, #128]	@ (8012674 <__register_exitproc+0xac>)
 80125f2:	6863      	ldr	r3, [r4, #4]
 80125f4:	2b1f      	cmp	r3, #31
 80125f6:	dd06      	ble.n	8012606 <__register_exitproc+0x3e>
 80125f8:	6828      	ldr	r0, [r5, #0]
 80125fa:	f7ff ffd5 	bl	80125a8 <__retarget_lock_release_recursive>
 80125fe:	f04f 30ff 	mov.w	r0, #4294967295
 8012602:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012606:	b32f      	cbz	r7, 8012654 <__register_exitproc+0x8c>
 8012608:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 801260c:	b968      	cbnz	r0, 801262a <__register_exitproc+0x62>
 801260e:	4b1b      	ldr	r3, [pc, #108]	@ (801267c <__register_exitproc+0xb4>)
 8012610:	2b00      	cmp	r3, #0
 8012612:	d0f1      	beq.n	80125f8 <__register_exitproc+0x30>
 8012614:	f44f 7084 	mov.w	r0, #264	@ 0x108
 8012618:	f7ff fd14 	bl	8012044 <malloc>
 801261c:	2800      	cmp	r0, #0
 801261e:	d0eb      	beq.n	80125f8 <__register_exitproc+0x30>
 8012620:	2300      	movs	r3, #0
 8012622:	e9c0 3340 	strd	r3, r3, [r0, #256]	@ 0x100
 8012626:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
 801262a:	6863      	ldr	r3, [r4, #4]
 801262c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8012630:	2201      	movs	r2, #1
 8012632:	409a      	lsls	r2, r3
 8012634:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8012638:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
 801263c:	4313      	orrs	r3, r2
 801263e:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
 8012642:	2f02      	cmp	r7, #2
 8012644:	f8c1 8080 	str.w	r8, [r1, #128]	@ 0x80
 8012648:	bf02      	ittt	eq
 801264a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	@ 0x104
 801264e:	4313      	orreq	r3, r2
 8012650:	f8c0 3104 	streq.w	r3, [r0, #260]	@ 0x104
 8012654:	6863      	ldr	r3, [r4, #4]
 8012656:	6828      	ldr	r0, [r5, #0]
 8012658:	1c5a      	adds	r2, r3, #1
 801265a:	3302      	adds	r3, #2
 801265c:	6062      	str	r2, [r4, #4]
 801265e:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 8012662:	f7ff ffa1 	bl	80125a8 <__retarget_lock_release_recursive>
 8012666:	2000      	movs	r0, #0
 8012668:	e7cb      	b.n	8012602 <__register_exitproc+0x3a>
 801266a:	bf00      	nop
 801266c:	200000ec 	.word	0x200000ec
 8012670:	200128a0 	.word	0x200128a0
 8012674:	20012814 	.word	0x20012814
 8012678:	08014960 	.word	0x08014960
 801267c:	08012045 	.word	0x08012045

08012680 <_free_r>:
 8012680:	b538      	push	{r3, r4, r5, lr}
 8012682:	4605      	mov	r5, r0
 8012684:	2900      	cmp	r1, #0
 8012686:	d041      	beq.n	801270c <_free_r+0x8c>
 8012688:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801268c:	1f0c      	subs	r4, r1, #4
 801268e:	2b00      	cmp	r3, #0
 8012690:	bfb8      	it	lt
 8012692:	18e4      	addlt	r4, r4, r3
 8012694:	f7ff fd88 	bl	80121a8 <__malloc_lock>
 8012698:	4a1d      	ldr	r2, [pc, #116]	@ (8012710 <_free_r+0x90>)
 801269a:	6813      	ldr	r3, [r2, #0]
 801269c:	b933      	cbnz	r3, 80126ac <_free_r+0x2c>
 801269e:	6063      	str	r3, [r4, #4]
 80126a0:	6014      	str	r4, [r2, #0]
 80126a2:	4628      	mov	r0, r5
 80126a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80126a8:	f7ff bd84 	b.w	80121b4 <__malloc_unlock>
 80126ac:	42a3      	cmp	r3, r4
 80126ae:	d908      	bls.n	80126c2 <_free_r+0x42>
 80126b0:	6820      	ldr	r0, [r4, #0]
 80126b2:	1821      	adds	r1, r4, r0
 80126b4:	428b      	cmp	r3, r1
 80126b6:	bf01      	itttt	eq
 80126b8:	6819      	ldreq	r1, [r3, #0]
 80126ba:	685b      	ldreq	r3, [r3, #4]
 80126bc:	1809      	addeq	r1, r1, r0
 80126be:	6021      	streq	r1, [r4, #0]
 80126c0:	e7ed      	b.n	801269e <_free_r+0x1e>
 80126c2:	461a      	mov	r2, r3
 80126c4:	685b      	ldr	r3, [r3, #4]
 80126c6:	b10b      	cbz	r3, 80126cc <_free_r+0x4c>
 80126c8:	42a3      	cmp	r3, r4
 80126ca:	d9fa      	bls.n	80126c2 <_free_r+0x42>
 80126cc:	6811      	ldr	r1, [r2, #0]
 80126ce:	1850      	adds	r0, r2, r1
 80126d0:	42a0      	cmp	r0, r4
 80126d2:	d10b      	bne.n	80126ec <_free_r+0x6c>
 80126d4:	6820      	ldr	r0, [r4, #0]
 80126d6:	4401      	add	r1, r0
 80126d8:	1850      	adds	r0, r2, r1
 80126da:	4283      	cmp	r3, r0
 80126dc:	6011      	str	r1, [r2, #0]
 80126de:	d1e0      	bne.n	80126a2 <_free_r+0x22>
 80126e0:	6818      	ldr	r0, [r3, #0]
 80126e2:	685b      	ldr	r3, [r3, #4]
 80126e4:	6053      	str	r3, [r2, #4]
 80126e6:	4408      	add	r0, r1
 80126e8:	6010      	str	r0, [r2, #0]
 80126ea:	e7da      	b.n	80126a2 <_free_r+0x22>
 80126ec:	d902      	bls.n	80126f4 <_free_r+0x74>
 80126ee:	230c      	movs	r3, #12
 80126f0:	602b      	str	r3, [r5, #0]
 80126f2:	e7d6      	b.n	80126a2 <_free_r+0x22>
 80126f4:	6820      	ldr	r0, [r4, #0]
 80126f6:	1821      	adds	r1, r4, r0
 80126f8:	428b      	cmp	r3, r1
 80126fa:	bf04      	itt	eq
 80126fc:	6819      	ldreq	r1, [r3, #0]
 80126fe:	685b      	ldreq	r3, [r3, #4]
 8012700:	6063      	str	r3, [r4, #4]
 8012702:	bf04      	itt	eq
 8012704:	1809      	addeq	r1, r1, r0
 8012706:	6021      	streq	r1, [r4, #0]
 8012708:	6054      	str	r4, [r2, #4]
 801270a:	e7ca      	b.n	80126a2 <_free_r+0x22>
 801270c:	bd38      	pop	{r3, r4, r5, pc}
 801270e:	bf00      	nop
 8012710:	200126cc 	.word	0x200126cc

08012714 <__sfputc_r>:
 8012714:	6893      	ldr	r3, [r2, #8]
 8012716:	3b01      	subs	r3, #1
 8012718:	2b00      	cmp	r3, #0
 801271a:	b410      	push	{r4}
 801271c:	6093      	str	r3, [r2, #8]
 801271e:	da08      	bge.n	8012732 <__sfputc_r+0x1e>
 8012720:	6994      	ldr	r4, [r2, #24]
 8012722:	42a3      	cmp	r3, r4
 8012724:	db01      	blt.n	801272a <__sfputc_r+0x16>
 8012726:	290a      	cmp	r1, #10
 8012728:	d103      	bne.n	8012732 <__sfputc_r+0x1e>
 801272a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801272e:	f000 bb6b 	b.w	8012e08 <__swbuf_r>
 8012732:	6813      	ldr	r3, [r2, #0]
 8012734:	1c58      	adds	r0, r3, #1
 8012736:	6010      	str	r0, [r2, #0]
 8012738:	7019      	strb	r1, [r3, #0]
 801273a:	4608      	mov	r0, r1
 801273c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012740:	4770      	bx	lr

08012742 <__sfputs_r>:
 8012742:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012744:	4606      	mov	r6, r0
 8012746:	460f      	mov	r7, r1
 8012748:	4614      	mov	r4, r2
 801274a:	18d5      	adds	r5, r2, r3
 801274c:	42ac      	cmp	r4, r5
 801274e:	d101      	bne.n	8012754 <__sfputs_r+0x12>
 8012750:	2000      	movs	r0, #0
 8012752:	e007      	b.n	8012764 <__sfputs_r+0x22>
 8012754:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012758:	463a      	mov	r2, r7
 801275a:	4630      	mov	r0, r6
 801275c:	f7ff ffda 	bl	8012714 <__sfputc_r>
 8012760:	1c43      	adds	r3, r0, #1
 8012762:	d1f3      	bne.n	801274c <__sfputs_r+0xa>
 8012764:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012768 <_vfiprintf_r>:
 8012768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801276c:	460d      	mov	r5, r1
 801276e:	b09d      	sub	sp, #116	@ 0x74
 8012770:	4614      	mov	r4, r2
 8012772:	4698      	mov	r8, r3
 8012774:	4606      	mov	r6, r0
 8012776:	b118      	cbz	r0, 8012780 <_vfiprintf_r+0x18>
 8012778:	6a03      	ldr	r3, [r0, #32]
 801277a:	b90b      	cbnz	r3, 8012780 <_vfiprintf_r+0x18>
 801277c:	f7ff fdba 	bl	80122f4 <__sinit>
 8012780:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012782:	07d9      	lsls	r1, r3, #31
 8012784:	d405      	bmi.n	8012792 <_vfiprintf_r+0x2a>
 8012786:	89ab      	ldrh	r3, [r5, #12]
 8012788:	059a      	lsls	r2, r3, #22
 801278a:	d402      	bmi.n	8012792 <_vfiprintf_r+0x2a>
 801278c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801278e:	f7ff ff0a 	bl	80125a6 <__retarget_lock_acquire_recursive>
 8012792:	89ab      	ldrh	r3, [r5, #12]
 8012794:	071b      	lsls	r3, r3, #28
 8012796:	d501      	bpl.n	801279c <_vfiprintf_r+0x34>
 8012798:	692b      	ldr	r3, [r5, #16]
 801279a:	b99b      	cbnz	r3, 80127c4 <_vfiprintf_r+0x5c>
 801279c:	4629      	mov	r1, r5
 801279e:	4630      	mov	r0, r6
 80127a0:	f000 fb70 	bl	8012e84 <__swsetup_r>
 80127a4:	b170      	cbz	r0, 80127c4 <_vfiprintf_r+0x5c>
 80127a6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80127a8:	07dc      	lsls	r4, r3, #31
 80127aa:	d504      	bpl.n	80127b6 <_vfiprintf_r+0x4e>
 80127ac:	f04f 30ff 	mov.w	r0, #4294967295
 80127b0:	b01d      	add	sp, #116	@ 0x74
 80127b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80127b6:	89ab      	ldrh	r3, [r5, #12]
 80127b8:	0598      	lsls	r0, r3, #22
 80127ba:	d4f7      	bmi.n	80127ac <_vfiprintf_r+0x44>
 80127bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80127be:	f7ff fef3 	bl	80125a8 <__retarget_lock_release_recursive>
 80127c2:	e7f3      	b.n	80127ac <_vfiprintf_r+0x44>
 80127c4:	2300      	movs	r3, #0
 80127c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80127c8:	2320      	movs	r3, #32
 80127ca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80127ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80127d2:	2330      	movs	r3, #48	@ 0x30
 80127d4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8012984 <_vfiprintf_r+0x21c>
 80127d8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80127dc:	f04f 0901 	mov.w	r9, #1
 80127e0:	4623      	mov	r3, r4
 80127e2:	469a      	mov	sl, r3
 80127e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80127e8:	b10a      	cbz	r2, 80127ee <_vfiprintf_r+0x86>
 80127ea:	2a25      	cmp	r2, #37	@ 0x25
 80127ec:	d1f9      	bne.n	80127e2 <_vfiprintf_r+0x7a>
 80127ee:	ebba 0b04 	subs.w	fp, sl, r4
 80127f2:	d00b      	beq.n	801280c <_vfiprintf_r+0xa4>
 80127f4:	465b      	mov	r3, fp
 80127f6:	4622      	mov	r2, r4
 80127f8:	4629      	mov	r1, r5
 80127fa:	4630      	mov	r0, r6
 80127fc:	f7ff ffa1 	bl	8012742 <__sfputs_r>
 8012800:	3001      	adds	r0, #1
 8012802:	f000 80a7 	beq.w	8012954 <_vfiprintf_r+0x1ec>
 8012806:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012808:	445a      	add	r2, fp
 801280a:	9209      	str	r2, [sp, #36]	@ 0x24
 801280c:	f89a 3000 	ldrb.w	r3, [sl]
 8012810:	2b00      	cmp	r3, #0
 8012812:	f000 809f 	beq.w	8012954 <_vfiprintf_r+0x1ec>
 8012816:	2300      	movs	r3, #0
 8012818:	f04f 32ff 	mov.w	r2, #4294967295
 801281c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012820:	f10a 0a01 	add.w	sl, sl, #1
 8012824:	9304      	str	r3, [sp, #16]
 8012826:	9307      	str	r3, [sp, #28]
 8012828:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801282c:	931a      	str	r3, [sp, #104]	@ 0x68
 801282e:	4654      	mov	r4, sl
 8012830:	2205      	movs	r2, #5
 8012832:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012836:	4853      	ldr	r0, [pc, #332]	@ (8012984 <_vfiprintf_r+0x21c>)
 8012838:	f7ed fcda 	bl	80001f0 <memchr>
 801283c:	9a04      	ldr	r2, [sp, #16]
 801283e:	b9d8      	cbnz	r0, 8012878 <_vfiprintf_r+0x110>
 8012840:	06d1      	lsls	r1, r2, #27
 8012842:	bf44      	itt	mi
 8012844:	2320      	movmi	r3, #32
 8012846:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801284a:	0713      	lsls	r3, r2, #28
 801284c:	bf44      	itt	mi
 801284e:	232b      	movmi	r3, #43	@ 0x2b
 8012850:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012854:	f89a 3000 	ldrb.w	r3, [sl]
 8012858:	2b2a      	cmp	r3, #42	@ 0x2a
 801285a:	d015      	beq.n	8012888 <_vfiprintf_r+0x120>
 801285c:	9a07      	ldr	r2, [sp, #28]
 801285e:	4654      	mov	r4, sl
 8012860:	2000      	movs	r0, #0
 8012862:	f04f 0c0a 	mov.w	ip, #10
 8012866:	4621      	mov	r1, r4
 8012868:	f811 3b01 	ldrb.w	r3, [r1], #1
 801286c:	3b30      	subs	r3, #48	@ 0x30
 801286e:	2b09      	cmp	r3, #9
 8012870:	d94b      	bls.n	801290a <_vfiprintf_r+0x1a2>
 8012872:	b1b0      	cbz	r0, 80128a2 <_vfiprintf_r+0x13a>
 8012874:	9207      	str	r2, [sp, #28]
 8012876:	e014      	b.n	80128a2 <_vfiprintf_r+0x13a>
 8012878:	eba0 0308 	sub.w	r3, r0, r8
 801287c:	fa09 f303 	lsl.w	r3, r9, r3
 8012880:	4313      	orrs	r3, r2
 8012882:	9304      	str	r3, [sp, #16]
 8012884:	46a2      	mov	sl, r4
 8012886:	e7d2      	b.n	801282e <_vfiprintf_r+0xc6>
 8012888:	9b03      	ldr	r3, [sp, #12]
 801288a:	1d19      	adds	r1, r3, #4
 801288c:	681b      	ldr	r3, [r3, #0]
 801288e:	9103      	str	r1, [sp, #12]
 8012890:	2b00      	cmp	r3, #0
 8012892:	bfbb      	ittet	lt
 8012894:	425b      	neglt	r3, r3
 8012896:	f042 0202 	orrlt.w	r2, r2, #2
 801289a:	9307      	strge	r3, [sp, #28]
 801289c:	9307      	strlt	r3, [sp, #28]
 801289e:	bfb8      	it	lt
 80128a0:	9204      	strlt	r2, [sp, #16]
 80128a2:	7823      	ldrb	r3, [r4, #0]
 80128a4:	2b2e      	cmp	r3, #46	@ 0x2e
 80128a6:	d10a      	bne.n	80128be <_vfiprintf_r+0x156>
 80128a8:	7863      	ldrb	r3, [r4, #1]
 80128aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80128ac:	d132      	bne.n	8012914 <_vfiprintf_r+0x1ac>
 80128ae:	9b03      	ldr	r3, [sp, #12]
 80128b0:	1d1a      	adds	r2, r3, #4
 80128b2:	681b      	ldr	r3, [r3, #0]
 80128b4:	9203      	str	r2, [sp, #12]
 80128b6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80128ba:	3402      	adds	r4, #2
 80128bc:	9305      	str	r3, [sp, #20]
 80128be:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012994 <_vfiprintf_r+0x22c>
 80128c2:	7821      	ldrb	r1, [r4, #0]
 80128c4:	2203      	movs	r2, #3
 80128c6:	4650      	mov	r0, sl
 80128c8:	f7ed fc92 	bl	80001f0 <memchr>
 80128cc:	b138      	cbz	r0, 80128de <_vfiprintf_r+0x176>
 80128ce:	9b04      	ldr	r3, [sp, #16]
 80128d0:	eba0 000a 	sub.w	r0, r0, sl
 80128d4:	2240      	movs	r2, #64	@ 0x40
 80128d6:	4082      	lsls	r2, r0
 80128d8:	4313      	orrs	r3, r2
 80128da:	3401      	adds	r4, #1
 80128dc:	9304      	str	r3, [sp, #16]
 80128de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80128e2:	4829      	ldr	r0, [pc, #164]	@ (8012988 <_vfiprintf_r+0x220>)
 80128e4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80128e8:	2206      	movs	r2, #6
 80128ea:	f7ed fc81 	bl	80001f0 <memchr>
 80128ee:	2800      	cmp	r0, #0
 80128f0:	d03f      	beq.n	8012972 <_vfiprintf_r+0x20a>
 80128f2:	4b26      	ldr	r3, [pc, #152]	@ (801298c <_vfiprintf_r+0x224>)
 80128f4:	bb1b      	cbnz	r3, 801293e <_vfiprintf_r+0x1d6>
 80128f6:	9b03      	ldr	r3, [sp, #12]
 80128f8:	3307      	adds	r3, #7
 80128fa:	f023 0307 	bic.w	r3, r3, #7
 80128fe:	3308      	adds	r3, #8
 8012900:	9303      	str	r3, [sp, #12]
 8012902:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012904:	443b      	add	r3, r7
 8012906:	9309      	str	r3, [sp, #36]	@ 0x24
 8012908:	e76a      	b.n	80127e0 <_vfiprintf_r+0x78>
 801290a:	fb0c 3202 	mla	r2, ip, r2, r3
 801290e:	460c      	mov	r4, r1
 8012910:	2001      	movs	r0, #1
 8012912:	e7a8      	b.n	8012866 <_vfiprintf_r+0xfe>
 8012914:	2300      	movs	r3, #0
 8012916:	3401      	adds	r4, #1
 8012918:	9305      	str	r3, [sp, #20]
 801291a:	4619      	mov	r1, r3
 801291c:	f04f 0c0a 	mov.w	ip, #10
 8012920:	4620      	mov	r0, r4
 8012922:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012926:	3a30      	subs	r2, #48	@ 0x30
 8012928:	2a09      	cmp	r2, #9
 801292a:	d903      	bls.n	8012934 <_vfiprintf_r+0x1cc>
 801292c:	2b00      	cmp	r3, #0
 801292e:	d0c6      	beq.n	80128be <_vfiprintf_r+0x156>
 8012930:	9105      	str	r1, [sp, #20]
 8012932:	e7c4      	b.n	80128be <_vfiprintf_r+0x156>
 8012934:	fb0c 2101 	mla	r1, ip, r1, r2
 8012938:	4604      	mov	r4, r0
 801293a:	2301      	movs	r3, #1
 801293c:	e7f0      	b.n	8012920 <_vfiprintf_r+0x1b8>
 801293e:	ab03      	add	r3, sp, #12
 8012940:	9300      	str	r3, [sp, #0]
 8012942:	462a      	mov	r2, r5
 8012944:	4b12      	ldr	r3, [pc, #72]	@ (8012990 <_vfiprintf_r+0x228>)
 8012946:	a904      	add	r1, sp, #16
 8012948:	4630      	mov	r0, r6
 801294a:	f3af 8000 	nop.w
 801294e:	4607      	mov	r7, r0
 8012950:	1c78      	adds	r0, r7, #1
 8012952:	d1d6      	bne.n	8012902 <_vfiprintf_r+0x19a>
 8012954:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012956:	07d9      	lsls	r1, r3, #31
 8012958:	d405      	bmi.n	8012966 <_vfiprintf_r+0x1fe>
 801295a:	89ab      	ldrh	r3, [r5, #12]
 801295c:	059a      	lsls	r2, r3, #22
 801295e:	d402      	bmi.n	8012966 <_vfiprintf_r+0x1fe>
 8012960:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012962:	f7ff fe21 	bl	80125a8 <__retarget_lock_release_recursive>
 8012966:	89ab      	ldrh	r3, [r5, #12]
 8012968:	065b      	lsls	r3, r3, #25
 801296a:	f53f af1f 	bmi.w	80127ac <_vfiprintf_r+0x44>
 801296e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012970:	e71e      	b.n	80127b0 <_vfiprintf_r+0x48>
 8012972:	ab03      	add	r3, sp, #12
 8012974:	9300      	str	r3, [sp, #0]
 8012976:	462a      	mov	r2, r5
 8012978:	4b05      	ldr	r3, [pc, #20]	@ (8012990 <_vfiprintf_r+0x228>)
 801297a:	a904      	add	r1, sp, #16
 801297c:	4630      	mov	r0, r6
 801297e:	f000 f879 	bl	8012a74 <_printf_i>
 8012982:	e7e4      	b.n	801294e <_vfiprintf_r+0x1e6>
 8012984:	08013cf4 	.word	0x08013cf4
 8012988:	08013cfe 	.word	0x08013cfe
 801298c:	00000000 	.word	0x00000000
 8012990:	08012743 	.word	0x08012743
 8012994:	08013cfa 	.word	0x08013cfa

08012998 <_printf_common>:
 8012998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801299c:	4616      	mov	r6, r2
 801299e:	4698      	mov	r8, r3
 80129a0:	688a      	ldr	r2, [r1, #8]
 80129a2:	690b      	ldr	r3, [r1, #16]
 80129a4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80129a8:	4293      	cmp	r3, r2
 80129aa:	bfb8      	it	lt
 80129ac:	4613      	movlt	r3, r2
 80129ae:	6033      	str	r3, [r6, #0]
 80129b0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80129b4:	4607      	mov	r7, r0
 80129b6:	460c      	mov	r4, r1
 80129b8:	b10a      	cbz	r2, 80129be <_printf_common+0x26>
 80129ba:	3301      	adds	r3, #1
 80129bc:	6033      	str	r3, [r6, #0]
 80129be:	6823      	ldr	r3, [r4, #0]
 80129c0:	0699      	lsls	r1, r3, #26
 80129c2:	bf42      	ittt	mi
 80129c4:	6833      	ldrmi	r3, [r6, #0]
 80129c6:	3302      	addmi	r3, #2
 80129c8:	6033      	strmi	r3, [r6, #0]
 80129ca:	6825      	ldr	r5, [r4, #0]
 80129cc:	f015 0506 	ands.w	r5, r5, #6
 80129d0:	d106      	bne.n	80129e0 <_printf_common+0x48>
 80129d2:	f104 0a19 	add.w	sl, r4, #25
 80129d6:	68e3      	ldr	r3, [r4, #12]
 80129d8:	6832      	ldr	r2, [r6, #0]
 80129da:	1a9b      	subs	r3, r3, r2
 80129dc:	42ab      	cmp	r3, r5
 80129de:	dc26      	bgt.n	8012a2e <_printf_common+0x96>
 80129e0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80129e4:	6822      	ldr	r2, [r4, #0]
 80129e6:	3b00      	subs	r3, #0
 80129e8:	bf18      	it	ne
 80129ea:	2301      	movne	r3, #1
 80129ec:	0692      	lsls	r2, r2, #26
 80129ee:	d42b      	bmi.n	8012a48 <_printf_common+0xb0>
 80129f0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80129f4:	4641      	mov	r1, r8
 80129f6:	4638      	mov	r0, r7
 80129f8:	47c8      	blx	r9
 80129fa:	3001      	adds	r0, #1
 80129fc:	d01e      	beq.n	8012a3c <_printf_common+0xa4>
 80129fe:	6823      	ldr	r3, [r4, #0]
 8012a00:	6922      	ldr	r2, [r4, #16]
 8012a02:	f003 0306 	and.w	r3, r3, #6
 8012a06:	2b04      	cmp	r3, #4
 8012a08:	bf02      	ittt	eq
 8012a0a:	68e5      	ldreq	r5, [r4, #12]
 8012a0c:	6833      	ldreq	r3, [r6, #0]
 8012a0e:	1aed      	subeq	r5, r5, r3
 8012a10:	68a3      	ldr	r3, [r4, #8]
 8012a12:	bf0c      	ite	eq
 8012a14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012a18:	2500      	movne	r5, #0
 8012a1a:	4293      	cmp	r3, r2
 8012a1c:	bfc4      	itt	gt
 8012a1e:	1a9b      	subgt	r3, r3, r2
 8012a20:	18ed      	addgt	r5, r5, r3
 8012a22:	2600      	movs	r6, #0
 8012a24:	341a      	adds	r4, #26
 8012a26:	42b5      	cmp	r5, r6
 8012a28:	d11a      	bne.n	8012a60 <_printf_common+0xc8>
 8012a2a:	2000      	movs	r0, #0
 8012a2c:	e008      	b.n	8012a40 <_printf_common+0xa8>
 8012a2e:	2301      	movs	r3, #1
 8012a30:	4652      	mov	r2, sl
 8012a32:	4641      	mov	r1, r8
 8012a34:	4638      	mov	r0, r7
 8012a36:	47c8      	blx	r9
 8012a38:	3001      	adds	r0, #1
 8012a3a:	d103      	bne.n	8012a44 <_printf_common+0xac>
 8012a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8012a40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012a44:	3501      	adds	r5, #1
 8012a46:	e7c6      	b.n	80129d6 <_printf_common+0x3e>
 8012a48:	18e1      	adds	r1, r4, r3
 8012a4a:	1c5a      	adds	r2, r3, #1
 8012a4c:	2030      	movs	r0, #48	@ 0x30
 8012a4e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8012a52:	4422      	add	r2, r4
 8012a54:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8012a58:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8012a5c:	3302      	adds	r3, #2
 8012a5e:	e7c7      	b.n	80129f0 <_printf_common+0x58>
 8012a60:	2301      	movs	r3, #1
 8012a62:	4622      	mov	r2, r4
 8012a64:	4641      	mov	r1, r8
 8012a66:	4638      	mov	r0, r7
 8012a68:	47c8      	blx	r9
 8012a6a:	3001      	adds	r0, #1
 8012a6c:	d0e6      	beq.n	8012a3c <_printf_common+0xa4>
 8012a6e:	3601      	adds	r6, #1
 8012a70:	e7d9      	b.n	8012a26 <_printf_common+0x8e>
	...

08012a74 <_printf_i>:
 8012a74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012a78:	7e0f      	ldrb	r7, [r1, #24]
 8012a7a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012a7c:	2f78      	cmp	r7, #120	@ 0x78
 8012a7e:	4691      	mov	r9, r2
 8012a80:	4680      	mov	r8, r0
 8012a82:	460c      	mov	r4, r1
 8012a84:	469a      	mov	sl, r3
 8012a86:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8012a8a:	d807      	bhi.n	8012a9c <_printf_i+0x28>
 8012a8c:	2f62      	cmp	r7, #98	@ 0x62
 8012a8e:	d80a      	bhi.n	8012aa6 <_printf_i+0x32>
 8012a90:	2f00      	cmp	r7, #0
 8012a92:	f000 80d1 	beq.w	8012c38 <_printf_i+0x1c4>
 8012a96:	2f58      	cmp	r7, #88	@ 0x58
 8012a98:	f000 80b8 	beq.w	8012c0c <_printf_i+0x198>
 8012a9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012aa0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8012aa4:	e03a      	b.n	8012b1c <_printf_i+0xa8>
 8012aa6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8012aaa:	2b15      	cmp	r3, #21
 8012aac:	d8f6      	bhi.n	8012a9c <_printf_i+0x28>
 8012aae:	a101      	add	r1, pc, #4	@ (adr r1, 8012ab4 <_printf_i+0x40>)
 8012ab0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012ab4:	08012b0d 	.word	0x08012b0d
 8012ab8:	08012b21 	.word	0x08012b21
 8012abc:	08012a9d 	.word	0x08012a9d
 8012ac0:	08012a9d 	.word	0x08012a9d
 8012ac4:	08012a9d 	.word	0x08012a9d
 8012ac8:	08012a9d 	.word	0x08012a9d
 8012acc:	08012b21 	.word	0x08012b21
 8012ad0:	08012a9d 	.word	0x08012a9d
 8012ad4:	08012a9d 	.word	0x08012a9d
 8012ad8:	08012a9d 	.word	0x08012a9d
 8012adc:	08012a9d 	.word	0x08012a9d
 8012ae0:	08012c1f 	.word	0x08012c1f
 8012ae4:	08012b4b 	.word	0x08012b4b
 8012ae8:	08012bd9 	.word	0x08012bd9
 8012aec:	08012a9d 	.word	0x08012a9d
 8012af0:	08012a9d 	.word	0x08012a9d
 8012af4:	08012c41 	.word	0x08012c41
 8012af8:	08012a9d 	.word	0x08012a9d
 8012afc:	08012b4b 	.word	0x08012b4b
 8012b00:	08012a9d 	.word	0x08012a9d
 8012b04:	08012a9d 	.word	0x08012a9d
 8012b08:	08012be1 	.word	0x08012be1
 8012b0c:	6833      	ldr	r3, [r6, #0]
 8012b0e:	1d1a      	adds	r2, r3, #4
 8012b10:	681b      	ldr	r3, [r3, #0]
 8012b12:	6032      	str	r2, [r6, #0]
 8012b14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012b18:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8012b1c:	2301      	movs	r3, #1
 8012b1e:	e09c      	b.n	8012c5a <_printf_i+0x1e6>
 8012b20:	6833      	ldr	r3, [r6, #0]
 8012b22:	6820      	ldr	r0, [r4, #0]
 8012b24:	1d19      	adds	r1, r3, #4
 8012b26:	6031      	str	r1, [r6, #0]
 8012b28:	0606      	lsls	r6, r0, #24
 8012b2a:	d501      	bpl.n	8012b30 <_printf_i+0xbc>
 8012b2c:	681d      	ldr	r5, [r3, #0]
 8012b2e:	e003      	b.n	8012b38 <_printf_i+0xc4>
 8012b30:	0645      	lsls	r5, r0, #25
 8012b32:	d5fb      	bpl.n	8012b2c <_printf_i+0xb8>
 8012b34:	f9b3 5000 	ldrsh.w	r5, [r3]
 8012b38:	2d00      	cmp	r5, #0
 8012b3a:	da03      	bge.n	8012b44 <_printf_i+0xd0>
 8012b3c:	232d      	movs	r3, #45	@ 0x2d
 8012b3e:	426d      	negs	r5, r5
 8012b40:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012b44:	4858      	ldr	r0, [pc, #352]	@ (8012ca8 <_printf_i+0x234>)
 8012b46:	230a      	movs	r3, #10
 8012b48:	e011      	b.n	8012b6e <_printf_i+0xfa>
 8012b4a:	6821      	ldr	r1, [r4, #0]
 8012b4c:	6833      	ldr	r3, [r6, #0]
 8012b4e:	0608      	lsls	r0, r1, #24
 8012b50:	f853 5b04 	ldr.w	r5, [r3], #4
 8012b54:	d402      	bmi.n	8012b5c <_printf_i+0xe8>
 8012b56:	0649      	lsls	r1, r1, #25
 8012b58:	bf48      	it	mi
 8012b5a:	b2ad      	uxthmi	r5, r5
 8012b5c:	2f6f      	cmp	r7, #111	@ 0x6f
 8012b5e:	4852      	ldr	r0, [pc, #328]	@ (8012ca8 <_printf_i+0x234>)
 8012b60:	6033      	str	r3, [r6, #0]
 8012b62:	bf14      	ite	ne
 8012b64:	230a      	movne	r3, #10
 8012b66:	2308      	moveq	r3, #8
 8012b68:	2100      	movs	r1, #0
 8012b6a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8012b6e:	6866      	ldr	r6, [r4, #4]
 8012b70:	60a6      	str	r6, [r4, #8]
 8012b72:	2e00      	cmp	r6, #0
 8012b74:	db05      	blt.n	8012b82 <_printf_i+0x10e>
 8012b76:	6821      	ldr	r1, [r4, #0]
 8012b78:	432e      	orrs	r6, r5
 8012b7a:	f021 0104 	bic.w	r1, r1, #4
 8012b7e:	6021      	str	r1, [r4, #0]
 8012b80:	d04b      	beq.n	8012c1a <_printf_i+0x1a6>
 8012b82:	4616      	mov	r6, r2
 8012b84:	fbb5 f1f3 	udiv	r1, r5, r3
 8012b88:	fb03 5711 	mls	r7, r3, r1, r5
 8012b8c:	5dc7      	ldrb	r7, [r0, r7]
 8012b8e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012b92:	462f      	mov	r7, r5
 8012b94:	42bb      	cmp	r3, r7
 8012b96:	460d      	mov	r5, r1
 8012b98:	d9f4      	bls.n	8012b84 <_printf_i+0x110>
 8012b9a:	2b08      	cmp	r3, #8
 8012b9c:	d10b      	bne.n	8012bb6 <_printf_i+0x142>
 8012b9e:	6823      	ldr	r3, [r4, #0]
 8012ba0:	07df      	lsls	r7, r3, #31
 8012ba2:	d508      	bpl.n	8012bb6 <_printf_i+0x142>
 8012ba4:	6923      	ldr	r3, [r4, #16]
 8012ba6:	6861      	ldr	r1, [r4, #4]
 8012ba8:	4299      	cmp	r1, r3
 8012baa:	bfde      	ittt	le
 8012bac:	2330      	movle	r3, #48	@ 0x30
 8012bae:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012bb2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8012bb6:	1b92      	subs	r2, r2, r6
 8012bb8:	6122      	str	r2, [r4, #16]
 8012bba:	f8cd a000 	str.w	sl, [sp]
 8012bbe:	464b      	mov	r3, r9
 8012bc0:	aa03      	add	r2, sp, #12
 8012bc2:	4621      	mov	r1, r4
 8012bc4:	4640      	mov	r0, r8
 8012bc6:	f7ff fee7 	bl	8012998 <_printf_common>
 8012bca:	3001      	adds	r0, #1
 8012bcc:	d14a      	bne.n	8012c64 <_printf_i+0x1f0>
 8012bce:	f04f 30ff 	mov.w	r0, #4294967295
 8012bd2:	b004      	add	sp, #16
 8012bd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012bd8:	6823      	ldr	r3, [r4, #0]
 8012bda:	f043 0320 	orr.w	r3, r3, #32
 8012bde:	6023      	str	r3, [r4, #0]
 8012be0:	4832      	ldr	r0, [pc, #200]	@ (8012cac <_printf_i+0x238>)
 8012be2:	2778      	movs	r7, #120	@ 0x78
 8012be4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8012be8:	6823      	ldr	r3, [r4, #0]
 8012bea:	6831      	ldr	r1, [r6, #0]
 8012bec:	061f      	lsls	r7, r3, #24
 8012bee:	f851 5b04 	ldr.w	r5, [r1], #4
 8012bf2:	d402      	bmi.n	8012bfa <_printf_i+0x186>
 8012bf4:	065f      	lsls	r7, r3, #25
 8012bf6:	bf48      	it	mi
 8012bf8:	b2ad      	uxthmi	r5, r5
 8012bfa:	6031      	str	r1, [r6, #0]
 8012bfc:	07d9      	lsls	r1, r3, #31
 8012bfe:	bf44      	itt	mi
 8012c00:	f043 0320 	orrmi.w	r3, r3, #32
 8012c04:	6023      	strmi	r3, [r4, #0]
 8012c06:	b11d      	cbz	r5, 8012c10 <_printf_i+0x19c>
 8012c08:	2310      	movs	r3, #16
 8012c0a:	e7ad      	b.n	8012b68 <_printf_i+0xf4>
 8012c0c:	4826      	ldr	r0, [pc, #152]	@ (8012ca8 <_printf_i+0x234>)
 8012c0e:	e7e9      	b.n	8012be4 <_printf_i+0x170>
 8012c10:	6823      	ldr	r3, [r4, #0]
 8012c12:	f023 0320 	bic.w	r3, r3, #32
 8012c16:	6023      	str	r3, [r4, #0]
 8012c18:	e7f6      	b.n	8012c08 <_printf_i+0x194>
 8012c1a:	4616      	mov	r6, r2
 8012c1c:	e7bd      	b.n	8012b9a <_printf_i+0x126>
 8012c1e:	6833      	ldr	r3, [r6, #0]
 8012c20:	6825      	ldr	r5, [r4, #0]
 8012c22:	6961      	ldr	r1, [r4, #20]
 8012c24:	1d18      	adds	r0, r3, #4
 8012c26:	6030      	str	r0, [r6, #0]
 8012c28:	062e      	lsls	r6, r5, #24
 8012c2a:	681b      	ldr	r3, [r3, #0]
 8012c2c:	d501      	bpl.n	8012c32 <_printf_i+0x1be>
 8012c2e:	6019      	str	r1, [r3, #0]
 8012c30:	e002      	b.n	8012c38 <_printf_i+0x1c4>
 8012c32:	0668      	lsls	r0, r5, #25
 8012c34:	d5fb      	bpl.n	8012c2e <_printf_i+0x1ba>
 8012c36:	8019      	strh	r1, [r3, #0]
 8012c38:	2300      	movs	r3, #0
 8012c3a:	6123      	str	r3, [r4, #16]
 8012c3c:	4616      	mov	r6, r2
 8012c3e:	e7bc      	b.n	8012bba <_printf_i+0x146>
 8012c40:	6833      	ldr	r3, [r6, #0]
 8012c42:	1d1a      	adds	r2, r3, #4
 8012c44:	6032      	str	r2, [r6, #0]
 8012c46:	681e      	ldr	r6, [r3, #0]
 8012c48:	6862      	ldr	r2, [r4, #4]
 8012c4a:	2100      	movs	r1, #0
 8012c4c:	4630      	mov	r0, r6
 8012c4e:	f7ed facf 	bl	80001f0 <memchr>
 8012c52:	b108      	cbz	r0, 8012c58 <_printf_i+0x1e4>
 8012c54:	1b80      	subs	r0, r0, r6
 8012c56:	6060      	str	r0, [r4, #4]
 8012c58:	6863      	ldr	r3, [r4, #4]
 8012c5a:	6123      	str	r3, [r4, #16]
 8012c5c:	2300      	movs	r3, #0
 8012c5e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012c62:	e7aa      	b.n	8012bba <_printf_i+0x146>
 8012c64:	6923      	ldr	r3, [r4, #16]
 8012c66:	4632      	mov	r2, r6
 8012c68:	4649      	mov	r1, r9
 8012c6a:	4640      	mov	r0, r8
 8012c6c:	47d0      	blx	sl
 8012c6e:	3001      	adds	r0, #1
 8012c70:	d0ad      	beq.n	8012bce <_printf_i+0x15a>
 8012c72:	6823      	ldr	r3, [r4, #0]
 8012c74:	079b      	lsls	r3, r3, #30
 8012c76:	d413      	bmi.n	8012ca0 <_printf_i+0x22c>
 8012c78:	68e0      	ldr	r0, [r4, #12]
 8012c7a:	9b03      	ldr	r3, [sp, #12]
 8012c7c:	4298      	cmp	r0, r3
 8012c7e:	bfb8      	it	lt
 8012c80:	4618      	movlt	r0, r3
 8012c82:	e7a6      	b.n	8012bd2 <_printf_i+0x15e>
 8012c84:	2301      	movs	r3, #1
 8012c86:	4632      	mov	r2, r6
 8012c88:	4649      	mov	r1, r9
 8012c8a:	4640      	mov	r0, r8
 8012c8c:	47d0      	blx	sl
 8012c8e:	3001      	adds	r0, #1
 8012c90:	d09d      	beq.n	8012bce <_printf_i+0x15a>
 8012c92:	3501      	adds	r5, #1
 8012c94:	68e3      	ldr	r3, [r4, #12]
 8012c96:	9903      	ldr	r1, [sp, #12]
 8012c98:	1a5b      	subs	r3, r3, r1
 8012c9a:	42ab      	cmp	r3, r5
 8012c9c:	dcf2      	bgt.n	8012c84 <_printf_i+0x210>
 8012c9e:	e7eb      	b.n	8012c78 <_printf_i+0x204>
 8012ca0:	2500      	movs	r5, #0
 8012ca2:	f104 0619 	add.w	r6, r4, #25
 8012ca6:	e7f5      	b.n	8012c94 <_printf_i+0x220>
 8012ca8:	08013d05 	.word	0x08013d05
 8012cac:	08013d16 	.word	0x08013d16

08012cb0 <__sflush_r>:
 8012cb0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012cb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012cb8:	0716      	lsls	r6, r2, #28
 8012cba:	4605      	mov	r5, r0
 8012cbc:	460c      	mov	r4, r1
 8012cbe:	d454      	bmi.n	8012d6a <__sflush_r+0xba>
 8012cc0:	684b      	ldr	r3, [r1, #4]
 8012cc2:	2b00      	cmp	r3, #0
 8012cc4:	dc02      	bgt.n	8012ccc <__sflush_r+0x1c>
 8012cc6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8012cc8:	2b00      	cmp	r3, #0
 8012cca:	dd48      	ble.n	8012d5e <__sflush_r+0xae>
 8012ccc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012cce:	2e00      	cmp	r6, #0
 8012cd0:	d045      	beq.n	8012d5e <__sflush_r+0xae>
 8012cd2:	2300      	movs	r3, #0
 8012cd4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8012cd8:	682f      	ldr	r7, [r5, #0]
 8012cda:	6a21      	ldr	r1, [r4, #32]
 8012cdc:	602b      	str	r3, [r5, #0]
 8012cde:	d030      	beq.n	8012d42 <__sflush_r+0x92>
 8012ce0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8012ce2:	89a3      	ldrh	r3, [r4, #12]
 8012ce4:	0759      	lsls	r1, r3, #29
 8012ce6:	d505      	bpl.n	8012cf4 <__sflush_r+0x44>
 8012ce8:	6863      	ldr	r3, [r4, #4]
 8012cea:	1ad2      	subs	r2, r2, r3
 8012cec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8012cee:	b10b      	cbz	r3, 8012cf4 <__sflush_r+0x44>
 8012cf0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012cf2:	1ad2      	subs	r2, r2, r3
 8012cf4:	2300      	movs	r3, #0
 8012cf6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012cf8:	6a21      	ldr	r1, [r4, #32]
 8012cfa:	4628      	mov	r0, r5
 8012cfc:	47b0      	blx	r6
 8012cfe:	1c43      	adds	r3, r0, #1
 8012d00:	89a3      	ldrh	r3, [r4, #12]
 8012d02:	d106      	bne.n	8012d12 <__sflush_r+0x62>
 8012d04:	6829      	ldr	r1, [r5, #0]
 8012d06:	291d      	cmp	r1, #29
 8012d08:	d82b      	bhi.n	8012d62 <__sflush_r+0xb2>
 8012d0a:	4a2a      	ldr	r2, [pc, #168]	@ (8012db4 <__sflush_r+0x104>)
 8012d0c:	40ca      	lsrs	r2, r1
 8012d0e:	07d6      	lsls	r6, r2, #31
 8012d10:	d527      	bpl.n	8012d62 <__sflush_r+0xb2>
 8012d12:	2200      	movs	r2, #0
 8012d14:	6062      	str	r2, [r4, #4]
 8012d16:	04d9      	lsls	r1, r3, #19
 8012d18:	6922      	ldr	r2, [r4, #16]
 8012d1a:	6022      	str	r2, [r4, #0]
 8012d1c:	d504      	bpl.n	8012d28 <__sflush_r+0x78>
 8012d1e:	1c42      	adds	r2, r0, #1
 8012d20:	d101      	bne.n	8012d26 <__sflush_r+0x76>
 8012d22:	682b      	ldr	r3, [r5, #0]
 8012d24:	b903      	cbnz	r3, 8012d28 <__sflush_r+0x78>
 8012d26:	6560      	str	r0, [r4, #84]	@ 0x54
 8012d28:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012d2a:	602f      	str	r7, [r5, #0]
 8012d2c:	b1b9      	cbz	r1, 8012d5e <__sflush_r+0xae>
 8012d2e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012d32:	4299      	cmp	r1, r3
 8012d34:	d002      	beq.n	8012d3c <__sflush_r+0x8c>
 8012d36:	4628      	mov	r0, r5
 8012d38:	f7ff fca2 	bl	8012680 <_free_r>
 8012d3c:	2300      	movs	r3, #0
 8012d3e:	6363      	str	r3, [r4, #52]	@ 0x34
 8012d40:	e00d      	b.n	8012d5e <__sflush_r+0xae>
 8012d42:	2301      	movs	r3, #1
 8012d44:	4628      	mov	r0, r5
 8012d46:	47b0      	blx	r6
 8012d48:	4602      	mov	r2, r0
 8012d4a:	1c50      	adds	r0, r2, #1
 8012d4c:	d1c9      	bne.n	8012ce2 <__sflush_r+0x32>
 8012d4e:	682b      	ldr	r3, [r5, #0]
 8012d50:	2b00      	cmp	r3, #0
 8012d52:	d0c6      	beq.n	8012ce2 <__sflush_r+0x32>
 8012d54:	2b1d      	cmp	r3, #29
 8012d56:	d001      	beq.n	8012d5c <__sflush_r+0xac>
 8012d58:	2b16      	cmp	r3, #22
 8012d5a:	d11e      	bne.n	8012d9a <__sflush_r+0xea>
 8012d5c:	602f      	str	r7, [r5, #0]
 8012d5e:	2000      	movs	r0, #0
 8012d60:	e022      	b.n	8012da8 <__sflush_r+0xf8>
 8012d62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012d66:	b21b      	sxth	r3, r3
 8012d68:	e01b      	b.n	8012da2 <__sflush_r+0xf2>
 8012d6a:	690f      	ldr	r7, [r1, #16]
 8012d6c:	2f00      	cmp	r7, #0
 8012d6e:	d0f6      	beq.n	8012d5e <__sflush_r+0xae>
 8012d70:	0793      	lsls	r3, r2, #30
 8012d72:	680e      	ldr	r6, [r1, #0]
 8012d74:	bf08      	it	eq
 8012d76:	694b      	ldreq	r3, [r1, #20]
 8012d78:	600f      	str	r7, [r1, #0]
 8012d7a:	bf18      	it	ne
 8012d7c:	2300      	movne	r3, #0
 8012d7e:	eba6 0807 	sub.w	r8, r6, r7
 8012d82:	608b      	str	r3, [r1, #8]
 8012d84:	f1b8 0f00 	cmp.w	r8, #0
 8012d88:	dde9      	ble.n	8012d5e <__sflush_r+0xae>
 8012d8a:	6a21      	ldr	r1, [r4, #32]
 8012d8c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8012d8e:	4643      	mov	r3, r8
 8012d90:	463a      	mov	r2, r7
 8012d92:	4628      	mov	r0, r5
 8012d94:	47b0      	blx	r6
 8012d96:	2800      	cmp	r0, #0
 8012d98:	dc08      	bgt.n	8012dac <__sflush_r+0xfc>
 8012d9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012d9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012da2:	81a3      	strh	r3, [r4, #12]
 8012da4:	f04f 30ff 	mov.w	r0, #4294967295
 8012da8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012dac:	4407      	add	r7, r0
 8012dae:	eba8 0800 	sub.w	r8, r8, r0
 8012db2:	e7e7      	b.n	8012d84 <__sflush_r+0xd4>
 8012db4:	20400001 	.word	0x20400001

08012db8 <_fflush_r>:
 8012db8:	b538      	push	{r3, r4, r5, lr}
 8012dba:	690b      	ldr	r3, [r1, #16]
 8012dbc:	4605      	mov	r5, r0
 8012dbe:	460c      	mov	r4, r1
 8012dc0:	b913      	cbnz	r3, 8012dc8 <_fflush_r+0x10>
 8012dc2:	2500      	movs	r5, #0
 8012dc4:	4628      	mov	r0, r5
 8012dc6:	bd38      	pop	{r3, r4, r5, pc}
 8012dc8:	b118      	cbz	r0, 8012dd2 <_fflush_r+0x1a>
 8012dca:	6a03      	ldr	r3, [r0, #32]
 8012dcc:	b90b      	cbnz	r3, 8012dd2 <_fflush_r+0x1a>
 8012dce:	f7ff fa91 	bl	80122f4 <__sinit>
 8012dd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012dd6:	2b00      	cmp	r3, #0
 8012dd8:	d0f3      	beq.n	8012dc2 <_fflush_r+0xa>
 8012dda:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012ddc:	07d0      	lsls	r0, r2, #31
 8012dde:	d404      	bmi.n	8012dea <_fflush_r+0x32>
 8012de0:	0599      	lsls	r1, r3, #22
 8012de2:	d402      	bmi.n	8012dea <_fflush_r+0x32>
 8012de4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012de6:	f7ff fbde 	bl	80125a6 <__retarget_lock_acquire_recursive>
 8012dea:	4628      	mov	r0, r5
 8012dec:	4621      	mov	r1, r4
 8012dee:	f7ff ff5f 	bl	8012cb0 <__sflush_r>
 8012df2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012df4:	07da      	lsls	r2, r3, #31
 8012df6:	4605      	mov	r5, r0
 8012df8:	d4e4      	bmi.n	8012dc4 <_fflush_r+0xc>
 8012dfa:	89a3      	ldrh	r3, [r4, #12]
 8012dfc:	059b      	lsls	r3, r3, #22
 8012dfe:	d4e1      	bmi.n	8012dc4 <_fflush_r+0xc>
 8012e00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012e02:	f7ff fbd1 	bl	80125a8 <__retarget_lock_release_recursive>
 8012e06:	e7dd      	b.n	8012dc4 <_fflush_r+0xc>

08012e08 <__swbuf_r>:
 8012e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e0a:	460e      	mov	r6, r1
 8012e0c:	4614      	mov	r4, r2
 8012e0e:	4605      	mov	r5, r0
 8012e10:	b118      	cbz	r0, 8012e1a <__swbuf_r+0x12>
 8012e12:	6a03      	ldr	r3, [r0, #32]
 8012e14:	b90b      	cbnz	r3, 8012e1a <__swbuf_r+0x12>
 8012e16:	f7ff fa6d 	bl	80122f4 <__sinit>
 8012e1a:	69a3      	ldr	r3, [r4, #24]
 8012e1c:	60a3      	str	r3, [r4, #8]
 8012e1e:	89a3      	ldrh	r3, [r4, #12]
 8012e20:	071a      	lsls	r2, r3, #28
 8012e22:	d501      	bpl.n	8012e28 <__swbuf_r+0x20>
 8012e24:	6923      	ldr	r3, [r4, #16]
 8012e26:	b943      	cbnz	r3, 8012e3a <__swbuf_r+0x32>
 8012e28:	4621      	mov	r1, r4
 8012e2a:	4628      	mov	r0, r5
 8012e2c:	f000 f82a 	bl	8012e84 <__swsetup_r>
 8012e30:	b118      	cbz	r0, 8012e3a <__swbuf_r+0x32>
 8012e32:	f04f 37ff 	mov.w	r7, #4294967295
 8012e36:	4638      	mov	r0, r7
 8012e38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012e3a:	6823      	ldr	r3, [r4, #0]
 8012e3c:	6922      	ldr	r2, [r4, #16]
 8012e3e:	1a98      	subs	r0, r3, r2
 8012e40:	6963      	ldr	r3, [r4, #20]
 8012e42:	b2f6      	uxtb	r6, r6
 8012e44:	4283      	cmp	r3, r0
 8012e46:	4637      	mov	r7, r6
 8012e48:	dc05      	bgt.n	8012e56 <__swbuf_r+0x4e>
 8012e4a:	4621      	mov	r1, r4
 8012e4c:	4628      	mov	r0, r5
 8012e4e:	f7ff ffb3 	bl	8012db8 <_fflush_r>
 8012e52:	2800      	cmp	r0, #0
 8012e54:	d1ed      	bne.n	8012e32 <__swbuf_r+0x2a>
 8012e56:	68a3      	ldr	r3, [r4, #8]
 8012e58:	3b01      	subs	r3, #1
 8012e5a:	60a3      	str	r3, [r4, #8]
 8012e5c:	6823      	ldr	r3, [r4, #0]
 8012e5e:	1c5a      	adds	r2, r3, #1
 8012e60:	6022      	str	r2, [r4, #0]
 8012e62:	701e      	strb	r6, [r3, #0]
 8012e64:	6962      	ldr	r2, [r4, #20]
 8012e66:	1c43      	adds	r3, r0, #1
 8012e68:	429a      	cmp	r2, r3
 8012e6a:	d004      	beq.n	8012e76 <__swbuf_r+0x6e>
 8012e6c:	89a3      	ldrh	r3, [r4, #12]
 8012e6e:	07db      	lsls	r3, r3, #31
 8012e70:	d5e1      	bpl.n	8012e36 <__swbuf_r+0x2e>
 8012e72:	2e0a      	cmp	r6, #10
 8012e74:	d1df      	bne.n	8012e36 <__swbuf_r+0x2e>
 8012e76:	4621      	mov	r1, r4
 8012e78:	4628      	mov	r0, r5
 8012e7a:	f7ff ff9d 	bl	8012db8 <_fflush_r>
 8012e7e:	2800      	cmp	r0, #0
 8012e80:	d0d9      	beq.n	8012e36 <__swbuf_r+0x2e>
 8012e82:	e7d6      	b.n	8012e32 <__swbuf_r+0x2a>

08012e84 <__swsetup_r>:
 8012e84:	b538      	push	{r3, r4, r5, lr}
 8012e86:	4b29      	ldr	r3, [pc, #164]	@ (8012f2c <__swsetup_r+0xa8>)
 8012e88:	4605      	mov	r5, r0
 8012e8a:	6818      	ldr	r0, [r3, #0]
 8012e8c:	460c      	mov	r4, r1
 8012e8e:	b118      	cbz	r0, 8012e98 <__swsetup_r+0x14>
 8012e90:	6a03      	ldr	r3, [r0, #32]
 8012e92:	b90b      	cbnz	r3, 8012e98 <__swsetup_r+0x14>
 8012e94:	f7ff fa2e 	bl	80122f4 <__sinit>
 8012e98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012e9c:	0719      	lsls	r1, r3, #28
 8012e9e:	d422      	bmi.n	8012ee6 <__swsetup_r+0x62>
 8012ea0:	06da      	lsls	r2, r3, #27
 8012ea2:	d407      	bmi.n	8012eb4 <__swsetup_r+0x30>
 8012ea4:	2209      	movs	r2, #9
 8012ea6:	602a      	str	r2, [r5, #0]
 8012ea8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012eac:	81a3      	strh	r3, [r4, #12]
 8012eae:	f04f 30ff 	mov.w	r0, #4294967295
 8012eb2:	e033      	b.n	8012f1c <__swsetup_r+0x98>
 8012eb4:	0758      	lsls	r0, r3, #29
 8012eb6:	d512      	bpl.n	8012ede <__swsetup_r+0x5a>
 8012eb8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012eba:	b141      	cbz	r1, 8012ece <__swsetup_r+0x4a>
 8012ebc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012ec0:	4299      	cmp	r1, r3
 8012ec2:	d002      	beq.n	8012eca <__swsetup_r+0x46>
 8012ec4:	4628      	mov	r0, r5
 8012ec6:	f7ff fbdb 	bl	8012680 <_free_r>
 8012eca:	2300      	movs	r3, #0
 8012ecc:	6363      	str	r3, [r4, #52]	@ 0x34
 8012ece:	89a3      	ldrh	r3, [r4, #12]
 8012ed0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8012ed4:	81a3      	strh	r3, [r4, #12]
 8012ed6:	2300      	movs	r3, #0
 8012ed8:	6063      	str	r3, [r4, #4]
 8012eda:	6923      	ldr	r3, [r4, #16]
 8012edc:	6023      	str	r3, [r4, #0]
 8012ede:	89a3      	ldrh	r3, [r4, #12]
 8012ee0:	f043 0308 	orr.w	r3, r3, #8
 8012ee4:	81a3      	strh	r3, [r4, #12]
 8012ee6:	6923      	ldr	r3, [r4, #16]
 8012ee8:	b94b      	cbnz	r3, 8012efe <__swsetup_r+0x7a>
 8012eea:	89a3      	ldrh	r3, [r4, #12]
 8012eec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8012ef0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012ef4:	d003      	beq.n	8012efe <__swsetup_r+0x7a>
 8012ef6:	4621      	mov	r1, r4
 8012ef8:	4628      	mov	r0, r5
 8012efa:	f000 f83f 	bl	8012f7c <__smakebuf_r>
 8012efe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012f02:	f013 0201 	ands.w	r2, r3, #1
 8012f06:	d00a      	beq.n	8012f1e <__swsetup_r+0x9a>
 8012f08:	2200      	movs	r2, #0
 8012f0a:	60a2      	str	r2, [r4, #8]
 8012f0c:	6962      	ldr	r2, [r4, #20]
 8012f0e:	4252      	negs	r2, r2
 8012f10:	61a2      	str	r2, [r4, #24]
 8012f12:	6922      	ldr	r2, [r4, #16]
 8012f14:	b942      	cbnz	r2, 8012f28 <__swsetup_r+0xa4>
 8012f16:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8012f1a:	d1c5      	bne.n	8012ea8 <__swsetup_r+0x24>
 8012f1c:	bd38      	pop	{r3, r4, r5, pc}
 8012f1e:	0799      	lsls	r1, r3, #30
 8012f20:	bf58      	it	pl
 8012f22:	6962      	ldrpl	r2, [r4, #20]
 8012f24:	60a2      	str	r2, [r4, #8]
 8012f26:	e7f4      	b.n	8012f12 <__swsetup_r+0x8e>
 8012f28:	2000      	movs	r0, #0
 8012f2a:	e7f7      	b.n	8012f1c <__swsetup_r+0x98>
 8012f2c:	2000009c 	.word	0x2000009c

08012f30 <__swhatbuf_r>:
 8012f30:	b570      	push	{r4, r5, r6, lr}
 8012f32:	460c      	mov	r4, r1
 8012f34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012f38:	2900      	cmp	r1, #0
 8012f3a:	b096      	sub	sp, #88	@ 0x58
 8012f3c:	4615      	mov	r5, r2
 8012f3e:	461e      	mov	r6, r3
 8012f40:	da0d      	bge.n	8012f5e <__swhatbuf_r+0x2e>
 8012f42:	89a3      	ldrh	r3, [r4, #12]
 8012f44:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012f48:	f04f 0100 	mov.w	r1, #0
 8012f4c:	bf14      	ite	ne
 8012f4e:	2340      	movne	r3, #64	@ 0x40
 8012f50:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012f54:	2000      	movs	r0, #0
 8012f56:	6031      	str	r1, [r6, #0]
 8012f58:	602b      	str	r3, [r5, #0]
 8012f5a:	b016      	add	sp, #88	@ 0x58
 8012f5c:	bd70      	pop	{r4, r5, r6, pc}
 8012f5e:	466a      	mov	r2, sp
 8012f60:	f000 f848 	bl	8012ff4 <_fstat_r>
 8012f64:	2800      	cmp	r0, #0
 8012f66:	dbec      	blt.n	8012f42 <__swhatbuf_r+0x12>
 8012f68:	9901      	ldr	r1, [sp, #4]
 8012f6a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8012f6e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8012f72:	4259      	negs	r1, r3
 8012f74:	4159      	adcs	r1, r3
 8012f76:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012f7a:	e7eb      	b.n	8012f54 <__swhatbuf_r+0x24>

08012f7c <__smakebuf_r>:
 8012f7c:	898b      	ldrh	r3, [r1, #12]
 8012f7e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012f80:	079d      	lsls	r5, r3, #30
 8012f82:	4606      	mov	r6, r0
 8012f84:	460c      	mov	r4, r1
 8012f86:	d507      	bpl.n	8012f98 <__smakebuf_r+0x1c>
 8012f88:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012f8c:	6023      	str	r3, [r4, #0]
 8012f8e:	6123      	str	r3, [r4, #16]
 8012f90:	2301      	movs	r3, #1
 8012f92:	6163      	str	r3, [r4, #20]
 8012f94:	b003      	add	sp, #12
 8012f96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012f98:	ab01      	add	r3, sp, #4
 8012f9a:	466a      	mov	r2, sp
 8012f9c:	f7ff ffc8 	bl	8012f30 <__swhatbuf_r>
 8012fa0:	9f00      	ldr	r7, [sp, #0]
 8012fa2:	4605      	mov	r5, r0
 8012fa4:	4639      	mov	r1, r7
 8012fa6:	4630      	mov	r0, r6
 8012fa8:	f7ff f87e 	bl	80120a8 <_malloc_r>
 8012fac:	b948      	cbnz	r0, 8012fc2 <__smakebuf_r+0x46>
 8012fae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012fb2:	059a      	lsls	r2, r3, #22
 8012fb4:	d4ee      	bmi.n	8012f94 <__smakebuf_r+0x18>
 8012fb6:	f023 0303 	bic.w	r3, r3, #3
 8012fba:	f043 0302 	orr.w	r3, r3, #2
 8012fbe:	81a3      	strh	r3, [r4, #12]
 8012fc0:	e7e2      	b.n	8012f88 <__smakebuf_r+0xc>
 8012fc2:	89a3      	ldrh	r3, [r4, #12]
 8012fc4:	6020      	str	r0, [r4, #0]
 8012fc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012fca:	81a3      	strh	r3, [r4, #12]
 8012fcc:	9b01      	ldr	r3, [sp, #4]
 8012fce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8012fd2:	b15b      	cbz	r3, 8012fec <__smakebuf_r+0x70>
 8012fd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012fd8:	4630      	mov	r0, r6
 8012fda:	f000 f81d 	bl	8013018 <_isatty_r>
 8012fde:	b128      	cbz	r0, 8012fec <__smakebuf_r+0x70>
 8012fe0:	89a3      	ldrh	r3, [r4, #12]
 8012fe2:	f023 0303 	bic.w	r3, r3, #3
 8012fe6:	f043 0301 	orr.w	r3, r3, #1
 8012fea:	81a3      	strh	r3, [r4, #12]
 8012fec:	89a3      	ldrh	r3, [r4, #12]
 8012fee:	431d      	orrs	r5, r3
 8012ff0:	81a5      	strh	r5, [r4, #12]
 8012ff2:	e7cf      	b.n	8012f94 <__smakebuf_r+0x18>

08012ff4 <_fstat_r>:
 8012ff4:	b538      	push	{r3, r4, r5, lr}
 8012ff6:	4d07      	ldr	r5, [pc, #28]	@ (8013014 <_fstat_r+0x20>)
 8012ff8:	2300      	movs	r3, #0
 8012ffa:	4604      	mov	r4, r0
 8012ffc:	4608      	mov	r0, r1
 8012ffe:	4611      	mov	r1, r2
 8013000:	602b      	str	r3, [r5, #0]
 8013002:	f7ee ff82 	bl	8001f0a <_fstat>
 8013006:	1c43      	adds	r3, r0, #1
 8013008:	d102      	bne.n	8013010 <_fstat_r+0x1c>
 801300a:	682b      	ldr	r3, [r5, #0]
 801300c:	b103      	cbz	r3, 8013010 <_fstat_r+0x1c>
 801300e:	6023      	str	r3, [r4, #0]
 8013010:	bd38      	pop	{r3, r4, r5, pc}
 8013012:	bf00      	nop
 8013014:	2001280c 	.word	0x2001280c

08013018 <_isatty_r>:
 8013018:	b538      	push	{r3, r4, r5, lr}
 801301a:	4d06      	ldr	r5, [pc, #24]	@ (8013034 <_isatty_r+0x1c>)
 801301c:	2300      	movs	r3, #0
 801301e:	4604      	mov	r4, r0
 8013020:	4608      	mov	r0, r1
 8013022:	602b      	str	r3, [r5, #0]
 8013024:	f7ee ff76 	bl	8001f14 <_isatty>
 8013028:	1c43      	adds	r3, r0, #1
 801302a:	d102      	bne.n	8013032 <_isatty_r+0x1a>
 801302c:	682b      	ldr	r3, [r5, #0]
 801302e:	b103      	cbz	r3, 8013032 <_isatty_r+0x1a>
 8013030:	6023      	str	r3, [r4, #0]
 8013032:	bd38      	pop	{r3, r4, r5, pc}
 8013034:	2001280c 	.word	0x2001280c

08013038 <_init>:
 8013038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801303a:	bf00      	nop
 801303c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801303e:	bc08      	pop	{r3}
 8013040:	469e      	mov	lr, r3
 8013042:	4770      	bx	lr

08013044 <_fini>:
 8013044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013046:	bf00      	nop
 8013048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801304a:	bc08      	pop	{r3}
 801304c:	469e      	mov	lr, r3
 801304e:	4770      	bx	lr
